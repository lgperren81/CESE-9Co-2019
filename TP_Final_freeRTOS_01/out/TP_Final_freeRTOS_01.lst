
mis_programas/TP_Final_freeRTOS_01/out/TP_Final_freeRTOS_01.elf:     file format elf32-littlearm
mis_programas/TP_Final_freeRTOS_01/out/TP_Final_freeRTOS_01.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000bcd

Program Header:
0x70000001 off    0x00016438 vaddr 0x1a006438 paddr 0x1a006438 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002b90 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00006440 memsz 0x00006440 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a006440 align 2**16
         filesz 0x000000b4 memsz 0x000000b4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006434  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  10000000  1a006440  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200b4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200b4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200b4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200b4  2**2
                  CONTENTS
  6 .bss          00002adc  100000b4  100000b4  000000b4  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200b4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200b4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200b4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200b4  2**2
                  CONTENTS
 11 .init_array   00000004  1a006434  1a006434  00016434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a006438  1a006438  00016438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200b4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200b4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200b4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200b4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200b4  2**2
                  CONTENTS
 18 .noinit       00000000  10002b90  10002b90  000200b4  2**2
                  CONTENTS
 19 .debug_info   00031217  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 0000644a  00000000  00000000  000512cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000c954  00000000  00000000  00057715  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 000011e0  00000000  00000000  00064069  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001290  00000000  00000000  00065249  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  000124fb  00000000  00000000  000664d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00016b4c  00000000  00000000  000789d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00031741  00000000  00000000  0008f520  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000c0c61  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000c0ce0  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00003594  00000000  00000000  000c0d18  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000b4 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a006434 l    d  .init_array	00000000 .init_array
1a006438 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002b90 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 ina219.c
1a000300 l     F .text	000000fc ina219SetConfigAndCalibRegister
1a0003fc l     F .text	00000104 ina219GetRegisters
100000b4 l     O .bss	00000018 control
100000cc l     O .bss	00000002 ina219_bus_volt
100000ce l     O .bss	00000002 ina219_current
100000d0 l     O .bss	00000002 ina219_power
100000d2 l     O .bss	00000002 ina219_shunt_volt
00000000 l    df *ABS*	00000000 freeRTOS_final.c
100000d4 l     O .bss	00000004 INA219Queue
100000d8 l     O .bss	00000001 debugPrint
100000dc l     O .bss	00000004 teclaQueue
00000000 l    df *ABS*	00000000 system.c
100000e0 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_4.c
1a000d20 l     F .text	00000064 prvHeapInit
100000e8 l     O .bss	00002000 ucHeap
1a000d84 l     F .text	00000058 prvInsertBlockIntoFreeList
100000e4 l     O .bss	00000004 pxEnd
100020e8 l     O .bss	00000004 xBlockAllocatedBit
100020ec l     O .bss	00000004 xFreeBytesRemaining
100020f0 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
100020f4 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a000f68 l     F .text	0000001e prvIsQueueFull
1a000f86 l     F .text	0000001a prvIsQueueEmpty
1a000fa0 l     F .text	00000076 prvCopyDataToQueue
1a001016 l     F .text	00000024 prvCopyDataFromQueue
1a00103a l     F .text	0000006e prvUnlockQueue
1a00112c l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100020fc l     O .bss	00000168 uxIdleTaskStack.10728
10002264 l     O .bss	000005a0 uxTimerTaskStack.10735
10002804 l     O .bss	00000060 xIdleTaskTCB.10727
10002864 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a00176c l     F .text	0000002c prvResetNextTaskUnblockTime
1a001798 l     F .text	00000092 prvInitialiseNewTask
1a00182c l     F .text	00000068 prvInitialiseTaskLists
1a001894 l     F .text	000000ac prvAddNewTaskToReadyList
1a001940 l     F .text	00000038 prvDeleteTCB
1a001978 l     F .text	0000004c prvCheckTasksWaitingTermination
1a0019c4 l     F .text	00000028 prvIdleTask
1a0019ec l     F .text	00000098 prvAddCurrentTaskToDelayedList
100028c8 l     O .bss	00000004 pxDelayedTaskList
100028cc l     O .bss	00000004 pxOverflowDelayedTaskList
100028d0 l     O .bss	0000008c pxReadyTasksLists
1000295c l     O .bss	00000004 uxCurrentNumberOfTasks
10002960 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002964 l     O .bss	00000004 uxPendedTicks
10002968 l     O .bss	00000004 uxSchedulerSuspended
1000296c l     O .bss	00000004 uxTaskNumber
10002970 l     O .bss	00000004 uxTopReadyPriority
10002974 l     O .bss	00000014 xDelayedTaskList1
10002988 l     O .bss	00000014 xDelayedTaskList2
1000299c l     O .bss	00000004 xNextTaskUnblockTime
100029a0 l     O .bss	00000004 xNumOfOverflows
100029a4 l     O .bss	00000014 xPendingReadyList
100029b8 l     O .bss	00000004 xSchedulerRunning
100029bc l     O .bss	00000014 xSuspendedTaskList
100029d0 l     O .bss	00000014 xTasksWaitingTermination
100029e4 l     O .bss	00000004 xTickCount
100029e8 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a002238 l     F .text	00000020 prvGetNextExpireTime
1a002258 l     F .text	00000048 prvInsertTimerInActiveList
1a0022a0 l     F .text	00000070 prvCheckForValidListAndQueue
1a002654 l     F .text	00000016 prvTimerTask
1a0023e0 l     F .text	00000078 prvSwitchTimerLists
1a002458 l     F .text	0000002c prvSampleTimeNow
1a002484 l     F .text	00000060 prvProcessExpiredTimer
1a0024e4 l     F .text	00000074 prvProcessTimerOrBlockTask
1a002558 l     F .text	000000fc prvProcessReceivedCommands
100029ec l     O .bss	00000004 pxCurrentTimerList
100029f0 l     O .bss	00000004 pxOverflowTimerList
100029f4 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10002a94 l     O .bss	00000014 xActiveTimerList1
10002aa8 l     O .bss	00000014 xActiveTimerList2
10002abc l     O .bss	00000004 xLastTime.11777
10002ac0 l     O .bss	00000050 xStaticTimerQueue.11827
10002b10 l     O .bss	00000004 xTimerQueue
10002b14 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a00266c l     F .text	00000040 prvTaskExitError
1a0026ac l     F .text	00000022 prvPortStartFirstTask
1a0026d4 l     F .text	0000000e vPortEnableVFP
1a002740 l       .text	00000000 pxCurrentTCBConst2
1a002820 l       .text	00000000 pxCurrentTCBConst
10002b18 l     O .bss	00000001 ucMaxSysCallPriority
10002b1c l     O .bss	00000004 ulMaxPRIGROUPValue
10000004 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a002a14 l     F .text	00000044 Board_LED_Init
1a002a58 l     F .text	00000040 Board_TEC_Init
1a002a98 l     F .text	00000040 Board_GPIO_Init
1a002ad8 l     F .text	00000030 Board_ADC_Init
1a002b08 l     F .text	00000038 Board_SPI_Init
1a002b40 l     F .text	00000024 Board_I2C_Init
1a00609c l     O .text	00000008 GpioButtons
1a0060a4 l     O .text	0000000c GpioLeds
1a0060b0 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0060c8 l     O .text	00000004 InitClkStates
1a0060cc l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002cb4 l     F .text	0000002c Chip_UART_GetIndex
1a006140 l     O .text	00000008 UART_BClock
1a006148 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002e5c l     F .text	00000014 Chip_ADC_GetClockIndex
1a002e70 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002f24 l     F .text	000000a4 pll_calc_divs
1a002fc8 l     F .text	0000010c pll_get_frac
1a0030d4 l     F .text	0000004c Chip_Clock_FindBaseClock
1a003348 l     F .text	00000022 Chip_Clock_GetDivRate
10002b24 l     O .bss	00000008 audio_usb_pll_freq
1a00615c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0061c8 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000008 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003998 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0039ac l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000040 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a006210 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a003b84 l     F .text	00000030 i2cHardwareInit
1a003bb4 l     F .text	0000003c i2cHardwareRead
1a003bf0 l     F .text	0000003c i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a003c7c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002b2c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_convert.c
1a006340 l     O .text	00000058 rounders
00000000 l    df *ABS*	00000000 sapi_lcd.c
1a0041f8 l     F .text	0000000a lcdPinSet
1a004202 l     F .text	0000002e lcdSendNibble
1a004230 l     F .text	0000001c lcdEnablePulse
10002b30 l     O .bss	0000000a lcd
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a00508c l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a0057ac l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 impure.c
10000054 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a006438 l       .init_array	00000000 __init_array_end
1a006434 l       .bss_RAM5	00000000 __preinit_array_end
1a006434 l       .init_array	00000000 __init_array_start
1a006434 l       .bss_RAM5	00000000 __preinit_array_start
1a00316c g     F .text	0000001c Chip_Clock_GetDividerSource
1a000c6c g     F .text	00000012 _isatty_r
1a003718 g     F .text	0000000e Chip_I2CM_Xfer
1a005410 g     F .text	000000b8 _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a003c2c g     F .text	0000000e i2cInit
1a000c7e g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002788 g     F .text	0000002c vPortExitCritical
1a00470c g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0053e0 g     F .text	00000030 printf
1a002bfa g     F .text	00000008 __stdio_init
1a005532 g     F .text	00000024 __sseek
1a00510c g     F .text	00000060 __sinit
1a005560 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a0015f4 g     F .text	00000052 vQueueWaitForMessageRestricted
1a00376c g     F .text	00000120 handleMasterXferState
1a0050e0 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a002f16 g     F .text	0000000c Chip_ADC_SetResolution
1a0057aa g     F .text	00000002 __malloc_unlock
1a002824 g     F .text	0000002c SysTick_Handler
1a002d34 g     F .text	00000040 Chip_UART_SetBaud
1a000bc8  w    F .text	00000002 initialise_monitor_handles
1a004064 g     F .text	00000008 printString
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a002b9c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a0006b8 g     F .text	00000150 task_show_values
1a0027c0 g     F .text	00000064 PendSV_Handler
1a0013a8 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a006440 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a000500 g     F .text	00000020 ina219Init
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a003c3a g     F .text	00000028 i2cRead
100028c4 g     O .bss	00000004 pxCurrentTCB
1a000c62 g     F .text	0000000a _fstat_r
53ff6cc2 g       *ABS*	00000000 __valid_user_code_checksum
1a006440 g       .ARM.exidx	00000000 _etext
1a000520 g     F .text	000000d4 ina219Read
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0020c4 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a0033ea g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002888 g     F .text	00000110 xPortStartScheduler
1a005268 g     F .text	00000016 memcpy
1a001fd0 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a0050d4 g     F .text	0000000c _cleanup_r
1a004694 g     F .text	00000022 .hidden __floatsidf
1a002850  w    F .text	00000038 vPortSetupTimerInterrupt
1a003918 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a004c2c g     F .text	00000000 .hidden __aeabi_uldivmod
10002b90 g       .noinit	00000000 _noinit
1a0054c8 g     F .text	00000010 puts
1a000ef8 g     F .text	00000070 vPortFree
1a003b62 g     F .text	00000018 uartWriteString
10002b88 g     O .bss	00000004 SystemCoreClock
1a002ce0 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002998 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a003468 g     F .text	0000004c Chip_Clock_GetRate
1a000808 g     F .text	000000e8 task_show_interrupt
1a001662 g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a004054 g     F .text	00000010 printInitUart
1a002c3c g     F .text	0000006c Board_SetupClocking
1a00060c g     F .text	0000000c ina219ShowPower
20008000 g       *ABS*	00000000 __top_RamAHB32
1a004674 g     F .text	0000001e .hidden __aeabi_ui2d
1a0038e8 g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a004c5c g     F .text	000002cc .hidden __udivmoddi4
1a0043f0 g     F .text	00000000 .hidden __aeabi_drsub
1a000d00 g     F .text	00000020 _sbrk_r
1a0005f4 g     F .text	0000000c ina219ShowShuntVoltage
1a006098 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000c88 g     F .text	0000004e _read_r
1a00165c g     F .text	00000006 vListInitialiseItem
1a000ac0 g     F .text	00000058 GPIO1_IRQHandler
1a001474 g     F .text	00000158 xQueueReceive
10002b48 g     O .bss	00000040 xQueueRegistry
1a0043c4 g     F .text	00000014 lcdCursorSet
1a0046b8 g     F .text	00000042 .hidden __extendsfdf2
1a0049bc g     F .text	000001d0 .hidden __aeabi_ddiv
1a0016f0 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a0043fc g     F .text	00000276 .hidden __adddf3
1a006438 g       .ARM.exidx	00000000 __exidx_start
1a004768 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1a0063fc g     O .text	00000004 _global_impure_ptr
1a005220 g     F .text	00000048 __libc_init_array
1a004674 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000ddc g     F .text	0000011c pvPortMalloc
1a002bb8 g     F .text	00000030 Board_Init
1a000c56  w    F .text	00000002 _init
1a001646 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a004b8c g     F .text	0000009e .hidden __aeabi_d2f
1a001c00 g     F .text	0000000c xTaskGetTickCount
1a00122c g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002b90 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000bcc g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a003726 g     F .text	00000024 Chip_I2CM_XferBlocking
1a00407c g     F .text	0000017c floatToString
1a0038b0 g     F .text	00000038 Chip_I2C_SetClockRate
1a002188 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a003120 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a002038 g     F .text	0000008c xTaskRemoveFromEventList
1a001734  w    F .text	0000001c vApplicationMallocFailedHook
1a0043fc g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a0046fc g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a00639c g     O .text	00000020 __sf_fake_stderr
1a00388c g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a00406c g     F .text	00000010 printEnter
1a0008f0 g     F .text	000000a4 My_IRQ_Init
1a0032dc g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a006258 g     O .text	000000e6 gpioPinsInit
1a001708  w    F .text	0000002c vAssertCalled
1a003b48 g     F .text	0000001a uartWriteByte
1a0039c4 g     F .text	00000012 Chip_SSP_SetClockRate
1a0057da g     F .text	00000024 __sfputs_r
1a000b18 g     F .text	00000058 GPIO2_IRQHandler
1a005d40 g     F .text	00000000 memchr
1a0020dc g     F .text	00000080 xTaskCheckForTimeOut
1a005290 g     F .text	0000009c _free_r
1a0033c4 g     F .text	00000026 Chip_Clock_GetBaseClock
1a004300 g     F .text	000000c4 lcdInit
100000b4 g       .bss	00000000 _bss
1a002ee4 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0043f8 g     F .text	0000027a .hidden __aeabi_dsub
10002b20 g     O .bss	00000004 freeRtosInterruptCallback
1a001bf0 g     F .text	00000010 vTaskSuspendAll
1a0046fc g     F .text	0000006a .hidden __floatundidf
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0039d6 g     F .text	0000003e Chip_SSP_SetBitRate
1a0016ae g     F .text	00000028 uxListRemove
1a00374a g     F .text	00000002 Chip_GPIO_Init
1a0060c4 g     O .text	00000004 OscRateIn
1a003f50 g     F .text	00000064 delayInaccurateMs
1a003acc g     F .text	0000007c uartInit
1a000618 g     F .text	0000000c ina219ShowCurrent
1a001a84 g     F .text	00000072 xTaskCreateStatic
10002b90 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a001f08 g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a004284 g     F .text	00000030 lcdData
1a00114e g     F .text	00000090 xQueueGenericCreateStatic
1a002000 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000c58 g     F .text	0000000a _close_r
1a004694 g     F .text	00000022 .hidden __aeabi_i2d
1a003cb0 g     F .text	000001ac gpioInit
1a000600 g     F .text	0000000c ina219ShowBusVoltage
1a0016d8 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a002374 g     F .text	0000006c xTimerGenericCommand
1a005604 g     F .text	000000dc __swsetup_r
1a001750  w    F .text	0000001c vApplicationStackOverflowHook
1a004f28  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0049bc g     F .text	000001d0 .hidden __divdf3
1a00516c g     F .text	00000078 __sfp
1a00424c g     F .text	00000038 lcdCommand
1a004768 g     F .text	00000254 .hidden __muldf3
1a0054d8 g     F .text	00000022 __sread
1a003ec8 g     F .text	0000001c USB0_IRQHandler
1a000b70 g     F .text	00000058 GPIO3_IRQHandler
10000000 g     O .data	00000001 addr
1a0057a8 g     F .text	00000002 __malloc_lock
1a002b88 g     F .text	00000014 Board_UARTPutChar
1a003948 g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a005038 g     F .text	00000054 _fflush_r
1a0063bc g     O .text	00000020 __sf_fake_stdin
1a003188 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00527e g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000994 g     F .text	000000d8 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a00167a g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002720 g     F .text	00000024 SVC_Handler
1a005556 g     F .text	00000008 __sclose
1a002310 g     F .text	00000064 xTimerCreateTimerTask
1a004b8c g     F .text	0000009e .hidden __truncdfsf2
1a00532c g     F .text	000000b4 _malloc_r
1a00470c g     F .text	0000005a .hidden __aeabi_l2d
1a003aa0 g     F .text	00000018 uartTxReady
1a001e18 g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0033f8 g     F .text	0000003c Chip_Clock_EnableOpts
1a002bf2 g     F .text	00000008 __stdio_getchar
1a0011de g     F .text	0000004e xQueueGenericCreate
1a0031a4 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a00325c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003a4c g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a00401c g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a003e5c g     F .text	0000006a gpioWrite
1a000c54  w    F .text	00000002 _fini
1a0053e0 g     F .text	00000030 iprintf
1a001d24 g     F .text	000000f4 xTaskResumeAll
1a001b5c g     F .text	00000094 vTaskStartScheduler
1a002ea4 g     F .text	00000040 Chip_ADC_Init
10002b8c g     O .bss	00000004 g_pUsbApi
1a002c04 g     F .text	00000038 Board_SetupMuxing
1a0042b4 g     F .text	00000038 lcdGoToXY
1a002d74 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a003b7a g     F .text	0000000a tickRead
1a000cd6 g     F .text	00000028 _write_r
10000048 g     O .data	00000008 tickRateMS
10002b44 g     O .bss	00000001 teclaPress
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a005a2c g     F .text	000000ea _printf_common
10000050 g     O .data	00000004 _impure_ptr
1a004f2c g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0043d8 g     F .text	00000018 lcdSendStringRaw
1a003ab8 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a00361c g     F .text	000000fc Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
1a00215c g     F .text	0000000c vTaskMissedYield
10002b90 g       .bss	00000000 _pvHeapStart
1a000624 g     F .text	00000094 task_read_measurement
1a000178 g       .text	00000000 __section_table_end
1a003a14 g     F .text	00000038 Chip_SSP_Init
1a003960 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a0015cc g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001c0c g     F .text	00000118 xTaskIncrementTick
1a0056e0 g     F .text	00000048 __swhatbuf_r
1a0029f4 g     F .text	00000020 DAC_IRQHandler
1a003c62 g     F .text	00000018 i2cWrite
1a002b64 g     F .text	00000024 Board_Debug_Init
1a002be8 g     F .text	0000000a __stdio_putchar
1a0010a8 g     F .text	00000084 xQueueGenericReset
100000b4 g       .data	00000000 _edata
1a00374c g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a001af6 g     F .text	00000066 xTaskCreate
1a0034c8 g     F .text	00000154 Chip_SetupCoreClock
1a0054fa g     F .text	00000038 __swrite
1a000a6c g     F .text	00000054 GPIO0_IRQHandler
1a005800 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a0051e4 g     F .text	0000003c _fwalk_reent
1a0034b4 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a001ebc g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0042ec g     F .text	00000012 lcdClear
1a0063dc g     O .text	00000020 __sf_fake_stdout
1a002168 g     F .text	00000020 xTaskGetSchedulerState
1a003fb4 g     F .text	00000068 delayInaccurateUs
1a004f28  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a005728 g     F .text	00000080 __smakebuf_r
1a0026e8 g     F .text	0000002c pxPortInitialiseStack
1a005b18 g     F .text	00000224 _printf_i
1a003434 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10002b40 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0046b8 g     F .text	00000042 .hidden __aeabi_f2d
1a003ee4 g     F .text	0000006c boardInit
1a002744 g     F .text	00000044 vPortEnterCritical
10002b3c g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0043f8 g     F .text	0000027a .hidden __subdf3
1a005800 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a00336c g     F .text	00000058 Chip_Clock_SetBaseClock
1a003a84 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a002ca8 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 cd 0b 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a c2 6c ff 53     }............l.S
	...
1a00002c:	21 27 00 1a 85 01 00 1a 00 00 00 00 c1 27 00 1a     !'...........'..
1a00003c:	25 28 00 1a                                         %(..

1a000040 <g_pfnVendorVectors>:
1a000040:	f5 29 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     .)..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	c9 3e 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .>..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	6d 0a 00 1a c1 0a 00 1a 19 0b 00 1a 71 0b 00 1a     m...........q...
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a006440 	.word	0x1a006440
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000b4 	.word	0x000000b4
1a000120:	1a006440 	.word	0x1a006440
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a006440 	.word	0x1a006440
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a006440 	.word	0x1a006440
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a006440 	.word	0x1a006440
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000b4 	.word	0x100000b4
1a000154:	00002adc 	.word	0x00002adc
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <ina219SetConfigAndCalibRegister>:
/*==================[internal functions definition]==========================*/

// Función que carga los valores en el "Configuration Register" y "Calibration Register" y
// verifica que hallan sido correctamente escritos
static bool_t ina219SetConfigAndCalibRegister( void )
{
1a000300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000304:	b088      	sub	sp, #32
	uint16_t calibRegister = 0x2000;								// Calibration Register (este valor debe ser calculado)
	uint8_t readDataBuffer;											// Register pointer address to read
	bool_t configRegisterOK;										// Bit para verificar escritura
	bool_t calibRegisterOK;											// Bit para verificar escritura

	control.BRNG_bit = INA219_CONFIG_BRNG_16V;						// Setting bus voltage range
1a000306:	4c3c      	ldr	r4, [pc, #240]	; (1a0003f8 <ina219SetConfigAndCalibRegister+0xf8>)
1a000308:	2500      	movs	r5, #0
1a00030a:	7065      	strb	r5, [r4, #1]
	control.PG_bits = INA219_CONFIG_GAIN_40MV;						// Setting gain and range
1a00030c:	70a5      	strb	r5, [r4, #2]
	control.BADC_bits = INA219_CONFIG_BADC_12BIT_1S;				// Setting bus ADC resolution/averaging
1a00030e:	2303      	movs	r3, #3
1a000310:	70e3      	strb	r3, [r4, #3]
	control.SADC_bits = INA219_CONFIG_SADC_12BIT_1S;				// Setting shunt ADC resolution/averaging
1a000312:	7123      	strb	r3, [r4, #4]
	control.MODE_bits = INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;	// Setting operating mode
1a000314:	2207      	movs	r2, #7
1a000316:	7162      	strb	r2, [r4, #5]
	configRegister |= ( control.PG_bits & 0x03 ) << 11;				// Set bit PG1 and PG0 (12-11)
	configRegister |= ( control.BADC_bits & 0x0F ) << 7;			// Set bit BADC4/3/2/1 (10-9-8-7)
	configRegister |= ( control.SADC_bits & 0x0F ) << 3;			// Set bit SADC4/3/2/1 (6-5-4-3)
	configRegister |= ( control.MODE_bits & 0x07 );					// Set bit MODE3/2/1 (2-1-0)

	transmitDataBuffer[0] = INA219_CONFIGURATION;					// Configuration Register pointer address
1a000318:	f88d 501c 	strb.w	r5, [sp, #28]
	transmitDataBuffer[1] = (configRegister >> 8) & 0xFF;			// MSB 1st
1a00031c:	2601      	movs	r6, #1
1a00031e:	f88d 601d 	strb.w	r6, [sp, #29]
	transmitDataBuffer[2] = configRegister & 0xFF;					// LSB 2nd
1a000322:	229f      	movs	r2, #159	; 0x9f
1a000324:	f88d 201e 	strb.w	r2, [sp, #30]
	i2cWrite(I2C0, control.address, transmitDataBuffer, 3, TRUE);	// Write Configuration Register
1a000328:	7821      	ldrb	r1, [r4, #0]
1a00032a:	9600      	str	r6, [sp, #0]
1a00032c:	aa07      	add	r2, sp, #28
1a00032e:	4628      	mov	r0, r5
1a000330:	f003 fc97 	bl	1a003c62 <i2cWrite>

	delay(10);														// Wait
1a000334:	200a      	movs	r0, #10
1a000336:	2100      	movs	r1, #0
1a000338:	f003 fe70 	bl	1a00401c <delay>

	// Luego de escribir el registro lo leo, y comparo los valores
	readDataBuffer = INA219_CONFIGURATION;							// Register pointer address to read
1a00033c:	aa08      	add	r2, sp, #32
1a00033e:	f802 5d09 	strb.w	r5, [r2, #-9]!
    i2cRead( I2C0, control.address, &readDataBuffer, 1, TRUE, receiveDataBuffer, 2, TRUE );
1a000342:	7821      	ldrb	r1, [r4, #0]
1a000344:	9603      	str	r6, [sp, #12]
1a000346:	2302      	movs	r3, #2
1a000348:	9302      	str	r3, [sp, #8]
1a00034a:	ab06      	add	r3, sp, #24
1a00034c:	9301      	str	r3, [sp, #4]
1a00034e:	9600      	str	r6, [sp, #0]
1a000350:	4633      	mov	r3, r6
1a000352:	4628      	mov	r0, r5
1a000354:	f003 fc71 	bl	1a003c3a <i2cRead>
		if( ( transmitDataBuffer[1] == receiveDataBuffer[0] ) &&
1a000358:	f89d 201d 	ldrb.w	r2, [sp, #29]
1a00035c:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000360:	429a      	cmp	r2, r3
1a000362:	d033      	beq.n	1a0003cc <ina219SetConfigAndCalibRegister+0xcc>
			( transmitDataBuffer[2] == receiveDataBuffer[1]) ) {
			configRegisterOK = TRUE;
		}
		else {
			configRegisterOK = FALSE;
1a000364:	f04f 0800 	mov.w	r8, #0
		}

	// Write Calibration Register
	transmitDataBuffer[0] = INA219_CALIBRATION;						// Calibration Register pointer address
1a000368:	2705      	movs	r7, #5
1a00036a:	f88d 701c 	strb.w	r7, [sp, #28]
	transmitDataBuffer[1] = (calibRegister >> 8) & 0xFF;			// MSB 1st
1a00036e:	2320      	movs	r3, #32
1a000370:	f88d 301d 	strb.w	r3, [sp, #29]
	transmitDataBuffer[2] = calibRegister & 0xFF;					// LSB 2nd
1a000374:	2500      	movs	r5, #0
1a000376:	f88d 501e 	strb.w	r5, [sp, #30]
	i2cWrite(I2C0, control.address, transmitDataBuffer, 3, TRUE);	// Write Calibration Register
1a00037a:	4e1f      	ldr	r6, [pc, #124]	; (1a0003f8 <ina219SetConfigAndCalibRegister+0xf8>)
1a00037c:	7831      	ldrb	r1, [r6, #0]
1a00037e:	2401      	movs	r4, #1
1a000380:	9400      	str	r4, [sp, #0]
1a000382:	2303      	movs	r3, #3
1a000384:	aa07      	add	r2, sp, #28
1a000386:	4628      	mov	r0, r5
1a000388:	f003 fc6b 	bl	1a003c62 <i2cWrite>

	delay(10);														// Wait
1a00038c:	200a      	movs	r0, #10
1a00038e:	2100      	movs	r1, #0
1a000390:	f003 fe44 	bl	1a00401c <delay>

	// Luego de escribir el registro lo leo, y comparo los valores
	readDataBuffer = INA219_CALIBRATION;							// Register pointer address to read
1a000394:	aa08      	add	r2, sp, #32
1a000396:	f802 7d09 	strb.w	r7, [r2, #-9]!
	i2cRead( I2C0, control.address, &readDataBuffer, 1, TRUE, receiveDataBuffer, 2, TRUE );
1a00039a:	7831      	ldrb	r1, [r6, #0]
1a00039c:	9403      	str	r4, [sp, #12]
1a00039e:	2302      	movs	r3, #2
1a0003a0:	9302      	str	r3, [sp, #8]
1a0003a2:	ab06      	add	r3, sp, #24
1a0003a4:	9301      	str	r3, [sp, #4]
1a0003a6:	9400      	str	r4, [sp, #0]
1a0003a8:	4623      	mov	r3, r4
1a0003aa:	4628      	mov	r0, r5
1a0003ac:	f003 fc45 	bl	1a003c3a <i2cRead>
		if( ( transmitDataBuffer[1] == receiveDataBuffer[0] ) &&
1a0003b0:	f89d 201d 	ldrb.w	r2, [sp, #29]
1a0003b4:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a0003b8:	429a      	cmp	r2, r3
1a0003ba:	d012      	beq.n	1a0003e2 <ina219SetConfigAndCalibRegister+0xe2>
			( transmitDataBuffer[2] == receiveDataBuffer[1]) ) {
				calibRegisterOK = TRUE;
			}
			else {
				calibRegisterOK = FALSE;
1a0003bc:	2000      	movs	r0, #0
			}

		if( ( configRegisterOK == TRUE ) && ( calibRegisterOK == TRUE) ) {
1a0003be:	f1b8 0f00 	cmp.w	r8, #0
1a0003c2:	d100      	bne.n	1a0003c6 <ina219SetConfigAndCalibRegister+0xc6>
			return TRUE;
		}
		else {
			return FALSE;
1a0003c4:	2000      	movs	r0, #0
		}
}
1a0003c6:	b008      	add	sp, #32
1a0003c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			( transmitDataBuffer[2] == receiveDataBuffer[1]) ) {
1a0003cc:	f89d 201e 	ldrb.w	r2, [sp, #30]
1a0003d0:	f89d 3019 	ldrb.w	r3, [sp, #25]
		if( ( transmitDataBuffer[1] == receiveDataBuffer[0] ) &&
1a0003d4:	429a      	cmp	r2, r3
1a0003d6:	d001      	beq.n	1a0003dc <ina219SetConfigAndCalibRegister+0xdc>
			configRegisterOK = FALSE;
1a0003d8:	46a8      	mov	r8, r5
1a0003da:	e7c5      	b.n	1a000368 <ina219SetConfigAndCalibRegister+0x68>
			configRegisterOK = TRUE;
1a0003dc:	f04f 0801 	mov.w	r8, #1
1a0003e0:	e7c2      	b.n	1a000368 <ina219SetConfigAndCalibRegister+0x68>
			( transmitDataBuffer[2] == receiveDataBuffer[1]) ) {
1a0003e2:	f89d 201e 	ldrb.w	r2, [sp, #30]
1a0003e6:	f89d 3019 	ldrb.w	r3, [sp, #25]
		if( ( transmitDataBuffer[1] == receiveDataBuffer[0] ) &&
1a0003ea:	429a      	cmp	r2, r3
1a0003ec:	d001      	beq.n	1a0003f2 <ina219SetConfigAndCalibRegister+0xf2>
				calibRegisterOK = FALSE;
1a0003ee:	4628      	mov	r0, r5
1a0003f0:	e7e5      	b.n	1a0003be <ina219SetConfigAndCalibRegister+0xbe>
				calibRegisterOK = TRUE;
1a0003f2:	2001      	movs	r0, #1
1a0003f4:	e7e3      	b.n	1a0003be <ina219SetConfigAndCalibRegister+0xbe>
1a0003f6:	bf00      	nop
1a0003f8:	100000b4 	.word	0x100000b4

1a0003fc <ina219GetRegisters>:

// Función que realiza la lectura de los registros "Shunt Voltage", "Bus Voltage", "Power Register" y
// "Current Register"
static bool_t ina219GetRegisters( int16_t *shunt_volt, int16_t *bus_volt, int16_t *power, int16_t *current )
{
1a0003fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000400:	b089      	sub	sp, #36	; 0x24
1a000402:	4683      	mov	fp, r0
1a000404:	468a      	mov	sl, r1
1a000406:	4691      	mov	r9, r2
1a000408:	9305      	str	r3, [sp, #20]
	uint8_t receiveDataBuffer[2];									// Array donde almaceno lo leído
	uint8_t dataToReadBuffer;										// Register pointer address to read
	uint8_t ready;													// Conversion Ready

	dataToReadBuffer = INA219_BUS_VOLTAGE_OUT;			 			// Bus voltage measurement data
1a00040a:	2002      	movs	r0, #2
1a00040c:	aa08      	add	r2, sp, #32
1a00040e:	f802 0d05 	strb.w	r0, [r2, #-5]!
	i2cRead( I2C0, control.address, &dataToReadBuffer, 1, TRUE, receiveDataBuffer, 2, TRUE);
1a000412:	4b3a      	ldr	r3, [pc, #232]	; (1a0004fc <ina219GetRegisters+0x100>)
1a000414:	7819      	ldrb	r1, [r3, #0]
1a000416:	2301      	movs	r3, #1
1a000418:	9303      	str	r3, [sp, #12]
1a00041a:	9002      	str	r0, [sp, #8]
1a00041c:	a807      	add	r0, sp, #28
1a00041e:	9001      	str	r0, [sp, #4]
1a000420:	9300      	str	r3, [sp, #0]
1a000422:	2000      	movs	r0, #0
1a000424:	f003 fc09 	bl	1a003c3a <i2cRead>
	ready = receiveDataBuffer[1] & 0x2;								// Consulto el bit CNVR
1a000428:	f89d 301d 	ldrb.w	r3, [sp, #29]
	if ( ready == 0x2 ) {											// Si CNVR = 1 comienzo lectura
1a00042c:	f013 0f02 	tst.w	r3, #2
1a000430:	d103      	bne.n	1a00043a <ina219GetRegisters+0x3e>
		*current = ( *current << 8 ) | receiveDataBuffer[1];		 // LSB 2nd

		return( TRUE );			// Si se realizaron todas las lecturas devuelve TRUE
	}
	else {
		return( FALSE );		// Si CNVR = 0, devuelvo FALSE
1a000432:	2000      	movs	r0, #0
	}
}
1a000434:	b009      	add	sp, #36	; 0x24
1a000436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dataToReadBuffer = INA219_SHUNT_VOLTAGE_OUT;		 		// Shunt voltage measurement data
1a00043a:	2401      	movs	r4, #1
1a00043c:	ad08      	add	r5, sp, #32
1a00043e:	f805 4d05 	strb.w	r4, [r5, #-5]!
		i2cRead( I2C0, control.address, &dataToReadBuffer, 1, TRUE, receiveDataBuffer, 2, TRUE );
1a000442:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1a0004fc <ina219GetRegisters+0x100>
1a000446:	f898 1000 	ldrb.w	r1, [r8]
1a00044a:	9403      	str	r4, [sp, #12]
1a00044c:	2602      	movs	r6, #2
1a00044e:	9602      	str	r6, [sp, #8]
1a000450:	af07      	add	r7, sp, #28
1a000452:	9701      	str	r7, [sp, #4]
1a000454:	9400      	str	r4, [sp, #0]
1a000456:	4623      	mov	r3, r4
1a000458:	462a      	mov	r2, r5
1a00045a:	2000      	movs	r0, #0
1a00045c:	f003 fbed 	bl	1a003c3a <i2cRead>
		*shunt_volt = receiveDataBuffer[0];                         // MSB 1st
1a000460:	f89d 201c 	ldrb.w	r2, [sp, #28]
		*shunt_volt = ( *shunt_volt << 8 ) | receiveDataBuffer[1];  // LSB 2nd
1a000464:	f89d 301d 	ldrb.w	r3, [sp, #29]
1a000468:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00046c:	f8ab 3000 	strh.w	r3, [fp]
		dataToReadBuffer = INA219_BUS_VOLTAGE_OUT;			 		 // Bus voltage measurement data
1a000470:	f88d 601b 	strb.w	r6, [sp, #27]
		i2cRead( I2C0, control.address, &dataToReadBuffer, 1, TRUE, receiveDataBuffer, 2, TRUE);
1a000474:	f898 1000 	ldrb.w	r1, [r8]
1a000478:	9403      	str	r4, [sp, #12]
1a00047a:	9602      	str	r6, [sp, #8]
1a00047c:	9701      	str	r7, [sp, #4]
1a00047e:	9400      	str	r4, [sp, #0]
1a000480:	4623      	mov	r3, r4
1a000482:	462a      	mov	r2, r5
1a000484:	2000      	movs	r0, #0
1a000486:	f003 fbd8 	bl	1a003c3a <i2cRead>
		*bus_volt = receiveDataBuffer[0];				 			 // MSB 1st
1a00048a:	f89d 201c 	ldrb.w	r2, [sp, #28]
		*bus_volt = ( *bus_volt << 8 ) | receiveDataBuffer[1];	     // LSB 2nd
1a00048e:	f89d 301d 	ldrb.w	r3, [sp, #29]
1a000492:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		*bus_volt = ( *bus_volt >> 3 );								 // No se utilizan los 3 bits menos significativos
1a000496:	f343 03cc 	sbfx	r3, r3, #3, #13
1a00049a:	f8aa 3000 	strh.w	r3, [sl]
		dataToReadBuffer = INA219_POWER_OUT;				 		 // Power measurement data
1a00049e:	2303      	movs	r3, #3
1a0004a0:	f88d 301b 	strb.w	r3, [sp, #27]
		i2cRead( I2C0, control.address, &dataToReadBuffer, 1, TRUE, receiveDataBuffer, 2, TRUE);
1a0004a4:	f898 1000 	ldrb.w	r1, [r8]
1a0004a8:	9403      	str	r4, [sp, #12]
1a0004aa:	9602      	str	r6, [sp, #8]
1a0004ac:	9701      	str	r7, [sp, #4]
1a0004ae:	9400      	str	r4, [sp, #0]
1a0004b0:	4623      	mov	r3, r4
1a0004b2:	462a      	mov	r2, r5
1a0004b4:	2000      	movs	r0, #0
1a0004b6:	f003 fbc0 	bl	1a003c3a <i2cRead>
		*power = receiveDataBuffer[0];					 			 // MSB 1st
1a0004ba:	f89d 201c 	ldrb.w	r2, [sp, #28]
		*power = ( *power << 8 ) | receiveDataBuffer[1];             // LSB 2nd
1a0004be:	f89d 301d 	ldrb.w	r3, [sp, #29]
1a0004c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0004c6:	f8a9 3000 	strh.w	r3, [r9]
		dataToReadBuffer = INA219_CURRENT_OUT;				 		 // Value of the current flowing through the shunt resistor
1a0004ca:	2304      	movs	r3, #4
1a0004cc:	f88d 301b 	strb.w	r3, [sp, #27]
		i2cRead( I2C0, control.address, &dataToReadBuffer, 1, TRUE, receiveDataBuffer, 2, TRUE);
1a0004d0:	f898 1000 	ldrb.w	r1, [r8]
1a0004d4:	9403      	str	r4, [sp, #12]
1a0004d6:	9602      	str	r6, [sp, #8]
1a0004d8:	9701      	str	r7, [sp, #4]
1a0004da:	9400      	str	r4, [sp, #0]
1a0004dc:	4623      	mov	r3, r4
1a0004de:	462a      	mov	r2, r5
1a0004e0:	2000      	movs	r0, #0
1a0004e2:	f003 fbaa 	bl	1a003c3a <i2cRead>
		*current = receiveDataBuffer[0];					 		 // MSB 1st
1a0004e6:	f89d 201c 	ldrb.w	r2, [sp, #28]
		*current = ( *current << 8 ) | receiveDataBuffer[1];		 // LSB 2nd
1a0004ea:	f89d 301d 	ldrb.w	r3, [sp, #29]
1a0004ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0004f2:	9a05      	ldr	r2, [sp, #20]
1a0004f4:	8013      	strh	r3, [r2, #0]
		return( TRUE );			// Si se realizaron todas las lecturas devuelve TRUE
1a0004f6:	4620      	mov	r0, r4
1a0004f8:	e79c      	b.n	1a000434 <ina219GetRegisters+0x38>
1a0004fa:	bf00      	nop
1a0004fc:	100000b4 	.word	0x100000b4

1a000500 <ina219Init>:
/*=======================[external functions definition]=========================*/

// Función que inicializa al INA219, escribiendo el Registro de Configuración y el
// Registro de Calibración
bool_t ina219Init( INA219_address_t address )
{
1a000500:	b510      	push	{r4, lr}
1a000502:	4604      	mov	r4, r0
	bool_t writeOK;

	i2cInit(I2C0, INA219_I2C_RATE);                      // Starting I2C bus
1a000504:	4904      	ldr	r1, [pc, #16]	; (1a000518 <ina219Init+0x18>)
1a000506:	2000      	movs	r0, #0
1a000508:	f003 fb90 	bl	1a003c2c <i2cInit>
	control.address = address;                           // Set slave address
1a00050c:	4b03      	ldr	r3, [pc, #12]	; (1a00051c <ina219Init+0x1c>)
1a00050e:	701c      	strb	r4, [r3, #0]

	writeOK = ina219SetConfigAndCalibRegister();		 // Set configuration and calibration registers for INA219
1a000510:	f7ff fef6 	bl	1a000300 <ina219SetConfigAndCalibRegister>

	return writeOK;										 // Successful init, return TRUE
}
1a000514:	bd10      	pop	{r4, pc}
1a000516:	bf00      	nop
1a000518:	00061a80 	.word	0x00061a80
1a00051c:	100000b4 	.word	0x100000b4

1a000520 <ina219Read>:

// Función que realiza el casteo a float de los registros leídos
bool_t ina219Read()
{
1a000520:	b538      	push	{r3, r4, r5, lr}
	readOK = ina219GetRegisters( &ina219_shunt_volt, &ina219_bus_volt, &ina219_power, &ina219_current );
1a000522:	4b2f      	ldr	r3, [pc, #188]	; (1a0005e0 <ina219Read+0xc0>)
1a000524:	4a2f      	ldr	r2, [pc, #188]	; (1a0005e4 <ina219Read+0xc4>)
1a000526:	4930      	ldr	r1, [pc, #192]	; (1a0005e8 <ina219Read+0xc8>)
1a000528:	4830      	ldr	r0, [pc, #192]	; (1a0005ec <ina219Read+0xcc>)
1a00052a:	f7ff ff67 	bl	1a0003fc <ina219GetRegisters>
			 if (readOK == TRUE) {
1a00052e:	2801      	cmp	r0, #1
1a000530:	d002      	beq.n	1a000538 <ina219Read+0x18>
				control.power = (float)ina219_power;
				control.current = (float)ina219_current * 0.05;
				return TRUE;
			 }
			 else {
				return FALSE;
1a000532:	2400      	movs	r4, #0
			 }
}
1a000534:	4620      	mov	r0, r4
1a000536:	bd38      	pop	{r3, r4, r5, pc}
1a000538:	4604      	mov	r4, r0
				control.shunt_volt = (float)ina219_shunt_volt * 0.01;
1a00053a:	4b2c      	ldr	r3, [pc, #176]	; (1a0005ec <ina219Read+0xcc>)
1a00053c:	f9b3 0000 	ldrsh.w	r0, [r3]
1a000540:	ee07 0a90 	vmov	s15, r0
1a000544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000548:	ee17 0a90 	vmov	r0, s15
1a00054c:	f004 f8b4 	bl	1a0046b8 <__aeabi_f2d>
1a000550:	a31d      	add	r3, pc, #116	; (adr r3, 1a0005c8 <ina219Read+0xa8>)
1a000552:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000556:	f004 f907 	bl	1a004768 <__aeabi_dmul>
1a00055a:	f004 fb17 	bl	1a004b8c <__aeabi_d2f>
1a00055e:	4d24      	ldr	r5, [pc, #144]	; (1a0005f0 <ina219Read+0xd0>)
1a000560:	60a8      	str	r0, [r5, #8]
				control.bus_volt = (float)ina219_bus_volt * 0.004;
1a000562:	4b21      	ldr	r3, [pc, #132]	; (1a0005e8 <ina219Read+0xc8>)
1a000564:	f9b3 0000 	ldrsh.w	r0, [r3]
1a000568:	ee07 0a90 	vmov	s15, r0
1a00056c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000570:	ee17 0a90 	vmov	r0, s15
1a000574:	f004 f8a0 	bl	1a0046b8 <__aeabi_f2d>
1a000578:	a315      	add	r3, pc, #84	; (adr r3, 1a0005d0 <ina219Read+0xb0>)
1a00057a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00057e:	f004 f8f3 	bl	1a004768 <__aeabi_dmul>
1a000582:	f004 fb03 	bl	1a004b8c <__aeabi_d2f>
1a000586:	60e8      	str	r0, [r5, #12]
				control.power = (float)ina219_power;
1a000588:	4b16      	ldr	r3, [pc, #88]	; (1a0005e4 <ina219Read+0xc4>)
1a00058a:	f9b3 3000 	ldrsh.w	r3, [r3]
1a00058e:	ee07 3a90 	vmov	s15, r3
1a000592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000596:	edc5 7a04 	vstr	s15, [r5, #16]
				control.current = (float)ina219_current * 0.05;
1a00059a:	4b11      	ldr	r3, [pc, #68]	; (1a0005e0 <ina219Read+0xc0>)
1a00059c:	f9b3 0000 	ldrsh.w	r0, [r3]
1a0005a0:	ee07 0a90 	vmov	s15, r0
1a0005a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a0005a8:	ee17 0a90 	vmov	r0, s15
1a0005ac:	f004 f884 	bl	1a0046b8 <__aeabi_f2d>
1a0005b0:	a309      	add	r3, pc, #36	; (adr r3, 1a0005d8 <ina219Read+0xb8>)
1a0005b2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0005b6:	f004 f8d7 	bl	1a004768 <__aeabi_dmul>
1a0005ba:	f004 fae7 	bl	1a004b8c <__aeabi_d2f>
1a0005be:	6168      	str	r0, [r5, #20]
				return TRUE;
1a0005c0:	e7b8      	b.n	1a000534 <ina219Read+0x14>
1a0005c2:	bf00      	nop
1a0005c4:	f3af 8000 	nop.w
1a0005c8:	47ae147b 	.word	0x47ae147b
1a0005cc:	3f847ae1 	.word	0x3f847ae1
1a0005d0:	d2f1a9fc 	.word	0xd2f1a9fc
1a0005d4:	3f70624d 	.word	0x3f70624d
1a0005d8:	9999999a 	.word	0x9999999a
1a0005dc:	3fa99999 	.word	0x3fa99999
1a0005e0:	100000ce 	.word	0x100000ce
1a0005e4:	100000d0 	.word	0x100000d0
1a0005e8:	100000cc 	.word	0x100000cc
1a0005ec:	100000d2 	.word	0x100000d2
1a0005f0:	100000b4 	.word	0x100000b4

1a0005f4 <ina219ShowShuntVoltage>:

float ina219ShowShuntVoltage( void )
{
	return control.shunt_volt;
}
1a0005f4:	4b01      	ldr	r3, [pc, #4]	; (1a0005fc <ina219ShowShuntVoltage+0x8>)
1a0005f6:	ed93 0a02 	vldr	s0, [r3, #8]
1a0005fa:	4770      	bx	lr
1a0005fc:	100000b4 	.word	0x100000b4

1a000600 <ina219ShowBusVoltage>:

float ina219ShowBusVoltage( void )
{
	return control.bus_volt;
}
1a000600:	4b01      	ldr	r3, [pc, #4]	; (1a000608 <ina219ShowBusVoltage+0x8>)
1a000602:	ed93 0a03 	vldr	s0, [r3, #12]
1a000606:	4770      	bx	lr
1a000608:	100000b4 	.word	0x100000b4

1a00060c <ina219ShowPower>:

float ina219ShowPower( void )
{
	return control.power;
}
1a00060c:	4b01      	ldr	r3, [pc, #4]	; (1a000614 <ina219ShowPower+0x8>)
1a00060e:	ed93 0a04 	vldr	s0, [r3, #16]
1a000612:	4770      	bx	lr
1a000614:	100000b4 	.word	0x100000b4

1a000618 <ina219ShowCurrent>:

float ina219ShowCurrent( void )
{
	return control.current;
}
1a000618:	4b01      	ldr	r3, [pc, #4]	; (1a000620 <ina219ShowCurrent+0x8>)
1a00061a:	ed93 0a05 	vldr	s0, [r3, #20]
1a00061e:	4770      	bx	lr
1a000620:	100000b4 	.word	0x100000b4

1a000624 <task_read_measurement>:
/* Implementacion de las funciones de cada tarea */

/* Tarea periodica que realiza la Lectura de los registros del INA219 cada 200ms
 * y carga los valores en una cola  */
void task_read_measurement( void* taskParmPtr )
{
1a000624:	b500      	push	{lr}
1a000626:	b087      	sub	sp, #28

	bool_t status;				// Si "status" = TRUE se inicializo correctamente
	float dataInBuffer[ 4 ];	// Array donde se almacenan las lecturas del INA219

	/* Inicializar INA219 */
   uartWriteString( UART_USB, "Inicializando INA219...\r\n" );
1a000628:	491d      	ldr	r1, [pc, #116]	; (1a0006a0 <task_read_measurement+0x7c>)
1a00062a:	2003      	movs	r0, #3
1a00062c:	f003 fa99 	bl	1a003b62 <uartWriteString>
   vTaskDelay( 1000 / portTICK_RATE_MS );
1a000630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000634:	f001 fc42 	bl	1a001ebc <vTaskDelay>

   status = ina219Init( addr );			// Inicializo INA219
1a000638:	4b1a      	ldr	r3, [pc, #104]	; (1a0006a4 <task_read_measurement+0x80>)
1a00063a:	7818      	ldrb	r0, [r3, #0]
1a00063c:	f7ff ff60 	bl	1a000500 <ina219Init>
   	   if( status == FALSE ){
1a000640:	b320      	cbz	r0, 1a00068c <task_read_measurement+0x68>
	   	   uartWriteString( UART_USB, "INA219 no inicializado, verifique las conexiones:\r\n\r\n" );
	   	   uartWriteString( UART_USB, "Se detiene el programa.\r\n" );
	   	   }
   uartWriteString( UART_USB, "INA219 inicializado correctamente\r\n" );
1a000642:	4919      	ldr	r1, [pc, #100]	; (1a0006a8 <task_read_measurement+0x84>)
1a000644:	2003      	movs	r0, #3
1a000646:	f003 fa8c 	bl	1a003b62 <uartWriteString>

   /* Tarea periodica cada 200 ms */
   portTickType xPeriodicity =  200 / portTICK_RATE_MS;
   portTickType xLastWakeTime = xTaskGetTickCount();
1a00064a:	f001 fad9 	bl	1a001c00 <xTaskGetTickCount>
1a00064e:	9001      	str	r0, [sp, #4]

   // ---------- REPETIR POR SIEMPRE --------------------------
   while(TRUE) {
      ina219Read();			// Funcion que reliza la lectura de los registros del INA219 (ina219.h)
1a000650:	f7ff ff66 	bl	1a000520 <ina219Read>

      /* Almaceno la lectura de los registros */
	  dataInBuffer[ 0 ] = ina219ShowShuntVoltage();		// Shunt voltage
1a000654:	f7ff ffce 	bl	1a0005f4 <ina219ShowShuntVoltage>
1a000658:	ed8d 0a02 	vstr	s0, [sp, #8]
	  dataInBuffer[ 1 ] = ina219ShowBusVoltage();		// Bus voltage
1a00065c:	f7ff ffd0 	bl	1a000600 <ina219ShowBusVoltage>
1a000660:	ed8d 0a03 	vstr	s0, [sp, #12]
	  dataInBuffer[ 2 ] = ina219ShowPower();			// Power
1a000664:	f7ff ffd2 	bl	1a00060c <ina219ShowPower>
1a000668:	ed8d 0a04 	vstr	s0, [sp, #16]
	  dataInBuffer[ 3 ] = ina219ShowCurrent();			// Current
1a00066c:	f7ff ffd4 	bl	1a000618 <ina219ShowCurrent>
1a000670:	ed8d 0a05 	vstr	s0, [sp, #20]

	  xQueueSend( INA219Queue, (void *) dataInBuffer, 0 );
1a000674:	2300      	movs	r3, #0
1a000676:	461a      	mov	r2, r3
1a000678:	a902      	add	r1, sp, #8
1a00067a:	480c      	ldr	r0, [pc, #48]	; (1a0006ac <task_read_measurement+0x88>)
1a00067c:	6800      	ldr	r0, [r0, #0]
1a00067e:	f000 fdd5 	bl	1a00122c <xQueueGenericSend>

	  // Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
	  vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a000682:	21c8      	movs	r1, #200	; 0xc8
1a000684:	a801      	add	r0, sp, #4
1a000686:	f001 fbc7 	bl	1a001e18 <vTaskDelayUntil>
1a00068a:	e7e1      	b.n	1a000650 <task_read_measurement+0x2c>
	   	   uartWriteString( UART_USB, "INA219 no inicializado, verifique las conexiones:\r\n\r\n" );
1a00068c:	4908      	ldr	r1, [pc, #32]	; (1a0006b0 <task_read_measurement+0x8c>)
1a00068e:	2003      	movs	r0, #3
1a000690:	f003 fa67 	bl	1a003b62 <uartWriteString>
	   	   uartWriteString( UART_USB, "Se detiene el programa.\r\n" );
1a000694:	4907      	ldr	r1, [pc, #28]	; (1a0006b4 <task_read_measurement+0x90>)
1a000696:	2003      	movs	r0, #3
1a000698:	f003 fa63 	bl	1a003b62 <uartWriteString>
1a00069c:	e7d1      	b.n	1a000642 <task_read_measurement+0x1e>
1a00069e:	bf00      	nop
1a0006a0:	1a005e48 	.word	0x1a005e48
1a0006a4:	10000000 	.word	0x10000000
1a0006a8:	1a005eb8 	.word	0x1a005eb8
1a0006ac:	100000d4 	.word	0x100000d4
1a0006b0:	1a005e64 	.word	0x1a005e64
1a0006b4:	1a005e9c 	.word	0x1a005e9c

1a0006b8 <task_show_values>:
}

/* Esta tarea recibe los valores de la cola y los pasa de "float" a "string"
 * para luego enviarlos por la UART y al display LCD */
void task_show_values( void* taskParmPtr )
{
1a0006b8:	b510      	push	{r4, lr}
1a0006ba:	b08e      	sub	sp, #56	; 0x38
   // ---------- CONFIGURACIONES ------------------------------

   // Inicializar LCD de 20x4 (caracteres x lineas) con cada caracter de 5x8 pixeles
   lcdInit( 20, 4, 5, 8 );
1a0006bc:	2308      	movs	r3, #8
1a0006be:	2205      	movs	r2, #5
1a0006c0:	2104      	movs	r1, #4
1a0006c2:	2014      	movs	r0, #20
1a0006c4:	f003 fe1c 	bl	1a004300 <lcdInit>
   lcdClear();
1a0006c8:	f003 fe10 	bl	1a0042ec <lcdClear>
   char powerString[ 6 ];
   char currentString[ 6 ];

   // Tarea periodica cada 1000 ms
   portTickType xPeriodicity =  1000 / portTICK_RATE_MS;
   portTickType xLastWakeTime = xTaskGetTickCount();
1a0006cc:	f001 fa98 	bl	1a001c00 <xTaskGetTickCount>
1a0006d0:	9001      	str	r0, [sp, #4]
1a0006d2:	e004      	b.n	1a0006de <task_show_values+0x26>
		  lcdSendStringRaw( "Current: " );
		  lcdSendStringRaw( currentString );
		  lcdCursorSet( LCD_CURSOR_OFF ); // Apaga el cursor
	   }
	   // Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
	   vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a0006d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a0006d8:	a801      	add	r0, sp, #4
1a0006da:	f001 fb9d 	bl	1a001e18 <vTaskDelayUntil>
	   if (xQueueReceive( INA219Queue, (void *)dataReceive, portMAX_DELAY )){
1a0006de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0006e2:	a90a      	add	r1, sp, #40	; 0x28
1a0006e4:	4b3e      	ldr	r3, [pc, #248]	; (1a0007e0 <task_show_values+0x128>)
1a0006e6:	6818      	ldr	r0, [r3, #0]
1a0006e8:	f000 fec4 	bl	1a001474 <xQueueReceive>
1a0006ec:	2800      	cmp	r0, #0
1a0006ee:	d0f1      	beq.n	1a0006d4 <task_show_values+0x1c>
		  lcdClear();
1a0006f0:	f003 fdfc 	bl	1a0042ec <lcdClear>
		  floatToString( dataReceive[0], shuntVoltageString, 3 );
1a0006f4:	2103      	movs	r1, #3
1a0006f6:	a808      	add	r0, sp, #32
1a0006f8:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
1a0006fc:	f003 fcbe 	bl	1a00407c <floatToString>
		  floatToString( dataReceive[1], busVoltageString, 3 );
1a000700:	2103      	movs	r1, #3
1a000702:	a806      	add	r0, sp, #24
1a000704:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
1a000708:	f003 fcb8 	bl	1a00407c <floatToString>
		  floatToString( dataReceive[2], powerString, 3 );
1a00070c:	2103      	movs	r1, #3
1a00070e:	a804      	add	r0, sp, #16
1a000710:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
1a000714:	f003 fcb2 	bl	1a00407c <floatToString>
		  floatToString( dataReceive[3], currentString, 3 );
1a000718:	2103      	movs	r1, #3
1a00071a:	a802      	add	r0, sp, #8
1a00071c:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
1a000720:	f003 fcac 	bl	1a00407c <floatToString>
		  uartWriteString( UART_USB, "INA219 Shunt Voltage [mV]:\r\n" );
1a000724:	492f      	ldr	r1, [pc, #188]	; (1a0007e4 <task_show_values+0x12c>)
1a000726:	2003      	movs	r0, #3
1a000728:	f003 fa1b 	bl	1a003b62 <uartWriteString>
		  uartWriteString( UART_USB, shuntVoltageString );
1a00072c:	a908      	add	r1, sp, #32
1a00072e:	2003      	movs	r0, #3
1a000730:	f003 fa17 	bl	1a003b62 <uartWriteString>
		  uartWriteString( UART_USB, "\r\n" );
1a000734:	4c2c      	ldr	r4, [pc, #176]	; (1a0007e8 <task_show_values+0x130>)
1a000736:	4621      	mov	r1, r4
1a000738:	2003      	movs	r0, #3
1a00073a:	f003 fa12 	bl	1a003b62 <uartWriteString>
		  lcdGoToXY( 0, 0 );
1a00073e:	2100      	movs	r1, #0
1a000740:	4608      	mov	r0, r1
1a000742:	f003 fdb7 	bl	1a0042b4 <lcdGoToXY>
		  lcdSendStringRaw( "Shunt Voltage: " );
1a000746:	4829      	ldr	r0, [pc, #164]	; (1a0007ec <task_show_values+0x134>)
1a000748:	f003 fe46 	bl	1a0043d8 <lcdSendStringRaw>
		  lcdSendStringRaw( shuntVoltageString );
1a00074c:	a808      	add	r0, sp, #32
1a00074e:	f003 fe43 	bl	1a0043d8 <lcdSendStringRaw>
		  uartWriteString( UART_USB, "INA219 Bus Voltage [mV]:\r\n" );
1a000752:	4927      	ldr	r1, [pc, #156]	; (1a0007f0 <task_show_values+0x138>)
1a000754:	2003      	movs	r0, #3
1a000756:	f003 fa04 	bl	1a003b62 <uartWriteString>
		  uartWriteString( UART_USB, busVoltageString );
1a00075a:	a906      	add	r1, sp, #24
1a00075c:	2003      	movs	r0, #3
1a00075e:	f003 fa00 	bl	1a003b62 <uartWriteString>
		  uartWriteString( UART_USB, "\r\n" );
1a000762:	4621      	mov	r1, r4
1a000764:	2003      	movs	r0, #3
1a000766:	f003 f9fc 	bl	1a003b62 <uartWriteString>
		  lcdGoToXY( 0, 1 );
1a00076a:	2101      	movs	r1, #1
1a00076c:	2000      	movs	r0, #0
1a00076e:	f003 fda1 	bl	1a0042b4 <lcdGoToXY>
		  lcdSendStringRaw( "Bus Voltage: " );
1a000772:	4820      	ldr	r0, [pc, #128]	; (1a0007f4 <task_show_values+0x13c>)
1a000774:	f003 fe30 	bl	1a0043d8 <lcdSendStringRaw>
		  lcdSendStringRaw( busVoltageString );
1a000778:	a806      	add	r0, sp, #24
1a00077a:	f003 fe2d 	bl	1a0043d8 <lcdSendStringRaw>
		  uartWriteString( UART_USB, "INA219 Power [mW]:\r\n");
1a00077e:	491e      	ldr	r1, [pc, #120]	; (1a0007f8 <task_show_values+0x140>)
1a000780:	2003      	movs	r0, #3
1a000782:	f003 f9ee 	bl	1a003b62 <uartWriteString>
		  uartWriteString( UART_USB, powerString );
1a000786:	a904      	add	r1, sp, #16
1a000788:	2003      	movs	r0, #3
1a00078a:	f003 f9ea 	bl	1a003b62 <uartWriteString>
		  uartWriteString( UART_USB, "\r\n" );
1a00078e:	4621      	mov	r1, r4
1a000790:	2003      	movs	r0, #3
1a000792:	f003 f9e6 	bl	1a003b62 <uartWriteString>
		  lcdGoToXY( 0, 2 );
1a000796:	2102      	movs	r1, #2
1a000798:	2000      	movs	r0, #0
1a00079a:	f003 fd8b 	bl	1a0042b4 <lcdGoToXY>
		  lcdSendStringRaw( "Power: " );
1a00079e:	4817      	ldr	r0, [pc, #92]	; (1a0007fc <task_show_values+0x144>)
1a0007a0:	f003 fe1a 	bl	1a0043d8 <lcdSendStringRaw>
		  lcdSendStringRaw( powerString );
1a0007a4:	a804      	add	r0, sp, #16
1a0007a6:	f003 fe17 	bl	1a0043d8 <lcdSendStringRaw>
		  uartWriteString( UART_USB, "INA219 Current [mA]:\r\n");
1a0007aa:	4915      	ldr	r1, [pc, #84]	; (1a000800 <task_show_values+0x148>)
1a0007ac:	2003      	movs	r0, #3
1a0007ae:	f003 f9d8 	bl	1a003b62 <uartWriteString>
		  uartWriteString( UART_USB, currentString );
1a0007b2:	a902      	add	r1, sp, #8
1a0007b4:	2003      	movs	r0, #3
1a0007b6:	f003 f9d4 	bl	1a003b62 <uartWriteString>
		  uartWriteString( UART_USB, "\r\n" );
1a0007ba:	4621      	mov	r1, r4
1a0007bc:	2003      	movs	r0, #3
1a0007be:	f003 f9d0 	bl	1a003b62 <uartWriteString>
		  lcdGoToXY( 0, 3 );
1a0007c2:	2103      	movs	r1, #3
1a0007c4:	2000      	movs	r0, #0
1a0007c6:	f003 fd75 	bl	1a0042b4 <lcdGoToXY>
		  lcdSendStringRaw( "Current: " );
1a0007ca:	480e      	ldr	r0, [pc, #56]	; (1a000804 <task_show_values+0x14c>)
1a0007cc:	f003 fe04 	bl	1a0043d8 <lcdSendStringRaw>
		  lcdSendStringRaw( currentString );
1a0007d0:	a802      	add	r0, sp, #8
1a0007d2:	f003 fe01 	bl	1a0043d8 <lcdSendStringRaw>
		  lcdCursorSet( LCD_CURSOR_OFF ); // Apaga el cursor
1a0007d6:	2000      	movs	r0, #0
1a0007d8:	f003 fdf4 	bl	1a0043c4 <lcdCursorSet>
1a0007dc:	e77a      	b.n	1a0006d4 <task_show_values+0x1c>
1a0007de:	bf00      	nop
1a0007e0:	100000d4 	.word	0x100000d4
1a0007e4:	1a005f2c 	.word	0x1a005f2c
1a0007e8:	1a00607c 	.word	0x1a00607c
1a0007ec:	1a005f4c 	.word	0x1a005f4c
1a0007f0:	1a005f5c 	.word	0x1a005f5c
1a0007f4:	1a005f78 	.word	0x1a005f78
1a0007f8:	1a005f88 	.word	0x1a005f88
1a0007fc:	1a005fa0 	.word	0x1a005fa0
1a000800:	1a005fa8 	.word	0x1a005fa8
1a000804:	1a005fc0 	.word	0x1a005fc0

1a000808 <task_show_interrupt>:
}

/* Esta tarea recibe de la cola de interrupción que tecla fue
 * oprimida y la muestra por el display LCD */
void task_show_interrupt( void* taskParmPtr )
{
1a000808:	b500      	push	{lr}
1a00080a:	b083      	sub	sp, #12
	// ---------- CONFIGURACIONES ------------------------------

	// Inicializar LCD de 20x4 (caracteres x lineas) con cada caracter de 5x8 pixeles
	lcdInit( 20, 4, 5, 8 );
1a00080c:	2308      	movs	r3, #8
1a00080e:	2205      	movs	r2, #5
1a000810:	2104      	movs	r1, #4
1a000812:	2014      	movs	r0, #20
1a000814:	f003 fd74 	bl	1a004300 <lcdInit>
	lcdClear();
1a000818:	f003 fd68 	bl	1a0042ec <lcdClear>
1a00081c:	e00b      	b.n	1a000836 <task_show_interrupt+0x2e>
			   lcdSendStringRaw( "Se oprimio TEC 1" );
			   lcdCursorSet( LCD_CURSOR_OFF );
			   vTaskDelay( 1000 / portTICK_RATE_MS );
		   }

		   if( tecla == Tecla2 ){
1a00081e:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000822:	2b01      	cmp	r3, #1
1a000824:	d026      	beq.n	1a000874 <task_show_interrupt+0x6c>
			   lcdSendStringRaw( "Se oprimio TEC 2" );
			   lcdCursorSet( LCD_CURSOR_OFF );
			   vTaskDelay( 1000 / portTICK_RATE_MS );
		   }

		   if( tecla == Tecla3 ){
1a000826:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00082a:	2b02      	cmp	r3, #2
1a00082c:	d033      	beq.n	1a000896 <task_show_interrupt+0x8e>
			   lcdSendStringRaw( "Se orpimio TEC 3" );
			   lcdCursorSet( LCD_CURSOR_OFF );
			   vTaskDelay( 1000 / portTICK_RATE_MS );
		   }

		   if( tecla == Tecla4 ){
1a00082e:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000832:	2b03      	cmp	r3, #3
1a000834:	d040      	beq.n	1a0008b8 <task_show_interrupt+0xb0>
		if (xQueueReceive( teclaQueue, &tecla, portMAX_DELAY )){
1a000836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00083a:	f10d 0107 	add.w	r1, sp, #7
1a00083e:	4b27      	ldr	r3, [pc, #156]	; (1a0008dc <task_show_interrupt+0xd4>)
1a000840:	6818      	ldr	r0, [r3, #0]
1a000842:	f000 fe17 	bl	1a001474 <xQueueReceive>
1a000846:	2800      	cmp	r0, #0
1a000848:	d0f5      	beq.n	1a000836 <task_show_interrupt+0x2e>
			if( tecla == Tecla1 ){
1a00084a:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00084e:	2b00      	cmp	r3, #0
1a000850:	d1e5      	bne.n	1a00081e <task_show_interrupt+0x16>
			   lcdClear();
1a000852:	f003 fd4b 	bl	1a0042ec <lcdClear>
			   lcdGoToXY( 0, 0 );
1a000856:	2100      	movs	r1, #0
1a000858:	4608      	mov	r0, r1
1a00085a:	f003 fd2b 	bl	1a0042b4 <lcdGoToXY>
			   lcdSendStringRaw( "Se oprimio TEC 1" );
1a00085e:	4820      	ldr	r0, [pc, #128]	; (1a0008e0 <task_show_interrupt+0xd8>)
1a000860:	f003 fdba 	bl	1a0043d8 <lcdSendStringRaw>
			   lcdCursorSet( LCD_CURSOR_OFF );
1a000864:	2000      	movs	r0, #0
1a000866:	f003 fdad 	bl	1a0043c4 <lcdCursorSet>
			   vTaskDelay( 1000 / portTICK_RATE_MS );
1a00086a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a00086e:	f001 fb25 	bl	1a001ebc <vTaskDelay>
1a000872:	e7d4      	b.n	1a00081e <task_show_interrupt+0x16>
			   lcdClear();
1a000874:	f003 fd3a 	bl	1a0042ec <lcdClear>
			   lcdGoToXY( 0, 0 );
1a000878:	2100      	movs	r1, #0
1a00087a:	4608      	mov	r0, r1
1a00087c:	f003 fd1a 	bl	1a0042b4 <lcdGoToXY>
			   lcdSendStringRaw( "Se oprimio TEC 2" );
1a000880:	4818      	ldr	r0, [pc, #96]	; (1a0008e4 <task_show_interrupt+0xdc>)
1a000882:	f003 fda9 	bl	1a0043d8 <lcdSendStringRaw>
			   lcdCursorSet( LCD_CURSOR_OFF );
1a000886:	2000      	movs	r0, #0
1a000888:	f003 fd9c 	bl	1a0043c4 <lcdCursorSet>
			   vTaskDelay( 1000 / portTICK_RATE_MS );
1a00088c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000890:	f001 fb14 	bl	1a001ebc <vTaskDelay>
1a000894:	e7c7      	b.n	1a000826 <task_show_interrupt+0x1e>
			   lcdClear();
1a000896:	f003 fd29 	bl	1a0042ec <lcdClear>
			   lcdGoToXY( 0, 0 );
1a00089a:	2100      	movs	r1, #0
1a00089c:	4608      	mov	r0, r1
1a00089e:	f003 fd09 	bl	1a0042b4 <lcdGoToXY>
			   lcdSendStringRaw( "Se orpimio TEC 3" );
1a0008a2:	4811      	ldr	r0, [pc, #68]	; (1a0008e8 <task_show_interrupt+0xe0>)
1a0008a4:	f003 fd98 	bl	1a0043d8 <lcdSendStringRaw>
			   lcdCursorSet( LCD_CURSOR_OFF );
1a0008a8:	2000      	movs	r0, #0
1a0008aa:	f003 fd8b 	bl	1a0043c4 <lcdCursorSet>
			   vTaskDelay( 1000 / portTICK_RATE_MS );
1a0008ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a0008b2:	f001 fb03 	bl	1a001ebc <vTaskDelay>
1a0008b6:	e7ba      	b.n	1a00082e <task_show_interrupt+0x26>
			   lcdClear();
1a0008b8:	f003 fd18 	bl	1a0042ec <lcdClear>
			   lcdGoToXY( 0, 0 );
1a0008bc:	2100      	movs	r1, #0
1a0008be:	4608      	mov	r0, r1
1a0008c0:	f003 fcf8 	bl	1a0042b4 <lcdGoToXY>
			   lcdSendStringRaw( "Se orpimio TEC 4");
1a0008c4:	4809      	ldr	r0, [pc, #36]	; (1a0008ec <task_show_interrupt+0xe4>)
1a0008c6:	f003 fd87 	bl	1a0043d8 <lcdSendStringRaw>
			   lcdCursorSet( LCD_CURSOR_OFF );
1a0008ca:	2000      	movs	r0, #0
1a0008cc:	f003 fd7a 	bl	1a0043c4 <lcdCursorSet>
			   vTaskDelay( 1000 / portTICK_RATE_MS );
1a0008d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a0008d4:	f001 faf2 	bl	1a001ebc <vTaskDelay>
1a0008d8:	e7ad      	b.n	1a000836 <task_show_interrupt+0x2e>
1a0008da:	bf00      	nop
1a0008dc:	100000dc 	.word	0x100000dc
1a0008e0:	1a005edc 	.word	0x1a005edc
1a0008e4:	1a005ef0 	.word	0x1a005ef0
1a0008e8:	1a005f04 	.word	0x1a005f04
1a0008ec:	1a005f18 	.word	0x1a005f18

1a0008f0 <My_IRQ_Init>:
void My_IRQ_Init (void){
1a0008f0:	b430      	push	{r4, r5}
 */
STATIC INLINE void Chip_SCU_GPIOIntPinSel(uint8_t PortSel, uint8_t PortNum, uint8_t PinNum)
{
	int32_t of = (PortSel & 3) << 3;
	uint32_t val = (((PortNum & 0x7) << 5) | (PinNum & 0x1F)) << of;
	LPC_SCU->PINTSEL[PortSel >> 2] = (LPC_SCU->PINTSEL[PortSel >> 2] & ~(0xFF << of)) | val;
1a0008f2:	4a25      	ldr	r2, [pc, #148]	; (1a000988 <My_IRQ_Init+0x98>)
1a0008f4:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
1a0008f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0008fc:	f043 0304 	orr.w	r3, r3, #4
1a000900:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
 * @param	pins	: Pins (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_SetPinModeEdge(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->ISEL &= ~pins;
1a000904:	4b21      	ldr	r3, [pc, #132]	; (1a00098c <My_IRQ_Init+0x9c>)
1a000906:	6819      	ldr	r1, [r3, #0]
1a000908:	f021 0101 	bic.w	r1, r1, #1
1a00090c:	6019      	str	r1, [r3, #0]
 * @param	pins	: Pins to enable (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_EnableIntHigh(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->SIENR = pins;
1a00090e:	2001      	movs	r0, #1
1a000910:	6098      	str	r0, [r3, #8]
1a000912:	f8d2 1e00 	ldr.w	r1, [r2, #3584]	; 0xe00
1a000916:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
1a00091a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
1a00091e:	f8c2 1e00 	str.w	r1, [r2, #3584]	; 0xe00
	pPININT->ISEL &= ~pins;
1a000922:	6819      	ldr	r1, [r3, #0]
1a000924:	f021 0102 	bic.w	r1, r1, #2
1a000928:	6019      	str	r1, [r3, #0]
	pPININT->SIENR = pins;
1a00092a:	2402      	movs	r4, #2
1a00092c:	609c      	str	r4, [r3, #8]
1a00092e:	f8d2 1e00 	ldr.w	r1, [r2, #3584]	; 0xe00
1a000932:	f421 017f 	bic.w	r1, r1, #16711680	; 0xff0000
1a000936:	f441 2110 	orr.w	r1, r1, #589824	; 0x90000
1a00093a:	f8c2 1e00 	str.w	r1, [r2, #3584]	; 0xe00
	pPININT->ISEL &= ~pins;
1a00093e:	6819      	ldr	r1, [r3, #0]
1a000940:	f021 0104 	bic.w	r1, r1, #4
1a000944:	6019      	str	r1, [r3, #0]
	pPININT->SIENR = pins;
1a000946:	2504      	movs	r5, #4
1a000948:	609d      	str	r5, [r3, #8]
1a00094a:	f8d2 1e00 	ldr.w	r1, [r2, #3584]	; 0xe00
1a00094e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
1a000952:	f041 5124 	orr.w	r1, r1, #687865856	; 0x29000000
1a000956:	f8c2 1e00 	str.w	r1, [r2, #3584]	; 0xe00
	pPININT->ISEL &= ~pins;
1a00095a:	681a      	ldr	r2, [r3, #0]
1a00095c:	f022 0208 	bic.w	r2, r2, #8
1a000960:	601a      	str	r2, [r3, #0]
 * @param	pins	: Pins to enable (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_EnableIntLow(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->SIENF = pins;
1a000962:	2108      	movs	r1, #8
1a000964:	6159      	str	r1, [r3, #20]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000966:	4b0a      	ldr	r3, [pc, #40]	; (1a000990 <My_IRQ_Init+0xa0>)
1a000968:	22e0      	movs	r2, #224	; 0xe0
1a00096a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00096e:	6058      	str	r0, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000970:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a000974:	605c      	str	r4, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a000976:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00097a:	605d      	str	r5, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a00097c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a000980:	6059      	str	r1, [r3, #4]
}
1a000982:	bc30      	pop	{r4, r5}
1a000984:	4770      	bx	lr
1a000986:	bf00      	nop
1a000988:	40086000 	.word	0x40086000
1a00098c:	40087000 	.word	0x40087000
1a000990:	e000e100 	.word	0xe000e100

1a000994 <main>:
{
1a000994:	b530      	push	{r4, r5, lr}
1a000996:	b083      	sub	sp, #12
   boardConfig();
1a000998:	f003 faa4 	bl	1a003ee4 <boardInit>
   My_IRQ_Init();
1a00099c:	f7ff ffa8 	bl	1a0008f0 <My_IRQ_Init>
   debugPrintConfigUart( UART_USB, 115200 );
1a0009a0:	4c27      	ldr	r4, [pc, #156]	; (1a000a40 <main+0xac>)
1a0009a2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a0009a6:	2103      	movs	r1, #3
1a0009a8:	4620      	mov	r0, r4
1a0009aa:	f003 fb53 	bl	1a004054 <printInitUart>
   debugPrintlnString( "Final RTOS 1" );
1a0009ae:	4925      	ldr	r1, [pc, #148]	; (1a000a44 <main+0xb0>)
1a0009b0:	7820      	ldrb	r0, [r4, #0]
1a0009b2:	f003 fb57 	bl	1a004064 <printString>
1a0009b6:	7820      	ldrb	r0, [r4, #0]
1a0009b8:	f003 fb58 	bl	1a00406c <printEnter>
   gpioWrite( LED3, ON );		// Its Alive!!!
1a0009bc:	2101      	movs	r1, #1
1a0009be:	202d      	movs	r0, #45	; 0x2d
1a0009c0:	f003 fa4c 	bl	1a003e5c <gpioWrite>
   if ( NULL == ( INA219Queue = xQueueCreate( 5, sizeof( float[ 4 ] ) ) ) ) {
1a0009c4:	2200      	movs	r2, #0
1a0009c6:	2110      	movs	r1, #16
1a0009c8:	2005      	movs	r0, #5
1a0009ca:	f000 fc08 	bl	1a0011de <xQueueGenericCreate>
1a0009ce:	4b1e      	ldr	r3, [pc, #120]	; (1a000a48 <main+0xb4>)
1a0009d0:	6018      	str	r0, [r3, #0]
1a0009d2:	b358      	cbz	r0, 1a000a2c <main+0x98>
	uint8_t Error_state = 0;
1a0009d4:	2500      	movs	r5, #0
   if ( NULL == ( teclaQueue = xQueueCreate( 4, sizeof( uint8_t ) ) ) ) {
1a0009d6:	2200      	movs	r2, #0
1a0009d8:	2101      	movs	r1, #1
1a0009da:	2004      	movs	r0, #4
1a0009dc:	f000 fbff 	bl	1a0011de <xQueueGenericCreate>
1a0009e0:	4b1a      	ldr	r3, [pc, #104]	; (1a000a4c <main+0xb8>)
1a0009e2:	6018      	str	r0, [r3, #0]
1a0009e4:	b320      	cbz	r0, 1a000a30 <main+0x9c>
       xTaskCreate(
1a0009e6:	2400      	movs	r4, #0
1a0009e8:	9401      	str	r4, [sp, #4]
1a0009ea:	2303      	movs	r3, #3
1a0009ec:	9300      	str	r3, [sp, #0]
1a0009ee:	4623      	mov	r3, r4
1a0009f0:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
1a0009f4:	4916      	ldr	r1, [pc, #88]	; (1a000a50 <main+0xbc>)
1a0009f6:	4817      	ldr	r0, [pc, #92]	; (1a000a54 <main+0xc0>)
1a0009f8:	f001 f87d 	bl	1a001af6 <xTaskCreate>
       xTaskCreate(
1a0009fc:	9401      	str	r4, [sp, #4]
1a0009fe:	2302      	movs	r3, #2
1a000a00:	9300      	str	r3, [sp, #0]
1a000a02:	4623      	mov	r3, r4
1a000a04:	f44f 7261 	mov.w	r2, #900	; 0x384
1a000a08:	4913      	ldr	r1, [pc, #76]	; (1a000a58 <main+0xc4>)
1a000a0a:	4814      	ldr	r0, [pc, #80]	; (1a000a5c <main+0xc8>)
1a000a0c:	f001 f873 	bl	1a001af6 <xTaskCreate>
       xTaskCreate(
1a000a10:	9401      	str	r4, [sp, #4]
1a000a12:	2301      	movs	r3, #1
1a000a14:	9300      	str	r3, [sp, #0]
1a000a16:	4623      	mov	r3, r4
1a000a18:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
1a000a1c:	4910      	ldr	r1, [pc, #64]	; (1a000a60 <main+0xcc>)
1a000a1e:	4811      	ldr	r0, [pc, #68]	; (1a000a64 <main+0xd0>)
1a000a20:	f001 f869 	bl	1a001af6 <xTaskCreate>
   if ( 0 == Error_state) {
1a000a24:	b935      	cbnz	r5, 1a000a34 <main+0xa0>
   vTaskStartScheduler();
1a000a26:	f001 f899 	bl	1a001b5c <vTaskStartScheduler>
1a000a2a:	e7fe      	b.n	1a000a2a <main+0x96>
	   Error_state = 1;
1a000a2c:	2501      	movs	r5, #1
1a000a2e:	e7d2      	b.n	1a0009d6 <main+0x42>
	   Error_state = 1;
1a000a30:	2501      	movs	r5, #1
1a000a32:	e7d8      	b.n	1a0009e6 <main+0x52>
	   uartWriteString( UART_USB, "No se pudo iniciar el sistema correctamente\r\n" );
1a000a34:	490c      	ldr	r1, [pc, #48]	; (1a000a68 <main+0xd4>)
1a000a36:	2003      	movs	r0, #3
1a000a38:	f003 f893 	bl	1a003b62 <uartWriteString>
1a000a3c:	e7f5      	b.n	1a000a2a <main+0x96>
1a000a3e:	bf00      	nop
1a000a40:	100000d8 	.word	0x100000d8
1a000a44:	1a005de0 	.word	0x1a005de0
1a000a48:	100000d4 	.word	0x100000d4
1a000a4c:	100000dc 	.word	0x100000dc
1a000a50:	1a005df0 	.word	0x1a005df0
1a000a54:	1a000625 	.word	0x1a000625
1a000a58:	1a005dfc 	.word	0x1a005dfc
1a000a5c:	1a0006b9 	.word	0x1a0006b9
1a000a60:	1a005e08 	.word	0x1a005e08
1a000a64:	1a000809 	.word	0x1a000809
1a000a68:	1a005e18 	.word	0x1a005e18

1a000a6c <GPIO0_IRQHandler>:

		}
	}
}

void GPIO0_IRQHandler(void){
1a000a6c:	b500      	push	{lr}
1a000a6e:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE; //Comenzamos definiendo la variable
1a000a70:	2300      	movs	r3, #0
1a000a72:	9301      	str	r3, [sp, #4]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a000a74:	4b0e      	ldr	r3, [pc, #56]	; (1a000ab0 <GPIO0_IRQHandler+0x44>)
1a000a76:	69db      	ldr	r3, [r3, #28]

	if (Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH0){ //Verificamos que la interrupción es la esperada
1a000a78:	f013 0f01 	tst.w	r3, #1
1a000a7c:	d10c      	bne.n	1a000a98 <GPIO0_IRQHandler+0x2c>
		Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT, PININTCH0);  //Borramos el flag de interrupción
		//codigo a ejecutar si ocurrió la interrupción
		teclaPress = Tecla1;
		xQueueSendFromISR( teclaQueue, &teclaPress, &xHigherPriorityTaskWoken );
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a000a7e:	9b01      	ldr	r3, [sp, #4]
1a000a80:	b13b      	cbz	r3, 1a000a92 <GPIO0_IRQHandler+0x26>
1a000a82:	4b0c      	ldr	r3, [pc, #48]	; (1a000ab4 <GPIO0_IRQHandler+0x48>)
1a000a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000a88:	601a      	str	r2, [r3, #0]
1a000a8a:	f3bf 8f4f 	dsb	sy
1a000a8e:	f3bf 8f6f 	isb	sy
}
1a000a92:	b003      	add	sp, #12
1a000a94:	f85d fb04 	ldr.w	pc, [sp], #4
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a000a98:	4b05      	ldr	r3, [pc, #20]	; (1a000ab0 <GPIO0_IRQHandler+0x44>)
1a000a9a:	2201      	movs	r2, #1
1a000a9c:	625a      	str	r2, [r3, #36]	; 0x24
		teclaPress = Tecla1;
1a000a9e:	4906      	ldr	r1, [pc, #24]	; (1a000ab8 <GPIO0_IRQHandler+0x4c>)
1a000aa0:	2300      	movs	r3, #0
1a000aa2:	700b      	strb	r3, [r1, #0]
		xQueueSendFromISR( teclaQueue, &teclaPress, &xHigherPriorityTaskWoken );
1a000aa4:	aa01      	add	r2, sp, #4
1a000aa6:	4805      	ldr	r0, [pc, #20]	; (1a000abc <GPIO0_IRQHandler+0x50>)
1a000aa8:	6800      	ldr	r0, [r0, #0]
1a000aaa:	f000 fc7d 	bl	1a0013a8 <xQueueGenericSendFromISR>
1a000aae:	e7e6      	b.n	1a000a7e <GPIO0_IRQHandler+0x12>
1a000ab0:	40087000 	.word	0x40087000
1a000ab4:	e000ed04 	.word	0xe000ed04
1a000ab8:	10002b44 	.word	0x10002b44
1a000abc:	100000dc 	.word	0x100000dc

1a000ac0 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void){
1a000ac0:	b500      	push	{lr}
1a000ac2:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE; //Comenzamos definiendo la variable
1a000ac4:	2300      	movs	r3, #0
1a000ac6:	9301      	str	r3, [sp, #4]
	return pPININT->RISE;
1a000ac8:	4b0f      	ldr	r3, [pc, #60]	; (1a000b08 <GPIO1_IRQHandler+0x48>)
1a000aca:	69db      	ldr	r3, [r3, #28]

	if (Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH1){ //Verificamos que la interrupción es la esperada
1a000acc:	f013 0f02 	tst.w	r3, #2
1a000ad0:	d10c      	bne.n	1a000aec <GPIO1_IRQHandler+0x2c>
		Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT, PININTCH1);  //Borramos el flag de interrupción
		//codigo a ejecutar si ocurrió la interrupción
		teclaPress = Tecla2;
		xQueueSendFromISR( teclaQueue, &teclaPress, &xHigherPriorityTaskWoken );
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a000ad2:	9b01      	ldr	r3, [sp, #4]
1a000ad4:	b13b      	cbz	r3, 1a000ae6 <GPIO1_IRQHandler+0x26>
1a000ad6:	4b0d      	ldr	r3, [pc, #52]	; (1a000b0c <GPIO1_IRQHandler+0x4c>)
1a000ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000adc:	601a      	str	r2, [r3, #0]
1a000ade:	f3bf 8f4f 	dsb	sy
1a000ae2:	f3bf 8f6f 	isb	sy
}
1a000ae6:	b003      	add	sp, #12
1a000ae8:	f85d fb04 	ldr.w	pc, [sp], #4
	pPININT->IST = pins;
1a000aec:	4b06      	ldr	r3, [pc, #24]	; (1a000b08 <GPIO1_IRQHandler+0x48>)
1a000aee:	2202      	movs	r2, #2
1a000af0:	625a      	str	r2, [r3, #36]	; 0x24
		teclaPress = Tecla2;
1a000af2:	4907      	ldr	r1, [pc, #28]	; (1a000b10 <GPIO1_IRQHandler+0x50>)
1a000af4:	2301      	movs	r3, #1
1a000af6:	700b      	strb	r3, [r1, #0]
		xQueueSendFromISR( teclaQueue, &teclaPress, &xHigherPriorityTaskWoken );
1a000af8:	2300      	movs	r3, #0
1a000afa:	aa01      	add	r2, sp, #4
1a000afc:	4805      	ldr	r0, [pc, #20]	; (1a000b14 <GPIO1_IRQHandler+0x54>)
1a000afe:	6800      	ldr	r0, [r0, #0]
1a000b00:	f000 fc52 	bl	1a0013a8 <xQueueGenericSendFromISR>
1a000b04:	e7e5      	b.n	1a000ad2 <GPIO1_IRQHandler+0x12>
1a000b06:	bf00      	nop
1a000b08:	40087000 	.word	0x40087000
1a000b0c:	e000ed04 	.word	0xe000ed04
1a000b10:	10002b44 	.word	0x10002b44
1a000b14:	100000dc 	.word	0x100000dc

1a000b18 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void){
1a000b18:	b500      	push	{lr}
1a000b1a:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE; //Comenzamos definiendo la variable
1a000b1c:	2300      	movs	r3, #0
1a000b1e:	9301      	str	r3, [sp, #4]
	return pPININT->RISE;
1a000b20:	4b0f      	ldr	r3, [pc, #60]	; (1a000b60 <GPIO2_IRQHandler+0x48>)
1a000b22:	69db      	ldr	r3, [r3, #28]

	if (Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH2){ //Verificamos que la interrupción es la esperada
1a000b24:	f013 0f04 	tst.w	r3, #4
1a000b28:	d10c      	bne.n	1a000b44 <GPIO2_IRQHandler+0x2c>
		Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT, PININTCH2);  //Borramos el flag de interrupción
		//codigo a ejecutar si ocurrió la interrupción
		teclaPress = Tecla3;
		xQueueSendFromISR( teclaQueue, &teclaPress, &xHigherPriorityTaskWoken );
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a000b2a:	9b01      	ldr	r3, [sp, #4]
1a000b2c:	b13b      	cbz	r3, 1a000b3e <GPIO2_IRQHandler+0x26>
1a000b2e:	4b0d      	ldr	r3, [pc, #52]	; (1a000b64 <GPIO2_IRQHandler+0x4c>)
1a000b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b34:	601a      	str	r2, [r3, #0]
1a000b36:	f3bf 8f4f 	dsb	sy
1a000b3a:	f3bf 8f6f 	isb	sy
}
1a000b3e:	b003      	add	sp, #12
1a000b40:	f85d fb04 	ldr.w	pc, [sp], #4
	pPININT->IST = pins;
1a000b44:	4b06      	ldr	r3, [pc, #24]	; (1a000b60 <GPIO2_IRQHandler+0x48>)
1a000b46:	2204      	movs	r2, #4
1a000b48:	625a      	str	r2, [r3, #36]	; 0x24
		teclaPress = Tecla3;
1a000b4a:	4907      	ldr	r1, [pc, #28]	; (1a000b68 <GPIO2_IRQHandler+0x50>)
1a000b4c:	2302      	movs	r3, #2
1a000b4e:	700b      	strb	r3, [r1, #0]
		xQueueSendFromISR( teclaQueue, &teclaPress, &xHigherPriorityTaskWoken );
1a000b50:	2300      	movs	r3, #0
1a000b52:	446a      	add	r2, sp
1a000b54:	4805      	ldr	r0, [pc, #20]	; (1a000b6c <GPIO2_IRQHandler+0x54>)
1a000b56:	6800      	ldr	r0, [r0, #0]
1a000b58:	f000 fc26 	bl	1a0013a8 <xQueueGenericSendFromISR>
1a000b5c:	e7e5      	b.n	1a000b2a <GPIO2_IRQHandler+0x12>
1a000b5e:	bf00      	nop
1a000b60:	40087000 	.word	0x40087000
1a000b64:	e000ed04 	.word	0xe000ed04
1a000b68:	10002b44 	.word	0x10002b44
1a000b6c:	100000dc 	.word	0x100000dc

1a000b70 <GPIO3_IRQHandler>:

void GPIO3_IRQHandler(void){
1a000b70:	b500      	push	{lr}
1a000b72:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE; //Comenzamos definiendo la variable
1a000b74:	2300      	movs	r3, #0
1a000b76:	9301      	str	r3, [sp, #4]
	return pPININT->RISE;
1a000b78:	4b0f      	ldr	r3, [pc, #60]	; (1a000bb8 <GPIO3_IRQHandler+0x48>)
1a000b7a:	69db      	ldr	r3, [r3, #28]

	if (Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH3){ //Verificamos que la interrupción es la esperada
1a000b7c:	f013 0f08 	tst.w	r3, #8
1a000b80:	d10c      	bne.n	1a000b9c <GPIO3_IRQHandler+0x2c>
		Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT, PININTCH3);  //Borramos el flag de interrupción
		//codigo a ejecutar si ocurrió la interrupción
		teclaPress = Tecla4;
		xQueueSendFromISR( teclaQueue, &teclaPress, &xHigherPriorityTaskWoken );
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
1a000b82:	9b01      	ldr	r3, [sp, #4]
1a000b84:	b13b      	cbz	r3, 1a000b96 <GPIO3_IRQHandler+0x26>
1a000b86:	4b0d      	ldr	r3, [pc, #52]	; (1a000bbc <GPIO3_IRQHandler+0x4c>)
1a000b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b8c:	601a      	str	r2, [r3, #0]
1a000b8e:	f3bf 8f4f 	dsb	sy
1a000b92:	f3bf 8f6f 	isb	sy
}
1a000b96:	b003      	add	sp, #12
1a000b98:	f85d fb04 	ldr.w	pc, [sp], #4
	pPININT->IST = pins;
1a000b9c:	4b06      	ldr	r3, [pc, #24]	; (1a000bb8 <GPIO3_IRQHandler+0x48>)
1a000b9e:	2208      	movs	r2, #8
1a000ba0:	625a      	str	r2, [r3, #36]	; 0x24
		teclaPress = Tecla4;
1a000ba2:	4907      	ldr	r1, [pc, #28]	; (1a000bc0 <GPIO3_IRQHandler+0x50>)
1a000ba4:	2303      	movs	r3, #3
1a000ba6:	700b      	strb	r3, [r1, #0]
		xQueueSendFromISR( teclaQueue, &teclaPress, &xHigherPriorityTaskWoken );
1a000ba8:	2300      	movs	r3, #0
1a000baa:	aa01      	add	r2, sp, #4
1a000bac:	4805      	ldr	r0, [pc, #20]	; (1a000bc4 <GPIO3_IRQHandler+0x54>)
1a000bae:	6800      	ldr	r0, [r0, #0]
1a000bb0:	f000 fbfa 	bl	1a0013a8 <xQueueGenericSendFromISR>
1a000bb4:	e7e5      	b.n	1a000b82 <GPIO3_IRQHandler+0x12>
1a000bb6:	bf00      	nop
1a000bb8:	40087000 	.word	0x40087000
1a000bbc:	e000ed04 	.word	0xe000ed04
1a000bc0:	10002b44 	.word	0x10002b44
1a000bc4:	100000dc 	.word	0x100000dc

1a000bc8 <initialise_monitor_handles>:
}
1a000bc8:	4770      	bx	lr
1a000bca:	Address 0x000000001a000bca is out of bounds.


1a000bcc <Reset_Handler>:
void Reset_Handler(void) {
1a000bcc:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000bce:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000bd0:	4b19      	ldr	r3, [pc, #100]	; (1a000c38 <Reset_Handler+0x6c>)
1a000bd2:	4a1a      	ldr	r2, [pc, #104]	; (1a000c3c <Reset_Handler+0x70>)
1a000bd4:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000bd6:	3304      	adds	r3, #4
1a000bd8:	4a19      	ldr	r2, [pc, #100]	; (1a000c40 <Reset_Handler+0x74>)
1a000bda:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000bdc:	2300      	movs	r3, #0
1a000bde:	e005      	b.n	1a000bec <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000be0:	4a18      	ldr	r2, [pc, #96]	; (1a000c44 <Reset_Handler+0x78>)
1a000be2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000be6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000bea:	3301      	adds	r3, #1
1a000bec:	2b07      	cmp	r3, #7
1a000bee:	d9f7      	bls.n	1a000be0 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000bf0:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000bf2:	4b15      	ldr	r3, [pc, #84]	; (1a000c48 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000bf4:	e007      	b.n	1a000c06 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000bf6:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000bfa:	689a      	ldr	r2, [r3, #8]
1a000bfc:	6859      	ldr	r1, [r3, #4]
1a000bfe:	6818      	ldr	r0, [r3, #0]
1a000c00:	f7ff fac3 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000c04:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000c06:	4a11      	ldr	r2, [pc, #68]	; (1a000c4c <Reset_Handler+0x80>)
1a000c08:	4293      	cmp	r3, r2
1a000c0a:	d3f4      	bcc.n	1a000bf6 <Reset_Handler+0x2a>
1a000c0c:	e006      	b.n	1a000c1c <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000c0e:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000c10:	6859      	ldr	r1, [r3, #4]
1a000c12:	f854 0b08 	ldr.w	r0, [r4], #8
1a000c16:	f7ff fac7 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000c1a:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000c1c:	4a0c      	ldr	r2, [pc, #48]	; (1a000c50 <Reset_Handler+0x84>)
1a000c1e:	4293      	cmp	r3, r2
1a000c20:	d3f5      	bcc.n	1a000c0e <Reset_Handler+0x42>
    SystemInit();
1a000c22:	f002 ff13 	bl	1a003a4c <SystemInit>
    __libc_init_array();
1a000c26:	f004 fafb 	bl	1a005220 <__libc_init_array>
    initialise_monitor_handles();
1a000c2a:	f7ff ffcd 	bl	1a000bc8 <initialise_monitor_handles>
    main();
1a000c2e:	f7ff feb1 	bl	1a000994 <main>
        __asm__ volatile("wfi");
1a000c32:	bf30      	wfi
1a000c34:	e7fd      	b.n	1a000c32 <Reset_Handler+0x66>
1a000c36:	bf00      	nop
1a000c38:	40053100 	.word	0x40053100
1a000c3c:	10df1000 	.word	0x10df1000
1a000c40:	01dff7ff 	.word	0x01dff7ff
1a000c44:	e000e280 	.word	0xe000e280
1a000c48:	1a000114 	.word	0x1a000114
1a000c4c:	1a000150 	.word	0x1a000150
1a000c50:	1a000178 	.word	0x1a000178

1a000c54 <_fini>:
void _fini(void) {}
1a000c54:	4770      	bx	lr

1a000c56 <_init>:
void _init(void) {}
1a000c56:	4770      	bx	lr

1a000c58 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000c58:	2309      	movs	r3, #9
1a000c5a:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c60:	4770      	bx	lr

1a000c62 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000c62:	2358      	movs	r3, #88	; 0x58
1a000c64:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c6a:	4770      	bx	lr

1a000c6c <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000c6c:	2902      	cmp	r1, #2
1a000c6e:	d801      	bhi.n	1a000c74 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a000c70:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a000c72:	4770      	bx	lr
       SET_ERR(EBADF);
1a000c74:	2309      	movs	r3, #9
1a000c76:	6003      	str	r3, [r0, #0]
       return -1;
1a000c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c7c:	4770      	bx	lr

1a000c7e <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000c7e:	2358      	movs	r3, #88	; 0x58
1a000c80:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c86:	4770      	bx	lr

1a000c88 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000c88:	2902      	cmp	r1, #2
1a000c8a:	d81f      	bhi.n	1a000ccc <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000c90:	461d      	mov	r5, r3
1a000c92:	4617      	mov	r7, r2
1a000c94:	4606      	mov	r6, r0
  size_t i = 0;
1a000c96:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000c98:	42ac      	cmp	r4, r5
1a000c9a:	d211      	bcs.n	1a000cc0 <_read_r+0x38>
         int c = __stdio_getchar();
1a000c9c:	f001 ffa9 	bl	1a002bf2 <__stdio_getchar>
         if( c != -1 ){
1a000ca0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000ca4:	d0f8      	beq.n	1a000c98 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000ca6:	f104 0801 	add.w	r8, r4, #1
1a000caa:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000cac:	280d      	cmp	r0, #13
1a000cae:	d003      	beq.n	1a000cb8 <_read_r+0x30>
1a000cb0:	280a      	cmp	r0, #10
1a000cb2:	d001      	beq.n	1a000cb8 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000cb4:	4644      	mov	r4, r8
1a000cb6:	e7ef      	b.n	1a000c98 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000cb8:	f001 ff9b 	bl	1a002bf2 <__stdio_getchar>
               return i;
1a000cbc:	4640      	mov	r0, r8
1a000cbe:	e003      	b.n	1a000cc8 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000cc0:	2313      	movs	r3, #19
1a000cc2:	6033      	str	r3, [r6, #0]
      return -1;
1a000cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000ccc:	2313      	movs	r3, #19
1a000cce:	6003      	str	r3, [r0, #0]
      return -1;
1a000cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000cd4:	4770      	bx	lr

1a000cd6 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000cd6:	2902      	cmp	r1, #2
1a000cd8:	d80c      	bhi.n	1a000cf4 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000cda:	b570      	push	{r4, r5, r6, lr}
1a000cdc:	461d      	mov	r5, r3
1a000cde:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000ce0:	2400      	movs	r4, #0
1a000ce2:	e003      	b.n	1a000cec <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a000ce4:	5d30      	ldrb	r0, [r6, r4]
1a000ce6:	f001 ff7f 	bl	1a002be8 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000cea:	3401      	adds	r4, #1
1a000cec:	42ac      	cmp	r4, r5
1a000cee:	d3f9      	bcc.n	1a000ce4 <_write_r+0xe>
       return n;
1a000cf0:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000cf2:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000cf4:	2313      	movs	r3, #19
1a000cf6:	6003      	str	r3, [r0, #0]
       return -1;
1a000cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000cfc:	4770      	bx	lr
1a000cfe:	Address 0x000000001a000cfe is out of bounds.


1a000d00 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000d00:	4b05      	ldr	r3, [pc, #20]	; (1a000d18 <_sbrk_r+0x18>)
1a000d02:	681b      	ldr	r3, [r3, #0]
1a000d04:	b123      	cbz	r3, 1a000d10 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000d06:	4b04      	ldr	r3, [pc, #16]	; (1a000d18 <_sbrk_r+0x18>)
1a000d08:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000d0a:	4401      	add	r1, r0
1a000d0c:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000d0e:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000d10:	4b01      	ldr	r3, [pc, #4]	; (1a000d18 <_sbrk_r+0x18>)
1a000d12:	4a02      	ldr	r2, [pc, #8]	; (1a000d1c <_sbrk_r+0x1c>)
1a000d14:	601a      	str	r2, [r3, #0]
1a000d16:	e7f6      	b.n	1a000d06 <_sbrk_r+0x6>
1a000d18:	100000e0 	.word	0x100000e0
1a000d1c:	10002b90 	.word	0x10002b90

1a000d20 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a000d20:	4a12      	ldr	r2, [pc, #72]	; (1a000d6c <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a000d22:	f012 0f07 	tst.w	r2, #7
1a000d26:	d01e      	beq.n	1a000d66 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a000d28:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000d2a:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a000d2e:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a000d32:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000d34:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a000d36:	480e      	ldr	r0, [pc, #56]	; (1a000d70 <prvHeapInit+0x50>)
1a000d38:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a000d3a:	2100      	movs	r1, #0
1a000d3c:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a000d3e:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a000d40:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000d42:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a000d46:	480b      	ldr	r0, [pc, #44]	; (1a000d74 <prvHeapInit+0x54>)
1a000d48:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a000d4a:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a000d4c:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a000d4e:	1a99      	subs	r1, r3, r2
1a000d50:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a000d52:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000d54:	4b08      	ldr	r3, [pc, #32]	; (1a000d78 <prvHeapInit+0x58>)
1a000d56:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000d58:	4b08      	ldr	r3, [pc, #32]	; (1a000d7c <prvHeapInit+0x5c>)
1a000d5a:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a000d5c:	4b08      	ldr	r3, [pc, #32]	; (1a000d80 <prvHeapInit+0x60>)
1a000d5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a000d62:	601a      	str	r2, [r3, #0]
}
1a000d64:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a000d66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a000d6a:	e7e4      	b.n	1a000d36 <prvHeapInit+0x16>
1a000d6c:	100000e8 	.word	0x100000e8
1a000d70:	100020f4 	.word	0x100020f4
1a000d74:	100000e4 	.word	0x100000e4
1a000d78:	100020f0 	.word	0x100020f0
1a000d7c:	100020ec 	.word	0x100020ec
1a000d80:	100020e8 	.word	0x100020e8

1a000d84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a000d84:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a000d86:	4b13      	ldr	r3, [pc, #76]	; (1a000dd4 <prvInsertBlockIntoFreeList+0x50>)
1a000d88:	681a      	ldr	r2, [r3, #0]
1a000d8a:	4282      	cmp	r2, r0
1a000d8c:	d31b      	bcc.n	1a000dc6 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a000d8e:	6859      	ldr	r1, [r3, #4]
1a000d90:	185c      	adds	r4, r3, r1
1a000d92:	4284      	cmp	r4, r0
1a000d94:	d103      	bne.n	1a000d9e <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a000d96:	6840      	ldr	r0, [r0, #4]
1a000d98:	4401      	add	r1, r0
1a000d9a:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a000d9c:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a000d9e:	6841      	ldr	r1, [r0, #4]
1a000da0:	1844      	adds	r4, r0, r1
1a000da2:	42a2      	cmp	r2, r4
1a000da4:	d113      	bne.n	1a000dce <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a000da6:	4c0c      	ldr	r4, [pc, #48]	; (1a000dd8 <prvInsertBlockIntoFreeList+0x54>)
1a000da8:	6824      	ldr	r4, [r4, #0]
1a000daa:	42a2      	cmp	r2, r4
1a000dac:	d00d      	beq.n	1a000dca <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a000dae:	6852      	ldr	r2, [r2, #4]
1a000db0:	4411      	add	r1, r2
1a000db2:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a000db4:	681a      	ldr	r2, [r3, #0]
1a000db6:	6812      	ldr	r2, [r2, #0]
1a000db8:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a000dba:	4298      	cmp	r0, r3
1a000dbc:	d000      	beq.n	1a000dc0 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a000dbe:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a000dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000dc4:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a000dc6:	4613      	mov	r3, r2
1a000dc8:	e7de      	b.n	1a000d88 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a000dca:	6004      	str	r4, [r0, #0]
1a000dcc:	e7f5      	b.n	1a000dba <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a000dce:	6002      	str	r2, [r0, #0]
1a000dd0:	e7f3      	b.n	1a000dba <prvInsertBlockIntoFreeList+0x36>
1a000dd2:	bf00      	nop
1a000dd4:	100020f4 	.word	0x100020f4
1a000dd8:	100000e4 	.word	0x100000e4

1a000ddc <pvPortMalloc>:
{
1a000ddc:	b570      	push	{r4, r5, r6, lr}
1a000dde:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a000de0:	f000 ff06 	bl	1a001bf0 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a000de4:	4b3f      	ldr	r3, [pc, #252]	; (1a000ee4 <pvPortMalloc+0x108>)
1a000de6:	681b      	ldr	r3, [r3, #0]
1a000de8:	b1a3      	cbz	r3, 1a000e14 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a000dea:	4b3f      	ldr	r3, [pc, #252]	; (1a000ee8 <pvPortMalloc+0x10c>)
1a000dec:	681b      	ldr	r3, [r3, #0]
1a000dee:	421c      	tst	r4, r3
1a000df0:	d013      	beq.n	1a000e1a <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
1a000df2:	f000 ff97 	bl	1a001d24 <xTaskResumeAll>
void *pvReturn = NULL;
1a000df6:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a000df8:	f000 fc9c 	bl	1a001734 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a000dfc:	f016 0f07 	tst.w	r6, #7
1a000e00:	d06e      	beq.n	1a000ee0 <pvPortMalloc+0x104>
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

1a000e02:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e06:	f383 8811 	msr	BASEPRI, r3
1a000e0a:	f3bf 8f6f 	isb	sy
1a000e0e:	f3bf 8f4f 	dsb	sy
1a000e12:	e7fe      	b.n	1a000e12 <pvPortMalloc+0x36>
			prvHeapInit();
1a000e14:	f7ff ff84 	bl	1a000d20 <prvHeapInit>
1a000e18:	e7e7      	b.n	1a000dea <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
1a000e1a:	b194      	cbz	r4, 1a000e42 <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a000e1c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a000e1e:	f014 0f07 	tst.w	r4, #7
1a000e22:	d00e      	beq.n	1a000e42 <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000e24:	f024 0407 	bic.w	r4, r4, #7
1a000e28:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000e2a:	f004 0307 	and.w	r3, r4, #7
1a000e2e:	b143      	cbz	r3, 1a000e42 <pvPortMalloc+0x66>
1a000e30:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e34:	f383 8811 	msr	BASEPRI, r3
1a000e38:	f3bf 8f6f 	isb	sy
1a000e3c:	f3bf 8f4f 	dsb	sy
1a000e40:	e7fe      	b.n	1a000e40 <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a000e42:	b134      	cbz	r4, 1a000e52 <pvPortMalloc+0x76>
1a000e44:	4b29      	ldr	r3, [pc, #164]	; (1a000eec <pvPortMalloc+0x110>)
1a000e46:	681b      	ldr	r3, [r3, #0]
1a000e48:	42a3      	cmp	r3, r4
1a000e4a:	d306      	bcc.n	1a000e5a <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a000e4c:	4b28      	ldr	r3, [pc, #160]	; (1a000ef0 <pvPortMalloc+0x114>)
1a000e4e:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000e50:	e009      	b.n	1a000e66 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a000e52:	f000 ff67 	bl	1a001d24 <xTaskResumeAll>
void *pvReturn = NULL;
1a000e56:	2600      	movs	r6, #0
1a000e58:	e7ce      	b.n	1a000df8 <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
1a000e5a:	f000 ff63 	bl	1a001d24 <xTaskResumeAll>
void *pvReturn = NULL;
1a000e5e:	2600      	movs	r6, #0
1a000e60:	e7ca      	b.n	1a000df8 <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
1a000e62:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a000e64:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000e66:	686a      	ldr	r2, [r5, #4]
1a000e68:	42a2      	cmp	r2, r4
1a000e6a:	d202      	bcs.n	1a000e72 <pvPortMalloc+0x96>
1a000e6c:	682a      	ldr	r2, [r5, #0]
1a000e6e:	2a00      	cmp	r2, #0
1a000e70:	d1f7      	bne.n	1a000e62 <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a000e72:	4a1c      	ldr	r2, [pc, #112]	; (1a000ee4 <pvPortMalloc+0x108>)
1a000e74:	6812      	ldr	r2, [r2, #0]
1a000e76:	42aa      	cmp	r2, r5
1a000e78:	d014      	beq.n	1a000ea4 <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a000e7a:	681e      	ldr	r6, [r3, #0]
1a000e7c:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a000e7e:	682a      	ldr	r2, [r5, #0]
1a000e80:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a000e82:	686b      	ldr	r3, [r5, #4]
1a000e84:	1b1b      	subs	r3, r3, r4
1a000e86:	2b10      	cmp	r3, #16
1a000e88:	d914      	bls.n	1a000eb4 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a000e8a:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000e8c:	f010 0f07 	tst.w	r0, #7
1a000e90:	d00c      	beq.n	1a000eac <pvPortMalloc+0xd0>
1a000e92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e96:	f383 8811 	msr	BASEPRI, r3
1a000e9a:	f3bf 8f6f 	isb	sy
1a000e9e:	f3bf 8f4f 	dsb	sy
1a000ea2:	e7fe      	b.n	1a000ea2 <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a000ea4:	f000 ff3e 	bl	1a001d24 <xTaskResumeAll>
void *pvReturn = NULL;
1a000ea8:	2600      	movs	r6, #0
1a000eaa:	e7a5      	b.n	1a000df8 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a000eac:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a000eae:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a000eb0:	f7ff ff68 	bl	1a000d84 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a000eb4:	686a      	ldr	r2, [r5, #4]
1a000eb6:	490d      	ldr	r1, [pc, #52]	; (1a000eec <pvPortMalloc+0x110>)
1a000eb8:	680b      	ldr	r3, [r1, #0]
1a000eba:	1a9b      	subs	r3, r3, r2
1a000ebc:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a000ebe:	490d      	ldr	r1, [pc, #52]	; (1a000ef4 <pvPortMalloc+0x118>)
1a000ec0:	6809      	ldr	r1, [r1, #0]
1a000ec2:	428b      	cmp	r3, r1
1a000ec4:	d201      	bcs.n	1a000eca <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a000ec6:	490b      	ldr	r1, [pc, #44]	; (1a000ef4 <pvPortMalloc+0x118>)
1a000ec8:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a000eca:	4b07      	ldr	r3, [pc, #28]	; (1a000ee8 <pvPortMalloc+0x10c>)
1a000ecc:	681b      	ldr	r3, [r3, #0]
1a000ece:	4313      	orrs	r3, r2
1a000ed0:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a000ed2:	2300      	movs	r3, #0
1a000ed4:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a000ed6:	f000 ff25 	bl	1a001d24 <xTaskResumeAll>
		if( pvReturn == NULL )
1a000eda:	2e00      	cmp	r6, #0
1a000edc:	d18e      	bne.n	1a000dfc <pvPortMalloc+0x20>
1a000ede:	e78b      	b.n	1a000df8 <pvPortMalloc+0x1c>
}
1a000ee0:	4630      	mov	r0, r6
1a000ee2:	bd70      	pop	{r4, r5, r6, pc}
1a000ee4:	100000e4 	.word	0x100000e4
1a000ee8:	100020e8 	.word	0x100020e8
1a000eec:	100020ec 	.word	0x100020ec
1a000ef0:	100020f4 	.word	0x100020f4
1a000ef4:	100020f0 	.word	0x100020f0

1a000ef8 <vPortFree>:
	if( pv != NULL )
1a000ef8:	b380      	cbz	r0, 1a000f5c <vPortFree+0x64>
{
1a000efa:	b538      	push	{r3, r4, r5, lr}
1a000efc:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a000efe:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a000f02:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a000f06:	4916      	ldr	r1, [pc, #88]	; (1a000f60 <vPortFree+0x68>)
1a000f08:	6809      	ldr	r1, [r1, #0]
1a000f0a:	420a      	tst	r2, r1
1a000f0c:	d108      	bne.n	1a000f20 <vPortFree+0x28>
1a000f0e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f12:	f383 8811 	msr	BASEPRI, r3
1a000f16:	f3bf 8f6f 	isb	sy
1a000f1a:	f3bf 8f4f 	dsb	sy
1a000f1e:	e7fe      	b.n	1a000f1e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a000f20:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a000f24:	b140      	cbz	r0, 1a000f38 <vPortFree+0x40>
1a000f26:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f2a:	f383 8811 	msr	BASEPRI, r3
1a000f2e:	f3bf 8f6f 	isb	sy
1a000f32:	f3bf 8f4f 	dsb	sy
1a000f36:	e7fe      	b.n	1a000f36 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a000f38:	ea22 0201 	bic.w	r2, r2, r1
1a000f3c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a000f40:	f000 fe56 	bl	1a001bf0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a000f44:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a000f48:	4a06      	ldr	r2, [pc, #24]	; (1a000f64 <vPortFree+0x6c>)
1a000f4a:	6813      	ldr	r3, [r2, #0]
1a000f4c:	440b      	add	r3, r1
1a000f4e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a000f50:	4628      	mov	r0, r5
1a000f52:	f7ff ff17 	bl	1a000d84 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a000f56:	f000 fee5 	bl	1a001d24 <xTaskResumeAll>
}
1a000f5a:	bd38      	pop	{r3, r4, r5, pc}
1a000f5c:	4770      	bx	lr
1a000f5e:	bf00      	nop
1a000f60:	100020e8 	.word	0x100020e8
1a000f64:	100020ec 	.word	0x100020ec

1a000f68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000f68:	b510      	push	{r4, lr}
1a000f6a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000f6c:	f001 fbea 	bl	1a002744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000f70:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000f72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000f74:	429a      	cmp	r2, r3
1a000f76:	d004      	beq.n	1a000f82 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000f78:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000f7a:	f001 fc05 	bl	1a002788 <vPortExitCritical>

	return xReturn;
}
1a000f7e:	4620      	mov	r0, r4
1a000f80:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000f82:	2401      	movs	r4, #1
1a000f84:	e7f9      	b.n	1a000f7a <prvIsQueueFull+0x12>

1a000f86 <prvIsQueueEmpty>:
{
1a000f86:	b510      	push	{r4, lr}
1a000f88:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000f8a:	f001 fbdb 	bl	1a002744 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000f8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000f90:	b123      	cbz	r3, 1a000f9c <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a000f92:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a000f94:	f001 fbf8 	bl	1a002788 <vPortExitCritical>
}
1a000f98:	4620      	mov	r0, r4
1a000f9a:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000f9c:	2401      	movs	r4, #1
1a000f9e:	e7f9      	b.n	1a000f94 <prvIsQueueEmpty+0xe>

1a000fa0 <prvCopyDataToQueue>:
{
1a000fa0:	b570      	push	{r4, r5, r6, lr}
1a000fa2:	4604      	mov	r4, r0
1a000fa4:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000fa6:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000fa8:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000faa:	b95a      	cbnz	r2, 1a000fc4 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000fac:	6803      	ldr	r3, [r0, #0]
1a000fae:	b11b      	cbz	r3, 1a000fb8 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000fb0:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000fb2:	3501      	adds	r5, #1
1a000fb4:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000fb6:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000fb8:	6840      	ldr	r0, [r0, #4]
1a000fba:	f001 f8e5 	bl	1a002188 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000fbe:	2300      	movs	r3, #0
1a000fc0:	6063      	str	r3, [r4, #4]
1a000fc2:	e7f6      	b.n	1a000fb2 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000fc4:	b96e      	cbnz	r6, 1a000fe2 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000fc6:	6880      	ldr	r0, [r0, #8]
1a000fc8:	f004 f94e 	bl	1a005268 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000fcc:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000fce:	68a3      	ldr	r3, [r4, #8]
1a000fd0:	4413      	add	r3, r2
1a000fd2:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000fd4:	6862      	ldr	r2, [r4, #4]
1a000fd6:	4293      	cmp	r3, r2
1a000fd8:	d319      	bcc.n	1a00100e <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000fda:	6823      	ldr	r3, [r4, #0]
1a000fdc:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000fde:	2000      	movs	r0, #0
1a000fe0:	e7e7      	b.n	1a000fb2 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000fe2:	68c0      	ldr	r0, [r0, #12]
1a000fe4:	f004 f940 	bl	1a005268 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000fe8:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000fea:	4252      	negs	r2, r2
1a000fec:	68e3      	ldr	r3, [r4, #12]
1a000fee:	4413      	add	r3, r2
1a000ff0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000ff2:	6821      	ldr	r1, [r4, #0]
1a000ff4:	428b      	cmp	r3, r1
1a000ff6:	d202      	bcs.n	1a000ffe <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000ff8:	6863      	ldr	r3, [r4, #4]
1a000ffa:	441a      	add	r2, r3
1a000ffc:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a000ffe:	2e02      	cmp	r6, #2
1a001000:	d001      	beq.n	1a001006 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a001002:	2000      	movs	r0, #0
1a001004:	e7d5      	b.n	1a000fb2 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001006:	b125      	cbz	r5, 1a001012 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a001008:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a00100a:	2000      	movs	r0, #0
1a00100c:	e7d1      	b.n	1a000fb2 <prvCopyDataToQueue+0x12>
1a00100e:	2000      	movs	r0, #0
1a001010:	e7cf      	b.n	1a000fb2 <prvCopyDataToQueue+0x12>
1a001012:	2000      	movs	r0, #0
1a001014:	e7cd      	b.n	1a000fb2 <prvCopyDataToQueue+0x12>

1a001016 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a001016:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001018:	b172      	cbz	r2, 1a001038 <prvCopyDataFromQueue+0x22>
{
1a00101a:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a00101c:	68c3      	ldr	r3, [r0, #12]
1a00101e:	4413      	add	r3, r2
1a001020:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a001022:	6844      	ldr	r4, [r0, #4]
1a001024:	42a3      	cmp	r3, r4
1a001026:	d301      	bcc.n	1a00102c <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a001028:	6803      	ldr	r3, [r0, #0]
1a00102a:	60c3      	str	r3, [r0, #12]
1a00102c:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a00102e:	68c1      	ldr	r1, [r0, #12]
1a001030:	4620      	mov	r0, r4
1a001032:	f004 f919 	bl	1a005268 <memcpy>
}
1a001036:	bd10      	pop	{r4, pc}
1a001038:	4770      	bx	lr

1a00103a <prvUnlockQueue>:
{
1a00103a:	b538      	push	{r3, r4, r5, lr}
1a00103c:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a00103e:	f001 fb81 	bl	1a002744 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a001042:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a001046:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001048:	e003      	b.n	1a001052 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a00104a:	f001 f887 	bl	1a00215c <vTaskMissedYield>
			--cTxLock;
1a00104e:	3c01      	subs	r4, #1
1a001050:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001052:	2c00      	cmp	r4, #0
1a001054:	dd08      	ble.n	1a001068 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001056:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a001058:	b133      	cbz	r3, 1a001068 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00105a:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a00105e:	f000 ffeb 	bl	1a002038 <xTaskRemoveFromEventList>
1a001062:	2800      	cmp	r0, #0
1a001064:	d0f3      	beq.n	1a00104e <prvUnlockQueue+0x14>
1a001066:	e7f0      	b.n	1a00104a <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a001068:	23ff      	movs	r3, #255	; 0xff
1a00106a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a00106e:	f001 fb8b 	bl	1a002788 <vPortExitCritical>
	taskENTER_CRITICAL();
1a001072:	f001 fb67 	bl	1a002744 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a001076:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a00107a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a00107c:	e003      	b.n	1a001086 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a00107e:	f001 f86d 	bl	1a00215c <vTaskMissedYield>
				--cRxLock;
1a001082:	3c01      	subs	r4, #1
1a001084:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a001086:	2c00      	cmp	r4, #0
1a001088:	dd08      	ble.n	1a00109c <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00108a:	692b      	ldr	r3, [r5, #16]
1a00108c:	b133      	cbz	r3, 1a00109c <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00108e:	f105 0010 	add.w	r0, r5, #16
1a001092:	f000 ffd1 	bl	1a002038 <xTaskRemoveFromEventList>
1a001096:	2800      	cmp	r0, #0
1a001098:	d0f3      	beq.n	1a001082 <prvUnlockQueue+0x48>
1a00109a:	e7f0      	b.n	1a00107e <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a00109c:	23ff      	movs	r3, #255	; 0xff
1a00109e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a0010a2:	f001 fb71 	bl	1a002788 <vPortExitCritical>
}
1a0010a6:	bd38      	pop	{r3, r4, r5, pc}

1a0010a8 <xQueueGenericReset>:
{
1a0010a8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a0010aa:	b940      	cbnz	r0, 1a0010be <xQueueGenericReset+0x16>
1a0010ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010b0:	f383 8811 	msr	BASEPRI, r3
1a0010b4:	f3bf 8f6f 	isb	sy
1a0010b8:	f3bf 8f4f 	dsb	sy
1a0010bc:	e7fe      	b.n	1a0010bc <xQueueGenericReset+0x14>
1a0010be:	4604      	mov	r4, r0
1a0010c0:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a0010c2:	f001 fb3f 	bl	1a002744 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a0010c6:	6821      	ldr	r1, [r4, #0]
1a0010c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0010ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0010cc:	fb03 1002 	mla	r0, r3, r2, r1
1a0010d0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a0010d2:	2000      	movs	r0, #0
1a0010d4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a0010d6:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a0010d8:	3a01      	subs	r2, #1
1a0010da:	fb02 1303 	mla	r3, r2, r3, r1
1a0010de:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0010e0:	23ff      	movs	r3, #255	; 0xff
1a0010e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0010e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a0010ea:	b9a5      	cbnz	r5, 1a001116 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0010ec:	6923      	ldr	r3, [r4, #16]
1a0010ee:	b91b      	cbnz	r3, 1a0010f8 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a0010f0:	f001 fb4a 	bl	1a002788 <vPortExitCritical>
}
1a0010f4:	2001      	movs	r0, #1
1a0010f6:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0010f8:	f104 0010 	add.w	r0, r4, #16
1a0010fc:	f000 ff9c 	bl	1a002038 <xTaskRemoveFromEventList>
1a001100:	2800      	cmp	r0, #0
1a001102:	d0f5      	beq.n	1a0010f0 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a001104:	4b08      	ldr	r3, [pc, #32]	; (1a001128 <xQueueGenericReset+0x80>)
1a001106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00110a:	601a      	str	r2, [r3, #0]
1a00110c:	f3bf 8f4f 	dsb	sy
1a001110:	f3bf 8f6f 	isb	sy
1a001114:	e7ec      	b.n	1a0010f0 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a001116:	f104 0010 	add.w	r0, r4, #16
1a00111a:	f000 fa94 	bl	1a001646 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a00111e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001122:	f000 fa90 	bl	1a001646 <vListInitialise>
1a001126:	e7e3      	b.n	1a0010f0 <xQueueGenericReset+0x48>
1a001128:	e000ed04 	.word	0xe000ed04

1a00112c <prvInitialiseNewQueue>:
{
1a00112c:	b538      	push	{r3, r4, r5, lr}
1a00112e:	461d      	mov	r5, r3
1a001130:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a001132:	460b      	mov	r3, r1
1a001134:	b149      	cbz	r1, 1a00114a <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a001136:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a001138:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a00113a:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a00113c:	2101      	movs	r1, #1
1a00113e:	4620      	mov	r0, r4
1a001140:	f7ff ffb2 	bl	1a0010a8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a001144:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a001148:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a00114a:	6024      	str	r4, [r4, #0]
1a00114c:	e7f4      	b.n	1a001138 <prvInitialiseNewQueue+0xc>

1a00114e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00114e:	b940      	cbnz	r0, 1a001162 <xQueueGenericCreateStatic+0x14>
1a001150:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001154:	f383 8811 	msr	BASEPRI, r3
1a001158:	f3bf 8f6f 	isb	sy
1a00115c:	f3bf 8f4f 	dsb	sy
1a001160:	e7fe      	b.n	1a001160 <xQueueGenericCreateStatic+0x12>
	{
1a001162:	b510      	push	{r4, lr}
1a001164:	b084      	sub	sp, #16
1a001166:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a001168:	b153      	cbz	r3, 1a001180 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a00116a:	b192      	cbz	r2, 1a001192 <xQueueGenericCreateStatic+0x44>
1a00116c:	b989      	cbnz	r1, 1a001192 <xQueueGenericCreateStatic+0x44>
1a00116e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001172:	f383 8811 	msr	BASEPRI, r3
1a001176:	f3bf 8f6f 	isb	sy
1a00117a:	f3bf 8f4f 	dsb	sy
1a00117e:	e7fe      	b.n	1a00117e <xQueueGenericCreateStatic+0x30>
1a001180:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001184:	f383 8811 	msr	BASEPRI, r3
1a001188:	f3bf 8f6f 	isb	sy
1a00118c:	f3bf 8f4f 	dsb	sy
1a001190:	e7fe      	b.n	1a001190 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a001192:	b94a      	cbnz	r2, 1a0011a8 <xQueueGenericCreateStatic+0x5a>
1a001194:	b141      	cbz	r1, 1a0011a8 <xQueueGenericCreateStatic+0x5a>
1a001196:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00119a:	f383 8811 	msr	BASEPRI, r3
1a00119e:	f3bf 8f6f 	isb	sy
1a0011a2:	f3bf 8f4f 	dsb	sy
1a0011a6:	e7fe      	b.n	1a0011a6 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a0011a8:	2050      	movs	r0, #80	; 0x50
1a0011aa:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a0011ac:	9803      	ldr	r0, [sp, #12]
1a0011ae:	2850      	cmp	r0, #80	; 0x50
1a0011b0:	d008      	beq.n	1a0011c4 <xQueueGenericCreateStatic+0x76>
1a0011b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011b6:	f383 8811 	msr	BASEPRI, r3
1a0011ba:	f3bf 8f6f 	isb	sy
1a0011be:	f3bf 8f4f 	dsb	sy
1a0011c2:	e7fe      	b.n	1a0011c2 <xQueueGenericCreateStatic+0x74>
1a0011c4:	4620      	mov	r0, r4
1a0011c6:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a0011c8:	2301      	movs	r3, #1
1a0011ca:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0011ce:	9400      	str	r4, [sp, #0]
1a0011d0:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a0011d4:	f7ff ffaa 	bl	1a00112c <prvInitialiseNewQueue>
	}
1a0011d8:	4620      	mov	r0, r4
1a0011da:	b004      	add	sp, #16
1a0011dc:	bd10      	pop	{r4, pc}

1a0011de <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0011de:	b940      	cbnz	r0, 1a0011f2 <xQueueGenericCreate+0x14>
1a0011e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011e4:	f383 8811 	msr	BASEPRI, r3
1a0011e8:	f3bf 8f6f 	isb	sy
1a0011ec:	f3bf 8f4f 	dsb	sy
1a0011f0:	e7fe      	b.n	1a0011f0 <xQueueGenericCreate+0x12>
	{
1a0011f2:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0011f4:	b083      	sub	sp, #12
1a0011f6:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a0011f8:	b111      	cbz	r1, 1a001200 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0011fa:	fb01 f000 	mul.w	r0, r1, r0
1a0011fe:	e000      	b.n	1a001202 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a001200:	2000      	movs	r0, #0
1a001202:	4617      	mov	r7, r2
1a001204:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a001206:	3050      	adds	r0, #80	; 0x50
1a001208:	f7ff fde8 	bl	1a000ddc <pvPortMalloc>
		if( pxNewQueue != NULL )
1a00120c:	4605      	mov	r5, r0
1a00120e:	b150      	cbz	r0, 1a001226 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a001210:	2300      	movs	r3, #0
1a001212:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a001216:	9000      	str	r0, [sp, #0]
1a001218:	463b      	mov	r3, r7
1a00121a:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a00121e:	4621      	mov	r1, r4
1a001220:	4630      	mov	r0, r6
1a001222:	f7ff ff83 	bl	1a00112c <prvInitialiseNewQueue>
	}
1a001226:	4628      	mov	r0, r5
1a001228:	b003      	add	sp, #12
1a00122a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a00122c <xQueueGenericSend>:
{
1a00122c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00122e:	b085      	sub	sp, #20
1a001230:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a001232:	b160      	cbz	r0, 1a00124e <xQueueGenericSend+0x22>
1a001234:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001236:	b999      	cbnz	r1, 1a001260 <xQueueGenericSend+0x34>
1a001238:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00123a:	b18a      	cbz	r2, 1a001260 <xQueueGenericSend+0x34>
1a00123c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001240:	f383 8811 	msr	BASEPRI, r3
1a001244:	f3bf 8f6f 	isb	sy
1a001248:	f3bf 8f4f 	dsb	sy
1a00124c:	e7fe      	b.n	1a00124c <xQueueGenericSend+0x20>
1a00124e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001252:	f383 8811 	msr	BASEPRI, r3
1a001256:	f3bf 8f6f 	isb	sy
1a00125a:	f3bf 8f4f 	dsb	sy
1a00125e:	e7fe      	b.n	1a00125e <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001260:	2b02      	cmp	r3, #2
1a001262:	d10b      	bne.n	1a00127c <xQueueGenericSend+0x50>
1a001264:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a001266:	2a01      	cmp	r2, #1
1a001268:	d008      	beq.n	1a00127c <xQueueGenericSend+0x50>
1a00126a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00126e:	f383 8811 	msr	BASEPRI, r3
1a001272:	f3bf 8f6f 	isb	sy
1a001276:	f3bf 8f4f 	dsb	sy
1a00127a:	e7fe      	b.n	1a00127a <xQueueGenericSend+0x4e>
1a00127c:	461e      	mov	r6, r3
1a00127e:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001280:	f000 ff72 	bl	1a002168 <xTaskGetSchedulerState>
1a001284:	b950      	cbnz	r0, 1a00129c <xQueueGenericSend+0x70>
1a001286:	9b01      	ldr	r3, [sp, #4]
1a001288:	b153      	cbz	r3, 1a0012a0 <xQueueGenericSend+0x74>
1a00128a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00128e:	f383 8811 	msr	BASEPRI, r3
1a001292:	f3bf 8f6f 	isb	sy
1a001296:	f3bf 8f4f 	dsb	sy
1a00129a:	e7fe      	b.n	1a00129a <xQueueGenericSend+0x6e>
1a00129c:	2500      	movs	r5, #0
1a00129e:	e03a      	b.n	1a001316 <xQueueGenericSend+0xea>
1a0012a0:	2500      	movs	r5, #0
1a0012a2:	e038      	b.n	1a001316 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a0012a4:	4632      	mov	r2, r6
1a0012a6:	4639      	mov	r1, r7
1a0012a8:	4620      	mov	r0, r4
1a0012aa:	f7ff fe79 	bl	1a000fa0 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0012ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0012b0:	b94b      	cbnz	r3, 1a0012c6 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a0012b2:	b1a8      	cbz	r0, 1a0012e0 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a0012b4:	4b3b      	ldr	r3, [pc, #236]	; (1a0013a4 <xQueueGenericSend+0x178>)
1a0012b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0012ba:	601a      	str	r2, [r3, #0]
1a0012bc:	f3bf 8f4f 	dsb	sy
1a0012c0:	f3bf 8f6f 	isb	sy
1a0012c4:	e00c      	b.n	1a0012e0 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0012c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0012ca:	f000 feb5 	bl	1a002038 <xTaskRemoveFromEventList>
1a0012ce:	b138      	cbz	r0, 1a0012e0 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a0012d0:	4b34      	ldr	r3, [pc, #208]	; (1a0013a4 <xQueueGenericSend+0x178>)
1a0012d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0012d6:	601a      	str	r2, [r3, #0]
1a0012d8:	f3bf 8f4f 	dsb	sy
1a0012dc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a0012e0:	f001 fa52 	bl	1a002788 <vPortExitCritical>
				return pdPASS;
1a0012e4:	2001      	movs	r0, #1
}
1a0012e6:	b005      	add	sp, #20
1a0012e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a0012ea:	f001 fa4d 	bl	1a002788 <vPortExitCritical>
					return errQUEUE_FULL;
1a0012ee:	2000      	movs	r0, #0
1a0012f0:	e7f9      	b.n	1a0012e6 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0012f2:	a802      	add	r0, sp, #8
1a0012f4:	f000 fee6 	bl	1a0020c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0012f8:	2501      	movs	r5, #1
1a0012fa:	e019      	b.n	1a001330 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a0012fc:	2300      	movs	r3, #0
1a0012fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001302:	e021      	b.n	1a001348 <xQueueGenericSend+0x11c>
1a001304:	2300      	movs	r3, #0
1a001306:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00130a:	e023      	b.n	1a001354 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a00130c:	4620      	mov	r0, r4
1a00130e:	f7ff fe94 	bl	1a00103a <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001312:	f000 fd07 	bl	1a001d24 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a001316:	f001 fa15 	bl	1a002744 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a00131a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00131c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00131e:	429a      	cmp	r2, r3
1a001320:	d3c0      	bcc.n	1a0012a4 <xQueueGenericSend+0x78>
1a001322:	2e02      	cmp	r6, #2
1a001324:	d0be      	beq.n	1a0012a4 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001326:	9b01      	ldr	r3, [sp, #4]
1a001328:	2b00      	cmp	r3, #0
1a00132a:	d0de      	beq.n	1a0012ea <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a00132c:	2d00      	cmp	r5, #0
1a00132e:	d0e0      	beq.n	1a0012f2 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a001330:	f001 fa2a 	bl	1a002788 <vPortExitCritical>
		vTaskSuspendAll();
1a001334:	f000 fc5c 	bl	1a001bf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001338:	f001 fa04 	bl	1a002744 <vPortEnterCritical>
1a00133c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001340:	b25b      	sxtb	r3, r3
1a001342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001346:	d0d9      	beq.n	1a0012fc <xQueueGenericSend+0xd0>
1a001348:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a00134c:	b25b      	sxtb	r3, r3
1a00134e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001352:	d0d7      	beq.n	1a001304 <xQueueGenericSend+0xd8>
1a001354:	f001 fa18 	bl	1a002788 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001358:	a901      	add	r1, sp, #4
1a00135a:	a802      	add	r0, sp, #8
1a00135c:	f000 febe 	bl	1a0020dc <xTaskCheckForTimeOut>
1a001360:	b9c8      	cbnz	r0, 1a001396 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a001362:	4620      	mov	r0, r4
1a001364:	f7ff fe00 	bl	1a000f68 <prvIsQueueFull>
1a001368:	2800      	cmp	r0, #0
1a00136a:	d0cf      	beq.n	1a00130c <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a00136c:	9901      	ldr	r1, [sp, #4]
1a00136e:	f104 0010 	add.w	r0, r4, #16
1a001372:	f000 fe2d 	bl	1a001fd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001376:	4620      	mov	r0, r4
1a001378:	f7ff fe5f 	bl	1a00103a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a00137c:	f000 fcd2 	bl	1a001d24 <xTaskResumeAll>
1a001380:	2800      	cmp	r0, #0
1a001382:	d1c8      	bne.n	1a001316 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a001384:	4b07      	ldr	r3, [pc, #28]	; (1a0013a4 <xQueueGenericSend+0x178>)
1a001386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00138a:	601a      	str	r2, [r3, #0]
1a00138c:	f3bf 8f4f 	dsb	sy
1a001390:	f3bf 8f6f 	isb	sy
1a001394:	e7bf      	b.n	1a001316 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a001396:	4620      	mov	r0, r4
1a001398:	f7ff fe4f 	bl	1a00103a <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a00139c:	f000 fcc2 	bl	1a001d24 <xTaskResumeAll>
			return errQUEUE_FULL;
1a0013a0:	2000      	movs	r0, #0
1a0013a2:	e7a0      	b.n	1a0012e6 <xQueueGenericSend+0xba>
1a0013a4:	e000ed04 	.word	0xe000ed04

1a0013a8 <xQueueGenericSendFromISR>:
{
1a0013a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a0013ac:	b160      	cbz	r0, 1a0013c8 <xQueueGenericSendFromISR+0x20>
1a0013ae:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0013b0:	b999      	cbnz	r1, 1a0013da <xQueueGenericSendFromISR+0x32>
1a0013b2:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a0013b4:	b188      	cbz	r0, 1a0013da <xQueueGenericSendFromISR+0x32>
1a0013b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013ba:	f383 8811 	msr	BASEPRI, r3
1a0013be:	f3bf 8f6f 	isb	sy
1a0013c2:	f3bf 8f4f 	dsb	sy
1a0013c6:	e7fe      	b.n	1a0013c6 <xQueueGenericSendFromISR+0x1e>
1a0013c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013cc:	f383 8811 	msr	BASEPRI, r3
1a0013d0:	f3bf 8f6f 	isb	sy
1a0013d4:	f3bf 8f4f 	dsb	sy
1a0013d8:	e7fe      	b.n	1a0013d8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0013da:	2b02      	cmp	r3, #2
1a0013dc:	d10b      	bne.n	1a0013f6 <xQueueGenericSendFromISR+0x4e>
1a0013de:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a0013e0:	2801      	cmp	r0, #1
1a0013e2:	d008      	beq.n	1a0013f6 <xQueueGenericSendFromISR+0x4e>
1a0013e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013e8:	f383 8811 	msr	BASEPRI, r3
1a0013ec:	f3bf 8f6f 	isb	sy
1a0013f0:	f3bf 8f4f 	dsb	sy
1a0013f4:	e7fe      	b.n	1a0013f4 <xQueueGenericSendFromISR+0x4c>
1a0013f6:	461f      	mov	r7, r3
1a0013f8:	4690      	mov	r8, r2
1a0013fa:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0013fc:	f001 facc 	bl	1a002998 <vPortValidateInterruptPriority>
/*-----------------------------------------------------------*/

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

1a001400:	f3ef 8611 	mrs	r6, BASEPRI
1a001404:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001408:	f383 8811 	msr	BASEPRI, r3
1a00140c:	f3bf 8f6f 	isb	sy
1a001410:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001414:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001416:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001418:	429a      	cmp	r2, r3
1a00141a:	d303      	bcc.n	1a001424 <xQueueGenericSendFromISR+0x7c>
1a00141c:	2f02      	cmp	r7, #2
1a00141e:	d001      	beq.n	1a001424 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a001420:	2000      	movs	r0, #0
1a001422:	e00f      	b.n	1a001444 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a001424:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001428:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a00142a:	463a      	mov	r2, r7
1a00142c:	4649      	mov	r1, r9
1a00142e:	4620      	mov	r0, r4
1a001430:	f7ff fdb6 	bl	1a000fa0 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a001434:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001438:	d008      	beq.n	1a00144c <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a00143a:	1c6b      	adds	r3, r5, #1
1a00143c:	b25b      	sxtb	r3, r3
1a00143e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a001442:	2001      	movs	r0, #1
	return ulOriginalBASEPRI;
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
1a001444:	f386 8811 	msr	BASEPRI, r6
}
1a001448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00144c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00144e:	b15b      	cbz	r3, 1a001468 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001450:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001454:	f000 fdf0 	bl	1a002038 <xTaskRemoveFromEventList>
1a001458:	b140      	cbz	r0, 1a00146c <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a00145a:	f1b8 0f00 	cmp.w	r8, #0
1a00145e:	d007      	beq.n	1a001470 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a001460:	2001      	movs	r0, #1
1a001462:	f8c8 0000 	str.w	r0, [r8]
1a001466:	e7ed      	b.n	1a001444 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a001468:	2001      	movs	r0, #1
1a00146a:	e7eb      	b.n	1a001444 <xQueueGenericSendFromISR+0x9c>
1a00146c:	2001      	movs	r0, #1
1a00146e:	e7e9      	b.n	1a001444 <xQueueGenericSendFromISR+0x9c>
1a001470:	2001      	movs	r0, #1
1a001472:	e7e7      	b.n	1a001444 <xQueueGenericSendFromISR+0x9c>

1a001474 <xQueueReceive>:
{
1a001474:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001476:	b085      	sub	sp, #20
1a001478:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a00147a:	b160      	cbz	r0, 1a001496 <xQueueReceive+0x22>
1a00147c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00147e:	b999      	cbnz	r1, 1a0014a8 <xQueueReceive+0x34>
1a001480:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001482:	b18b      	cbz	r3, 1a0014a8 <xQueueReceive+0x34>

1a001484:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001488:	f383 8811 	msr	BASEPRI, r3
1a00148c:	f3bf 8f6f 	isb	sy
1a001490:	f3bf 8f4f 	dsb	sy
1a001494:	e7fe      	b.n	1a001494 <xQueueReceive+0x20>
1a001496:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00149a:	f383 8811 	msr	BASEPRI, r3
1a00149e:	f3bf 8f6f 	isb	sy
1a0014a2:	f3bf 8f4f 	dsb	sy
1a0014a6:	e7fe      	b.n	1a0014a6 <xQueueReceive+0x32>
1a0014a8:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0014aa:	f000 fe5d 	bl	1a002168 <xTaskGetSchedulerState>
1a0014ae:	b950      	cbnz	r0, 1a0014c6 <xQueueReceive+0x52>
1a0014b0:	9b01      	ldr	r3, [sp, #4]
1a0014b2:	b153      	cbz	r3, 1a0014ca <xQueueReceive+0x56>
1a0014b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014b8:	f383 8811 	msr	BASEPRI, r3
1a0014bc:	f3bf 8f6f 	isb	sy
1a0014c0:	f3bf 8f4f 	dsb	sy
1a0014c4:	e7fe      	b.n	1a0014c4 <xQueueReceive+0x50>
1a0014c6:	2600      	movs	r6, #0
1a0014c8:	e03e      	b.n	1a001548 <xQueueReceive+0xd4>
1a0014ca:	2600      	movs	r6, #0
1a0014cc:	e03c      	b.n	1a001548 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a0014ce:	4639      	mov	r1, r7
1a0014d0:	4620      	mov	r0, r4
1a0014d2:	f7ff fda0 	bl	1a001016 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a0014d6:	3d01      	subs	r5, #1
1a0014d8:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0014da:	6923      	ldr	r3, [r4, #16]
1a0014dc:	b923      	cbnz	r3, 1a0014e8 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a0014de:	f001 f953 	bl	1a002788 <vPortExitCritical>
				return pdPASS;
1a0014e2:	2001      	movs	r0, #1
}
1a0014e4:	b005      	add	sp, #20
1a0014e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0014e8:	f104 0010 	add.w	r0, r4, #16
1a0014ec:	f000 fda4 	bl	1a002038 <xTaskRemoveFromEventList>
1a0014f0:	2800      	cmp	r0, #0
1a0014f2:	d0f4      	beq.n	1a0014de <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a0014f4:	4b34      	ldr	r3, [pc, #208]	; (1a0015c8 <xQueueReceive+0x154>)
1a0014f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0014fa:	601a      	str	r2, [r3, #0]
1a0014fc:	f3bf 8f4f 	dsb	sy
1a001500:	f3bf 8f6f 	isb	sy
1a001504:	e7eb      	b.n	1a0014de <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a001506:	f001 f93f 	bl	1a002788 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a00150a:	2000      	movs	r0, #0
1a00150c:	e7ea      	b.n	1a0014e4 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00150e:	a802      	add	r0, sp, #8
1a001510:	f000 fdd8 	bl	1a0020c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001514:	2601      	movs	r6, #1
1a001516:	e021      	b.n	1a00155c <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a001518:	2300      	movs	r3, #0
1a00151a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00151e:	e029      	b.n	1a001574 <xQueueReceive+0x100>
1a001520:	2300      	movs	r3, #0
1a001522:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001526:	e02b      	b.n	1a001580 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a001528:	4620      	mov	r0, r4
1a00152a:	f7ff fd86 	bl	1a00103a <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00152e:	f000 fbf9 	bl	1a001d24 <xTaskResumeAll>
1a001532:	e009      	b.n	1a001548 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a001534:	4620      	mov	r0, r4
1a001536:	f7ff fd80 	bl	1a00103a <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a00153a:	f000 fbf3 	bl	1a001d24 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00153e:	4620      	mov	r0, r4
1a001540:	f7ff fd21 	bl	1a000f86 <prvIsQueueEmpty>
1a001544:	2800      	cmp	r0, #0
1a001546:	d13d      	bne.n	1a0015c4 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a001548:	f001 f8fc 	bl	1a002744 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a00154c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00154e:	2d00      	cmp	r5, #0
1a001550:	d1bd      	bne.n	1a0014ce <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001552:	9b01      	ldr	r3, [sp, #4]
1a001554:	2b00      	cmp	r3, #0
1a001556:	d0d6      	beq.n	1a001506 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a001558:	2e00      	cmp	r6, #0
1a00155a:	d0d8      	beq.n	1a00150e <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a00155c:	f001 f914 	bl	1a002788 <vPortExitCritical>
		vTaskSuspendAll();
1a001560:	f000 fb46 	bl	1a001bf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001564:	f001 f8ee 	bl	1a002744 <vPortEnterCritical>
1a001568:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00156c:	b25b      	sxtb	r3, r3
1a00156e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001572:	d0d1      	beq.n	1a001518 <xQueueReceive+0xa4>
1a001574:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001578:	b25b      	sxtb	r3, r3
1a00157a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00157e:	d0cf      	beq.n	1a001520 <xQueueReceive+0xac>
1a001580:	f001 f902 	bl	1a002788 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001584:	a901      	add	r1, sp, #4
1a001586:	a802      	add	r0, sp, #8
1a001588:	f000 fda8 	bl	1a0020dc <xTaskCheckForTimeOut>
1a00158c:	2800      	cmp	r0, #0
1a00158e:	d1d1      	bne.n	1a001534 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001590:	4620      	mov	r0, r4
1a001592:	f7ff fcf8 	bl	1a000f86 <prvIsQueueEmpty>
1a001596:	2800      	cmp	r0, #0
1a001598:	d0c6      	beq.n	1a001528 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a00159a:	9901      	ldr	r1, [sp, #4]
1a00159c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0015a0:	f000 fd16 	bl	1a001fd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0015a4:	4620      	mov	r0, r4
1a0015a6:	f7ff fd48 	bl	1a00103a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0015aa:	f000 fbbb 	bl	1a001d24 <xTaskResumeAll>
1a0015ae:	2800      	cmp	r0, #0
1a0015b0:	d1ca      	bne.n	1a001548 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a0015b2:	4b05      	ldr	r3, [pc, #20]	; (1a0015c8 <xQueueReceive+0x154>)
1a0015b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0015b8:	601a      	str	r2, [r3, #0]
1a0015ba:	f3bf 8f4f 	dsb	sy
1a0015be:	f3bf 8f6f 	isb	sy
1a0015c2:	e7c1      	b.n	1a001548 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a0015c4:	2000      	movs	r0, #0
1a0015c6:	e78d      	b.n	1a0014e4 <xQueueReceive+0x70>
1a0015c8:	e000ed04 	.word	0xe000ed04

1a0015cc <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0015cc:	2300      	movs	r3, #0
1a0015ce:	2b07      	cmp	r3, #7
1a0015d0:	d80c      	bhi.n	1a0015ec <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a0015d2:	4a07      	ldr	r2, [pc, #28]	; (1a0015f0 <vQueueAddToRegistry+0x24>)
1a0015d4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a0015d8:	b10a      	cbz	r2, 1a0015de <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0015da:	3301      	adds	r3, #1
1a0015dc:	e7f7      	b.n	1a0015ce <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a0015de:	4a04      	ldr	r2, [pc, #16]	; (1a0015f0 <vQueueAddToRegistry+0x24>)
1a0015e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a0015e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a0015e8:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a0015ea:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a0015ec:	4770      	bx	lr
1a0015ee:	bf00      	nop
1a0015f0:	10002b48 	.word	0x10002b48

1a0015f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a0015f4:	b570      	push	{r4, r5, r6, lr}
1a0015f6:	4604      	mov	r4, r0
1a0015f8:	460d      	mov	r5, r1
1a0015fa:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a0015fc:	f001 f8a2 	bl	1a002744 <vPortEnterCritical>
1a001600:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001604:	b25b      	sxtb	r3, r3
1a001606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00160a:	d00d      	beq.n	1a001628 <vQueueWaitForMessageRestricted+0x34>
1a00160c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001610:	b25b      	sxtb	r3, r3
1a001612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001616:	d00b      	beq.n	1a001630 <vQueueWaitForMessageRestricted+0x3c>
1a001618:	f001 f8b6 	bl	1a002788 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a00161c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00161e:	b15b      	cbz	r3, 1a001638 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001620:	4620      	mov	r0, r4
1a001622:	f7ff fd0a 	bl	1a00103a <prvUnlockQueue>
	}
1a001626:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001628:	2300      	movs	r3, #0
1a00162a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00162e:	e7ed      	b.n	1a00160c <vQueueWaitForMessageRestricted+0x18>
1a001630:	2300      	movs	r3, #0
1a001632:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001636:	e7ef      	b.n	1a001618 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001638:	4632      	mov	r2, r6
1a00163a:	4629      	mov	r1, r5
1a00163c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001640:	f000 fcde 	bl	1a002000 <vTaskPlaceOnEventListRestricted>
1a001644:	e7ec      	b.n	1a001620 <vQueueWaitForMessageRestricted+0x2c>

1a001646 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001646:	f100 0308 	add.w	r3, r0, #8
1a00164a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a00164c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001650:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001652:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001654:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001656:	2300      	movs	r3, #0
1a001658:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a00165a:	4770      	bx	lr

1a00165c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a00165c:	2300      	movs	r3, #0
1a00165e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001660:	4770      	bx	lr

1a001662 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001662:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001664:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001666:	689a      	ldr	r2, [r3, #8]
1a001668:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a00166a:	689a      	ldr	r2, [r3, #8]
1a00166c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a00166e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001670:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001672:	6803      	ldr	r3, [r0, #0]
1a001674:	3301      	adds	r3, #1
1a001676:	6003      	str	r3, [r0, #0]
}
1a001678:	4770      	bx	lr

1a00167a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a00167a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a00167c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a00167e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001682:	d002      	beq.n	1a00168a <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001684:	f100 0208 	add.w	r2, r0, #8
1a001688:	e002      	b.n	1a001690 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a00168a:	6902      	ldr	r2, [r0, #16]
1a00168c:	e004      	b.n	1a001698 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00168e:	461a      	mov	r2, r3
1a001690:	6853      	ldr	r3, [r2, #4]
1a001692:	681c      	ldr	r4, [r3, #0]
1a001694:	42ac      	cmp	r4, r5
1a001696:	d9fa      	bls.n	1a00168e <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001698:	6853      	ldr	r3, [r2, #4]
1a00169a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a00169c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a00169e:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a0016a0:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0016a2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0016a4:	6803      	ldr	r3, [r0, #0]
1a0016a6:	3301      	adds	r3, #1
1a0016a8:	6003      	str	r3, [r0, #0]
}
1a0016aa:	bc30      	pop	{r4, r5}
1a0016ac:	4770      	bx	lr

1a0016ae <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a0016ae:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0016b0:	6842      	ldr	r2, [r0, #4]
1a0016b2:	6881      	ldr	r1, [r0, #8]
1a0016b4:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a0016b6:	6882      	ldr	r2, [r0, #8]
1a0016b8:	6841      	ldr	r1, [r0, #4]
1a0016ba:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a0016bc:	685a      	ldr	r2, [r3, #4]
1a0016be:	4282      	cmp	r2, r0
1a0016c0:	d006      	beq.n	1a0016d0 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a0016c2:	2200      	movs	r2, #0
1a0016c4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a0016c6:	681a      	ldr	r2, [r3, #0]
1a0016c8:	3a01      	subs	r2, #1
1a0016ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a0016cc:	6818      	ldr	r0, [r3, #0]
}
1a0016ce:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a0016d0:	6882      	ldr	r2, [r0, #8]
1a0016d2:	605a      	str	r2, [r3, #4]
1a0016d4:	e7f5      	b.n	1a0016c2 <uxListRemove+0x14>
1a0016d6:	Address 0x000000001a0016d6 is out of bounds.


1a0016d8 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a0016d8:	4b03      	ldr	r3, [pc, #12]	; (1a0016e8 <vApplicationGetIdleTaskMemory+0x10>)
1a0016da:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a0016dc:	4b03      	ldr	r3, [pc, #12]	; (1a0016ec <vApplicationGetIdleTaskMemory+0x14>)
1a0016de:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a0016e0:	235a      	movs	r3, #90	; 0x5a
1a0016e2:	6013      	str	r3, [r2, #0]
}
1a0016e4:	4770      	bx	lr
1a0016e6:	bf00      	nop
1a0016e8:	10002804 	.word	0x10002804
1a0016ec:	100020fc 	.word	0x100020fc

1a0016f0 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a0016f0:	4b03      	ldr	r3, [pc, #12]	; (1a001700 <vApplicationGetTimerTaskMemory+0x10>)
1a0016f2:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a0016f4:	4b03      	ldr	r3, [pc, #12]	; (1a001704 <vApplicationGetTimerTaskMemory+0x14>)
1a0016f6:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a0016f8:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a0016fc:	6013      	str	r3, [r2, #0]
1a0016fe:	4770      	bx	lr
1a001700:	10002864 	.word	0x10002864
1a001704:	10002264 	.word	0x10002264

1a001708 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a001708:	b510      	push	{r4, lr}
1a00170a:	b082      	sub	sp, #8
1a00170c:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a00170e:	9001      	str	r0, [sp, #4]
1a001710:	2300      	movs	r3, #0
1a001712:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a001714:	f001 f816 	bl	1a002744 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a001718:	9901      	ldr	r1, [sp, #4]
1a00171a:	4622      	mov	r2, r4
1a00171c:	4804      	ldr	r0, [pc, #16]	; (1a001730 <vAssertCalled+0x28>)
1a00171e:	f003 fe5f 	bl	1a0053e0 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a001722:	9b00      	ldr	r3, [sp, #0]
1a001724:	2b00      	cmp	r3, #0
1a001726:	d0fc      	beq.n	1a001722 <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a001728:	f001 f82e 	bl	1a002788 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a00172c:	b002      	add	sp, #8
1a00172e:	bd10      	pop	{r4, pc}
1a001730:	1a006040 	.word	0x1a006040

1a001734 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a001734:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a001736:	4804      	ldr	r0, [pc, #16]	; (1a001748 <vApplicationMallocFailedHook+0x14>)
1a001738:	f003 fec6 	bl	1a0054c8 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a00173c:	4903      	ldr	r1, [pc, #12]	; (1a00174c <vApplicationMallocFailedHook+0x18>)
1a00173e:	202c      	movs	r0, #44	; 0x2c
1a001740:	f7ff ffe2 	bl	1a001708 <vAssertCalled>
}
1a001744:	bd08      	pop	{r3, pc}
1a001746:	bf00      	nop
1a001748:	1a005fcc 	.word	0x1a005fcc
1a00174c:	1a005ff0 	.word	0x1a005ff0

1a001750 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a001750:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a001752:	4804      	ldr	r0, [pc, #16]	; (1a001764 <vApplicationStackOverflowHook+0x14>)
1a001754:	f003 fe44 	bl	1a0053e0 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a001758:	4903      	ldr	r1, [pc, #12]	; (1a001768 <vApplicationStackOverflowHook+0x18>)
1a00175a:	2050      	movs	r0, #80	; 0x50
1a00175c:	f7ff ffd4 	bl	1a001708 <vAssertCalled>
}
1a001760:	bd08      	pop	{r3, pc}
1a001762:	bf00      	nop
1a001764:	1a006010 	.word	0x1a006010
1a001768:	1a005ff0 	.word	0x1a005ff0

1a00176c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00176c:	4b08      	ldr	r3, [pc, #32]	; (1a001790 <prvResetNextTaskUnblockTime+0x24>)
1a00176e:	681b      	ldr	r3, [r3, #0]
1a001770:	681b      	ldr	r3, [r3, #0]
1a001772:	b13b      	cbz	r3, 1a001784 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001774:	4b06      	ldr	r3, [pc, #24]	; (1a001790 <prvResetNextTaskUnblockTime+0x24>)
1a001776:	681b      	ldr	r3, [r3, #0]
1a001778:	68db      	ldr	r3, [r3, #12]
1a00177a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a00177c:	685a      	ldr	r2, [r3, #4]
1a00177e:	4b05      	ldr	r3, [pc, #20]	; (1a001794 <prvResetNextTaskUnblockTime+0x28>)
1a001780:	601a      	str	r2, [r3, #0]
	}
}
1a001782:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a001784:	4b03      	ldr	r3, [pc, #12]	; (1a001794 <prvResetNextTaskUnblockTime+0x28>)
1a001786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00178a:	601a      	str	r2, [r3, #0]
1a00178c:	4770      	bx	lr
1a00178e:	bf00      	nop
1a001790:	100028c8 	.word	0x100028c8
1a001794:	1000299c 	.word	0x1000299c

1a001798 <prvInitialiseNewTask>:
{
1a001798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00179c:	4681      	mov	r9, r0
1a00179e:	460d      	mov	r5, r1
1a0017a0:	4617      	mov	r7, r2
1a0017a2:	469a      	mov	sl, r3
1a0017a4:	9e08      	ldr	r6, [sp, #32]
1a0017a6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0017aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a0017ac:	0092      	lsls	r2, r2, #2
1a0017ae:	21a5      	movs	r1, #165	; 0xa5
1a0017b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a0017b2:	f003 fd64 	bl	1a00527e <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a0017b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a0017b8:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a0017bc:	3a01      	subs	r2, #1
1a0017be:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a0017c2:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a0017c6:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0017c8:	2300      	movs	r3, #0
1a0017ca:	2b0f      	cmp	r3, #15
1a0017cc:	d807      	bhi.n	1a0017de <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a0017ce:	5ce9      	ldrb	r1, [r5, r3]
1a0017d0:	18e2      	adds	r2, r4, r3
1a0017d2:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a0017d6:	5cea      	ldrb	r2, [r5, r3]
1a0017d8:	b10a      	cbz	r2, 1a0017de <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0017da:	3301      	adds	r3, #1
1a0017dc:	e7f5      	b.n	1a0017ca <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a0017de:	2300      	movs	r3, #0
1a0017e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a0017e4:	2e06      	cmp	r6, #6
1a0017e6:	d900      	bls.n	1a0017ea <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a0017e8:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a0017ea:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a0017ec:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a0017ee:	2500      	movs	r5, #0
1a0017f0:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a0017f2:	1d20      	adds	r0, r4, #4
1a0017f4:	f7ff ff32 	bl	1a00165c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a0017f8:	f104 0018 	add.w	r0, r4, #24
1a0017fc:	f7ff ff2e 	bl	1a00165c <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001800:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001802:	f1c6 0607 	rsb	r6, r6, #7
1a001806:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001808:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a00180a:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a00180c:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001810:	4652      	mov	r2, sl
1a001812:	4649      	mov	r1, r9
1a001814:	4638      	mov	r0, r7
1a001816:	f000 ff67 	bl	1a0026e8 <pxPortInitialiseStack>
1a00181a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a00181c:	f1b8 0f00 	cmp.w	r8, #0
1a001820:	d001      	beq.n	1a001826 <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001822:	f8c8 4000 	str.w	r4, [r8]
}
1a001826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00182a:	Address 0x000000001a00182a is out of bounds.


1a00182c <prvInitialiseTaskLists>:
{
1a00182c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00182e:	2400      	movs	r4, #0
1a001830:	e007      	b.n	1a001842 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001832:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001836:	0093      	lsls	r3, r2, #2
1a001838:	480e      	ldr	r0, [pc, #56]	; (1a001874 <prvInitialiseTaskLists+0x48>)
1a00183a:	4418      	add	r0, r3
1a00183c:	f7ff ff03 	bl	1a001646 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001840:	3401      	adds	r4, #1
1a001842:	2c06      	cmp	r4, #6
1a001844:	d9f5      	bls.n	1a001832 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a001846:	4d0c      	ldr	r5, [pc, #48]	; (1a001878 <prvInitialiseTaskLists+0x4c>)
1a001848:	4628      	mov	r0, r5
1a00184a:	f7ff fefc 	bl	1a001646 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a00184e:	4c0b      	ldr	r4, [pc, #44]	; (1a00187c <prvInitialiseTaskLists+0x50>)
1a001850:	4620      	mov	r0, r4
1a001852:	f7ff fef8 	bl	1a001646 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a001856:	480a      	ldr	r0, [pc, #40]	; (1a001880 <prvInitialiseTaskLists+0x54>)
1a001858:	f7ff fef5 	bl	1a001646 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a00185c:	4809      	ldr	r0, [pc, #36]	; (1a001884 <prvInitialiseTaskLists+0x58>)
1a00185e:	f7ff fef2 	bl	1a001646 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001862:	4809      	ldr	r0, [pc, #36]	; (1a001888 <prvInitialiseTaskLists+0x5c>)
1a001864:	f7ff feef 	bl	1a001646 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001868:	4b08      	ldr	r3, [pc, #32]	; (1a00188c <prvInitialiseTaskLists+0x60>)
1a00186a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a00186c:	4b08      	ldr	r3, [pc, #32]	; (1a001890 <prvInitialiseTaskLists+0x64>)
1a00186e:	601c      	str	r4, [r3, #0]
}
1a001870:	bd38      	pop	{r3, r4, r5, pc}
1a001872:	bf00      	nop
1a001874:	100028d0 	.word	0x100028d0
1a001878:	10002974 	.word	0x10002974
1a00187c:	10002988 	.word	0x10002988
1a001880:	100029a4 	.word	0x100029a4
1a001884:	100029d0 	.word	0x100029d0
1a001888:	100029bc 	.word	0x100029bc
1a00188c:	100028c8 	.word	0x100028c8
1a001890:	100028cc 	.word	0x100028cc

1a001894 <prvAddNewTaskToReadyList>:
{
1a001894:	b510      	push	{r4, lr}
1a001896:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001898:	f000 ff54 	bl	1a002744 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a00189c:	4a21      	ldr	r2, [pc, #132]	; (1a001924 <prvAddNewTaskToReadyList+0x90>)
1a00189e:	6813      	ldr	r3, [r2, #0]
1a0018a0:	3301      	adds	r3, #1
1a0018a2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a0018a4:	4b20      	ldr	r3, [pc, #128]	; (1a001928 <prvAddNewTaskToReadyList+0x94>)
1a0018a6:	681b      	ldr	r3, [r3, #0]
1a0018a8:	b15b      	cbz	r3, 1a0018c2 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a0018aa:	4b20      	ldr	r3, [pc, #128]	; (1a00192c <prvAddNewTaskToReadyList+0x98>)
1a0018ac:	681b      	ldr	r3, [r3, #0]
1a0018ae:	b96b      	cbnz	r3, 1a0018cc <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a0018b0:	4b1d      	ldr	r3, [pc, #116]	; (1a001928 <prvAddNewTaskToReadyList+0x94>)
1a0018b2:	681b      	ldr	r3, [r3, #0]
1a0018b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0018b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0018b8:	429a      	cmp	r2, r3
1a0018ba:	d807      	bhi.n	1a0018cc <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a0018bc:	4b1a      	ldr	r3, [pc, #104]	; (1a001928 <prvAddNewTaskToReadyList+0x94>)
1a0018be:	601c      	str	r4, [r3, #0]
1a0018c0:	e004      	b.n	1a0018cc <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a0018c2:	4b19      	ldr	r3, [pc, #100]	; (1a001928 <prvAddNewTaskToReadyList+0x94>)
1a0018c4:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a0018c6:	6813      	ldr	r3, [r2, #0]
1a0018c8:	2b01      	cmp	r3, #1
1a0018ca:	d027      	beq.n	1a00191c <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a0018cc:	4a18      	ldr	r2, [pc, #96]	; (1a001930 <prvAddNewTaskToReadyList+0x9c>)
1a0018ce:	6813      	ldr	r3, [r2, #0]
1a0018d0:	3301      	adds	r3, #1
1a0018d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a0018d4:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a0018d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0018d8:	2201      	movs	r2, #1
1a0018da:	409a      	lsls	r2, r3
1a0018dc:	4915      	ldr	r1, [pc, #84]	; (1a001934 <prvAddNewTaskToReadyList+0xa0>)
1a0018de:	6808      	ldr	r0, [r1, #0]
1a0018e0:	4302      	orrs	r2, r0
1a0018e2:	600a      	str	r2, [r1, #0]
1a0018e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0018e8:	009a      	lsls	r2, r3, #2
1a0018ea:	1d21      	adds	r1, r4, #4
1a0018ec:	4812      	ldr	r0, [pc, #72]	; (1a001938 <prvAddNewTaskToReadyList+0xa4>)
1a0018ee:	4410      	add	r0, r2
1a0018f0:	f7ff feb7 	bl	1a001662 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a0018f4:	f000 ff48 	bl	1a002788 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a0018f8:	4b0c      	ldr	r3, [pc, #48]	; (1a00192c <prvAddNewTaskToReadyList+0x98>)
1a0018fa:	681b      	ldr	r3, [r3, #0]
1a0018fc:	b16b      	cbz	r3, 1a00191a <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a0018fe:	4b0a      	ldr	r3, [pc, #40]	; (1a001928 <prvAddNewTaskToReadyList+0x94>)
1a001900:	681b      	ldr	r3, [r3, #0]
1a001902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001904:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001906:	429a      	cmp	r2, r3
1a001908:	d207      	bcs.n	1a00191a <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a00190a:	4b0c      	ldr	r3, [pc, #48]	; (1a00193c <prvAddNewTaskToReadyList+0xa8>)
1a00190c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001910:	601a      	str	r2, [r3, #0]
1a001912:	f3bf 8f4f 	dsb	sy
1a001916:	f3bf 8f6f 	isb	sy
}
1a00191a:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a00191c:	f7ff ff86 	bl	1a00182c <prvInitialiseTaskLists>
1a001920:	e7d4      	b.n	1a0018cc <prvAddNewTaskToReadyList+0x38>
1a001922:	bf00      	nop
1a001924:	1000295c 	.word	0x1000295c
1a001928:	100028c4 	.word	0x100028c4
1a00192c:	100029b8 	.word	0x100029b8
1a001930:	1000296c 	.word	0x1000296c
1a001934:	10002970 	.word	0x10002970
1a001938:	100028d0 	.word	0x100028d0
1a00193c:	e000ed04 	.word	0xe000ed04

1a001940 <prvDeleteTCB>:
	{
1a001940:	b510      	push	{r4, lr}
1a001942:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001944:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001948:	b933      	cbnz	r3, 1a001958 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a00194a:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a00194c:	f7ff fad4 	bl	1a000ef8 <vPortFree>
				vPortFree( pxTCB );
1a001950:	4620      	mov	r0, r4
1a001952:	f7ff fad1 	bl	1a000ef8 <vPortFree>
	}
1a001956:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001958:	2b01      	cmp	r3, #1
1a00195a:	d00a      	beq.n	1a001972 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a00195c:	2b02      	cmp	r3, #2
1a00195e:	d0fa      	beq.n	1a001956 <prvDeleteTCB+0x16>
1a001960:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001964:	f383 8811 	msr	BASEPRI, r3
1a001968:	f3bf 8f6f 	isb	sy
1a00196c:	f3bf 8f4f 	dsb	sy
1a001970:	e7fe      	b.n	1a001970 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a001972:	f7ff fac1 	bl	1a000ef8 <vPortFree>
1a001976:	e7ee      	b.n	1a001956 <prvDeleteTCB+0x16>

1a001978 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001978:	4b0f      	ldr	r3, [pc, #60]	; (1a0019b8 <prvCheckTasksWaitingTermination+0x40>)
1a00197a:	681b      	ldr	r3, [r3, #0]
1a00197c:	b1d3      	cbz	r3, 1a0019b4 <prvCheckTasksWaitingTermination+0x3c>
{
1a00197e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001980:	f000 fee0 	bl	1a002744 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001984:	4b0d      	ldr	r3, [pc, #52]	; (1a0019bc <prvCheckTasksWaitingTermination+0x44>)
1a001986:	68db      	ldr	r3, [r3, #12]
1a001988:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00198a:	1d20      	adds	r0, r4, #4
1a00198c:	f7ff fe8f 	bl	1a0016ae <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001990:	4a0b      	ldr	r2, [pc, #44]	; (1a0019c0 <prvCheckTasksWaitingTermination+0x48>)
1a001992:	6813      	ldr	r3, [r2, #0]
1a001994:	3b01      	subs	r3, #1
1a001996:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001998:	4a07      	ldr	r2, [pc, #28]	; (1a0019b8 <prvCheckTasksWaitingTermination+0x40>)
1a00199a:	6813      	ldr	r3, [r2, #0]
1a00199c:	3b01      	subs	r3, #1
1a00199e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a0019a0:	f000 fef2 	bl	1a002788 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a0019a4:	4620      	mov	r0, r4
1a0019a6:	f7ff ffcb 	bl	1a001940 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0019aa:	4b03      	ldr	r3, [pc, #12]	; (1a0019b8 <prvCheckTasksWaitingTermination+0x40>)
1a0019ac:	681b      	ldr	r3, [r3, #0]
1a0019ae:	2b00      	cmp	r3, #0
1a0019b0:	d1e6      	bne.n	1a001980 <prvCheckTasksWaitingTermination+0x8>
}
1a0019b2:	bd10      	pop	{r4, pc}
1a0019b4:	4770      	bx	lr
1a0019b6:	bf00      	nop
1a0019b8:	10002960 	.word	0x10002960
1a0019bc:	100029d0 	.word	0x100029d0
1a0019c0:	1000295c 	.word	0x1000295c

1a0019c4 <prvIdleTask>:
{
1a0019c4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a0019c6:	f7ff ffd7 	bl	1a001978 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a0019ca:	4b06      	ldr	r3, [pc, #24]	; (1a0019e4 <prvIdleTask+0x20>)
1a0019cc:	681b      	ldr	r3, [r3, #0]
1a0019ce:	2b01      	cmp	r3, #1
1a0019d0:	d9f9      	bls.n	1a0019c6 <prvIdleTask+0x2>
				taskYIELD();
1a0019d2:	4b05      	ldr	r3, [pc, #20]	; (1a0019e8 <prvIdleTask+0x24>)
1a0019d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019d8:	601a      	str	r2, [r3, #0]
1a0019da:	f3bf 8f4f 	dsb	sy
1a0019de:	f3bf 8f6f 	isb	sy
1a0019e2:	e7f0      	b.n	1a0019c6 <prvIdleTask+0x2>
1a0019e4:	100028d0 	.word	0x100028d0
1a0019e8:	e000ed04 	.word	0xe000ed04

1a0019ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a0019ec:	b570      	push	{r4, r5, r6, lr}
1a0019ee:	4604      	mov	r4, r0
1a0019f0:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a0019f2:	4b1d      	ldr	r3, [pc, #116]	; (1a001a68 <prvAddCurrentTaskToDelayedList+0x7c>)
1a0019f4:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0019f6:	4b1d      	ldr	r3, [pc, #116]	; (1a001a6c <prvAddCurrentTaskToDelayedList+0x80>)
1a0019f8:	6818      	ldr	r0, [r3, #0]
1a0019fa:	3004      	adds	r0, #4
1a0019fc:	f7ff fe57 	bl	1a0016ae <uxListRemove>
1a001a00:	b950      	cbnz	r0, 1a001a18 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001a02:	4b1a      	ldr	r3, [pc, #104]	; (1a001a6c <prvAddCurrentTaskToDelayedList+0x80>)
1a001a04:	681b      	ldr	r3, [r3, #0]
1a001a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001a08:	2301      	movs	r3, #1
1a001a0a:	fa03 f202 	lsl.w	r2, r3, r2
1a001a0e:	4918      	ldr	r1, [pc, #96]	; (1a001a70 <prvAddCurrentTaskToDelayedList+0x84>)
1a001a10:	680b      	ldr	r3, [r1, #0]
1a001a12:	ea23 0302 	bic.w	r3, r3, r2
1a001a16:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001a18:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001a1c:	d013      	beq.n	1a001a46 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001a1e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001a20:	4b12      	ldr	r3, [pc, #72]	; (1a001a6c <prvAddCurrentTaskToDelayedList+0x80>)
1a001a22:	681b      	ldr	r3, [r3, #0]
1a001a24:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a001a26:	42a5      	cmp	r5, r4
1a001a28:	d816      	bhi.n	1a001a58 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001a2a:	4b12      	ldr	r3, [pc, #72]	; (1a001a74 <prvAddCurrentTaskToDelayedList+0x88>)
1a001a2c:	6818      	ldr	r0, [r3, #0]
1a001a2e:	4b0f      	ldr	r3, [pc, #60]	; (1a001a6c <prvAddCurrentTaskToDelayedList+0x80>)
1a001a30:	6819      	ldr	r1, [r3, #0]
1a001a32:	3104      	adds	r1, #4
1a001a34:	f7ff fe21 	bl	1a00167a <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a001a38:	4b0f      	ldr	r3, [pc, #60]	; (1a001a78 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001a3a:	681b      	ldr	r3, [r3, #0]
1a001a3c:	42a3      	cmp	r3, r4
1a001a3e:	d912      	bls.n	1a001a66 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a001a40:	4b0d      	ldr	r3, [pc, #52]	; (1a001a78 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001a42:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a001a44:	e00f      	b.n	1a001a66 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001a46:	2e00      	cmp	r6, #0
1a001a48:	d0e9      	beq.n	1a001a1e <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001a4a:	4b08      	ldr	r3, [pc, #32]	; (1a001a6c <prvAddCurrentTaskToDelayedList+0x80>)
1a001a4c:	6819      	ldr	r1, [r3, #0]
1a001a4e:	3104      	adds	r1, #4
1a001a50:	480a      	ldr	r0, [pc, #40]	; (1a001a7c <prvAddCurrentTaskToDelayedList+0x90>)
1a001a52:	f7ff fe06 	bl	1a001662 <vListInsertEnd>
1a001a56:	e006      	b.n	1a001a66 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001a58:	4b09      	ldr	r3, [pc, #36]	; (1a001a80 <prvAddCurrentTaskToDelayedList+0x94>)
1a001a5a:	6818      	ldr	r0, [r3, #0]
1a001a5c:	4b03      	ldr	r3, [pc, #12]	; (1a001a6c <prvAddCurrentTaskToDelayedList+0x80>)
1a001a5e:	6819      	ldr	r1, [r3, #0]
1a001a60:	3104      	adds	r1, #4
1a001a62:	f7ff fe0a 	bl	1a00167a <vListInsert>
}
1a001a66:	bd70      	pop	{r4, r5, r6, pc}
1a001a68:	100029e4 	.word	0x100029e4
1a001a6c:	100028c4 	.word	0x100028c4
1a001a70:	10002970 	.word	0x10002970
1a001a74:	100028c8 	.word	0x100028c8
1a001a78:	1000299c 	.word	0x1000299c
1a001a7c:	100029bc 	.word	0x100029bc
1a001a80:	100028cc 	.word	0x100028cc

1a001a84 <xTaskCreateStatic>:
	{
1a001a84:	b570      	push	{r4, r5, r6, lr}
1a001a86:	b086      	sub	sp, #24
1a001a88:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001a8a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001a8c:	b945      	cbnz	r5, 1a001aa0 <xTaskCreateStatic+0x1c>
1a001a8e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a92:	f383 8811 	msr	BASEPRI, r3
1a001a96:	f3bf 8f6f 	isb	sy
1a001a9a:	f3bf 8f4f 	dsb	sy
1a001a9e:	e7fe      	b.n	1a001a9e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a001aa0:	b944      	cbnz	r4, 1a001ab4 <xTaskCreateStatic+0x30>
1a001aa2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001aa6:	f383 8811 	msr	BASEPRI, r3
1a001aaa:	f3bf 8f6f 	isb	sy
1a001aae:	f3bf 8f4f 	dsb	sy
1a001ab2:	e7fe      	b.n	1a001ab2 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001ab4:	2660      	movs	r6, #96	; 0x60
1a001ab6:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001ab8:	9e04      	ldr	r6, [sp, #16]
1a001aba:	2e60      	cmp	r6, #96	; 0x60
1a001abc:	d008      	beq.n	1a001ad0 <xTaskCreateStatic+0x4c>
1a001abe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ac2:	f383 8811 	msr	BASEPRI, r3
1a001ac6:	f3bf 8f6f 	isb	sy
1a001aca:	f3bf 8f4f 	dsb	sy
1a001ace:	e7fe      	b.n	1a001ace <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001ad0:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a001ad2:	2502      	movs	r5, #2
1a001ad4:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001ad8:	2500      	movs	r5, #0
1a001ada:	9503      	str	r5, [sp, #12]
1a001adc:	9402      	str	r4, [sp, #8]
1a001ade:	ad05      	add	r5, sp, #20
1a001ae0:	9501      	str	r5, [sp, #4]
1a001ae2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001ae4:	9500      	str	r5, [sp, #0]
1a001ae6:	f7ff fe57 	bl	1a001798 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001aea:	4620      	mov	r0, r4
1a001aec:	f7ff fed2 	bl	1a001894 <prvAddNewTaskToReadyList>
	}
1a001af0:	9805      	ldr	r0, [sp, #20]
1a001af2:	b006      	add	sp, #24
1a001af4:	bd70      	pop	{r4, r5, r6, pc}

1a001af6 <xTaskCreate>:
	{
1a001af6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001afa:	b085      	sub	sp, #20
1a001afc:	4607      	mov	r7, r0
1a001afe:	4688      	mov	r8, r1
1a001b00:	4615      	mov	r5, r2
1a001b02:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001b04:	0090      	lsls	r0, r2, #2
1a001b06:	f7ff f969 	bl	1a000ddc <pvPortMalloc>
			if( pxStack != NULL )
1a001b0a:	b308      	cbz	r0, 1a001b50 <xTaskCreate+0x5a>
1a001b0c:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001b0e:	2060      	movs	r0, #96	; 0x60
1a001b10:	f7ff f964 	bl	1a000ddc <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001b14:	4604      	mov	r4, r0
1a001b16:	b1b8      	cbz	r0, 1a001b48 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a001b18:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001b1a:	b1e4      	cbz	r4, 1a001b56 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001b1c:	2300      	movs	r3, #0
1a001b1e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001b22:	9303      	str	r3, [sp, #12]
1a001b24:	9402      	str	r4, [sp, #8]
1a001b26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001b28:	9301      	str	r3, [sp, #4]
1a001b2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001b2c:	9300      	str	r3, [sp, #0]
1a001b2e:	464b      	mov	r3, r9
1a001b30:	462a      	mov	r2, r5
1a001b32:	4641      	mov	r1, r8
1a001b34:	4638      	mov	r0, r7
1a001b36:	f7ff fe2f 	bl	1a001798 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001b3a:	4620      	mov	r0, r4
1a001b3c:	f7ff feaa 	bl	1a001894 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001b40:	2001      	movs	r0, #1
	}
1a001b42:	b005      	add	sp, #20
1a001b44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a001b48:	4630      	mov	r0, r6
1a001b4a:	f7ff f9d5 	bl	1a000ef8 <vPortFree>
1a001b4e:	e7e4      	b.n	1a001b1a <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b54:	e7f5      	b.n	1a001b42 <xTaskCreate+0x4c>
1a001b56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a001b5a:	e7f2      	b.n	1a001b42 <xTaskCreate+0x4c>

1a001b5c <vTaskStartScheduler>:
{
1a001b5c:	b510      	push	{r4, lr}
1a001b5e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001b60:	2400      	movs	r4, #0
1a001b62:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001b64:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001b66:	aa07      	add	r2, sp, #28
1a001b68:	a906      	add	r1, sp, #24
1a001b6a:	a805      	add	r0, sp, #20
1a001b6c:	f7ff fdb4 	bl	1a0016d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001b70:	9b05      	ldr	r3, [sp, #20]
1a001b72:	9302      	str	r3, [sp, #8]
1a001b74:	9b06      	ldr	r3, [sp, #24]
1a001b76:	9301      	str	r3, [sp, #4]
1a001b78:	9400      	str	r4, [sp, #0]
1a001b7a:	4623      	mov	r3, r4
1a001b7c:	9a07      	ldr	r2, [sp, #28]
1a001b7e:	4917      	ldr	r1, [pc, #92]	; (1a001bdc <vTaskStartScheduler+0x80>)
1a001b80:	4817      	ldr	r0, [pc, #92]	; (1a001be0 <vTaskStartScheduler+0x84>)
1a001b82:	f7ff ff7f 	bl	1a001a84 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a001b86:	b140      	cbz	r0, 1a001b9a <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a001b88:	f000 fbc2 	bl	1a002310 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001b8c:	2801      	cmp	r0, #1
1a001b8e:	d006      	beq.n	1a001b9e <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001b90:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001b94:	d018      	beq.n	1a001bc8 <vTaskStartScheduler+0x6c>
}
1a001b96:	b008      	add	sp, #32
1a001b98:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a001b9a:	2000      	movs	r0, #0
1a001b9c:	e7f6      	b.n	1a001b8c <vTaskStartScheduler+0x30>
1a001b9e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ba2:	f383 8811 	msr	BASEPRI, r3
1a001ba6:	f3bf 8f6f 	isb	sy
1a001baa:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001bae:	4b0d      	ldr	r3, [pc, #52]	; (1a001be4 <vTaskStartScheduler+0x88>)
1a001bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001bb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001bb6:	4b0c      	ldr	r3, [pc, #48]	; (1a001be8 <vTaskStartScheduler+0x8c>)
1a001bb8:	2201      	movs	r2, #1
1a001bba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001bbc:	4b0b      	ldr	r3, [pc, #44]	; (1a001bec <vTaskStartScheduler+0x90>)
1a001bbe:	2200      	movs	r2, #0
1a001bc0:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001bc2:	f000 fe61 	bl	1a002888 <xPortStartScheduler>
1a001bc6:	e7e6      	b.n	1a001b96 <vTaskStartScheduler+0x3a>
1a001bc8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bcc:	f383 8811 	msr	BASEPRI, r3
1a001bd0:	f3bf 8f6f 	isb	sy
1a001bd4:	f3bf 8f4f 	dsb	sy
1a001bd8:	e7fe      	b.n	1a001bd8 <vTaskStartScheduler+0x7c>
1a001bda:	bf00      	nop
1a001bdc:	1a006080 	.word	0x1a006080
1a001be0:	1a0019c5 	.word	0x1a0019c5
1a001be4:	1000299c 	.word	0x1000299c
1a001be8:	100029b8 	.word	0x100029b8
1a001bec:	100029e4 	.word	0x100029e4

1a001bf0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001bf0:	4a02      	ldr	r2, [pc, #8]	; (1a001bfc <vTaskSuspendAll+0xc>)
1a001bf2:	6813      	ldr	r3, [r2, #0]
1a001bf4:	3301      	adds	r3, #1
1a001bf6:	6013      	str	r3, [r2, #0]
}
1a001bf8:	4770      	bx	lr
1a001bfa:	bf00      	nop
1a001bfc:	10002968 	.word	0x10002968

1a001c00 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001c00:	4b01      	ldr	r3, [pc, #4]	; (1a001c08 <xTaskGetTickCount+0x8>)
1a001c02:	6818      	ldr	r0, [r3, #0]
}
1a001c04:	4770      	bx	lr
1a001c06:	bf00      	nop
1a001c08:	100029e4 	.word	0x100029e4

1a001c0c <xTaskIncrementTick>:
{
1a001c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001c0e:	4b3a      	ldr	r3, [pc, #232]	; (1a001cf8 <xTaskIncrementTick+0xec>)
1a001c10:	681b      	ldr	r3, [r3, #0]
1a001c12:	2b00      	cmp	r3, #0
1a001c14:	d164      	bne.n	1a001ce0 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001c16:	4b39      	ldr	r3, [pc, #228]	; (1a001cfc <xTaskIncrementTick+0xf0>)
1a001c18:	681d      	ldr	r5, [r3, #0]
1a001c1a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001c1c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001c1e:	b9c5      	cbnz	r5, 1a001c52 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001c20:	4b37      	ldr	r3, [pc, #220]	; (1a001d00 <xTaskIncrementTick+0xf4>)
1a001c22:	681b      	ldr	r3, [r3, #0]
1a001c24:	681b      	ldr	r3, [r3, #0]
1a001c26:	b143      	cbz	r3, 1a001c3a <xTaskIncrementTick+0x2e>
1a001c28:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c2c:	f383 8811 	msr	BASEPRI, r3
1a001c30:	f3bf 8f6f 	isb	sy
1a001c34:	f3bf 8f4f 	dsb	sy
1a001c38:	e7fe      	b.n	1a001c38 <xTaskIncrementTick+0x2c>
1a001c3a:	4a31      	ldr	r2, [pc, #196]	; (1a001d00 <xTaskIncrementTick+0xf4>)
1a001c3c:	6811      	ldr	r1, [r2, #0]
1a001c3e:	4b31      	ldr	r3, [pc, #196]	; (1a001d04 <xTaskIncrementTick+0xf8>)
1a001c40:	6818      	ldr	r0, [r3, #0]
1a001c42:	6010      	str	r0, [r2, #0]
1a001c44:	6019      	str	r1, [r3, #0]
1a001c46:	4a30      	ldr	r2, [pc, #192]	; (1a001d08 <xTaskIncrementTick+0xfc>)
1a001c48:	6813      	ldr	r3, [r2, #0]
1a001c4a:	3301      	adds	r3, #1
1a001c4c:	6013      	str	r3, [r2, #0]
1a001c4e:	f7ff fd8d 	bl	1a00176c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001c52:	4b2e      	ldr	r3, [pc, #184]	; (1a001d0c <xTaskIncrementTick+0x100>)
1a001c54:	681b      	ldr	r3, [r3, #0]
1a001c56:	42ab      	cmp	r3, r5
1a001c58:	d938      	bls.n	1a001ccc <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a001c5a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001c5c:	4b2c      	ldr	r3, [pc, #176]	; (1a001d10 <xTaskIncrementTick+0x104>)
1a001c5e:	681b      	ldr	r3, [r3, #0]
1a001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001c62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001c66:	009a      	lsls	r2, r3, #2
1a001c68:	4b2a      	ldr	r3, [pc, #168]	; (1a001d14 <xTaskIncrementTick+0x108>)
1a001c6a:	589b      	ldr	r3, [r3, r2]
1a001c6c:	2b01      	cmp	r3, #1
1a001c6e:	d93c      	bls.n	1a001cea <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001c70:	2401      	movs	r4, #1
1a001c72:	e03a      	b.n	1a001cea <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001c74:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001c76:	4b22      	ldr	r3, [pc, #136]	; (1a001d00 <xTaskIncrementTick+0xf4>)
1a001c78:	681b      	ldr	r3, [r3, #0]
1a001c7a:	681b      	ldr	r3, [r3, #0]
1a001c7c:	b343      	cbz	r3, 1a001cd0 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001c7e:	4b20      	ldr	r3, [pc, #128]	; (1a001d00 <xTaskIncrementTick+0xf4>)
1a001c80:	681b      	ldr	r3, [r3, #0]
1a001c82:	68db      	ldr	r3, [r3, #12]
1a001c84:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001c86:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001c88:	429d      	cmp	r5, r3
1a001c8a:	d326      	bcc.n	1a001cda <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001c8c:	1d37      	adds	r7, r6, #4
1a001c8e:	4638      	mov	r0, r7
1a001c90:	f7ff fd0d 	bl	1a0016ae <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001c94:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001c96:	b11b      	cbz	r3, 1a001ca0 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001c98:	f106 0018 	add.w	r0, r6, #24
1a001c9c:	f7ff fd07 	bl	1a0016ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001ca0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001ca2:	2201      	movs	r2, #1
1a001ca4:	409a      	lsls	r2, r3
1a001ca6:	491c      	ldr	r1, [pc, #112]	; (1a001d18 <xTaskIncrementTick+0x10c>)
1a001ca8:	6808      	ldr	r0, [r1, #0]
1a001caa:	4302      	orrs	r2, r0
1a001cac:	600a      	str	r2, [r1, #0]
1a001cae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001cb2:	009a      	lsls	r2, r3, #2
1a001cb4:	4639      	mov	r1, r7
1a001cb6:	4817      	ldr	r0, [pc, #92]	; (1a001d14 <xTaskIncrementTick+0x108>)
1a001cb8:	4410      	add	r0, r2
1a001cba:	f7ff fcd2 	bl	1a001662 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001cbe:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001cc0:	4b13      	ldr	r3, [pc, #76]	; (1a001d10 <xTaskIncrementTick+0x104>)
1a001cc2:	681b      	ldr	r3, [r3, #0]
1a001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001cc6:	429a      	cmp	r2, r3
1a001cc8:	d2d4      	bcs.n	1a001c74 <xTaskIncrementTick+0x68>
1a001cca:	e7d4      	b.n	1a001c76 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001ccc:	2400      	movs	r4, #0
1a001cce:	e7d2      	b.n	1a001c76 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001cd0:	4b0e      	ldr	r3, [pc, #56]	; (1a001d0c <xTaskIncrementTick+0x100>)
1a001cd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001cd6:	601a      	str	r2, [r3, #0]
					break;
1a001cd8:	e7c0      	b.n	1a001c5c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001cda:	4a0c      	ldr	r2, [pc, #48]	; (1a001d0c <xTaskIncrementTick+0x100>)
1a001cdc:	6013      	str	r3, [r2, #0]
						break;
1a001cde:	e7bd      	b.n	1a001c5c <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001ce0:	4a0e      	ldr	r2, [pc, #56]	; (1a001d1c <xTaskIncrementTick+0x110>)
1a001ce2:	6813      	ldr	r3, [r2, #0]
1a001ce4:	3301      	adds	r3, #1
1a001ce6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001ce8:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001cea:	4b0d      	ldr	r3, [pc, #52]	; (1a001d20 <xTaskIncrementTick+0x114>)
1a001cec:	681b      	ldr	r3, [r3, #0]
1a001cee:	b103      	cbz	r3, 1a001cf2 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001cf0:	2401      	movs	r4, #1
}
1a001cf2:	4620      	mov	r0, r4
1a001cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001cf6:	bf00      	nop
1a001cf8:	10002968 	.word	0x10002968
1a001cfc:	100029e4 	.word	0x100029e4
1a001d00:	100028c8 	.word	0x100028c8
1a001d04:	100028cc 	.word	0x100028cc
1a001d08:	100029a0 	.word	0x100029a0
1a001d0c:	1000299c 	.word	0x1000299c
1a001d10:	100028c4 	.word	0x100028c4
1a001d14:	100028d0 	.word	0x100028d0
1a001d18:	10002970 	.word	0x10002970
1a001d1c:	10002964 	.word	0x10002964
1a001d20:	100029e8 	.word	0x100029e8

1a001d24 <xTaskResumeAll>:
{
1a001d24:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a001d26:	4b33      	ldr	r3, [pc, #204]	; (1a001df4 <xTaskResumeAll+0xd0>)
1a001d28:	681b      	ldr	r3, [r3, #0]
1a001d2a:	b943      	cbnz	r3, 1a001d3e <xTaskResumeAll+0x1a>
1a001d2c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d30:	f383 8811 	msr	BASEPRI, r3
1a001d34:	f3bf 8f6f 	isb	sy
1a001d38:	f3bf 8f4f 	dsb	sy
1a001d3c:	e7fe      	b.n	1a001d3c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001d3e:	f000 fd01 	bl	1a002744 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a001d42:	4b2c      	ldr	r3, [pc, #176]	; (1a001df4 <xTaskResumeAll+0xd0>)
1a001d44:	681a      	ldr	r2, [r3, #0]
1a001d46:	3a01      	subs	r2, #1
1a001d48:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001d4a:	681b      	ldr	r3, [r3, #0]
1a001d4c:	2b00      	cmp	r3, #0
1a001d4e:	d14d      	bne.n	1a001dec <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001d50:	4b29      	ldr	r3, [pc, #164]	; (1a001df8 <xTaskResumeAll+0xd4>)
1a001d52:	681b      	ldr	r3, [r3, #0]
1a001d54:	b923      	cbnz	r3, 1a001d60 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a001d56:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001d58:	f000 fd16 	bl	1a002788 <vPortExitCritical>
}
1a001d5c:	4620      	mov	r0, r4
1a001d5e:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a001d60:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001d62:	4b26      	ldr	r3, [pc, #152]	; (1a001dfc <xTaskResumeAll+0xd8>)
1a001d64:	681b      	ldr	r3, [r3, #0]
1a001d66:	b31b      	cbz	r3, 1a001db0 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001d68:	4b24      	ldr	r3, [pc, #144]	; (1a001dfc <xTaskResumeAll+0xd8>)
1a001d6a:	68db      	ldr	r3, [r3, #12]
1a001d6c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001d6e:	f104 0018 	add.w	r0, r4, #24
1a001d72:	f7ff fc9c 	bl	1a0016ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001d76:	1d25      	adds	r5, r4, #4
1a001d78:	4628      	mov	r0, r5
1a001d7a:	f7ff fc98 	bl	1a0016ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001d7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001d80:	2201      	movs	r2, #1
1a001d82:	409a      	lsls	r2, r3
1a001d84:	491e      	ldr	r1, [pc, #120]	; (1a001e00 <xTaskResumeAll+0xdc>)
1a001d86:	6808      	ldr	r0, [r1, #0]
1a001d88:	4302      	orrs	r2, r0
1a001d8a:	600a      	str	r2, [r1, #0]
1a001d8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001d90:	009a      	lsls	r2, r3, #2
1a001d92:	4629      	mov	r1, r5
1a001d94:	481b      	ldr	r0, [pc, #108]	; (1a001e04 <xTaskResumeAll+0xe0>)
1a001d96:	4410      	add	r0, r2
1a001d98:	f7ff fc63 	bl	1a001662 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001d9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001d9e:	4b1a      	ldr	r3, [pc, #104]	; (1a001e08 <xTaskResumeAll+0xe4>)
1a001da0:	681b      	ldr	r3, [r3, #0]
1a001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001da4:	429a      	cmp	r2, r3
1a001da6:	d3dc      	bcc.n	1a001d62 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a001da8:	4b18      	ldr	r3, [pc, #96]	; (1a001e0c <xTaskResumeAll+0xe8>)
1a001daa:	2201      	movs	r2, #1
1a001dac:	601a      	str	r2, [r3, #0]
1a001dae:	e7d8      	b.n	1a001d62 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a001db0:	b10c      	cbz	r4, 1a001db6 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a001db2:	f7ff fcdb 	bl	1a00176c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a001db6:	4b16      	ldr	r3, [pc, #88]	; (1a001e10 <xTaskResumeAll+0xec>)
1a001db8:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001dba:	b154      	cbz	r4, 1a001dd2 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a001dbc:	f7ff ff26 	bl	1a001c0c <xTaskIncrementTick>
1a001dc0:	b110      	cbz	r0, 1a001dc8 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a001dc2:	4b12      	ldr	r3, [pc, #72]	; (1a001e0c <xTaskResumeAll+0xe8>)
1a001dc4:	2201      	movs	r2, #1
1a001dc6:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001dc8:	3c01      	subs	r4, #1
1a001dca:	d1f7      	bne.n	1a001dbc <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a001dcc:	4b10      	ldr	r3, [pc, #64]	; (1a001e10 <xTaskResumeAll+0xec>)
1a001dce:	2200      	movs	r2, #0
1a001dd0:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a001dd2:	4b0e      	ldr	r3, [pc, #56]	; (1a001e0c <xTaskResumeAll+0xe8>)
1a001dd4:	681b      	ldr	r3, [r3, #0]
1a001dd6:	b15b      	cbz	r3, 1a001df0 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a001dd8:	4b0e      	ldr	r3, [pc, #56]	; (1a001e14 <xTaskResumeAll+0xf0>)
1a001dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001dde:	601a      	str	r2, [r3, #0]
1a001de0:	f3bf 8f4f 	dsb	sy
1a001de4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001de8:	2401      	movs	r4, #1
1a001dea:	e7b5      	b.n	1a001d58 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a001dec:	2400      	movs	r4, #0
1a001dee:	e7b3      	b.n	1a001d58 <xTaskResumeAll+0x34>
1a001df0:	2400      	movs	r4, #0
1a001df2:	e7b1      	b.n	1a001d58 <xTaskResumeAll+0x34>
1a001df4:	10002968 	.word	0x10002968
1a001df8:	1000295c 	.word	0x1000295c
1a001dfc:	100029a4 	.word	0x100029a4
1a001e00:	10002970 	.word	0x10002970
1a001e04:	100028d0 	.word	0x100028d0
1a001e08:	100028c4 	.word	0x100028c4
1a001e0c:	100029e8 	.word	0x100029e8
1a001e10:	10002964 	.word	0x10002964
1a001e14:	e000ed04 	.word	0xe000ed04

1a001e18 <vTaskDelayUntil>:
	{
1a001e18:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a001e1a:	b150      	cbz	r0, 1a001e32 <vTaskDelayUntil+0x1a>
1a001e1c:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a001e1e:	b989      	cbnz	r1, 1a001e44 <vTaskDelayUntil+0x2c>
1a001e20:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e24:	f383 8811 	msr	BASEPRI, r3
1a001e28:	f3bf 8f6f 	isb	sy
1a001e2c:	f3bf 8f4f 	dsb	sy
1a001e30:	e7fe      	b.n	1a001e30 <vTaskDelayUntil+0x18>
1a001e32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e36:	f383 8811 	msr	BASEPRI, r3
1a001e3a:	f3bf 8f6f 	isb	sy
1a001e3e:	f3bf 8f4f 	dsb	sy
1a001e42:	e7fe      	b.n	1a001e42 <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a001e44:	4b1a      	ldr	r3, [pc, #104]	; (1a001eb0 <vTaskDelayUntil+0x98>)
1a001e46:	681b      	ldr	r3, [r3, #0]
1a001e48:	b143      	cbz	r3, 1a001e5c <vTaskDelayUntil+0x44>
1a001e4a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e4e:	f383 8811 	msr	BASEPRI, r3
1a001e52:	f3bf 8f6f 	isb	sy
1a001e56:	f3bf 8f4f 	dsb	sy
1a001e5a:	e7fe      	b.n	1a001e5a <vTaskDelayUntil+0x42>
1a001e5c:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a001e5e:	f7ff fec7 	bl	1a001bf0 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a001e62:	4b14      	ldr	r3, [pc, #80]	; (1a001eb4 <vTaskDelayUntil+0x9c>)
1a001e64:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a001e66:	682a      	ldr	r2, [r5, #0]
1a001e68:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a001e6a:	4282      	cmp	r2, r0
1a001e6c:	d918      	bls.n	1a001ea0 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001e6e:	42a2      	cmp	r2, r4
1a001e70:	d80c      	bhi.n	1a001e8c <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a001e72:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a001e74:	f7ff ff56 	bl	1a001d24 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001e78:	b938      	cbnz	r0, 1a001e8a <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a001e7a:	4b0f      	ldr	r3, [pc, #60]	; (1a001eb8 <vTaskDelayUntil+0xa0>)
1a001e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001e80:	601a      	str	r2, [r3, #0]
1a001e82:	f3bf 8f4f 	dsb	sy
1a001e86:	f3bf 8f6f 	isb	sy
	}
1a001e8a:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001e8c:	42a0      	cmp	r0, r4
1a001e8e:	d301      	bcc.n	1a001e94 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a001e90:	602c      	str	r4, [r5, #0]
1a001e92:	e7ef      	b.n	1a001e74 <vTaskDelayUntil+0x5c>
1a001e94:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a001e96:	2100      	movs	r1, #0
1a001e98:	1a20      	subs	r0, r4, r0
1a001e9a:	f7ff fda7 	bl	1a0019ec <prvAddCurrentTaskToDelayedList>
1a001e9e:	e7e9      	b.n	1a001e74 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a001ea0:	42a2      	cmp	r2, r4
1a001ea2:	d801      	bhi.n	1a001ea8 <vTaskDelayUntil+0x90>
1a001ea4:	42a0      	cmp	r0, r4
1a001ea6:	d201      	bcs.n	1a001eac <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a001ea8:	602c      	str	r4, [r5, #0]
1a001eaa:	e7f4      	b.n	1a001e96 <vTaskDelayUntil+0x7e>
1a001eac:	602c      	str	r4, [r5, #0]
1a001eae:	e7e1      	b.n	1a001e74 <vTaskDelayUntil+0x5c>
1a001eb0:	10002968 	.word	0x10002968
1a001eb4:	100029e4 	.word	0x100029e4
1a001eb8:	e000ed04 	.word	0xe000ed04

1a001ebc <vTaskDelay>:
	{
1a001ebc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a001ebe:	b1a8      	cbz	r0, 1a001eec <vTaskDelay+0x30>
1a001ec0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a001ec2:	4b0f      	ldr	r3, [pc, #60]	; (1a001f00 <vTaskDelay+0x44>)
1a001ec4:	681b      	ldr	r3, [r3, #0]
1a001ec6:	b143      	cbz	r3, 1a001eda <vTaskDelay+0x1e>
1a001ec8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ecc:	f383 8811 	msr	BASEPRI, r3
1a001ed0:	f3bf 8f6f 	isb	sy
1a001ed4:	f3bf 8f4f 	dsb	sy
1a001ed8:	e7fe      	b.n	1a001ed8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a001eda:	f7ff fe89 	bl	1a001bf0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a001ede:	2100      	movs	r1, #0
1a001ee0:	4620      	mov	r0, r4
1a001ee2:	f7ff fd83 	bl	1a0019ec <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a001ee6:	f7ff ff1d 	bl	1a001d24 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001eea:	b938      	cbnz	r0, 1a001efc <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a001eec:	4b05      	ldr	r3, [pc, #20]	; (1a001f04 <vTaskDelay+0x48>)
1a001eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ef2:	601a      	str	r2, [r3, #0]
1a001ef4:	f3bf 8f4f 	dsb	sy
1a001ef8:	f3bf 8f6f 	isb	sy
	}
1a001efc:	bd10      	pop	{r4, pc}
1a001efe:	bf00      	nop
1a001f00:	10002968 	.word	0x10002968
1a001f04:	e000ed04 	.word	0xe000ed04

1a001f08 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001f08:	4b2c      	ldr	r3, [pc, #176]	; (1a001fbc <vTaskSwitchContext+0xb4>)
1a001f0a:	681b      	ldr	r3, [r3, #0]
1a001f0c:	b11b      	cbz	r3, 1a001f16 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a001f0e:	4b2c      	ldr	r3, [pc, #176]	; (1a001fc0 <vTaskSwitchContext+0xb8>)
1a001f10:	2201      	movs	r2, #1
1a001f12:	601a      	str	r2, [r3, #0]
1a001f14:	4770      	bx	lr
{
1a001f16:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a001f18:	4b29      	ldr	r3, [pc, #164]	; (1a001fc0 <vTaskSwitchContext+0xb8>)
1a001f1a:	2200      	movs	r2, #0
1a001f1c:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a001f1e:	4b29      	ldr	r3, [pc, #164]	; (1a001fc4 <vTaskSwitchContext+0xbc>)
1a001f20:	681b      	ldr	r3, [r3, #0]
1a001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001f24:	681a      	ldr	r2, [r3, #0]
1a001f26:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001f2a:	d103      	bne.n	1a001f34 <vTaskSwitchContext+0x2c>
1a001f2c:	685a      	ldr	r2, [r3, #4]
1a001f2e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001f32:	d01b      	beq.n	1a001f6c <vTaskSwitchContext+0x64>
1a001f34:	4b23      	ldr	r3, [pc, #140]	; (1a001fc4 <vTaskSwitchContext+0xbc>)
1a001f36:	6818      	ldr	r0, [r3, #0]
1a001f38:	6819      	ldr	r1, [r3, #0]
1a001f3a:	3134      	adds	r1, #52	; 0x34
1a001f3c:	f7ff fc08 	bl	1a001750 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001f40:	4b21      	ldr	r3, [pc, #132]	; (1a001fc8 <vTaskSwitchContext+0xc0>)
1a001f42:	681b      	ldr	r3, [r3, #0]

1a001f44:	fab3 f383 	clz	r3, r3
1a001f48:	b2db      	uxtb	r3, r3
1a001f4a:	f1c3 031f 	rsb	r3, r3, #31
1a001f4e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001f52:	008a      	lsls	r2, r1, #2
1a001f54:	491d      	ldr	r1, [pc, #116]	; (1a001fcc <vTaskSwitchContext+0xc4>)
1a001f56:	588a      	ldr	r2, [r1, r2]
1a001f58:	b98a      	cbnz	r2, 1a001f7e <vTaskSwitchContext+0x76>

1a001f5a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f5e:	f383 8811 	msr	BASEPRI, r3
1a001f62:	f3bf 8f6f 	isb	sy
1a001f66:	f3bf 8f4f 	dsb	sy
1a001f6a:	e7fe      	b.n	1a001f6a <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001f6c:	689a      	ldr	r2, [r3, #8]
1a001f6e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001f72:	d1df      	bne.n	1a001f34 <vTaskSwitchContext+0x2c>
1a001f74:	68db      	ldr	r3, [r3, #12]
1a001f76:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001f7a:	d1db      	bne.n	1a001f34 <vTaskSwitchContext+0x2c>
1a001f7c:	e7e0      	b.n	1a001f40 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001f7e:	4813      	ldr	r0, [pc, #76]	; (1a001fcc <vTaskSwitchContext+0xc4>)
1a001f80:	009a      	lsls	r2, r3, #2
1a001f82:	18d4      	adds	r4, r2, r3
1a001f84:	00a1      	lsls	r1, r4, #2
1a001f86:	4401      	add	r1, r0
1a001f88:	684c      	ldr	r4, [r1, #4]
1a001f8a:	6864      	ldr	r4, [r4, #4]
1a001f8c:	604c      	str	r4, [r1, #4]
1a001f8e:	441a      	add	r2, r3
1a001f90:	0091      	lsls	r1, r2, #2
1a001f92:	3108      	adds	r1, #8
1a001f94:	4408      	add	r0, r1
1a001f96:	4284      	cmp	r4, r0
1a001f98:	d009      	beq.n	1a001fae <vTaskSwitchContext+0xa6>
1a001f9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001f9e:	009a      	lsls	r2, r3, #2
1a001fa0:	4b0a      	ldr	r3, [pc, #40]	; (1a001fcc <vTaskSwitchContext+0xc4>)
1a001fa2:	4413      	add	r3, r2
1a001fa4:	685b      	ldr	r3, [r3, #4]
1a001fa6:	68da      	ldr	r2, [r3, #12]
1a001fa8:	4b06      	ldr	r3, [pc, #24]	; (1a001fc4 <vTaskSwitchContext+0xbc>)
1a001faa:	601a      	str	r2, [r3, #0]
}
1a001fac:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001fae:	6861      	ldr	r1, [r4, #4]
1a001fb0:	4806      	ldr	r0, [pc, #24]	; (1a001fcc <vTaskSwitchContext+0xc4>)
1a001fb2:	2214      	movs	r2, #20
1a001fb4:	fb02 0203 	mla	r2, r2, r3, r0
1a001fb8:	6051      	str	r1, [r2, #4]
1a001fba:	e7ee      	b.n	1a001f9a <vTaskSwitchContext+0x92>
1a001fbc:	10002968 	.word	0x10002968
1a001fc0:	100029e8 	.word	0x100029e8
1a001fc4:	100028c4 	.word	0x100028c4
1a001fc8:	10002970 	.word	0x10002970
1a001fcc:	100028d0 	.word	0x100028d0

1a001fd0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a001fd0:	b940      	cbnz	r0, 1a001fe4 <vTaskPlaceOnEventList+0x14>
1a001fd2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fd6:	f383 8811 	msr	BASEPRI, r3
1a001fda:	f3bf 8f6f 	isb	sy
1a001fde:	f3bf 8f4f 	dsb	sy
1a001fe2:	e7fe      	b.n	1a001fe2 <vTaskPlaceOnEventList+0x12>
{
1a001fe4:	b510      	push	{r4, lr}
1a001fe6:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001fe8:	4b04      	ldr	r3, [pc, #16]	; (1a001ffc <vTaskPlaceOnEventList+0x2c>)
1a001fea:	6819      	ldr	r1, [r3, #0]
1a001fec:	3118      	adds	r1, #24
1a001fee:	f7ff fb44 	bl	1a00167a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001ff2:	2101      	movs	r1, #1
1a001ff4:	4620      	mov	r0, r4
1a001ff6:	f7ff fcf9 	bl	1a0019ec <prvAddCurrentTaskToDelayedList>
}
1a001ffa:	bd10      	pop	{r4, pc}
1a001ffc:	100028c4 	.word	0x100028c4

1a002000 <vTaskPlaceOnEventListRestricted>:
	{
1a002000:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a002002:	b940      	cbnz	r0, 1a002016 <vTaskPlaceOnEventListRestricted+0x16>
1a002004:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002008:	f383 8811 	msr	BASEPRI, r3
1a00200c:	f3bf 8f6f 	isb	sy
1a002010:	f3bf 8f4f 	dsb	sy
1a002014:	e7fe      	b.n	1a002014 <vTaskPlaceOnEventListRestricted+0x14>
1a002016:	460c      	mov	r4, r1
1a002018:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a00201a:	4a06      	ldr	r2, [pc, #24]	; (1a002034 <vTaskPlaceOnEventListRestricted+0x34>)
1a00201c:	6811      	ldr	r1, [r2, #0]
1a00201e:	3118      	adds	r1, #24
1a002020:	f7ff fb1f 	bl	1a001662 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a002024:	b10d      	cbz	r5, 1a00202a <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a002026:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a00202a:	4629      	mov	r1, r5
1a00202c:	4620      	mov	r0, r4
1a00202e:	f7ff fcdd 	bl	1a0019ec <prvAddCurrentTaskToDelayedList>
	}
1a002032:	bd38      	pop	{r3, r4, r5, pc}
1a002034:	100028c4 	.word	0x100028c4

1a002038 <xTaskRemoveFromEventList>:
{
1a002038:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a00203a:	68c3      	ldr	r3, [r0, #12]
1a00203c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a00203e:	b944      	cbnz	r4, 1a002052 <xTaskRemoveFromEventList+0x1a>
1a002040:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002044:	f383 8811 	msr	BASEPRI, r3
1a002048:	f3bf 8f6f 	isb	sy
1a00204c:	f3bf 8f4f 	dsb	sy
1a002050:	e7fe      	b.n	1a002050 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a002052:	f104 0518 	add.w	r5, r4, #24
1a002056:	4628      	mov	r0, r5
1a002058:	f7ff fb29 	bl	1a0016ae <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00205c:	4b13      	ldr	r3, [pc, #76]	; (1a0020ac <xTaskRemoveFromEventList+0x74>)
1a00205e:	681b      	ldr	r3, [r3, #0]
1a002060:	b9e3      	cbnz	r3, 1a00209c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a002062:	1d25      	adds	r5, r4, #4
1a002064:	4628      	mov	r0, r5
1a002066:	f7ff fb22 	bl	1a0016ae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a00206a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00206c:	2201      	movs	r2, #1
1a00206e:	409a      	lsls	r2, r3
1a002070:	490f      	ldr	r1, [pc, #60]	; (1a0020b0 <xTaskRemoveFromEventList+0x78>)
1a002072:	6808      	ldr	r0, [r1, #0]
1a002074:	4302      	orrs	r2, r0
1a002076:	600a      	str	r2, [r1, #0]
1a002078:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00207c:	009a      	lsls	r2, r3, #2
1a00207e:	4629      	mov	r1, r5
1a002080:	480c      	ldr	r0, [pc, #48]	; (1a0020b4 <xTaskRemoveFromEventList+0x7c>)
1a002082:	4410      	add	r0, r2
1a002084:	f7ff faed 	bl	1a001662 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a002088:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00208a:	4b0b      	ldr	r3, [pc, #44]	; (1a0020b8 <xTaskRemoveFromEventList+0x80>)
1a00208c:	681b      	ldr	r3, [r3, #0]
1a00208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002090:	429a      	cmp	r2, r3
1a002092:	d908      	bls.n	1a0020a6 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a002094:	2001      	movs	r0, #1
1a002096:	4b09      	ldr	r3, [pc, #36]	; (1a0020bc <xTaskRemoveFromEventList+0x84>)
1a002098:	6018      	str	r0, [r3, #0]
}
1a00209a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a00209c:	4629      	mov	r1, r5
1a00209e:	4808      	ldr	r0, [pc, #32]	; (1a0020c0 <xTaskRemoveFromEventList+0x88>)
1a0020a0:	f7ff fadf 	bl	1a001662 <vListInsertEnd>
1a0020a4:	e7f0      	b.n	1a002088 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a0020a6:	2000      	movs	r0, #0
	return xReturn;
1a0020a8:	e7f7      	b.n	1a00209a <xTaskRemoveFromEventList+0x62>
1a0020aa:	bf00      	nop
1a0020ac:	10002968 	.word	0x10002968
1a0020b0:	10002970 	.word	0x10002970
1a0020b4:	100028d0 	.word	0x100028d0
1a0020b8:	100028c4 	.word	0x100028c4
1a0020bc:	100029e8 	.word	0x100029e8
1a0020c0:	100029a4 	.word	0x100029a4

1a0020c4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a0020c4:	4b03      	ldr	r3, [pc, #12]	; (1a0020d4 <vTaskInternalSetTimeOutState+0x10>)
1a0020c6:	681b      	ldr	r3, [r3, #0]
1a0020c8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a0020ca:	4b03      	ldr	r3, [pc, #12]	; (1a0020d8 <vTaskInternalSetTimeOutState+0x14>)
1a0020cc:	681b      	ldr	r3, [r3, #0]
1a0020ce:	6043      	str	r3, [r0, #4]
}
1a0020d0:	4770      	bx	lr
1a0020d2:	bf00      	nop
1a0020d4:	100029a0 	.word	0x100029a0
1a0020d8:	100029e4 	.word	0x100029e4

1a0020dc <xTaskCheckForTimeOut>:
{
1a0020dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a0020de:	b150      	cbz	r0, 1a0020f6 <xTaskCheckForTimeOut+0x1a>
1a0020e0:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a0020e2:	b989      	cbnz	r1, 1a002108 <xTaskCheckForTimeOut+0x2c>
1a0020e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020e8:	f383 8811 	msr	BASEPRI, r3
1a0020ec:	f3bf 8f6f 	isb	sy
1a0020f0:	f3bf 8f4f 	dsb	sy
1a0020f4:	e7fe      	b.n	1a0020f4 <xTaskCheckForTimeOut+0x18>
1a0020f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020fa:	f383 8811 	msr	BASEPRI, r3
1a0020fe:	f3bf 8f6f 	isb	sy
1a002102:	f3bf 8f4f 	dsb	sy
1a002106:	e7fe      	b.n	1a002106 <xTaskCheckForTimeOut+0x2a>
1a002108:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a00210a:	f000 fb1b 	bl	1a002744 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a00210e:	4b11      	ldr	r3, [pc, #68]	; (1a002154 <xTaskCheckForTimeOut+0x78>)
1a002110:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a002112:	6868      	ldr	r0, [r5, #4]
1a002114:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a002116:	6823      	ldr	r3, [r4, #0]
1a002118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00211c:	d016      	beq.n	1a00214c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a00211e:	682f      	ldr	r7, [r5, #0]
1a002120:	4e0d      	ldr	r6, [pc, #52]	; (1a002158 <xTaskCheckForTimeOut+0x7c>)
1a002122:	6836      	ldr	r6, [r6, #0]
1a002124:	42b7      	cmp	r7, r6
1a002126:	d001      	beq.n	1a00212c <xTaskCheckForTimeOut+0x50>
1a002128:	4288      	cmp	r0, r1
1a00212a:	d911      	bls.n	1a002150 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a00212c:	4293      	cmp	r3, r2
1a00212e:	d803      	bhi.n	1a002138 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a002130:	2300      	movs	r3, #0
1a002132:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a002134:	2401      	movs	r4, #1
1a002136:	e005      	b.n	1a002144 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a002138:	1a9b      	subs	r3, r3, r2
1a00213a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a00213c:	4628      	mov	r0, r5
1a00213e:	f7ff ffc1 	bl	1a0020c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a002142:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a002144:	f000 fb20 	bl	1a002788 <vPortExitCritical>
}
1a002148:	4620      	mov	r0, r4
1a00214a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a00214c:	2400      	movs	r4, #0
1a00214e:	e7f9      	b.n	1a002144 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a002150:	2401      	movs	r4, #1
1a002152:	e7f7      	b.n	1a002144 <xTaskCheckForTimeOut+0x68>
1a002154:	100029e4 	.word	0x100029e4
1a002158:	100029a0 	.word	0x100029a0

1a00215c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a00215c:	4b01      	ldr	r3, [pc, #4]	; (1a002164 <vTaskMissedYield+0x8>)
1a00215e:	2201      	movs	r2, #1
1a002160:	601a      	str	r2, [r3, #0]
}
1a002162:	4770      	bx	lr
1a002164:	100029e8 	.word	0x100029e8

1a002168 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a002168:	4b05      	ldr	r3, [pc, #20]	; (1a002180 <xTaskGetSchedulerState+0x18>)
1a00216a:	681b      	ldr	r3, [r3, #0]
1a00216c:	b133      	cbz	r3, 1a00217c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00216e:	4b05      	ldr	r3, [pc, #20]	; (1a002184 <xTaskGetSchedulerState+0x1c>)
1a002170:	681b      	ldr	r3, [r3, #0]
1a002172:	b10b      	cbz	r3, 1a002178 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a002174:	2000      	movs	r0, #0
	}
1a002176:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a002178:	2002      	movs	r0, #2
1a00217a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a00217c:	2001      	movs	r0, #1
1a00217e:	4770      	bx	lr
1a002180:	100029b8 	.word	0x100029b8
1a002184:	10002968 	.word	0x10002968

1a002188 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a002188:	2800      	cmp	r0, #0
1a00218a:	d049      	beq.n	1a002220 <xTaskPriorityDisinherit+0x98>
	{
1a00218c:	b538      	push	{r3, r4, r5, lr}
1a00218e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a002190:	4a26      	ldr	r2, [pc, #152]	; (1a00222c <xTaskPriorityDisinherit+0xa4>)
1a002192:	6812      	ldr	r2, [r2, #0]
1a002194:	4282      	cmp	r2, r0
1a002196:	d008      	beq.n	1a0021aa <xTaskPriorityDisinherit+0x22>
1a002198:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00219c:	f383 8811 	msr	BASEPRI, r3
1a0021a0:	f3bf 8f6f 	isb	sy
1a0021a4:	f3bf 8f4f 	dsb	sy
1a0021a8:	e7fe      	b.n	1a0021a8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a0021aa:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a0021ac:	b942      	cbnz	r2, 1a0021c0 <xTaskPriorityDisinherit+0x38>
1a0021ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021b2:	f383 8811 	msr	BASEPRI, r3
1a0021b6:	f3bf 8f6f 	isb	sy
1a0021ba:	f3bf 8f4f 	dsb	sy
1a0021be:	e7fe      	b.n	1a0021be <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a0021c0:	3a01      	subs	r2, #1
1a0021c2:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a0021c4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a0021c6:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a0021c8:	4288      	cmp	r0, r1
1a0021ca:	d02b      	beq.n	1a002224 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a0021cc:	bb62      	cbnz	r2, 1a002228 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0021ce:	1d25      	adds	r5, r4, #4
1a0021d0:	4628      	mov	r0, r5
1a0021d2:	f7ff fa6c 	bl	1a0016ae <uxListRemove>
1a0021d6:	b970      	cbnz	r0, 1a0021f6 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0021d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0021da:	2314      	movs	r3, #20
1a0021dc:	fb03 f302 	mul.w	r3, r3, r2
1a0021e0:	4913      	ldr	r1, [pc, #76]	; (1a002230 <xTaskPriorityDisinherit+0xa8>)
1a0021e2:	58cb      	ldr	r3, [r1, r3]
1a0021e4:	b93b      	cbnz	r3, 1a0021f6 <xTaskPriorityDisinherit+0x6e>
1a0021e6:	2301      	movs	r3, #1
1a0021e8:	fa03 f202 	lsl.w	r2, r3, r2
1a0021ec:	4911      	ldr	r1, [pc, #68]	; (1a002234 <xTaskPriorityDisinherit+0xac>)
1a0021ee:	680b      	ldr	r3, [r1, #0]
1a0021f0:	ea23 0302 	bic.w	r3, r3, r2
1a0021f4:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a0021f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a0021f8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0021fa:	f1c3 0207 	rsb	r2, r3, #7
1a0021fe:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a002200:	2401      	movs	r4, #1
1a002202:	fa04 f203 	lsl.w	r2, r4, r3
1a002206:	490b      	ldr	r1, [pc, #44]	; (1a002234 <xTaskPriorityDisinherit+0xac>)
1a002208:	6808      	ldr	r0, [r1, #0]
1a00220a:	4302      	orrs	r2, r0
1a00220c:	600a      	str	r2, [r1, #0]
1a00220e:	4629      	mov	r1, r5
1a002210:	4a07      	ldr	r2, [pc, #28]	; (1a002230 <xTaskPriorityDisinherit+0xa8>)
1a002212:	2014      	movs	r0, #20
1a002214:	fb00 2003 	mla	r0, r0, r3, r2
1a002218:	f7ff fa23 	bl	1a001662 <vListInsertEnd>
					xReturn = pdTRUE;
1a00221c:	4620      	mov	r0, r4
	}
1a00221e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a002220:	2000      	movs	r0, #0
	}
1a002222:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a002224:	2000      	movs	r0, #0
1a002226:	e7fa      	b.n	1a00221e <xTaskPriorityDisinherit+0x96>
1a002228:	2000      	movs	r0, #0
		return xReturn;
1a00222a:	e7f8      	b.n	1a00221e <xTaskPriorityDisinherit+0x96>
1a00222c:	100028c4 	.word	0x100028c4
1a002230:	100028d0 	.word	0x100028d0
1a002234:	10002970 	.word	0x10002970

1a002238 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a002238:	4b06      	ldr	r3, [pc, #24]	; (1a002254 <prvGetNextExpireTime+0x1c>)
1a00223a:	681a      	ldr	r2, [r3, #0]
1a00223c:	6813      	ldr	r3, [r2, #0]
1a00223e:	fab3 f383 	clz	r3, r3
1a002242:	095b      	lsrs	r3, r3, #5
1a002244:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a002246:	b913      	cbnz	r3, 1a00224e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002248:	68d3      	ldr	r3, [r2, #12]
1a00224a:	6818      	ldr	r0, [r3, #0]
1a00224c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a00224e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a002250:	4770      	bx	lr
1a002252:	bf00      	nop
1a002254:	100029ec 	.word	0x100029ec

1a002258 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a002258:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a00225a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a00225c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a00225e:	4291      	cmp	r1, r2
1a002260:	d80c      	bhi.n	1a00227c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002262:	1ad2      	subs	r2, r2, r3
1a002264:	6983      	ldr	r3, [r0, #24]
1a002266:	429a      	cmp	r2, r3
1a002268:	d301      	bcc.n	1a00226e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a00226a:	2001      	movs	r0, #1
1a00226c:	e010      	b.n	1a002290 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a00226e:	1d01      	adds	r1, r0, #4
1a002270:	4b09      	ldr	r3, [pc, #36]	; (1a002298 <prvInsertTimerInActiveList+0x40>)
1a002272:	6818      	ldr	r0, [r3, #0]
1a002274:	f7ff fa01 	bl	1a00167a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002278:	2000      	movs	r0, #0
1a00227a:	e009      	b.n	1a002290 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a00227c:	429a      	cmp	r2, r3
1a00227e:	d201      	bcs.n	1a002284 <prvInsertTimerInActiveList+0x2c>
1a002280:	4299      	cmp	r1, r3
1a002282:	d206      	bcs.n	1a002292 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002284:	1d01      	adds	r1, r0, #4
1a002286:	4b05      	ldr	r3, [pc, #20]	; (1a00229c <prvInsertTimerInActiveList+0x44>)
1a002288:	6818      	ldr	r0, [r3, #0]
1a00228a:	f7ff f9f6 	bl	1a00167a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a00228e:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a002290:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a002292:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a002294:	e7fc      	b.n	1a002290 <prvInsertTimerInActiveList+0x38>
1a002296:	bf00      	nop
1a002298:	100029f0 	.word	0x100029f0
1a00229c:	100029ec 	.word	0x100029ec

1a0022a0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a0022a0:	b530      	push	{r4, r5, lr}
1a0022a2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a0022a4:	f000 fa4e 	bl	1a002744 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a0022a8:	4b11      	ldr	r3, [pc, #68]	; (1a0022f0 <prvCheckForValidListAndQueue+0x50>)
1a0022aa:	681b      	ldr	r3, [r3, #0]
1a0022ac:	b11b      	cbz	r3, 1a0022b6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a0022ae:	f000 fa6b 	bl	1a002788 <vPortExitCritical>
}
1a0022b2:	b003      	add	sp, #12
1a0022b4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a0022b6:	4d0f      	ldr	r5, [pc, #60]	; (1a0022f4 <prvCheckForValidListAndQueue+0x54>)
1a0022b8:	4628      	mov	r0, r5
1a0022ba:	f7ff f9c4 	bl	1a001646 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a0022be:	4c0e      	ldr	r4, [pc, #56]	; (1a0022f8 <prvCheckForValidListAndQueue+0x58>)
1a0022c0:	4620      	mov	r0, r4
1a0022c2:	f7ff f9c0 	bl	1a001646 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a0022c6:	4b0d      	ldr	r3, [pc, #52]	; (1a0022fc <prvCheckForValidListAndQueue+0x5c>)
1a0022c8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a0022ca:	4b0d      	ldr	r3, [pc, #52]	; (1a002300 <prvCheckForValidListAndQueue+0x60>)
1a0022cc:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a0022ce:	2300      	movs	r3, #0
1a0022d0:	9300      	str	r3, [sp, #0]
1a0022d2:	4b0c      	ldr	r3, [pc, #48]	; (1a002304 <prvCheckForValidListAndQueue+0x64>)
1a0022d4:	4a0c      	ldr	r2, [pc, #48]	; (1a002308 <prvCheckForValidListAndQueue+0x68>)
1a0022d6:	2110      	movs	r1, #16
1a0022d8:	200a      	movs	r0, #10
1a0022da:	f7fe ff38 	bl	1a00114e <xQueueGenericCreateStatic>
1a0022de:	4b04      	ldr	r3, [pc, #16]	; (1a0022f0 <prvCheckForValidListAndQueue+0x50>)
1a0022e0:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a0022e2:	2800      	cmp	r0, #0
1a0022e4:	d0e3      	beq.n	1a0022ae <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a0022e6:	4909      	ldr	r1, [pc, #36]	; (1a00230c <prvCheckForValidListAndQueue+0x6c>)
1a0022e8:	f7ff f970 	bl	1a0015cc <vQueueAddToRegistry>
1a0022ec:	e7df      	b.n	1a0022ae <prvCheckForValidListAndQueue+0xe>
1a0022ee:	bf00      	nop
1a0022f0:	10002b10 	.word	0x10002b10
1a0022f4:	10002a94 	.word	0x10002a94
1a0022f8:	10002aa8 	.word	0x10002aa8
1a0022fc:	100029ec 	.word	0x100029ec
1a002300:	100029f0 	.word	0x100029f0
1a002304:	10002ac0 	.word	0x10002ac0
1a002308:	100029f4 	.word	0x100029f4
1a00230c:	1a006088 	.word	0x1a006088

1a002310 <xTimerCreateTimerTask>:
{
1a002310:	b510      	push	{r4, lr}
1a002312:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a002314:	f7ff ffc4 	bl	1a0022a0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a002318:	4b12      	ldr	r3, [pc, #72]	; (1a002364 <xTimerCreateTimerTask+0x54>)
1a00231a:	681b      	ldr	r3, [r3, #0]
1a00231c:	b1cb      	cbz	r3, 1a002352 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a00231e:	2400      	movs	r4, #0
1a002320:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a002322:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a002324:	aa07      	add	r2, sp, #28
1a002326:	a906      	add	r1, sp, #24
1a002328:	a805      	add	r0, sp, #20
1a00232a:	f7ff f9e1 	bl	1a0016f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a00232e:	9b05      	ldr	r3, [sp, #20]
1a002330:	9302      	str	r3, [sp, #8]
1a002332:	9b06      	ldr	r3, [sp, #24]
1a002334:	9301      	str	r3, [sp, #4]
1a002336:	2304      	movs	r3, #4
1a002338:	9300      	str	r3, [sp, #0]
1a00233a:	4623      	mov	r3, r4
1a00233c:	9a07      	ldr	r2, [sp, #28]
1a00233e:	490a      	ldr	r1, [pc, #40]	; (1a002368 <xTimerCreateTimerTask+0x58>)
1a002340:	480a      	ldr	r0, [pc, #40]	; (1a00236c <xTimerCreateTimerTask+0x5c>)
1a002342:	f7ff fb9f 	bl	1a001a84 <xTaskCreateStatic>
1a002346:	4b0a      	ldr	r3, [pc, #40]	; (1a002370 <xTimerCreateTimerTask+0x60>)
1a002348:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a00234a:	b110      	cbz	r0, 1a002352 <xTimerCreateTimerTask+0x42>
}
1a00234c:	2001      	movs	r0, #1
1a00234e:	b008      	add	sp, #32
1a002350:	bd10      	pop	{r4, pc}
1a002352:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002356:	f383 8811 	msr	BASEPRI, r3
1a00235a:	f3bf 8f6f 	isb	sy
1a00235e:	f3bf 8f4f 	dsb	sy
1a002362:	e7fe      	b.n	1a002362 <xTimerCreateTimerTask+0x52>
1a002364:	10002b10 	.word	0x10002b10
1a002368:	1a006090 	.word	0x1a006090
1a00236c:	1a002655 	.word	0x1a002655
1a002370:	10002b14 	.word	0x10002b14

1a002374 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a002374:	b1c8      	cbz	r0, 1a0023aa <xTimerGenericCommand+0x36>
{
1a002376:	b530      	push	{r4, r5, lr}
1a002378:	b085      	sub	sp, #20
1a00237a:	4615      	mov	r5, r2
1a00237c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a00237e:	4a17      	ldr	r2, [pc, #92]	; (1a0023dc <xTimerGenericCommand+0x68>)
1a002380:	6810      	ldr	r0, [r2, #0]
1a002382:	b340      	cbz	r0, 1a0023d6 <xTimerGenericCommand+0x62>
1a002384:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a002386:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a002388:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a00238a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a00238c:	2905      	cmp	r1, #5
1a00238e:	dc1d      	bgt.n	1a0023cc <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a002390:	f7ff feea 	bl	1a002168 <xTaskGetSchedulerState>
1a002394:	2802      	cmp	r0, #2
1a002396:	d011      	beq.n	1a0023bc <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a002398:	2300      	movs	r3, #0
1a00239a:	461a      	mov	r2, r3
1a00239c:	4669      	mov	r1, sp
1a00239e:	480f      	ldr	r0, [pc, #60]	; (1a0023dc <xTimerGenericCommand+0x68>)
1a0023a0:	6800      	ldr	r0, [r0, #0]
1a0023a2:	f7fe ff43 	bl	1a00122c <xQueueGenericSend>
}
1a0023a6:	b005      	add	sp, #20
1a0023a8:	bd30      	pop	{r4, r5, pc}
1a0023aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023ae:	f383 8811 	msr	BASEPRI, r3
1a0023b2:	f3bf 8f6f 	isb	sy
1a0023b6:	f3bf 8f4f 	dsb	sy
1a0023ba:	e7fe      	b.n	1a0023ba <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0023bc:	2300      	movs	r3, #0
1a0023be:	9a08      	ldr	r2, [sp, #32]
1a0023c0:	4669      	mov	r1, sp
1a0023c2:	4806      	ldr	r0, [pc, #24]	; (1a0023dc <xTimerGenericCommand+0x68>)
1a0023c4:	6800      	ldr	r0, [r0, #0]
1a0023c6:	f7fe ff31 	bl	1a00122c <xQueueGenericSend>
1a0023ca:	e7ec      	b.n	1a0023a6 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0023cc:	2300      	movs	r3, #0
1a0023ce:	4669      	mov	r1, sp
1a0023d0:	f7fe ffea 	bl	1a0013a8 <xQueueGenericSendFromISR>
1a0023d4:	e7e7      	b.n	1a0023a6 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a0023d6:	2000      	movs	r0, #0
	return xReturn;
1a0023d8:	e7e5      	b.n	1a0023a6 <xTimerGenericCommand+0x32>
1a0023da:	bf00      	nop
1a0023dc:	10002b10 	.word	0x10002b10

1a0023e0 <prvSwitchTimerLists>:
{
1a0023e0:	b570      	push	{r4, r5, r6, lr}
1a0023e2:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a0023e4:	4b1a      	ldr	r3, [pc, #104]	; (1a002450 <prvSwitchTimerLists+0x70>)
1a0023e6:	681b      	ldr	r3, [r3, #0]
1a0023e8:	681a      	ldr	r2, [r3, #0]
1a0023ea:	b352      	cbz	r2, 1a002442 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0023ec:	68db      	ldr	r3, [r3, #12]
1a0023ee:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0023f0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0023f2:	1d25      	adds	r5, r4, #4
1a0023f4:	4628      	mov	r0, r5
1a0023f6:	f7ff f95a 	bl	1a0016ae <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0023fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0023fc:	4620      	mov	r0, r4
1a0023fe:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002400:	69e3      	ldr	r3, [r4, #28]
1a002402:	2b01      	cmp	r3, #1
1a002404:	d1ee      	bne.n	1a0023e4 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a002406:	69a3      	ldr	r3, [r4, #24]
1a002408:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a00240a:	429e      	cmp	r6, r3
1a00240c:	d207      	bcs.n	1a00241e <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a00240e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002410:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002412:	4629      	mov	r1, r5
1a002414:	4b0e      	ldr	r3, [pc, #56]	; (1a002450 <prvSwitchTimerLists+0x70>)
1a002416:	6818      	ldr	r0, [r3, #0]
1a002418:	f7ff f92f 	bl	1a00167a <vListInsert>
1a00241c:	e7e2      	b.n	1a0023e4 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a00241e:	2100      	movs	r1, #0
1a002420:	9100      	str	r1, [sp, #0]
1a002422:	460b      	mov	r3, r1
1a002424:	4632      	mov	r2, r6
1a002426:	4620      	mov	r0, r4
1a002428:	f7ff ffa4 	bl	1a002374 <xTimerGenericCommand>
				configASSERT( xResult );
1a00242c:	2800      	cmp	r0, #0
1a00242e:	d1d9      	bne.n	1a0023e4 <prvSwitchTimerLists+0x4>
1a002430:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002434:	f383 8811 	msr	BASEPRI, r3
1a002438:	f3bf 8f6f 	isb	sy
1a00243c:	f3bf 8f4f 	dsb	sy
1a002440:	e7fe      	b.n	1a002440 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a002442:	4a04      	ldr	r2, [pc, #16]	; (1a002454 <prvSwitchTimerLists+0x74>)
1a002444:	6810      	ldr	r0, [r2, #0]
1a002446:	4902      	ldr	r1, [pc, #8]	; (1a002450 <prvSwitchTimerLists+0x70>)
1a002448:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a00244a:	6013      	str	r3, [r2, #0]
}
1a00244c:	b002      	add	sp, #8
1a00244e:	bd70      	pop	{r4, r5, r6, pc}
1a002450:	100029ec 	.word	0x100029ec
1a002454:	100029f0 	.word	0x100029f0

1a002458 <prvSampleTimeNow>:
{
1a002458:	b538      	push	{r3, r4, r5, lr}
1a00245a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a00245c:	f7ff fbd0 	bl	1a001c00 <xTaskGetTickCount>
1a002460:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a002462:	4b07      	ldr	r3, [pc, #28]	; (1a002480 <prvSampleTimeNow+0x28>)
1a002464:	681b      	ldr	r3, [r3, #0]
1a002466:	4283      	cmp	r3, r0
1a002468:	d805      	bhi.n	1a002476 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a00246a:	2300      	movs	r3, #0
1a00246c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a00246e:	4b04      	ldr	r3, [pc, #16]	; (1a002480 <prvSampleTimeNow+0x28>)
1a002470:	601c      	str	r4, [r3, #0]
}
1a002472:	4620      	mov	r0, r4
1a002474:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a002476:	f7ff ffb3 	bl	1a0023e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a00247a:	2301      	movs	r3, #1
1a00247c:	602b      	str	r3, [r5, #0]
1a00247e:	e7f6      	b.n	1a00246e <prvSampleTimeNow+0x16>
1a002480:	10002abc 	.word	0x10002abc

1a002484 <prvProcessExpiredTimer>:
{
1a002484:	b570      	push	{r4, r5, r6, lr}
1a002486:	b082      	sub	sp, #8
1a002488:	4605      	mov	r5, r0
1a00248a:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00248c:	4b14      	ldr	r3, [pc, #80]	; (1a0024e0 <prvProcessExpiredTimer+0x5c>)
1a00248e:	681b      	ldr	r3, [r3, #0]
1a002490:	68db      	ldr	r3, [r3, #12]
1a002492:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002494:	1d20      	adds	r0, r4, #4
1a002496:	f7ff f90a 	bl	1a0016ae <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00249a:	69e3      	ldr	r3, [r4, #28]
1a00249c:	2b01      	cmp	r3, #1
1a00249e:	d004      	beq.n	1a0024aa <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0024a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0024a2:	4620      	mov	r0, r4
1a0024a4:	4798      	blx	r3
}
1a0024a6:	b002      	add	sp, #8
1a0024a8:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a0024aa:	69a1      	ldr	r1, [r4, #24]
1a0024ac:	462b      	mov	r3, r5
1a0024ae:	4632      	mov	r2, r6
1a0024b0:	4429      	add	r1, r5
1a0024b2:	4620      	mov	r0, r4
1a0024b4:	f7ff fed0 	bl	1a002258 <prvInsertTimerInActiveList>
1a0024b8:	2800      	cmp	r0, #0
1a0024ba:	d0f1      	beq.n	1a0024a0 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0024bc:	2100      	movs	r1, #0
1a0024be:	9100      	str	r1, [sp, #0]
1a0024c0:	460b      	mov	r3, r1
1a0024c2:	462a      	mov	r2, r5
1a0024c4:	4620      	mov	r0, r4
1a0024c6:	f7ff ff55 	bl	1a002374 <xTimerGenericCommand>
			configASSERT( xResult );
1a0024ca:	2800      	cmp	r0, #0
1a0024cc:	d1e8      	bne.n	1a0024a0 <prvProcessExpiredTimer+0x1c>
1a0024ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024d2:	f383 8811 	msr	BASEPRI, r3
1a0024d6:	f3bf 8f6f 	isb	sy
1a0024da:	f3bf 8f4f 	dsb	sy
1a0024de:	e7fe      	b.n	1a0024de <prvProcessExpiredTimer+0x5a>
1a0024e0:	100029ec 	.word	0x100029ec

1a0024e4 <prvProcessTimerOrBlockTask>:
{
1a0024e4:	b570      	push	{r4, r5, r6, lr}
1a0024e6:	b082      	sub	sp, #8
1a0024e8:	4606      	mov	r6, r0
1a0024ea:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a0024ec:	f7ff fb80 	bl	1a001bf0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0024f0:	a801      	add	r0, sp, #4
1a0024f2:	f7ff ffb1 	bl	1a002458 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a0024f6:	9b01      	ldr	r3, [sp, #4]
1a0024f8:	bb1b      	cbnz	r3, 1a002542 <prvProcessTimerOrBlockTask+0x5e>
1a0024fa:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a0024fc:	b90c      	cbnz	r4, 1a002502 <prvProcessTimerOrBlockTask+0x1e>
1a0024fe:	42b0      	cmp	r0, r6
1a002500:	d218      	bcs.n	1a002534 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a002502:	b12c      	cbz	r4, 1a002510 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002504:	4b11      	ldr	r3, [pc, #68]	; (1a00254c <prvProcessTimerOrBlockTask+0x68>)
1a002506:	681b      	ldr	r3, [r3, #0]
1a002508:	681c      	ldr	r4, [r3, #0]
1a00250a:	fab4 f484 	clz	r4, r4
1a00250e:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002510:	4622      	mov	r2, r4
1a002512:	1b71      	subs	r1, r6, r5
1a002514:	4b0e      	ldr	r3, [pc, #56]	; (1a002550 <prvProcessTimerOrBlockTask+0x6c>)
1a002516:	6818      	ldr	r0, [r3, #0]
1a002518:	f7ff f86c 	bl	1a0015f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a00251c:	f7ff fc02 	bl	1a001d24 <xTaskResumeAll>
1a002520:	b988      	cbnz	r0, 1a002546 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a002522:	4b0c      	ldr	r3, [pc, #48]	; (1a002554 <prvProcessTimerOrBlockTask+0x70>)
1a002524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002528:	601a      	str	r2, [r3, #0]
1a00252a:	f3bf 8f4f 	dsb	sy
1a00252e:	f3bf 8f6f 	isb	sy
1a002532:	e008      	b.n	1a002546 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002534:	f7ff fbf6 	bl	1a001d24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002538:	4629      	mov	r1, r5
1a00253a:	4630      	mov	r0, r6
1a00253c:	f7ff ffa2 	bl	1a002484 <prvProcessExpiredTimer>
1a002540:	e001      	b.n	1a002546 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a002542:	f7ff fbef 	bl	1a001d24 <xTaskResumeAll>
}
1a002546:	b002      	add	sp, #8
1a002548:	bd70      	pop	{r4, r5, r6, pc}
1a00254a:	bf00      	nop
1a00254c:	100029f0 	.word	0x100029f0
1a002550:	10002b10 	.word	0x10002b10
1a002554:	e000ed04 	.word	0xe000ed04

1a002558 <prvProcessReceivedCommands>:
{
1a002558:	b530      	push	{r4, r5, lr}
1a00255a:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00255c:	e002      	b.n	1a002564 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a00255e:	9b04      	ldr	r3, [sp, #16]
1a002560:	2b00      	cmp	r3, #0
1a002562:	da0f      	bge.n	1a002584 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002564:	2200      	movs	r2, #0
1a002566:	a904      	add	r1, sp, #16
1a002568:	4b39      	ldr	r3, [pc, #228]	; (1a002650 <prvProcessReceivedCommands+0xf8>)
1a00256a:	6818      	ldr	r0, [r3, #0]
1a00256c:	f7fe ff82 	bl	1a001474 <xQueueReceive>
1a002570:	2800      	cmp	r0, #0
1a002572:	d06a      	beq.n	1a00264a <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002574:	9b04      	ldr	r3, [sp, #16]
1a002576:	2b00      	cmp	r3, #0
1a002578:	daf1      	bge.n	1a00255e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a00257a:	9907      	ldr	r1, [sp, #28]
1a00257c:	9806      	ldr	r0, [sp, #24]
1a00257e:	9b05      	ldr	r3, [sp, #20]
1a002580:	4798      	blx	r3
1a002582:	e7ec      	b.n	1a00255e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a002584:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a002586:	6963      	ldr	r3, [r4, #20]
1a002588:	b113      	cbz	r3, 1a002590 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00258a:	1d20      	adds	r0, r4, #4
1a00258c:	f7ff f88f 	bl	1a0016ae <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002590:	a803      	add	r0, sp, #12
1a002592:	f7ff ff61 	bl	1a002458 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a002596:	9b04      	ldr	r3, [sp, #16]
1a002598:	2b09      	cmp	r3, #9
1a00259a:	d8e3      	bhi.n	1a002564 <prvProcessReceivedCommands+0xc>
1a00259c:	a201      	add	r2, pc, #4	; (adr r2, 1a0025a4 <prvProcessReceivedCommands+0x4c>)
1a00259e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0025a2:	bf00      	nop
1a0025a4:	1a0025cd 	.word	0x1a0025cd
1a0025a8:	1a0025cd 	.word	0x1a0025cd
1a0025ac:	1a0025cd 	.word	0x1a0025cd
1a0025b0:	1a002565 	.word	0x1a002565
1a0025b4:	1a002615 	.word	0x1a002615
1a0025b8:	1a00263b 	.word	0x1a00263b
1a0025bc:	1a0025cd 	.word	0x1a0025cd
1a0025c0:	1a0025cd 	.word	0x1a0025cd
1a0025c4:	1a002565 	.word	0x1a002565
1a0025c8:	1a002615 	.word	0x1a002615
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0025cc:	9905      	ldr	r1, [sp, #20]
1a0025ce:	69a5      	ldr	r5, [r4, #24]
1a0025d0:	460b      	mov	r3, r1
1a0025d2:	4602      	mov	r2, r0
1a0025d4:	4429      	add	r1, r5
1a0025d6:	4620      	mov	r0, r4
1a0025d8:	f7ff fe3e 	bl	1a002258 <prvInsertTimerInActiveList>
1a0025dc:	2800      	cmp	r0, #0
1a0025de:	d0c1      	beq.n	1a002564 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0025e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0025e2:	4620      	mov	r0, r4
1a0025e4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0025e6:	69e3      	ldr	r3, [r4, #28]
1a0025e8:	2b01      	cmp	r3, #1
1a0025ea:	d1bb      	bne.n	1a002564 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a0025ec:	69a2      	ldr	r2, [r4, #24]
1a0025ee:	2100      	movs	r1, #0
1a0025f0:	9100      	str	r1, [sp, #0]
1a0025f2:	460b      	mov	r3, r1
1a0025f4:	9805      	ldr	r0, [sp, #20]
1a0025f6:	4402      	add	r2, r0
1a0025f8:	4620      	mov	r0, r4
1a0025fa:	f7ff febb 	bl	1a002374 <xTimerGenericCommand>
							configASSERT( xResult );
1a0025fe:	2800      	cmp	r0, #0
1a002600:	d1b0      	bne.n	1a002564 <prvProcessReceivedCommands+0xc>
1a002602:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002606:	f383 8811 	msr	BASEPRI, r3
1a00260a:	f3bf 8f6f 	isb	sy
1a00260e:	f3bf 8f4f 	dsb	sy
1a002612:	e7fe      	b.n	1a002612 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002614:	9905      	ldr	r1, [sp, #20]
1a002616:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002618:	b131      	cbz	r1, 1a002628 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a00261a:	4603      	mov	r3, r0
1a00261c:	4602      	mov	r2, r0
1a00261e:	4401      	add	r1, r0
1a002620:	4620      	mov	r0, r4
1a002622:	f7ff fe19 	bl	1a002258 <prvInsertTimerInActiveList>
					break;
1a002626:	e79d      	b.n	1a002564 <prvProcessReceivedCommands+0xc>
1a002628:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00262c:	f383 8811 	msr	BASEPRI, r3
1a002630:	f3bf 8f6f 	isb	sy
1a002634:	f3bf 8f4f 	dsb	sy
1a002638:	e7fe      	b.n	1a002638 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a00263a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a00263e:	2b00      	cmp	r3, #0
1a002640:	d190      	bne.n	1a002564 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a002642:	4620      	mov	r0, r4
1a002644:	f7fe fc58 	bl	1a000ef8 <vPortFree>
1a002648:	e78c      	b.n	1a002564 <prvProcessReceivedCommands+0xc>
}
1a00264a:	b009      	add	sp, #36	; 0x24
1a00264c:	bd30      	pop	{r4, r5, pc}
1a00264e:	bf00      	nop
1a002650:	10002b10 	.word	0x10002b10

1a002654 <prvTimerTask>:
{
1a002654:	b500      	push	{lr}
1a002656:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002658:	a801      	add	r0, sp, #4
1a00265a:	f7ff fded 	bl	1a002238 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a00265e:	9901      	ldr	r1, [sp, #4]
1a002660:	f7ff ff40 	bl	1a0024e4 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002664:	f7ff ff78 	bl	1a002558 <prvProcessReceivedCommands>
1a002668:	e7f6      	b.n	1a002658 <prvTimerTask+0x4>
1a00266a:	Address 0x000000001a00266a is out of bounds.


1a00266c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a00266c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a00266e:	2300      	movs	r3, #0
1a002670:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002672:	4b0d      	ldr	r3, [pc, #52]	; (1a0026a8 <prvTaskExitError+0x3c>)
1a002674:	681b      	ldr	r3, [r3, #0]
1a002676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00267a:	d008      	beq.n	1a00268e <prvTaskExitError+0x22>
	__asm volatile
1a00267c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002680:	f383 8811 	msr	BASEPRI, r3
1a002684:	f3bf 8f6f 	isb	sy
1a002688:	f3bf 8f4f 	dsb	sy
1a00268c:	e7fe      	b.n	1a00268c <prvTaskExitError+0x20>
1a00268e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002692:	f383 8811 	msr	BASEPRI, r3
1a002696:	f3bf 8f6f 	isb	sy
1a00269a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a00269e:	9b01      	ldr	r3, [sp, #4]
1a0026a0:	2b00      	cmp	r3, #0
1a0026a2:	d0fc      	beq.n	1a00269e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a0026a4:	b002      	add	sp, #8
1a0026a6:	4770      	bx	lr
1a0026a8:	10000004 	.word	0x10000004

1a0026ac <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a0026ac:	4808      	ldr	r0, [pc, #32]	; (1a0026d0 <prvPortStartFirstTask+0x24>)
1a0026ae:	6800      	ldr	r0, [r0, #0]
1a0026b0:	6800      	ldr	r0, [r0, #0]
1a0026b2:	f380 8808 	msr	MSP, r0
1a0026b6:	f04f 0000 	mov.w	r0, #0
1a0026ba:	f380 8814 	msr	CONTROL, r0
1a0026be:	b662      	cpsie	i
1a0026c0:	b661      	cpsie	f
1a0026c2:	f3bf 8f4f 	dsb	sy
1a0026c6:	f3bf 8f6f 	isb	sy
1a0026ca:	df00      	svc	0
1a0026cc:	bf00      	nop
1a0026ce:	0000      	.short	0x0000
1a0026d0:	e000ed08 	.word	0xe000ed08

1a0026d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a0026d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a0026e4 <vPortEnableVFP+0x10>
1a0026d8:	6801      	ldr	r1, [r0, #0]
1a0026da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0026de:	6001      	str	r1, [r0, #0]
1a0026e0:	4770      	bx	lr
1a0026e2:	0000      	.short	0x0000
1a0026e4:	e000ed88 	.word	0xe000ed88

1a0026e8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a0026e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a0026ec:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a0026f0:	f021 0101 	bic.w	r1, r1, #1
1a0026f4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a0026f8:	4b05      	ldr	r3, [pc, #20]	; (1a002710 <pxPortInitialiseStack+0x28>)
1a0026fa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a0026fe:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002702:	f06f 0302 	mvn.w	r3, #2
1a002706:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a00270a:	3844      	subs	r0, #68	; 0x44
1a00270c:	4770      	bx	lr
1a00270e:	bf00      	nop
1a002710:	1a00266d 	.word	0x1a00266d
1a002714:	ffffffff 	.word	0xffffffff
1a002718:	ffffffff 	.word	0xffffffff
1a00271c:	ffffffff 	.word	0xffffffff

1a002720 <SVC_Handler>:
	__asm volatile (
1a002720:	4b07      	ldr	r3, [pc, #28]	; (1a002740 <pxCurrentTCBConst2>)
1a002722:	6819      	ldr	r1, [r3, #0]
1a002724:	6808      	ldr	r0, [r1, #0]
1a002726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00272a:	f380 8809 	msr	PSP, r0
1a00272e:	f3bf 8f6f 	isb	sy
1a002732:	f04f 0000 	mov.w	r0, #0
1a002736:	f380 8811 	msr	BASEPRI, r0
1a00273a:	4770      	bx	lr
1a00273c:	f3af 8000 	nop.w

1a002740 <pxCurrentTCBConst2>:
1a002740:	100028c4 	.word	0x100028c4

1a002744 <vPortEnterCritical>:
1a002744:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002748:	f383 8811 	msr	BASEPRI, r3
1a00274c:	f3bf 8f6f 	isb	sy
1a002750:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002754:	4a0a      	ldr	r2, [pc, #40]	; (1a002780 <vPortEnterCritical+0x3c>)
1a002756:	6813      	ldr	r3, [r2, #0]
1a002758:	3301      	adds	r3, #1
1a00275a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00275c:	2b01      	cmp	r3, #1
1a00275e:	d000      	beq.n	1a002762 <vPortEnterCritical+0x1e>
}
1a002760:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002762:	4b08      	ldr	r3, [pc, #32]	; (1a002784 <vPortEnterCritical+0x40>)
1a002764:	681b      	ldr	r3, [r3, #0]
1a002766:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00276a:	d0f9      	beq.n	1a002760 <vPortEnterCritical+0x1c>
1a00276c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002770:	f383 8811 	msr	BASEPRI, r3
1a002774:	f3bf 8f6f 	isb	sy
1a002778:	f3bf 8f4f 	dsb	sy
1a00277c:	e7fe      	b.n	1a00277c <vPortEnterCritical+0x38>
1a00277e:	bf00      	nop
1a002780:	10000004 	.word	0x10000004
1a002784:	e000ed04 	.word	0xe000ed04

1a002788 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002788:	4b09      	ldr	r3, [pc, #36]	; (1a0027b0 <vPortExitCritical+0x28>)
1a00278a:	681b      	ldr	r3, [r3, #0]
1a00278c:	b943      	cbnz	r3, 1a0027a0 <vPortExitCritical+0x18>
1a00278e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002792:	f383 8811 	msr	BASEPRI, r3
1a002796:	f3bf 8f6f 	isb	sy
1a00279a:	f3bf 8f4f 	dsb	sy
1a00279e:	e7fe      	b.n	1a00279e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a0027a0:	3b01      	subs	r3, #1
1a0027a2:	4a03      	ldr	r2, [pc, #12]	; (1a0027b0 <vPortExitCritical+0x28>)
1a0027a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a0027a6:	b90b      	cbnz	r3, 1a0027ac <vPortExitCritical+0x24>
	__asm volatile
1a0027a8:	f383 8811 	msr	BASEPRI, r3
}
1a0027ac:	4770      	bx	lr
1a0027ae:	bf00      	nop
1a0027b0:	10000004 	.word	0x10000004
1a0027b4:	ffffffff 	.word	0xffffffff
1a0027b8:	ffffffff 	.word	0xffffffff
1a0027bc:	ffffffff 	.word	0xffffffff

1a0027c0 <PendSV_Handler>:
	__asm volatile
1a0027c0:	f3ef 8009 	mrs	r0, PSP
1a0027c4:	f3bf 8f6f 	isb	sy
1a0027c8:	4b15      	ldr	r3, [pc, #84]	; (1a002820 <pxCurrentTCBConst>)
1a0027ca:	681a      	ldr	r2, [r3, #0]
1a0027cc:	f01e 0f10 	tst.w	lr, #16
1a0027d0:	bf08      	it	eq
1a0027d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a0027d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0027da:	6010      	str	r0, [r2, #0]
1a0027dc:	e92d 0009 	stmdb	sp!, {r0, r3}
1a0027e0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a0027e4:	f380 8811 	msr	BASEPRI, r0
1a0027e8:	f3bf 8f4f 	dsb	sy
1a0027ec:	f3bf 8f6f 	isb	sy
1a0027f0:	f7ff fb8a 	bl	1a001f08 <vTaskSwitchContext>
1a0027f4:	f04f 0000 	mov.w	r0, #0
1a0027f8:	f380 8811 	msr	BASEPRI, r0
1a0027fc:	bc09      	pop	{r0, r3}
1a0027fe:	6819      	ldr	r1, [r3, #0]
1a002800:	6808      	ldr	r0, [r1, #0]
1a002802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002806:	f01e 0f10 	tst.w	lr, #16
1a00280a:	bf08      	it	eq
1a00280c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002810:	f380 8809 	msr	PSP, r0
1a002814:	f3bf 8f6f 	isb	sy
1a002818:	4770      	bx	lr
1a00281a:	bf00      	nop
1a00281c:	f3af 8000 	nop.w

1a002820 <pxCurrentTCBConst>:
1a002820:	100028c4 	.word	0x100028c4

1a002824 <SysTick_Handler>:
{
1a002824:	b508      	push	{r3, lr}
	__asm volatile
1a002826:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00282a:	f383 8811 	msr	BASEPRI, r3
1a00282e:	f3bf 8f6f 	isb	sy
1a002832:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002836:	f7ff f9e9 	bl	1a001c0c <xTaskIncrementTick>
1a00283a:	b118      	cbz	r0, 1a002844 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00283c:	4b03      	ldr	r3, [pc, #12]	; (1a00284c <SysTick_Handler+0x28>)
1a00283e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002842:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002844:	2300      	movs	r3, #0
1a002846:	f383 8811 	msr	BASEPRI, r3
}
1a00284a:	bd08      	pop	{r3, pc}
1a00284c:	e000ed04 	.word	0xe000ed04

1a002850 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002850:	4a08      	ldr	r2, [pc, #32]	; (1a002874 <vPortSetupTimerInterrupt+0x24>)
1a002852:	2300      	movs	r3, #0
1a002854:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002856:	4908      	ldr	r1, [pc, #32]	; (1a002878 <vPortSetupTimerInterrupt+0x28>)
1a002858:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00285a:	4b08      	ldr	r3, [pc, #32]	; (1a00287c <vPortSetupTimerInterrupt+0x2c>)
1a00285c:	681b      	ldr	r3, [r3, #0]
1a00285e:	4908      	ldr	r1, [pc, #32]	; (1a002880 <vPortSetupTimerInterrupt+0x30>)
1a002860:	fba1 1303 	umull	r1, r3, r1, r3
1a002864:	099b      	lsrs	r3, r3, #6
1a002866:	3b01      	subs	r3, #1
1a002868:	4906      	ldr	r1, [pc, #24]	; (1a002884 <vPortSetupTimerInterrupt+0x34>)
1a00286a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00286c:	2307      	movs	r3, #7
1a00286e:	6013      	str	r3, [r2, #0]
}
1a002870:	4770      	bx	lr
1a002872:	bf00      	nop
1a002874:	e000e010 	.word	0xe000e010
1a002878:	e000e018 	.word	0xe000e018
1a00287c:	10002b88 	.word	0x10002b88
1a002880:	10624dd3 	.word	0x10624dd3
1a002884:	e000e014 	.word	0xe000e014

1a002888 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002888:	4b3a      	ldr	r3, [pc, #232]	; (1a002974 <xPortStartScheduler+0xec>)
1a00288a:	681a      	ldr	r2, [r3, #0]
1a00288c:	4b3a      	ldr	r3, [pc, #232]	; (1a002978 <xPortStartScheduler+0xf0>)
1a00288e:	429a      	cmp	r2, r3
1a002890:	d00d      	beq.n	1a0028ae <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002892:	4b38      	ldr	r3, [pc, #224]	; (1a002974 <xPortStartScheduler+0xec>)
1a002894:	681a      	ldr	r2, [r3, #0]
1a002896:	4b39      	ldr	r3, [pc, #228]	; (1a00297c <xPortStartScheduler+0xf4>)
1a002898:	429a      	cmp	r2, r3
1a00289a:	d111      	bne.n	1a0028c0 <xPortStartScheduler+0x38>
	__asm volatile
1a00289c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028a0:	f383 8811 	msr	BASEPRI, r3
1a0028a4:	f3bf 8f6f 	isb	sy
1a0028a8:	f3bf 8f4f 	dsb	sy
1a0028ac:	e7fe      	b.n	1a0028ac <xPortStartScheduler+0x24>
1a0028ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028b2:	f383 8811 	msr	BASEPRI, r3
1a0028b6:	f3bf 8f6f 	isb	sy
1a0028ba:	f3bf 8f4f 	dsb	sy
1a0028be:	e7fe      	b.n	1a0028be <xPortStartScheduler+0x36>
{
1a0028c0:	b510      	push	{r4, lr}
1a0028c2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a0028c4:	4b2e      	ldr	r3, [pc, #184]	; (1a002980 <xPortStartScheduler+0xf8>)
1a0028c6:	781a      	ldrb	r2, [r3, #0]
1a0028c8:	b2d2      	uxtb	r2, r2
1a0028ca:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a0028cc:	22ff      	movs	r2, #255	; 0xff
1a0028ce:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a0028d0:	781b      	ldrb	r3, [r3, #0]
1a0028d2:	b2db      	uxtb	r3, r3
1a0028d4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a0028d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0028dc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a0028e0:	4a28      	ldr	r2, [pc, #160]	; (1a002984 <xPortStartScheduler+0xfc>)
1a0028e2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a0028e4:	4b28      	ldr	r3, [pc, #160]	; (1a002988 <xPortStartScheduler+0x100>)
1a0028e6:	2207      	movs	r2, #7
1a0028e8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0028ea:	e009      	b.n	1a002900 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a0028ec:	4a26      	ldr	r2, [pc, #152]	; (1a002988 <xPortStartScheduler+0x100>)
1a0028ee:	6813      	ldr	r3, [r2, #0]
1a0028f0:	3b01      	subs	r3, #1
1a0028f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a0028f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0028f8:	005b      	lsls	r3, r3, #1
1a0028fa:	b2db      	uxtb	r3, r3
1a0028fc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002900:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002904:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002908:	d1f0      	bne.n	1a0028ec <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00290a:	4b1f      	ldr	r3, [pc, #124]	; (1a002988 <xPortStartScheduler+0x100>)
1a00290c:	681b      	ldr	r3, [r3, #0]
1a00290e:	2b04      	cmp	r3, #4
1a002910:	d008      	beq.n	1a002924 <xPortStartScheduler+0x9c>
1a002912:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002916:	f383 8811 	msr	BASEPRI, r3
1a00291a:	f3bf 8f6f 	isb	sy
1a00291e:	f3bf 8f4f 	dsb	sy
1a002922:	e7fe      	b.n	1a002922 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002924:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002926:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00292a:	4a17      	ldr	r2, [pc, #92]	; (1a002988 <xPortStartScheduler+0x100>)
1a00292c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00292e:	9b01      	ldr	r3, [sp, #4]
1a002930:	b2db      	uxtb	r3, r3
1a002932:	4a13      	ldr	r2, [pc, #76]	; (1a002980 <xPortStartScheduler+0xf8>)
1a002934:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002936:	4b15      	ldr	r3, [pc, #84]	; (1a00298c <xPortStartScheduler+0x104>)
1a002938:	681a      	ldr	r2, [r3, #0]
1a00293a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00293e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002940:	681a      	ldr	r2, [r3, #0]
1a002942:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002946:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002948:	f7ff ff82 	bl	1a002850 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a00294c:	2400      	movs	r4, #0
1a00294e:	4b10      	ldr	r3, [pc, #64]	; (1a002990 <xPortStartScheduler+0x108>)
1a002950:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002952:	f7ff febf 	bl	1a0026d4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002956:	4a0f      	ldr	r2, [pc, #60]	; (1a002994 <xPortStartScheduler+0x10c>)
1a002958:	6813      	ldr	r3, [r2, #0]
1a00295a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a00295e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002960:	f7ff fea4 	bl	1a0026ac <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002964:	f7ff fad0 	bl	1a001f08 <vTaskSwitchContext>
	prvTaskExitError();
1a002968:	f7ff fe80 	bl	1a00266c <prvTaskExitError>
}
1a00296c:	4620      	mov	r0, r4
1a00296e:	b002      	add	sp, #8
1a002970:	bd10      	pop	{r4, pc}
1a002972:	bf00      	nop
1a002974:	e000ed00 	.word	0xe000ed00
1a002978:	410fc271 	.word	0x410fc271
1a00297c:	410fc270 	.word	0x410fc270
1a002980:	e000e400 	.word	0xe000e400
1a002984:	10002b18 	.word	0x10002b18
1a002988:	10002b1c 	.word	0x10002b1c
1a00298c:	e000ed20 	.word	0xe000ed20
1a002990:	10000004 	.word	0x10000004
1a002994:	e000ef34 	.word	0xe000ef34

1a002998 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002998:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00299c:	2b0f      	cmp	r3, #15
1a00299e:	d90f      	bls.n	1a0029c0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a0029a0:	4a10      	ldr	r2, [pc, #64]	; (1a0029e4 <vPortValidateInterruptPriority+0x4c>)
1a0029a2:	5c9b      	ldrb	r3, [r3, r2]
1a0029a4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a0029a6:	4a10      	ldr	r2, [pc, #64]	; (1a0029e8 <vPortValidateInterruptPriority+0x50>)
1a0029a8:	7812      	ldrb	r2, [r2, #0]
1a0029aa:	429a      	cmp	r2, r3
1a0029ac:	d908      	bls.n	1a0029c0 <vPortValidateInterruptPriority+0x28>
1a0029ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0029b2:	f383 8811 	msr	BASEPRI, r3
1a0029b6:	f3bf 8f6f 	isb	sy
1a0029ba:	f3bf 8f4f 	dsb	sy
1a0029be:	e7fe      	b.n	1a0029be <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a0029c0:	4b0a      	ldr	r3, [pc, #40]	; (1a0029ec <vPortValidateInterruptPriority+0x54>)
1a0029c2:	681b      	ldr	r3, [r3, #0]
1a0029c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0029c8:	4a09      	ldr	r2, [pc, #36]	; (1a0029f0 <vPortValidateInterruptPriority+0x58>)
1a0029ca:	6812      	ldr	r2, [r2, #0]
1a0029cc:	4293      	cmp	r3, r2
1a0029ce:	d908      	bls.n	1a0029e2 <vPortValidateInterruptPriority+0x4a>
1a0029d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0029d4:	f383 8811 	msr	BASEPRI, r3
1a0029d8:	f3bf 8f6f 	isb	sy
1a0029dc:	f3bf 8f4f 	dsb	sy
1a0029e0:	e7fe      	b.n	1a0029e0 <vPortValidateInterruptPriority+0x48>
	}
1a0029e2:	4770      	bx	lr
1a0029e4:	e000e3f0 	.word	0xe000e3f0
1a0029e8:	10002b18 	.word	0x10002b18
1a0029ec:	e000ed0c 	.word	0xe000ed0c
1a0029f0:	10002b1c 	.word	0x10002b1c

1a0029f4 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a0029f4:	b508      	push	{r3, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0029f6:	4b05      	ldr	r3, [pc, #20]	; (1a002a0c <DAC_IRQHandler+0x18>)
1a0029f8:	2201      	movs	r2, #1
1a0029fa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a0029fe:	4b04      	ldr	r3, [pc, #16]	; (1a002a10 <DAC_IRQHandler+0x1c>)
1a002a00:	681b      	ldr	r3, [r3, #0]
1a002a02:	b113      	cbz	r3, 1a002a0a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a002a04:	4b02      	ldr	r3, [pc, #8]	; (1a002a10 <DAC_IRQHandler+0x1c>)
1a002a06:	681b      	ldr	r3, [r3, #0]
1a002a08:	4798      	blx	r3
   }
}
1a002a0a:	bd08      	pop	{r3, pc}
1a002a0c:	e000e100 	.word	0xe000e100
1a002a10:	10002b20 	.word	0x10002b20

1a002a14 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002a14:	2200      	movs	r2, #0
1a002a16:	2a05      	cmp	r2, #5
1a002a18:	d819      	bhi.n	1a002a4e <Board_LED_Init+0x3a>
{
1a002a1a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a002a1c:	490c      	ldr	r1, [pc, #48]	; (1a002a50 <Board_LED_Init+0x3c>)
1a002a1e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002a22:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002a26:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002a28:	4b0a      	ldr	r3, [pc, #40]	; (1a002a54 <Board_LED_Init+0x40>)
1a002a2a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a002a2e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002a32:	2001      	movs	r0, #1
1a002a34:	40a0      	lsls	r0, r4
1a002a36:	4301      	orrs	r1, r0
1a002a38:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a002a3c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002a40:	2100      	movs	r1, #0
1a002a42:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002a44:	3201      	adds	r2, #1
1a002a46:	2a05      	cmp	r2, #5
1a002a48:	d9e8      	bls.n	1a002a1c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a002a4a:	bc70      	pop	{r4, r5, r6}
1a002a4c:	4770      	bx	lr
1a002a4e:	4770      	bx	lr
1a002a50:	1a0060a4 	.word	0x1a0060a4
1a002a54:	400f4000 	.word	0x400f4000

1a002a58 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002a58:	2300      	movs	r3, #0
1a002a5a:	2b03      	cmp	r3, #3
1a002a5c:	d816      	bhi.n	1a002a8c <Board_TEC_Init+0x34>
{
1a002a5e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002a60:	490b      	ldr	r1, [pc, #44]	; (1a002a90 <Board_TEC_Init+0x38>)
1a002a62:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002a66:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002a6a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002a6c:	4c09      	ldr	r4, [pc, #36]	; (1a002a94 <Board_TEC_Init+0x3c>)
1a002a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002a72:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002a76:	2001      	movs	r0, #1
1a002a78:	40a8      	lsls	r0, r5
1a002a7a:	ea21 0100 	bic.w	r1, r1, r0
1a002a7e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002a82:	3301      	adds	r3, #1
1a002a84:	2b03      	cmp	r3, #3
1a002a86:	d9eb      	bls.n	1a002a60 <Board_TEC_Init+0x8>
   }
}
1a002a88:	bc30      	pop	{r4, r5}
1a002a8a:	4770      	bx	lr
1a002a8c:	4770      	bx	lr
1a002a8e:	bf00      	nop
1a002a90:	1a00609c 	.word	0x1a00609c
1a002a94:	400f4000 	.word	0x400f4000

1a002a98 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002a98:	2300      	movs	r3, #0
1a002a9a:	2b08      	cmp	r3, #8
1a002a9c:	d816      	bhi.n	1a002acc <Board_GPIO_Init+0x34>
{
1a002a9e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002aa0:	490b      	ldr	r1, [pc, #44]	; (1a002ad0 <Board_GPIO_Init+0x38>)
1a002aa2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002aa6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002aaa:	784d      	ldrb	r5, [r1, #1]
1a002aac:	4c09      	ldr	r4, [pc, #36]	; (1a002ad4 <Board_GPIO_Init+0x3c>)
1a002aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002ab2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002ab6:	2001      	movs	r0, #1
1a002ab8:	40a8      	lsls	r0, r5
1a002aba:	ea21 0100 	bic.w	r1, r1, r0
1a002abe:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002ac2:	3301      	adds	r3, #1
1a002ac4:	2b08      	cmp	r3, #8
1a002ac6:	d9eb      	bls.n	1a002aa0 <Board_GPIO_Init+0x8>
   }
}
1a002ac8:	bc30      	pop	{r4, r5}
1a002aca:	4770      	bx	lr
1a002acc:	4770      	bx	lr
1a002ace:	bf00      	nop
1a002ad0:	1a0060b0 	.word	0x1a0060b0
1a002ad4:	400f4000 	.word	0x400f4000

1a002ad8 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002ad8:	b510      	push	{r4, lr}
1a002ada:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a002adc:	4c08      	ldr	r4, [pc, #32]	; (1a002b00 <Board_ADC_Init+0x28>)
1a002ade:	4669      	mov	r1, sp
1a002ae0:	4620      	mov	r0, r4
1a002ae2:	f000 f9df 	bl	1a002ea4 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002ae6:	4a07      	ldr	r2, [pc, #28]	; (1a002b04 <Board_ADC_Init+0x2c>)
1a002ae8:	4669      	mov	r1, sp
1a002aea:	4620      	mov	r0, r4
1a002aec:	f000 f9fa 	bl	1a002ee4 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002af0:	2200      	movs	r2, #0
1a002af2:	4669      	mov	r1, sp
1a002af4:	4620      	mov	r0, r4
1a002af6:	f000 fa0e 	bl	1a002f16 <Chip_ADC_SetResolution>
}
1a002afa:	b002      	add	sp, #8
1a002afc:	bd10      	pop	{r4, pc}
1a002afe:	bf00      	nop
1a002b00:	400e3000 	.word	0x400e3000
1a002b04:	00061a80 	.word	0x00061a80

1a002b08 <Board_SPI_Init>:
{
1a002b08:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a002b0a:	4c0b      	ldr	r4, [pc, #44]	; (1a002b38 <Board_SPI_Init+0x30>)
1a002b0c:	4620      	mov	r0, r4
1a002b0e:	f000 ff81 	bl	1a003a14 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002b12:	6863      	ldr	r3, [r4, #4]
1a002b14:	f023 0304 	bic.w	r3, r3, #4
1a002b18:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002b1a:	6823      	ldr	r3, [r4, #0]
1a002b1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002b20:	f043 0307 	orr.w	r3, r3, #7
1a002b24:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002b26:	4905      	ldr	r1, [pc, #20]	; (1a002b3c <Board_SPI_Init+0x34>)
1a002b28:	4620      	mov	r0, r4
1a002b2a:	f000 ff54 	bl	1a0039d6 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a002b2e:	6863      	ldr	r3, [r4, #4]
1a002b30:	f043 0302 	orr.w	r3, r3, #2
1a002b34:	6063      	str	r3, [r4, #4]
}
1a002b36:	bd10      	pop	{r4, pc}
1a002b38:	400c5000 	.word	0x400c5000
1a002b3c:	000186a0 	.word	0x000186a0

1a002b40 <Board_I2C_Init>:
{
1a002b40:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a002b42:	2000      	movs	r0, #0
1a002b44:	f000 fea2 	bl	1a00388c <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002b48:	4b04      	ldr	r3, [pc, #16]	; (1a002b5c <Board_I2C_Init+0x1c>)
1a002b4a:	f640 0208 	movw	r2, #2056	; 0x808
1a002b4e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002b52:	4903      	ldr	r1, [pc, #12]	; (1a002b60 <Board_I2C_Init+0x20>)
1a002b54:	2000      	movs	r0, #0
1a002b56:	f000 feab 	bl	1a0038b0 <Chip_I2C_SetClockRate>
}
1a002b5a:	bd08      	pop	{r3, pc}
1a002b5c:	40086000 	.word	0x40086000
1a002b60:	000f4240 	.word	0x000f4240

1a002b64 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002b64:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a002b66:	4c07      	ldr	r4, [pc, #28]	; (1a002b84 <Board_Debug_Init+0x20>)
1a002b68:	4620      	mov	r0, r4
1a002b6a:	f000 f8b9 	bl	1a002ce0 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002b6e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002b72:	4620      	mov	r0, r4
1a002b74:	f000 f8fe 	bl	1a002d74 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002b78:	2303      	movs	r3, #3
1a002b7a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a002b7c:	2301      	movs	r3, #1
1a002b7e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a002b80:	bd10      	pop	{r4, pc}
1a002b82:	bf00      	nop
1a002b84:	400c1000 	.word	0x400c1000

1a002b88 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002b88:	4b03      	ldr	r3, [pc, #12]	; (1a002b98 <Board_UARTPutChar+0x10>)
1a002b8a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a002b8c:	f013 0f20 	tst.w	r3, #32
1a002b90:	d0fa      	beq.n	1a002b88 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002b92:	4b01      	ldr	r3, [pc, #4]	; (1a002b98 <Board_UARTPutChar+0x10>)
1a002b94:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002b96:	4770      	bx	lr
1a002b98:	400c1000 	.word	0x400c1000

1a002b9c <Board_UARTGetChar>:
	return pUART->LSR;
1a002b9c:	4b05      	ldr	r3, [pc, #20]	; (1a002bb4 <Board_UARTGetChar+0x18>)
1a002b9e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002ba0:	f013 0f01 	tst.w	r3, #1
1a002ba4:	d003      	beq.n	1a002bae <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002ba6:	4b03      	ldr	r3, [pc, #12]	; (1a002bb4 <Board_UARTGetChar+0x18>)
1a002ba8:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a002baa:	b2c0      	uxtb	r0, r0
1a002bac:	4770      	bx	lr
   }
   return EOF;
1a002bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002bb2:	4770      	bx	lr
1a002bb4:	400c1000 	.word	0x400c1000

1a002bb8 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002bb8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002bba:	f7ff ffd3 	bl	1a002b64 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a002bbe:	4809      	ldr	r0, [pc, #36]	; (1a002be4 <Board_Init+0x2c>)
1a002bc0:	f000 fdc3 	bl	1a00374a <Chip_GPIO_Init>

   Board_GPIO_Init();
1a002bc4:	f7ff ff68 	bl	1a002a98 <Board_GPIO_Init>
   Board_ADC_Init();
1a002bc8:	f7ff ff86 	bl	1a002ad8 <Board_ADC_Init>
   Board_SPI_Init();
1a002bcc:	f7ff ff9c 	bl	1a002b08 <Board_SPI_Init>
   Board_I2C_Init();
1a002bd0:	f7ff ffb6 	bl	1a002b40 <Board_I2C_Init>

   Board_LED_Init();
1a002bd4:	f7ff ff1e 	bl	1a002a14 <Board_LED_Init>
   Board_TEC_Init();
1a002bd8:	f7ff ff3e 	bl	1a002a58 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a002bdc:	f000 fc6a 	bl	1a0034b4 <SystemCoreClockUpdate>
}
1a002be0:	bd08      	pop	{r3, pc}
1a002be2:	bf00      	nop
1a002be4:	400f4000 	.word	0x400f4000

1a002be8 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a002be8:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a002bea:	b2c0      	uxtb	r0, r0
1a002bec:	f7ff ffcc 	bl	1a002b88 <Board_UARTPutChar>
}
1a002bf0:	bd08      	pop	{r3, pc}

1a002bf2 <__stdio_getchar>:

int __stdio_getchar()
{
1a002bf2:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002bf4:	f7ff ffd2 	bl	1a002b9c <Board_UARTGetChar>
}
1a002bf8:	bd08      	pop	{r3, pc}

1a002bfa <__stdio_init>:

void __stdio_init()
{
1a002bfa:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a002bfc:	f7ff ffb2 	bl	1a002b64 <Board_Debug_Init>
1a002c00:	bd08      	pop	{r3, pc}
1a002c02:	Address 0x000000001a002c02 is out of bounds.


1a002c04 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002c04:	2300      	movs	r3, #0
1a002c06:	2b1c      	cmp	r3, #28
1a002c08:	d812      	bhi.n	1a002c30 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002c0a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002c0c:	4a09      	ldr	r2, [pc, #36]	; (1a002c34 <Board_SetupMuxing+0x30>)
1a002c0e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002c12:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002c16:	784a      	ldrb	r2, [r1, #1]
1a002c18:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002c1a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a002c1e:	4906      	ldr	r1, [pc, #24]	; (1a002c38 <Board_SetupMuxing+0x34>)
1a002c20:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002c24:	3301      	adds	r3, #1
1a002c26:	2b1c      	cmp	r3, #28
1a002c28:	d9f0      	bls.n	1a002c0c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002c2e:	4770      	bx	lr
1a002c30:	4770      	bx	lr
1a002c32:	bf00      	nop
1a002c34:	1a0060cc 	.word	0x1a0060cc
1a002c38:	40086000 	.word	0x40086000

1a002c3c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002c3c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a002c3e:	4a17      	ldr	r2, [pc, #92]	; (1a002c9c <Board_SetupClocking+0x60>)
1a002c40:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002c44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002c48:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002c4c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002c50:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002c54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002c58:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002c5c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002c60:	2201      	movs	r2, #1
1a002c62:	490f      	ldr	r1, [pc, #60]	; (1a002ca0 <Board_SetupClocking+0x64>)
1a002c64:	2006      	movs	r0, #6
1a002c66:	f000 fc2f 	bl	1a0034c8 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002c6a:	2400      	movs	r4, #0
1a002c6c:	b14c      	cbz	r4, 1a002c82 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a002c6e:	4b0b      	ldr	r3, [pc, #44]	; (1a002c9c <Board_SetupClocking+0x60>)
1a002c70:	685a      	ldr	r2, [r3, #4]
1a002c72:	f022 020c 	bic.w	r2, r2, #12
1a002c76:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002c78:	685a      	ldr	r2, [r3, #4]
1a002c7a:	f042 0203 	orr.w	r2, r2, #3
1a002c7e:	605a      	str	r2, [r3, #4]
}
1a002c80:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002c82:	4808      	ldr	r0, [pc, #32]	; (1a002ca4 <Board_SetupClocking+0x68>)
1a002c84:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002c88:	2301      	movs	r3, #1
1a002c8a:	788a      	ldrb	r2, [r1, #2]
1a002c8c:	7849      	ldrb	r1, [r1, #1]
1a002c8e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002c92:	f000 fb6b 	bl	1a00336c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002c96:	3401      	adds	r4, #1
1a002c98:	e7e8      	b.n	1a002c6c <Board_SetupClocking+0x30>
1a002c9a:	bf00      	nop
1a002c9c:	40043000 	.word	0x40043000
1a002ca0:	0c28cb00 	.word	0x0c28cb00
1a002ca4:	1a0060c8 	.word	0x1a0060c8

1a002ca8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002ca8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002caa:	f7ff ffab 	bl	1a002c04 <Board_SetupMuxing>
    Board_SetupClocking();
1a002cae:	f7ff ffc5 	bl	1a002c3c <Board_SetupClocking>
}
1a002cb2:	bd08      	pop	{r3, pc}

1a002cb4 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002cb4:	4b09      	ldr	r3, [pc, #36]	; (1a002cdc <Chip_UART_GetIndex+0x28>)
1a002cb6:	4298      	cmp	r0, r3
1a002cb8:	d009      	beq.n	1a002cce <Chip_UART_GetIndex+0x1a>
1a002cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002cbe:	4298      	cmp	r0, r3
1a002cc0:	d007      	beq.n	1a002cd2 <Chip_UART_GetIndex+0x1e>
1a002cc2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002cc6:	4298      	cmp	r0, r3
1a002cc8:	d005      	beq.n	1a002cd6 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002cca:	2000      	movs	r0, #0
1a002ccc:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002cce:	2002      	movs	r0, #2
1a002cd0:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002cd2:	2003      	movs	r0, #3
1a002cd4:	4770      	bx	lr
			return 1;
1a002cd6:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002cd8:	4770      	bx	lr
1a002cda:	bf00      	nop
1a002cdc:	400c1000 	.word	0x400c1000

1a002ce0 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002ce0:	b530      	push	{r4, r5, lr}
1a002ce2:	b083      	sub	sp, #12
1a002ce4:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002ce6:	f7ff ffe5 	bl	1a002cb4 <Chip_UART_GetIndex>
1a002cea:	2301      	movs	r3, #1
1a002cec:	461a      	mov	r2, r3
1a002cee:	4619      	mov	r1, r3
1a002cf0:	4d0e      	ldr	r5, [pc, #56]	; (1a002d2c <Chip_UART_Init+0x4c>)
1a002cf2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002cf6:	f000 fb7f 	bl	1a0033f8 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002cfa:	2307      	movs	r3, #7
1a002cfc:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a002cfe:	2300      	movs	r3, #0
1a002d00:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002d02:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002d04:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002d06:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002d08:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002d0a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002d0c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002d0e:	4b08      	ldr	r3, [pc, #32]	; (1a002d30 <Chip_UART_Init+0x50>)
1a002d10:	429c      	cmp	r4, r3
1a002d12:	d006      	beq.n	1a002d22 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002d14:	2303      	movs	r3, #3
1a002d16:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002d18:	2310      	movs	r3, #16
1a002d1a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002d1c:	9b01      	ldr	r3, [sp, #4]
}
1a002d1e:	b003      	add	sp, #12
1a002d20:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a002d22:	2300      	movs	r3, #0
1a002d24:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002d26:	69a3      	ldr	r3, [r4, #24]
1a002d28:	9301      	str	r3, [sp, #4]
1a002d2a:	e7f3      	b.n	1a002d14 <Chip_UART_Init+0x34>
1a002d2c:	1a006148 	.word	0x1a006148
1a002d30:	40082000 	.word	0x40082000

1a002d34 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002d34:	b538      	push	{r3, r4, r5, lr}
1a002d36:	4605      	mov	r5, r0
1a002d38:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002d3a:	f7ff ffbb 	bl	1a002cb4 <Chip_UART_GetIndex>
1a002d3e:	4b0c      	ldr	r3, [pc, #48]	; (1a002d70 <Chip_UART_SetBaud+0x3c>)
1a002d40:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002d44:	f000 fb90 	bl	1a003468 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002d48:	0123      	lsls	r3, r4, #4
1a002d4a:	fbb0 f3f3 	udiv	r3, r0, r3
1a002d4e:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002d50:	68ea      	ldr	r2, [r5, #12]
1a002d52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a002d56:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a002d58:	6029      	str	r1, [r5, #0]
1a002d5a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002d5e:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002d60:	68ea      	ldr	r2, [r5, #12]
1a002d62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a002d66:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a002d68:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a002d6c:	0900      	lsrs	r0, r0, #4
1a002d6e:	bd38      	pop	{r3, r4, r5, pc}
1a002d70:	1a006140 	.word	0x1a006140

1a002d74 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002d78:	b083      	sub	sp, #12
1a002d7a:	4683      	mov	fp, r0
1a002d7c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002d7e:	f7ff ff99 	bl	1a002cb4 <Chip_UART_GetIndex>
1a002d82:	4b35      	ldr	r3, [pc, #212]	; (1a002e58 <Chip_UART_SetBaudFDR+0xe4>)
1a002d84:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002d88:	f000 fb6e 	bl	1a003468 <Chip_Clock_GetRate>
1a002d8c:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a002d8e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002d92:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002d94:	2300      	movs	r3, #0
1a002d96:	9301      	str	r3, [sp, #4]
1a002d98:	46a2      	mov	sl, r4
1a002d9a:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002d9c:	e02a      	b.n	1a002df4 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a002d9e:	4242      	negs	r2, r0
				div ++;
1a002da0:	1c4b      	adds	r3, r1, #1
1a002da2:	e017      	b.n	1a002dd4 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002da4:	b30a      	cbz	r2, 1a002dea <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002da6:	4617      	mov	r7, r2
			sd = d;
1a002da8:	9501      	str	r5, [sp, #4]
			sm = m;
1a002daa:	46a2      	mov	sl, r4
			sdiv = div;
1a002dac:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a002dae:	3501      	adds	r5, #1
1a002db0:	42ac      	cmp	r4, r5
1a002db2:	d91e      	bls.n	1a002df2 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002db4:	0933      	lsrs	r3, r6, #4
1a002db6:	0730      	lsls	r0, r6, #28
1a002db8:	fba4 0100 	umull	r0, r1, r4, r0
1a002dbc:	fb04 1103 	mla	r1, r4, r3, r1
1a002dc0:	1962      	adds	r2, r4, r5
1a002dc2:	fb08 f202 	mul.w	r2, r8, r2
1a002dc6:	2300      	movs	r3, #0
1a002dc8:	f001 ff30 	bl	1a004c2c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002dcc:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a002dce:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a002dd0:	2800      	cmp	r0, #0
1a002dd2:	dbe4      	blt.n	1a002d9e <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002dd4:	4297      	cmp	r7, r2
1a002dd6:	d3ea      	bcc.n	1a002dae <Chip_UART_SetBaudFDR+0x3a>
1a002dd8:	2b00      	cmp	r3, #0
1a002dda:	d0e8      	beq.n	1a002dae <Chip_UART_SetBaudFDR+0x3a>
1a002ddc:	0c19      	lsrs	r1, r3, #16
1a002dde:	d1e6      	bne.n	1a002dae <Chip_UART_SetBaudFDR+0x3a>
1a002de0:	2b02      	cmp	r3, #2
1a002de2:	d8df      	bhi.n	1a002da4 <Chip_UART_SetBaudFDR+0x30>
1a002de4:	2d00      	cmp	r5, #0
1a002de6:	d0dd      	beq.n	1a002da4 <Chip_UART_SetBaudFDR+0x30>
1a002de8:	e7e1      	b.n	1a002dae <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002dea:	4617      	mov	r7, r2
			sd = d;
1a002dec:	9501      	str	r5, [sp, #4]
			sm = m;
1a002dee:	46a2      	mov	sl, r4
			sdiv = div;
1a002df0:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002df2:	3401      	adds	r4, #1
1a002df4:	b11f      	cbz	r7, 1a002dfe <Chip_UART_SetBaudFDR+0x8a>
1a002df6:	2c0f      	cmp	r4, #15
1a002df8:	d801      	bhi.n	1a002dfe <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002dfa:	2500      	movs	r5, #0
1a002dfc:	e7d8      	b.n	1a002db0 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a002dfe:	f1b9 0f00 	cmp.w	r9, #0
1a002e02:	d024      	beq.n	1a002e4e <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002e04:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002e0c:	f8cb 300c 	str.w	r3, [fp, #12]
1a002e10:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a002e14:	f8cb 3000 	str.w	r3, [fp]
1a002e18:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002e1c:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002e20:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002e28:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002e2c:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002e30:	b2db      	uxtb	r3, r3
1a002e32:	9901      	ldr	r1, [sp, #4]
1a002e34:	f001 020f 	and.w	r2, r1, #15
1a002e38:	4313      	orrs	r3, r2
1a002e3a:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002e3e:	0933      	lsrs	r3, r6, #4
1a002e40:	fb0a f303 	mul.w	r3, sl, r3
1a002e44:	448a      	add	sl, r1
1a002e46:	fb09 f90a 	mul.w	r9, r9, sl
1a002e4a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002e4e:	4648      	mov	r0, r9
1a002e50:	b003      	add	sp, #12
1a002e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002e56:	bf00      	nop
1a002e58:	1a006140 	.word	0x1a006140

1a002e5c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002e5c:	4b03      	ldr	r3, [pc, #12]	; (1a002e6c <Chip_ADC_GetClockIndex+0x10>)
1a002e5e:	4298      	cmp	r0, r3
1a002e60:	d001      	beq.n	1a002e66 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002e62:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002e64:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a002e66:	2004      	movs	r0, #4
1a002e68:	4770      	bx	lr
1a002e6a:	bf00      	nop
1a002e6c:	400e4000 	.word	0x400e4000

1a002e70 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002e70:	b570      	push	{r4, r5, r6, lr}
1a002e72:	460d      	mov	r5, r1
1a002e74:	4614      	mov	r4, r2
1a002e76:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002e78:	f7ff fff0 	bl	1a002e5c <Chip_ADC_GetClockIndex>
1a002e7c:	f000 faf4 	bl	1a003468 <Chip_Clock_GetRate>
	if (burstMode) {
1a002e80:	b965      	cbnz	r5, 1a002e9c <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a002e82:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002e86:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002e8a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002e8e:	0064      	lsls	r4, r4, #1
1a002e90:	fbb0 f0f4 	udiv	r0, r0, r4
1a002e94:	b2c0      	uxtb	r0, r0
1a002e96:	3801      	subs	r0, #1
	return div;
}
1a002e98:	b2c0      	uxtb	r0, r0
1a002e9a:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a002e9c:	fb04 f406 	mul.w	r4, r4, r6
1a002ea0:	e7f3      	b.n	1a002e8a <getClkDiv+0x1a>
1a002ea2:	Address 0x000000001a002ea2 is out of bounds.


1a002ea4 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002ea4:	b538      	push	{r3, r4, r5, lr}
1a002ea6:	4605      	mov	r5, r0
1a002ea8:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002eaa:	f7ff ffd7 	bl	1a002e5c <Chip_ADC_GetClockIndex>
1a002eae:	2301      	movs	r3, #1
1a002eb0:	461a      	mov	r2, r3
1a002eb2:	4619      	mov	r1, r3
1a002eb4:	f000 faa0 	bl	1a0033f8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002eb8:	2100      	movs	r1, #0
1a002eba:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002ebc:	4a08      	ldr	r2, [pc, #32]	; (1a002ee0 <Chip_ADC_Init+0x3c>)
1a002ebe:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002ec0:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002ec2:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002ec4:	230b      	movs	r3, #11
1a002ec6:	4628      	mov	r0, r5
1a002ec8:	f7ff ffd2 	bl	1a002e70 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002ecc:	0200      	lsls	r0, r0, #8
1a002ece:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002ed2:	7920      	ldrb	r0, [r4, #4]
1a002ed4:	0440      	lsls	r0, r0, #17
1a002ed6:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002eda:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002edc:	6028      	str	r0, [r5, #0]
}
1a002ede:	bd38      	pop	{r3, r4, r5, pc}
1a002ee0:	00061a80 	.word	0x00061a80

1a002ee4 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002ee4:	b570      	push	{r4, r5, r6, lr}
1a002ee6:	4605      	mov	r5, r0
1a002ee8:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002eea:	6804      	ldr	r4, [r0, #0]
1a002eec:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002ef0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002ef4:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002ef6:	790b      	ldrb	r3, [r1, #4]
1a002ef8:	f1c3 030b 	rsb	r3, r3, #11
1a002efc:	b2db      	uxtb	r3, r3
1a002efe:	7949      	ldrb	r1, [r1, #5]
1a002f00:	f7ff ffb6 	bl	1a002e70 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002f04:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002f08:	7930      	ldrb	r0, [r6, #4]
1a002f0a:	0440      	lsls	r0, r0, #17
1a002f0c:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002f10:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a002f12:	6028      	str	r0, [r5, #0]
}
1a002f14:	bd70      	pop	{r4, r5, r6, pc}

1a002f16 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002f16:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002f18:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002f1a:	680a      	ldr	r2, [r1, #0]
1a002f1c:	f7ff ffe2 	bl	1a002ee4 <Chip_ADC_SetSampleRate>
}
1a002f20:	bd08      	pop	{r3, pc}
1a002f22:	Address 0x000000001a002f22 is out of bounds.


1a002f24 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002f24:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002f26:	680b      	ldr	r3, [r1, #0]
1a002f28:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002f2c:	d002      	beq.n	1a002f34 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002f32:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002f34:	4607      	mov	r7, r0
1a002f36:	2501      	movs	r5, #1
1a002f38:	e03b      	b.n	1a002fb2 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002f3a:	694b      	ldr	r3, [r1, #20]
1a002f3c:	fb03 f302 	mul.w	r3, r3, r2
1a002f40:	fbb3 f3f5 	udiv	r3, r3, r5
1a002f44:	e014      	b.n	1a002f70 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002f46:	461c      	mov	r4, r3
1a002f48:	e020      	b.n	1a002f8c <pll_calc_divs+0x68>
		return -val;
1a002f4a:	f1cc 0c00 	rsb	ip, ip, #0
1a002f4e:	e020      	b.n	1a002f92 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a002f50:	3201      	adds	r2, #1
1a002f52:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002f56:	dc26      	bgt.n	1a002fa6 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a002f58:	680c      	ldr	r4, [r1, #0]
1a002f5a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002f5e:	d0ec      	beq.n	1a002f3a <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002f60:	1c73      	adds	r3, r6, #1
1a002f62:	fa02 fc03 	lsl.w	ip, r2, r3
1a002f66:	694b      	ldr	r3, [r1, #20]
1a002f68:	fb03 f30c 	mul.w	r3, r3, ip
1a002f6c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002f70:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a002fc0 <pll_calc_divs+0x9c>
1a002f74:	4563      	cmp	r3, ip
1a002f76:	d9eb      	bls.n	1a002f50 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002f78:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a002fc4 <pll_calc_divs+0xa0>
1a002f7c:	4563      	cmp	r3, ip
1a002f7e:	d812      	bhi.n	1a002fa6 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a002f80:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002f84:	d1df      	bne.n	1a002f46 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a002f86:	1c74      	adds	r4, r6, #1
1a002f88:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a002f8c:	ebb0 0c04 	subs.w	ip, r0, r4
1a002f90:	d4db      	bmi.n	1a002f4a <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a002f92:	4567      	cmp	r7, ip
1a002f94:	d9dc      	bls.n	1a002f50 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a002f96:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002f98:	1c77      	adds	r7, r6, #1
1a002f9a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a002f9c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a002f9e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002fa0:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002fa2:	4667      	mov	r7, ip
1a002fa4:	e7d4      	b.n	1a002f50 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a002fa6:	3601      	adds	r6, #1
1a002fa8:	2e03      	cmp	r6, #3
1a002faa:	dc01      	bgt.n	1a002fb0 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a002fac:	2201      	movs	r2, #1
1a002fae:	e7d0      	b.n	1a002f52 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a002fb0:	3501      	adds	r5, #1
1a002fb2:	2d04      	cmp	r5, #4
1a002fb4:	dc01      	bgt.n	1a002fba <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a002fb6:	2600      	movs	r6, #0
1a002fb8:	e7f6      	b.n	1a002fa8 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a002fba:	bcf0      	pop	{r4, r5, r6, r7}
1a002fbc:	4770      	bx	lr
1a002fbe:	bf00      	nop
1a002fc0:	094c5eff 	.word	0x094c5eff
1a002fc4:	1312d000 	.word	0x1312d000

1a002fc8 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002fca:	b099      	sub	sp, #100	; 0x64
1a002fcc:	4605      	mov	r5, r0
1a002fce:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002fd0:	225c      	movs	r2, #92	; 0x5c
1a002fd2:	2100      	movs	r1, #0
1a002fd4:	a801      	add	r0, sp, #4
1a002fd6:	f002 f952 	bl	1a00527e <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002fda:	2380      	movs	r3, #128	; 0x80
1a002fdc:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002fde:	6963      	ldr	r3, [r4, #20]
1a002fe0:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002fe2:	7923      	ldrb	r3, [r4, #4]
1a002fe4:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002fe8:	4669      	mov	r1, sp
1a002fea:	4628      	mov	r0, r5
1a002fec:	f7ff ff9a 	bl	1a002f24 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002ff0:	9b06      	ldr	r3, [sp, #24]
1a002ff2:	42ab      	cmp	r3, r5
1a002ff4:	d027      	beq.n	1a003046 <pll_get_frac+0x7e>
	if (val < 0)
1a002ff6:	1aeb      	subs	r3, r5, r3
1a002ff8:	d42e      	bmi.n	1a003058 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002ffa:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002ffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003002:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a003004:	6963      	ldr	r3, [r4, #20]
1a003006:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a003008:	7923      	ldrb	r3, [r4, #4]
1a00300a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00300e:	a910      	add	r1, sp, #64	; 0x40
1a003010:	4628      	mov	r0, r5
1a003012:	f7ff ff87 	bl	1a002f24 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a003016:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a003018:	42ab      	cmp	r3, r5
1a00301a:	d01f      	beq.n	1a00305c <pll_get_frac+0x94>
	if (val < 0)
1a00301c:	1aeb      	subs	r3, r5, r3
1a00301e:	d425      	bmi.n	1a00306c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a003020:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a003022:	4b2b      	ldr	r3, [pc, #172]	; (1a0030d0 <pll_get_frac+0x108>)
1a003024:	429d      	cmp	r5, r3
1a003026:	d923      	bls.n	1a003070 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a003028:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a00302a:	1aed      	subs	r5, r5, r3
1a00302c:	d433      	bmi.n	1a003096 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00302e:	42ae      	cmp	r6, r5
1a003030:	dc3b      	bgt.n	1a0030aa <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a003032:	42be      	cmp	r6, r7
1a003034:	dc31      	bgt.n	1a00309a <pll_get_frac+0xd2>
			*ppll = pll[0];
1a003036:	466d      	mov	r5, sp
1a003038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00303a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00303c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003044:	e006      	b.n	1a003054 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a003046:	466d      	mov	r5, sp
1a003048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00304a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00304c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a003054:	b019      	add	sp, #100	; 0x64
1a003056:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a003058:	425b      	negs	r3, r3
1a00305a:	e7ce      	b.n	1a002ffa <pll_get_frac+0x32>
		*ppll = pll[2];
1a00305c:	ad10      	add	r5, sp, #64	; 0x40
1a00305e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003062:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003066:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00306a:	e7f3      	b.n	1a003054 <pll_get_frac+0x8c>
		return -val;
1a00306c:	425b      	negs	r3, r3
1a00306e:	e7d7      	b.n	1a003020 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a003070:	2340      	movs	r3, #64	; 0x40
1a003072:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a003074:	6963      	ldr	r3, [r4, #20]
1a003076:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a003078:	a908      	add	r1, sp, #32
1a00307a:	4628      	mov	r0, r5
1a00307c:	f7ff ff52 	bl	1a002f24 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a003080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a003082:	42ab      	cmp	r3, r5
1a003084:	d1d0      	bne.n	1a003028 <pll_get_frac+0x60>
			*ppll = pll[1];
1a003086:	ad08      	add	r5, sp, #32
1a003088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00308a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00308c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003090:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a003094:	e7de      	b.n	1a003054 <pll_get_frac+0x8c>
		return -val;
1a003096:	426d      	negs	r5, r5
1a003098:	e7c9      	b.n	1a00302e <pll_get_frac+0x66>
			*ppll = pll[2];
1a00309a:	ad10      	add	r5, sp, #64	; 0x40
1a00309c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00309e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0030a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0030a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0030a8:	e7d4      	b.n	1a003054 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0030aa:	42af      	cmp	r7, r5
1a0030ac:	db07      	blt.n	1a0030be <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0030ae:	ad08      	add	r5, sp, #32
1a0030b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0030b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0030b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0030b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0030bc:	e7ca      	b.n	1a003054 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a0030be:	ad10      	add	r5, sp, #64	; 0x40
1a0030c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0030c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0030c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0030c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0030cc:	e7c2      	b.n	1a003054 <pll_get_frac+0x8c>
1a0030ce:	bf00      	nop
1a0030d0:	068e7780 	.word	0x068e7780

1a0030d4 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0030d4:	b430      	push	{r4, r5}
1a0030d6:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0030d8:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0030da:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0030dc:	e000      	b.n	1a0030e0 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0030de:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0030e0:	281c      	cmp	r0, #28
1a0030e2:	d118      	bne.n	1a003116 <Chip_Clock_FindBaseClock+0x42>
1a0030e4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0030e8:	0051      	lsls	r1, r2, #1
1a0030ea:	4a0c      	ldr	r2, [pc, #48]	; (1a00311c <Chip_Clock_FindBaseClock+0x48>)
1a0030ec:	440a      	add	r2, r1
1a0030ee:	7914      	ldrb	r4, [r2, #4]
1a0030f0:	4284      	cmp	r4, r0
1a0030f2:	d010      	beq.n	1a003116 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0030f4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0030f8:	004a      	lsls	r2, r1, #1
1a0030fa:	4908      	ldr	r1, [pc, #32]	; (1a00311c <Chip_Clock_FindBaseClock+0x48>)
1a0030fc:	5a8a      	ldrh	r2, [r1, r2]
1a0030fe:	42aa      	cmp	r2, r5
1a003100:	d8ed      	bhi.n	1a0030de <Chip_Clock_FindBaseClock+0xa>
1a003102:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003106:	0051      	lsls	r1, r2, #1
1a003108:	4a04      	ldr	r2, [pc, #16]	; (1a00311c <Chip_Clock_FindBaseClock+0x48>)
1a00310a:	440a      	add	r2, r1
1a00310c:	8852      	ldrh	r2, [r2, #2]
1a00310e:	42aa      	cmp	r2, r5
1a003110:	d3e5      	bcc.n	1a0030de <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a003112:	4620      	mov	r0, r4
1a003114:	e7e4      	b.n	1a0030e0 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a003116:	bc30      	pop	{r4, r5}
1a003118:	4770      	bx	lr
1a00311a:	bf00      	nop
1a00311c:	1a00615c 	.word	0x1a00615c

1a003120 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a003120:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a003122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a003126:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a003128:	4a0d      	ldr	r2, [pc, #52]	; (1a003160 <Chip_Clock_EnableCrystal+0x40>)
1a00312a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a00312c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a003130:	6992      	ldr	r2, [r2, #24]
1a003132:	428a      	cmp	r2, r1
1a003134:	d001      	beq.n	1a00313a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003136:	4a0a      	ldr	r2, [pc, #40]	; (1a003160 <Chip_Clock_EnableCrystal+0x40>)
1a003138:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00313a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00313e:	4a09      	ldr	r2, [pc, #36]	; (1a003164 <Chip_Clock_EnableCrystal+0x44>)
1a003140:	6811      	ldr	r1, [r2, #0]
1a003142:	4a09      	ldr	r2, [pc, #36]	; (1a003168 <Chip_Clock_EnableCrystal+0x48>)
1a003144:	4291      	cmp	r1, r2
1a003146:	d901      	bls.n	1a00314c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a003148:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00314c:	4a04      	ldr	r2, [pc, #16]	; (1a003160 <Chip_Clock_EnableCrystal+0x40>)
1a00314e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a003150:	9b01      	ldr	r3, [sp, #4]
1a003152:	1e5a      	subs	r2, r3, #1
1a003154:	9201      	str	r2, [sp, #4]
1a003156:	2b00      	cmp	r3, #0
1a003158:	d1fa      	bne.n	1a003150 <Chip_Clock_EnableCrystal+0x30>
}
1a00315a:	b002      	add	sp, #8
1a00315c:	4770      	bx	lr
1a00315e:	bf00      	nop
1a003160:	40050000 	.word	0x40050000
1a003164:	1a0060c4 	.word	0x1a0060c4
1a003168:	01312cff 	.word	0x01312cff

1a00316c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a00316c:	3012      	adds	r0, #18
1a00316e:	4b05      	ldr	r3, [pc, #20]	; (1a003184 <Chip_Clock_GetDividerSource+0x18>)
1a003170:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a003174:	f010 0f01 	tst.w	r0, #1
1a003178:	d102      	bne.n	1a003180 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00317a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00317e:	4770      	bx	lr
		return CLKINPUT_PD;
1a003180:	2011      	movs	r0, #17
}
1a003182:	4770      	bx	lr
1a003184:	40050000 	.word	0x40050000

1a003188 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003188:	f100 0212 	add.w	r2, r0, #18
1a00318c:	4b03      	ldr	r3, [pc, #12]	; (1a00319c <Chip_Clock_GetDividerDivisor+0x14>)
1a00318e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a003192:	4b03      	ldr	r3, [pc, #12]	; (1a0031a0 <Chip_Clock_GetDividerDivisor+0x18>)
1a003194:	5c18      	ldrb	r0, [r3, r0]
}
1a003196:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00319a:	4770      	bx	lr
1a00319c:	40050000 	.word	0x40050000
1a0031a0:	1a006154 	.word	0x1a006154

1a0031a4 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0031a4:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0031a6:	2810      	cmp	r0, #16
1a0031a8:	d80a      	bhi.n	1a0031c0 <Chip_Clock_GetClockInputHz+0x1c>
1a0031aa:	e8df f000 	tbb	[pc, r0]
1a0031ae:	0b42      	.short	0x0b42
1a0031b0:	091f160d 	.word	0x091f160d
1a0031b4:	2b282522 	.word	0x2b282522
1a0031b8:	322e0909 	.word	0x322e0909
1a0031bc:	3a36      	.short	0x3a36
1a0031be:	3e          	.byte	0x3e
1a0031bf:	00          	.byte	0x00
	uint32_t rate = 0;
1a0031c0:	2000      	movs	r0, #0
1a0031c2:	e038      	b.n	1a003236 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0031c4:	481e      	ldr	r0, [pc, #120]	; (1a003240 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0031c6:	e036      	b.n	1a003236 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0031c8:	4b1e      	ldr	r3, [pc, #120]	; (1a003244 <Chip_Clock_GetClockInputHz+0xa0>)
1a0031ca:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0031ce:	f003 0307 	and.w	r3, r3, #7
1a0031d2:	2b04      	cmp	r3, #4
1a0031d4:	d130      	bne.n	1a003238 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a0031d6:	2000      	movs	r0, #0
1a0031d8:	e02d      	b.n	1a003236 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0031da:	4b1a      	ldr	r3, [pc, #104]	; (1a003244 <Chip_Clock_GetClockInputHz+0xa0>)
1a0031dc:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0031e0:	f003 0307 	and.w	r3, r3, #7
1a0031e4:	2b04      	cmp	r3, #4
1a0031e6:	d029      	beq.n	1a00323c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0031e8:	4817      	ldr	r0, [pc, #92]	; (1a003248 <Chip_Clock_GetClockInputHz+0xa4>)
1a0031ea:	e024      	b.n	1a003236 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0031ec:	4b17      	ldr	r3, [pc, #92]	; (1a00324c <Chip_Clock_GetClockInputHz+0xa8>)
1a0031ee:	6818      	ldr	r0, [r3, #0]
		break;
1a0031f0:	e021      	b.n	1a003236 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0031f2:	4b17      	ldr	r3, [pc, #92]	; (1a003250 <Chip_Clock_GetClockInputHz+0xac>)
1a0031f4:	6818      	ldr	r0, [r3, #0]
		break;
1a0031f6:	e01e      	b.n	1a003236 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0031f8:	4b16      	ldr	r3, [pc, #88]	; (1a003254 <Chip_Clock_GetClockInputHz+0xb0>)
1a0031fa:	6818      	ldr	r0, [r3, #0]
		break;
1a0031fc:	e01b      	b.n	1a003236 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0031fe:	4b15      	ldr	r3, [pc, #84]	; (1a003254 <Chip_Clock_GetClockInputHz+0xb0>)
1a003200:	6858      	ldr	r0, [r3, #4]
		break;
1a003202:	e018      	b.n	1a003236 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a003204:	f000 f86a 	bl	1a0032dc <Chip_Clock_GetMainPLLHz>
		break;
1a003208:	e015      	b.n	1a003236 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00320a:	2100      	movs	r1, #0
1a00320c:	f000 f89c 	bl	1a003348 <Chip_Clock_GetDivRate>
		break;
1a003210:	e011      	b.n	1a003236 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a003212:	2101      	movs	r1, #1
1a003214:	f000 f898 	bl	1a003348 <Chip_Clock_GetDivRate>
		break;
1a003218:	e00d      	b.n	1a003236 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00321a:	2102      	movs	r1, #2
1a00321c:	f000 f894 	bl	1a003348 <Chip_Clock_GetDivRate>
		break;
1a003220:	e009      	b.n	1a003236 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a003222:	2103      	movs	r1, #3
1a003224:	f000 f890 	bl	1a003348 <Chip_Clock_GetDivRate>
		break;
1a003228:	e005      	b.n	1a003236 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00322a:	2104      	movs	r1, #4
1a00322c:	f000 f88c 	bl	1a003348 <Chip_Clock_GetDivRate>
		break;
1a003230:	e001      	b.n	1a003236 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a003232:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a003236:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a003238:	4803      	ldr	r0, [pc, #12]	; (1a003248 <Chip_Clock_GetClockInputHz+0xa4>)
1a00323a:	e7fc      	b.n	1a003236 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a00323c:	4806      	ldr	r0, [pc, #24]	; (1a003258 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00323e:	e7fa      	b.n	1a003236 <Chip_Clock_GetClockInputHz+0x92>
1a003240:	00b71b00 	.word	0x00b71b00
1a003244:	40043000 	.word	0x40043000
1a003248:	017d7840 	.word	0x017d7840
1a00324c:	1a006098 	.word	0x1a006098
1a003250:	1a0060c4 	.word	0x1a0060c4
1a003254:	10002b24 	.word	0x10002b24
1a003258:	02faf080 	.word	0x02faf080

1a00325c <Chip_Clock_CalcMainPLLValue>:
{
1a00325c:	b538      	push	{r3, r4, r5, lr}
1a00325e:	4605      	mov	r5, r0
1a003260:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a003262:	7908      	ldrb	r0, [r1, #4]
1a003264:	f7ff ff9e 	bl	1a0031a4 <Chip_Clock_GetClockInputHz>
1a003268:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00326a:	4b19      	ldr	r3, [pc, #100]	; (1a0032d0 <Chip_Clock_CalcMainPLLValue+0x74>)
1a00326c:	442b      	add	r3, r5
1a00326e:	4a19      	ldr	r2, [pc, #100]	; (1a0032d4 <Chip_Clock_CalcMainPLLValue+0x78>)
1a003270:	4293      	cmp	r3, r2
1a003272:	d821      	bhi.n	1a0032b8 <Chip_Clock_CalcMainPLLValue+0x5c>
1a003274:	b318      	cbz	r0, 1a0032be <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a003276:	2380      	movs	r3, #128	; 0x80
1a003278:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00327a:	2300      	movs	r3, #0
1a00327c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00327e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a003280:	fbb5 f3f0 	udiv	r3, r5, r0
1a003284:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a003286:	4a14      	ldr	r2, [pc, #80]	; (1a0032d8 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003288:	4295      	cmp	r5, r2
1a00328a:	d903      	bls.n	1a003294 <Chip_Clock_CalcMainPLLValue+0x38>
1a00328c:	fb03 f000 	mul.w	r0, r3, r0
1a003290:	42a8      	cmp	r0, r5
1a003292:	d007      	beq.n	1a0032a4 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003294:	4621      	mov	r1, r4
1a003296:	4628      	mov	r0, r5
1a003298:	f7ff fe96 	bl	1a002fc8 <pll_get_frac>
		if (!ppll->nsel) {
1a00329c:	68a3      	ldr	r3, [r4, #8]
1a00329e:	b18b      	cbz	r3, 1a0032c4 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0032a0:	3b01      	subs	r3, #1
1a0032a2:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a0032a4:	6923      	ldr	r3, [r4, #16]
1a0032a6:	b183      	cbz	r3, 1a0032ca <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0032a8:	68e2      	ldr	r2, [r4, #12]
1a0032aa:	b10a      	cbz	r2, 1a0032b0 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0032ac:	3a01      	subs	r2, #1
1a0032ae:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0032b0:	3b01      	subs	r3, #1
1a0032b2:	6123      	str	r3, [r4, #16]
	return 0;
1a0032b4:	2000      	movs	r0, #0
}
1a0032b6:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0032b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0032bc:	e7fb      	b.n	1a0032b6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0032be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0032c2:	e7f8      	b.n	1a0032b6 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a0032c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0032c8:	e7f5      	b.n	1a0032b6 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a0032ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0032ce:	e7f2      	b.n	1a0032b6 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0032d0:	ff6b3a10 	.word	0xff6b3a10
1a0032d4:	0b940510 	.word	0x0b940510
1a0032d8:	094c5eff 	.word	0x094c5eff

1a0032dc <Chip_Clock_GetMainPLLHz>:
{
1a0032dc:	b530      	push	{r4, r5, lr}
1a0032de:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0032e0:	4d17      	ldr	r5, [pc, #92]	; (1a003340 <Chip_Clock_GetMainPLLHz+0x64>)
1a0032e2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0032e4:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0032e8:	f7ff ff5c 	bl	1a0031a4 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0032ec:	4b15      	ldr	r3, [pc, #84]	; (1a003344 <Chip_Clock_GetMainPLLHz+0x68>)
1a0032ee:	681b      	ldr	r3, [r3, #0]
1a0032f0:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0032f2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0032f4:	f013 0f01 	tst.w	r3, #1
1a0032f8:	d01f      	beq.n	1a00333a <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a0032fa:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0032fe:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a003302:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a003306:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a00330a:	3301      	adds	r3, #1
	n = nsel + 1;
1a00330c:	3201      	adds	r2, #1
	p = ptab[psel];
1a00330e:	f10d 0c08 	add.w	ip, sp, #8
1a003312:	4461      	add	r1, ip
1a003314:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a003318:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00331c:	d108      	bne.n	1a003330 <Chip_Clock_GetMainPLLHz+0x54>
1a00331e:	b93d      	cbnz	r5, 1a003330 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a003320:	0049      	lsls	r1, r1, #1
1a003322:	fbb3 f3f1 	udiv	r3, r3, r1
1a003326:	fbb0 f0f2 	udiv	r0, r0, r2
1a00332a:	fb00 f003 	mul.w	r0, r0, r3
1a00332e:	e005      	b.n	1a00333c <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a003330:	fbb0 f0f2 	udiv	r0, r0, r2
1a003334:	fb03 f000 	mul.w	r0, r3, r0
1a003338:	e000      	b.n	1a00333c <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a00333a:	2000      	movs	r0, #0
}
1a00333c:	b003      	add	sp, #12
1a00333e:	bd30      	pop	{r4, r5, pc}
1a003340:	40050000 	.word	0x40050000
1a003344:	1a006150 	.word	0x1a006150

1a003348 <Chip_Clock_GetDivRate>:
{
1a003348:	b538      	push	{r3, r4, r5, lr}
1a00334a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a00334c:	4608      	mov	r0, r1
1a00334e:	f7ff ff0d 	bl	1a00316c <Chip_Clock_GetDividerSource>
1a003352:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a003354:	4620      	mov	r0, r4
1a003356:	f7ff ff17 	bl	1a003188 <Chip_Clock_GetDividerDivisor>
1a00335a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a00335c:	4628      	mov	r0, r5
1a00335e:	f7ff ff21 	bl	1a0031a4 <Chip_Clock_GetClockInputHz>
1a003362:	3401      	adds	r4, #1
}
1a003364:	fbb0 f0f4 	udiv	r0, r0, r4
1a003368:	bd38      	pop	{r3, r4, r5, pc}
1a00336a:	Address 0x000000001a00336a is out of bounds.


1a00336c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a00336c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00336e:	f100 0416 	add.w	r4, r0, #22
1a003372:	00a4      	lsls	r4, r4, #2
1a003374:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a003378:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a00337c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00337e:	281b      	cmp	r0, #27
1a003380:	d813      	bhi.n	1a0033aa <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a003382:	2911      	cmp	r1, #17
1a003384:	d01a      	beq.n	1a0033bc <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a003386:	4d0e      	ldr	r5, [pc, #56]	; (1a0033c0 <Chip_Clock_SetBaseClock+0x54>)
1a003388:	4025      	ands	r5, r4

			if (autoblocken) {
1a00338a:	b10a      	cbz	r2, 1a003390 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a00338c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a003390:	b10b      	cbz	r3, 1a003396 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a003392:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a003396:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00339a:	3016      	adds	r0, #22
1a00339c:	0080      	lsls	r0, r0, #2
1a00339e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0033a2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0033a6:	6045      	str	r5, [r0, #4]
1a0033a8:	e008      	b.n	1a0033bc <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0033aa:	f044 0401 	orr.w	r4, r4, #1
1a0033ae:	3016      	adds	r0, #22
1a0033b0:	0080      	lsls	r0, r0, #2
1a0033b2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0033b6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0033ba:	6044      	str	r4, [r0, #4]
	}
}
1a0033bc:	bc30      	pop	{r4, r5}
1a0033be:	4770      	bx	lr
1a0033c0:	e0fff7fe 	.word	0xe0fff7fe

1a0033c4 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0033c4:	281b      	cmp	r0, #27
1a0033c6:	d80c      	bhi.n	1a0033e2 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0033c8:	3016      	adds	r0, #22
1a0033ca:	0080      	lsls	r0, r0, #2
1a0033cc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0033d0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0033d4:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0033d6:	f010 0f01 	tst.w	r0, #1
1a0033da:	d104      	bne.n	1a0033e6 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0033dc:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0033e0:	4770      	bx	lr
		return CLKINPUT_PD;
1a0033e2:	2011      	movs	r0, #17
1a0033e4:	4770      	bx	lr
		return CLKINPUT_PD;
1a0033e6:	2011      	movs	r0, #17
}
1a0033e8:	4770      	bx	lr

1a0033ea <Chip_Clock_GetBaseClocktHz>:
{
1a0033ea:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0033ec:	f7ff ffea 	bl	1a0033c4 <Chip_Clock_GetBaseClock>
1a0033f0:	f7ff fed8 	bl	1a0031a4 <Chip_Clock_GetClockInputHz>
}
1a0033f4:	bd08      	pop	{r3, pc}
1a0033f6:	Address 0x000000001a0033f6 is out of bounds.


1a0033f8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0033f8:	b969      	cbnz	r1, 1a003416 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a0033fa:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0033fc:	b10a      	cbz	r2, 1a003402 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0033fe:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a003402:	2b02      	cmp	r3, #2
1a003404:	d009      	beq.n	1a00341a <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003406:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00340a:	d209      	bcs.n	1a003420 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a00340c:	3020      	adds	r0, #32
1a00340e:	4b07      	ldr	r3, [pc, #28]	; (1a00342c <Chip_Clock_EnableOpts+0x34>)
1a003410:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a003414:	4770      	bx	lr
		reg |= (1 << 1);
1a003416:	2103      	movs	r1, #3
1a003418:	e7f0      	b.n	1a0033fc <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a00341a:	f041 0120 	orr.w	r1, r1, #32
1a00341e:	e7f2      	b.n	1a003406 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a003420:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003424:	4b02      	ldr	r3, [pc, #8]	; (1a003430 <Chip_Clock_EnableOpts+0x38>)
1a003426:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00342a:	4770      	bx	lr
1a00342c:	40051000 	.word	0x40051000
1a003430:	40052000 	.word	0x40052000

1a003434 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003434:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003438:	d208      	bcs.n	1a00344c <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00343a:	4a09      	ldr	r2, [pc, #36]	; (1a003460 <Chip_Clock_Enable+0x2c>)
1a00343c:	3020      	adds	r0, #32
1a00343e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003442:	f043 0301 	orr.w	r3, r3, #1
1a003446:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00344a:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00344c:	4a05      	ldr	r2, [pc, #20]	; (1a003464 <Chip_Clock_Enable+0x30>)
1a00344e:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003452:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003456:	f043 0301 	orr.w	r3, r3, #1
1a00345a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00345e:	4770      	bx	lr
1a003460:	40051000 	.word	0x40051000
1a003464:	40052000 	.word	0x40052000

1a003468 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003468:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00346a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00346e:	d309      	bcc.n	1a003484 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003470:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003474:	4a0d      	ldr	r2, [pc, #52]	; (1a0034ac <Chip_Clock_GetRate+0x44>)
1a003476:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00347a:	f014 0f01 	tst.w	r4, #1
1a00347e:	d107      	bne.n	1a003490 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a003480:	2000      	movs	r0, #0
	}

	return rate;
}
1a003482:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003484:	f100 0320 	add.w	r3, r0, #32
1a003488:	4a09      	ldr	r2, [pc, #36]	; (1a0034b0 <Chip_Clock_GetRate+0x48>)
1a00348a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00348e:	e7f4      	b.n	1a00347a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003490:	f7ff fe20 	bl	1a0030d4 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003494:	f7ff ffa9 	bl	1a0033ea <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a003498:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a00349c:	d103      	bne.n	1a0034a6 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00349e:	2301      	movs	r3, #1
		rate = rate / div;
1a0034a0:	fbb0 f0f3 	udiv	r0, r0, r3
1a0034a4:	e7ed      	b.n	1a003482 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0034a6:	2302      	movs	r3, #2
1a0034a8:	e7fa      	b.n	1a0034a0 <Chip_Clock_GetRate+0x38>
1a0034aa:	bf00      	nop
1a0034ac:	40052000 	.word	0x40052000
1a0034b0:	40051000 	.word	0x40051000

1a0034b4 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0034b4:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0034b6:	2069      	movs	r0, #105	; 0x69
1a0034b8:	f7ff ffd6 	bl	1a003468 <Chip_Clock_GetRate>
1a0034bc:	4b01      	ldr	r3, [pc, #4]	; (1a0034c4 <SystemCoreClockUpdate+0x10>)
1a0034be:	6018      	str	r0, [r3, #0]
}
1a0034c0:	bd08      	pop	{r3, pc}
1a0034c2:	bf00      	nop
1a0034c4:	10002b88 	.word	0x10002b88

1a0034c8 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0034c8:	b570      	push	{r4, r5, r6, lr}
1a0034ca:	b08a      	sub	sp, #40	; 0x28
1a0034cc:	4605      	mov	r5, r0
1a0034ce:	460e      	mov	r6, r1
1a0034d0:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0034d2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0034d6:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0034d8:	2806      	cmp	r0, #6
1a0034da:	d018      	beq.n	1a00350e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0034dc:	2300      	movs	r3, #0
1a0034de:	2201      	movs	r2, #1
1a0034e0:	4629      	mov	r1, r5
1a0034e2:	2004      	movs	r0, #4
1a0034e4:	f7ff ff42 	bl	1a00336c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0034e8:	4a49      	ldr	r2, [pc, #292]	; (1a003610 <Chip_SetupCoreClock+0x148>)
1a0034ea:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0034ec:	f043 0301 	orr.w	r3, r3, #1
1a0034f0:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0034f2:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0034f6:	a901      	add	r1, sp, #4
1a0034f8:	4630      	mov	r0, r6
1a0034fa:	f7ff feaf 	bl	1a00325c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0034fe:	4b45      	ldr	r3, [pc, #276]	; (1a003614 <Chip_SetupCoreClock+0x14c>)
1a003500:	429e      	cmp	r6, r3
1a003502:	d916      	bls.n	1a003532 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003504:	9b01      	ldr	r3, [sp, #4]
1a003506:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00350a:	d003      	beq.n	1a003514 <Chip_SetupCoreClock+0x4c>
1a00350c:	e7fe      	b.n	1a00350c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00350e:	f7ff fe07 	bl	1a003120 <Chip_Clock_EnableCrystal>
1a003512:	e7e3      	b.n	1a0034dc <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a003514:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003518:	d005      	beq.n	1a003526 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00351a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00351e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003520:	2500      	movs	r5, #0
			direct = 1;
1a003522:	2601      	movs	r6, #1
1a003524:	e007      	b.n	1a003536 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a003526:	9b04      	ldr	r3, [sp, #16]
1a003528:	3301      	adds	r3, #1
1a00352a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a00352c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00352e:	2600      	movs	r6, #0
1a003530:	e001      	b.n	1a003536 <Chip_SetupCoreClock+0x6e>
1a003532:	2500      	movs	r5, #0
1a003534:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003536:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00353a:	9b01      	ldr	r3, [sp, #4]
1a00353c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003540:	9a05      	ldr	r2, [sp, #20]
1a003542:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003546:	9a03      	ldr	r2, [sp, #12]
1a003548:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00354c:	9a04      	ldr	r2, [sp, #16]
1a00354e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003552:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003556:	4a2e      	ldr	r2, [pc, #184]	; (1a003610 <Chip_SetupCoreClock+0x148>)
1a003558:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00355a:	4b2d      	ldr	r3, [pc, #180]	; (1a003610 <Chip_SetupCoreClock+0x148>)
1a00355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00355e:	f013 0f01 	tst.w	r3, #1
1a003562:	d0fa      	beq.n	1a00355a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003564:	2300      	movs	r3, #0
1a003566:	2201      	movs	r2, #1
1a003568:	2109      	movs	r1, #9
1a00356a:	2004      	movs	r0, #4
1a00356c:	f7ff fefe 	bl	1a00336c <Chip_Clock_SetBaseClock>

	if (direct) {
1a003570:	b1fe      	cbz	r6, 1a0035b2 <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003572:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003576:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003578:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00357a:	1e5a      	subs	r2, r3, #1
1a00357c:	9209      	str	r2, [sp, #36]	; 0x24
1a00357e:	2b00      	cmp	r3, #0
1a003580:	d1fa      	bne.n	1a003578 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a003582:	9b01      	ldr	r3, [sp, #4]
1a003584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003588:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00358a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00358e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003592:	9a05      	ldr	r2, [sp, #20]
1a003594:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003598:	9a03      	ldr	r2, [sp, #12]
1a00359a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00359e:	9a04      	ldr	r2, [sp, #16]
1a0035a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0035a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0035a8:	4a19      	ldr	r2, [pc, #100]	; (1a003610 <Chip_SetupCoreClock+0x148>)
1a0035aa:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0035ac:	b36c      	cbz	r4, 1a00360a <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0035ae:	2400      	movs	r4, #0
1a0035b0:	e029      	b.n	1a003606 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a0035b2:	2d00      	cmp	r5, #0
1a0035b4:	d0fa      	beq.n	1a0035ac <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0035b6:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0035ba:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0035bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0035be:	1e5a      	subs	r2, r3, #1
1a0035c0:	9209      	str	r2, [sp, #36]	; 0x24
1a0035c2:	2b00      	cmp	r3, #0
1a0035c4:	d1fa      	bne.n	1a0035bc <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a0035c6:	9b04      	ldr	r3, [sp, #16]
1a0035c8:	1e5a      	subs	r2, r3, #1
1a0035ca:	9204      	str	r2, [sp, #16]
1a0035cc:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0035d0:	9b01      	ldr	r3, [sp, #4]
1a0035d2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0035d6:	9905      	ldr	r1, [sp, #20]
1a0035d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0035dc:	9903      	ldr	r1, [sp, #12]
1a0035de:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0035e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0035e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0035ea:	4a09      	ldr	r2, [pc, #36]	; (1a003610 <Chip_SetupCoreClock+0x148>)
1a0035ec:	6453      	str	r3, [r2, #68]	; 0x44
1a0035ee:	e7dd      	b.n	1a0035ac <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0035f0:	4809      	ldr	r0, [pc, #36]	; (1a003618 <Chip_SetupCoreClock+0x150>)
1a0035f2:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0035f6:	78cb      	ldrb	r3, [r1, #3]
1a0035f8:	788a      	ldrb	r2, [r1, #2]
1a0035fa:	7849      	ldrb	r1, [r1, #1]
1a0035fc:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003600:	f7ff feb4 	bl	1a00336c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003604:	3401      	adds	r4, #1
1a003606:	2c11      	cmp	r4, #17
1a003608:	d9f2      	bls.n	1a0035f0 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00360a:	b00a      	add	sp, #40	; 0x28
1a00360c:	bd70      	pop	{r4, r5, r6, pc}
1a00360e:	bf00      	nop
1a003610:	40050000 	.word	0x40050000
1a003614:	068e7780 	.word	0x068e7780
1a003618:	1a0061c8 	.word	0x1a0061c8

1a00361c <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a00361c:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a00361e:	6843      	ldr	r3, [r0, #4]
1a003620:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003624:	2b30      	cmp	r3, #48	; 0x30
1a003626:	d04a      	beq.n	1a0036be <Chip_I2CM_XferHandler+0xa2>
1a003628:	d90f      	bls.n	1a00364a <Chip_I2CM_XferHandler+0x2e>
1a00362a:	2b48      	cmp	r3, #72	; 0x48
1a00362c:	d06a      	beq.n	1a003704 <Chip_I2CM_XferHandler+0xe8>
1a00362e:	d83a      	bhi.n	1a0036a6 <Chip_I2CM_XferHandler+0x8a>
1a003630:	2b38      	cmp	r3, #56	; 0x38
1a003632:	d06b      	beq.n	1a00370c <Chip_I2CM_XferHandler+0xf0>
1a003634:	2b40      	cmp	r3, #64	; 0x40
1a003636:	d13e      	bne.n	1a0036b6 <Chip_I2CM_XferHandler+0x9a>
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a003638:	88ca      	ldrh	r2, [r1, #6]
1a00363a:	2a01      	cmp	r2, #1
1a00363c:	d95a      	bls.n	1a0036f4 <Chip_I2CM_XferHandler+0xd8>
			cclr &= ~I2C_CON_AA;
1a00363e:	2338      	movs	r3, #56	; 0x38
		}
		if (xfer->rxSz == 0) {
1a003640:	b9b2      	cbnz	r2, 1a003670 <Chip_I2CM_XferHandler+0x54>
			xfer->status = I2CM_STATUS_OK;
1a003642:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a003644:	f023 0310 	bic.w	r3, r3, #16
1a003648:	e012      	b.n	1a003670 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a00364a:	2b10      	cmp	r3, #16
1a00364c:	d007      	beq.n	1a00365e <Chip_I2CM_XferHandler+0x42>
1a00364e:	d81c      	bhi.n	1a00368a <Chip_I2CM_XferHandler+0x6e>
1a003650:	b91b      	cbnz	r3, 1a00365a <Chip_I2CM_XferHandler+0x3e>
	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
		break;

	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a003652:	2303      	movs	r3, #3
1a003654:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003656:	232c      	movs	r3, #44	; 0x2c
        break;
1a003658:	e00a      	b.n	1a003670 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a00365a:	2b08      	cmp	r3, #8
1a00365c:	d12b      	bne.n	1a0036b6 <Chip_I2CM_XferHandler+0x9a>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a00365e:	780a      	ldrb	r2, [r1, #0]
1a003660:	888b      	ldrh	r3, [r1, #4]
1a003662:	fab3 f383 	clz	r3, r3
1a003666:	095b      	lsrs	r3, r3, #5
1a003668:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a00366c:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a00366e:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a003670:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a003674:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a003676:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a00367a:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a00367c:	8848      	ldrh	r0, [r1, #2]
1a00367e:	38ff      	subs	r0, #255	; 0xff
1a003680:	bf18      	it	ne
1a003682:	2001      	movne	r0, #1
}
1a003684:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003688:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a00368a:	2b20      	cmp	r3, #32
1a00368c:	d017      	beq.n	1a0036be <Chip_I2CM_XferHandler+0xa2>
1a00368e:	2b28      	cmp	r3, #40	; 0x28
1a003690:	d001      	beq.n	1a003696 <Chip_I2CM_XferHandler+0x7a>
1a003692:	2b18      	cmp	r3, #24
1a003694:	d10f      	bne.n	1a0036b6 <Chip_I2CM_XferHandler+0x9a>
		if (!xfer->txSz) {
1a003696:	888b      	ldrh	r3, [r1, #4]
1a003698:	b9cb      	cbnz	r3, 1a0036ce <Chip_I2CM_XferHandler+0xb2>
			if (xfer->rxSz) {
1a00369a:	88cb      	ldrh	r3, [r1, #6]
1a00369c:	2b00      	cmp	r3, #0
1a00369e:	d139      	bne.n	1a003714 <Chip_I2CM_XferHandler+0xf8>
				xfer->status = I2CM_STATUS_OK;
1a0036a0:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a0036a2:	232c      	movs	r3, #44	; 0x2c
1a0036a4:	e7e4      	b.n	1a003670 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0036a6:	2b58      	cmp	r3, #88	; 0x58
1a0036a8:	d01b      	beq.n	1a0036e2 <Chip_I2CM_XferHandler+0xc6>
1a0036aa:	2bf8      	cmp	r3, #248	; 0xf8
1a0036ac:	d101      	bne.n	1a0036b2 <Chip_I2CM_XferHandler+0x96>
      return 0;
1a0036ae:	2000      	movs	r0, #0
1a0036b0:	e7e8      	b.n	1a003684 <Chip_I2CM_XferHandler+0x68>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0036b2:	2b50      	cmp	r3, #80	; 0x50
1a0036b4:	d015      	beq.n	1a0036e2 <Chip_I2CM_XferHandler+0xc6>
		xfer->status = I2CM_STATUS_ERROR;
1a0036b6:	2301      	movs	r3, #1
1a0036b8:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a0036ba:	232c      	movs	r3, #44	; 0x2c
        break;
1a0036bc:	e7d8      	b.n	1a003670 <Chip_I2CM_XferHandler+0x54>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a0036be:	784b      	ldrb	r3, [r1, #1]
1a0036c0:	f013 0f01 	tst.w	r3, #1
1a0036c4:	d1e7      	bne.n	1a003696 <Chip_I2CM_XferHandler+0x7a>
			xfer->status = I2CM_STATUS_NAK;
1a0036c6:	2302      	movs	r3, #2
1a0036c8:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a0036ca:	232c      	movs	r3, #44	; 0x2c
			break;
1a0036cc:	e7d0      	b.n	1a003670 <Chip_I2CM_XferHandler+0x54>
			pI2C->DAT = *xfer->txBuff++;
1a0036ce:	688b      	ldr	r3, [r1, #8]
1a0036d0:	1c5a      	adds	r2, r3, #1
1a0036d2:	608a      	str	r2, [r1, #8]
1a0036d4:	781b      	ldrb	r3, [r3, #0]
1a0036d6:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a0036d8:	888b      	ldrh	r3, [r1, #4]
1a0036da:	3b01      	subs	r3, #1
1a0036dc:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a0036de:	233c      	movs	r3, #60	; 0x3c
1a0036e0:	e7c6      	b.n	1a003670 <Chip_I2CM_XferHandler+0x54>
		*xfer->rxBuff++ = pI2C->DAT;
1a0036e2:	6882      	ldr	r2, [r0, #8]
1a0036e4:	68cb      	ldr	r3, [r1, #12]
1a0036e6:	1c5c      	adds	r4, r3, #1
1a0036e8:	60cc      	str	r4, [r1, #12]
1a0036ea:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a0036ec:	88cb      	ldrh	r3, [r1, #6]
1a0036ee:	3b01      	subs	r3, #1
1a0036f0:	80cb      	strh	r3, [r1, #6]
1a0036f2:	e7a1      	b.n	1a003638 <Chip_I2CM_XferHandler+0x1c>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a0036f4:	784b      	ldrb	r3, [r1, #1]
1a0036f6:	f013 0f02 	tst.w	r3, #2
1a0036fa:	d101      	bne.n	1a003700 <Chip_I2CM_XferHandler+0xe4>
	uint32_t cclr = I2C_CON_FLAGS;
1a0036fc:	233c      	movs	r3, #60	; 0x3c
1a0036fe:	e79f      	b.n	1a003640 <Chip_I2CM_XferHandler+0x24>
			cclr &= ~I2C_CON_AA;
1a003700:	2338      	movs	r3, #56	; 0x38
1a003702:	e79d      	b.n	1a003640 <Chip_I2CM_XferHandler+0x24>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a003704:	2304      	movs	r3, #4
1a003706:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003708:	232c      	movs	r3, #44	; 0x2c
		break;
1a00370a:	e7b1      	b.n	1a003670 <Chip_I2CM_XferHandler+0x54>
		xfer->status = I2CM_STATUS_ARBLOST;
1a00370c:	2305      	movs	r3, #5
1a00370e:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a003710:	233c      	movs	r3, #60	; 0x3c
		break;
1a003712:	e7ad      	b.n	1a003670 <Chip_I2CM_XferHandler+0x54>
				cclr &= ~I2C_CON_STA;
1a003714:	231c      	movs	r3, #28
1a003716:	e7ab      	b.n	1a003670 <Chip_I2CM_XferHandler+0x54>

1a003718 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a003718:	23ff      	movs	r3, #255	; 0xff
1a00371a:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a00371c:	232c      	movs	r3, #44	; 0x2c
1a00371e:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a003720:	2360      	movs	r3, #96	; 0x60
1a003722:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a003724:	4770      	bx	lr

1a003726 <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a003726:	b538      	push	{r3, r4, r5, lr}
1a003728:	4604      	mov	r4, r0
1a00372a:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a00372c:	f7ff fff4 	bl	1a003718 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a003730:	2000      	movs	r0, #0

	while (ret == 0) {
1a003732:	e007      	b.n	1a003744 <Chip_I2CM_XferBlocking+0x1e>
	return pI2C->CONSET & I2C_CON_SI;
1a003734:	6823      	ldr	r3, [r4, #0]
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a003736:	f013 0f08 	tst.w	r3, #8
1a00373a:	d0fb      	beq.n	1a003734 <Chip_I2CM_XferBlocking+0xe>
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a00373c:	4629      	mov	r1, r5
1a00373e:	4620      	mov	r0, r4
1a003740:	f7ff ff6c 	bl	1a00361c <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a003744:	2800      	cmp	r0, #0
1a003746:	d0f5      	beq.n	1a003734 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a003748:	bd38      	pop	{r3, r4, r5, pc}

1a00374a <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a00374a:	4770      	bx	lr

1a00374c <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a00374c:	2901      	cmp	r1, #1
1a00374e:	d000      	beq.n	1a003752 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a003750:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a003752:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003756:	0082      	lsls	r2, r0, #2
1a003758:	4b03      	ldr	r3, [pc, #12]	; (1a003768 <Chip_I2C_EventHandler+0x1c>)
1a00375a:	4413      	add	r3, r2
1a00375c:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a00375e:	7d13      	ldrb	r3, [r2, #20]
1a003760:	b2db      	uxtb	r3, r3
1a003762:	2b04      	cmp	r3, #4
1a003764:	d0fb      	beq.n	1a00375e <Chip_I2C_EventHandler+0x12>
1a003766:	e7f3      	b.n	1a003750 <Chip_I2C_EventHandler+0x4>
1a003768:	10000008 	.word	0x10000008

1a00376c <handleMasterXferState>:
{
1a00376c:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a00376e:	6843      	ldr	r3, [r0, #4]
1a003770:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a003774:	2b58      	cmp	r3, #88	; 0x58
1a003776:	d87e      	bhi.n	1a003876 <handleMasterXferState+0x10a>
1a003778:	e8df f003 	tbb	[pc, r3]
1a00377c:	7d7d7d79 	.word	0x7d7d7d79
1a003780:	7d7d7d7d 	.word	0x7d7d7d7d
1a003784:	7d7d7d2f 	.word	0x7d7d7d2f
1a003788:	7d7d7d7d 	.word	0x7d7d7d7d
1a00378c:	7d7d7d2f 	.word	0x7d7d7d2f
1a003790:	7d7d7d7d 	.word	0x7d7d7d7d
1a003794:	7d7d7d39 	.word	0x7d7d7d39
1a003798:	7d7d7d7d 	.word	0x7d7d7d7d
1a00379c:	7d7d7d6d 	.word	0x7d7d7d6d
1a0037a0:	7d7d7d7d 	.word	0x7d7d7d7d
1a0037a4:	7d7d7d39 	.word	0x7d7d7d39
1a0037a8:	7d7d7d7d 	.word	0x7d7d7d7d
1a0037ac:	7d7d7d71 	.word	0x7d7d7d71
1a0037b0:	7d7d7d7d 	.word	0x7d7d7d7d
1a0037b4:	7d7d7d75 	.word	0x7d7d7d75
1a0037b8:	7d7d7d7d 	.word	0x7d7d7d7d
1a0037bc:	7d7d7d6b 	.word	0x7d7d7d6b
1a0037c0:	7d7d7d7d 	.word	0x7d7d7d7d
1a0037c4:	7d7d7d6d 	.word	0x7d7d7d6d
1a0037c8:	7d7d7d7d 	.word	0x7d7d7d7d
1a0037cc:	7d7d7d2d 	.word	0x7d7d7d2d
1a0037d0:	7d7d7d7d 	.word	0x7d7d7d7d
1a0037d4:	4f          	.byte	0x4f
1a0037d5:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a0037d6:	233c      	movs	r3, #60	; 0x3c
1a0037d8:	e020      	b.n	1a00381c <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a0037da:	780a      	ldrb	r2, [r1, #0]
1a0037dc:	688b      	ldr	r3, [r1, #8]
1a0037de:	fab3 f383 	clz	r3, r3
1a0037e2:	095b      	lsrs	r3, r3, #5
1a0037e4:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a0037e8:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a0037ea:	233c      	movs	r3, #60	; 0x3c
		break;
1a0037ec:	e023      	b.n	1a003836 <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a0037ee:	688b      	ldr	r3, [r1, #8]
1a0037f0:	b94b      	cbnz	r3, 1a003806 <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a0037f2:	690b      	ldr	r3, [r1, #16]
1a0037f4:	b123      	cbz	r3, 1a003800 <handleMasterXferState+0x94>
1a0037f6:	f06f 0320 	mvn.w	r3, #32
1a0037fa:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a0037fe:	e01a      	b.n	1a003836 <handleMasterXferState+0xca>
1a003800:	f06f 0310 	mvn.w	r3, #16
1a003804:	e7f9      	b.n	1a0037fa <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a003806:	684b      	ldr	r3, [r1, #4]
1a003808:	1c5a      	adds	r2, r3, #1
1a00380a:	604a      	str	r2, [r1, #4]
1a00380c:	781b      	ldrb	r3, [r3, #0]
1a00380e:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a003810:	688b      	ldr	r3, [r1, #8]
1a003812:	3b01      	subs	r3, #1
1a003814:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a003816:	233c      	movs	r3, #60	; 0x3c
1a003818:	e00d      	b.n	1a003836 <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a00381a:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a00381c:	6884      	ldr	r4, [r0, #8]
1a00381e:	68ca      	ldr	r2, [r1, #12]
1a003820:	1c55      	adds	r5, r2, #1
1a003822:	60cd      	str	r5, [r1, #12]
1a003824:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a003826:	690a      	ldr	r2, [r1, #16]
1a003828:	3a01      	subs	r2, #1
1a00382a:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a00382c:	690a      	ldr	r2, [r1, #16]
1a00382e:	2a01      	cmp	r2, #1
1a003830:	dd01      	ble.n	1a003836 <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a003832:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a003836:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a00383a:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a00383c:	f023 0210 	bic.w	r2, r3, #16
1a003840:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a003842:	f013 0f10 	tst.w	r3, #16
1a003846:	d018      	beq.n	1a00387a <handleMasterXferState+0x10e>
1a003848:	7d0b      	ldrb	r3, [r1, #20]
1a00384a:	2b02      	cmp	r3, #2
1a00384c:	d015      	beq.n	1a00387a <handleMasterXferState+0x10e>
	return 1;
1a00384e:	2001      	movs	r0, #1
1a003850:	e017      	b.n	1a003882 <handleMasterXferState+0x116>
	uint32_t cclr = I2C_CON_FLAGS;
1a003852:	233c      	movs	r3, #60	; 0x3c
1a003854:	e7ea      	b.n	1a00382c <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a003856:	2305      	movs	r3, #5
1a003858:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a00385a:	232c      	movs	r3, #44	; 0x2c
		break;
1a00385c:	e7eb      	b.n	1a003836 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a00385e:	2301      	movs	r3, #1
1a003860:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a003862:	232c      	movs	r3, #44	; 0x2c
		break;
1a003864:	e7e7      	b.n	1a003836 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a003866:	2302      	movs	r3, #2
1a003868:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a00386a:	233c      	movs	r3, #60	; 0x3c
		break;
1a00386c:	e7e3      	b.n	1a003836 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a00386e:	2303      	movs	r3, #3
1a003870:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a003872:	232c      	movs	r3, #44	; 0x2c
1a003874:	e7df      	b.n	1a003836 <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a003876:	233c      	movs	r3, #60	; 0x3c
1a003878:	e7dd      	b.n	1a003836 <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a00387a:	7d0b      	ldrb	r3, [r1, #20]
1a00387c:	2b04      	cmp	r3, #4
1a00387e:	d002      	beq.n	1a003886 <handleMasterXferState+0x11a>
		return 0;
1a003880:	2000      	movs	r0, #0
}
1a003882:	bc30      	pop	{r4, r5}
1a003884:	4770      	bx	lr
			xfer->status = I2C_STATUS_DONE;
1a003886:	2000      	movs	r0, #0
1a003888:	7508      	strb	r0, [r1, #20]
1a00388a:	e7fa      	b.n	1a003882 <handleMasterXferState+0x116>

1a00388c <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a00388c:	b570      	push	{r4, r5, r6, lr}
1a00388e:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a003890:	4e06      	ldr	r6, [pc, #24]	; (1a0038ac <Chip_I2C_Init+0x20>)
1a003892:	00c4      	lsls	r4, r0, #3
1a003894:	1a22      	subs	r2, r4, r0
1a003896:	0093      	lsls	r3, r2, #2
1a003898:	4433      	add	r3, r6
1a00389a:	8898      	ldrh	r0, [r3, #4]
1a00389c:	f7ff fdca 	bl	1a003434 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0038a0:	1b64      	subs	r4, r4, r5
1a0038a2:	00a3      	lsls	r3, r4, #2
1a0038a4:	58f3      	ldr	r3, [r6, r3]
1a0038a6:	226c      	movs	r2, #108	; 0x6c
1a0038a8:	619a      	str	r2, [r3, #24]
}
1a0038aa:	bd70      	pop	{r4, r5, r6, pc}
1a0038ac:	10000008 	.word	0x10000008

1a0038b0 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0038b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0038b4:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0038b6:	4e0b      	ldr	r6, [pc, #44]	; (1a0038e4 <Chip_I2C_SetClockRate+0x34>)
1a0038b8:	00c5      	lsls	r5, r0, #3
1a0038ba:	1a2b      	subs	r3, r5, r0
1a0038bc:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0038c0:	eb06 0308 	add.w	r3, r6, r8
1a0038c4:	8898      	ldrh	r0, [r3, #4]
1a0038c6:	f7ff fdcf 	bl	1a003468 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0038ca:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0038ce:	f856 3008 	ldr.w	r3, [r6, r8]
1a0038d2:	0842      	lsrs	r2, r0, #1
1a0038d4:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0038d6:	f856 3008 	ldr.w	r3, [r6, r8]
1a0038da:	691a      	ldr	r2, [r3, #16]
1a0038dc:	1a80      	subs	r0, r0, r2
1a0038de:	6158      	str	r0, [r3, #20]
}
1a0038e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0038e4:	10000008 	.word	0x10000008

1a0038e8 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a0038e8:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a0038ec:	009a      	lsls	r2, r3, #2
1a0038ee:	4b09      	ldr	r3, [pc, #36]	; (1a003914 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a0038f0:	4413      	add	r3, r2
1a0038f2:	691b      	ldr	r3, [r3, #16]
1a0038f4:	b153      	cbz	r3, 1a00390c <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a0038f6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0038fa:	0082      	lsls	r2, r0, #2
1a0038fc:	4b05      	ldr	r3, [pc, #20]	; (1a003914 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a0038fe:	4413      	add	r3, r2
1a003900:	6898      	ldr	r0, [r3, #8]
}
1a003902:	4288      	cmp	r0, r1
1a003904:	bf14      	ite	ne
1a003906:	2000      	movne	r0, #0
1a003908:	2001      	moveq	r0, #1
1a00390a:	4770      	bx	lr
		iic->mEvent = event;
1a00390c:	4b01      	ldr	r3, [pc, #4]	; (1a003914 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a00390e:	4413      	add	r3, r2
1a003910:	6099      	str	r1, [r3, #8]
1a003912:	e7f0      	b.n	1a0038f6 <Chip_I2C_SetMasterEventHandler+0xe>
1a003914:	10000008 	.word	0x10000008

1a003918 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a003918:	b510      	push	{r4, lr}
1a00391a:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a00391c:	4809      	ldr	r0, [pc, #36]	; (1a003944 <Chip_I2C_MasterStateHandler+0x2c>)
1a00391e:	00e3      	lsls	r3, r4, #3
1a003920:	1b1b      	subs	r3, r3, r4
1a003922:	009a      	lsls	r2, r3, #2
1a003924:	1883      	adds	r3, r0, r2
1a003926:	6919      	ldr	r1, [r3, #16]
1a003928:	5880      	ldr	r0, [r0, r2]
1a00392a:	f7ff ff1f 	bl	1a00376c <handleMasterXferState>
1a00392e:	b940      	cbnz	r0, 1a003942 <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a003930:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a003934:	009a      	lsls	r2, r3, #2
1a003936:	4b03      	ldr	r3, [pc, #12]	; (1a003944 <Chip_I2C_MasterStateHandler+0x2c>)
1a003938:	4413      	add	r3, r2
1a00393a:	689b      	ldr	r3, [r3, #8]
1a00393c:	2102      	movs	r1, #2
1a00393e:	4620      	mov	r0, r4
1a003940:	4798      	blx	r3
	}
}
1a003942:	bd10      	pop	{r4, pc}
1a003944:	10000008 	.word	0x10000008

1a003948 <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a003948:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00394c:	0083      	lsls	r3, r0, #2
1a00394e:	4a03      	ldr	r2, [pc, #12]	; (1a00395c <Chip_I2C_IsStateChanged+0x14>)
1a003950:	58d3      	ldr	r3, [r2, r3]
1a003952:	6818      	ldr	r0, [r3, #0]
}
1a003954:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a003958:	4770      	bx	lr
1a00395a:	bf00      	nop
1a00395c:	10000008 	.word	0x10000008

1a003960 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a003960:	2901      	cmp	r1, #1
1a003962:	d000      	beq.n	1a003966 <Chip_I2C_EventHandlerPolling+0x6>
1a003964:	4770      	bx	lr
{
1a003966:	b538      	push	{r3, r4, r5, lr}
1a003968:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a00396a:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a00396e:	009a      	lsls	r2, r3, #2
1a003970:	4b08      	ldr	r3, [pc, #32]	; (1a003994 <Chip_I2C_EventHandlerPolling+0x34>)
1a003972:	4413      	add	r3, r2
1a003974:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a003976:	7d2b      	ldrb	r3, [r5, #20]
1a003978:	b2db      	uxtb	r3, r3
1a00397a:	2b04      	cmp	r3, #4
1a00397c:	d108      	bne.n	1a003990 <Chip_I2C_EventHandlerPolling+0x30>
		if (Chip_I2C_IsStateChanged(id)) {
1a00397e:	4620      	mov	r0, r4
1a003980:	f7ff ffe2 	bl	1a003948 <Chip_I2C_IsStateChanged>
1a003984:	2800      	cmp	r0, #0
1a003986:	d0f6      	beq.n	1a003976 <Chip_I2C_EventHandlerPolling+0x16>
			Chip_I2C_MasterStateHandler(id);
1a003988:	4620      	mov	r0, r4
1a00398a:	f7ff ffc5 	bl	1a003918 <Chip_I2C_MasterStateHandler>
1a00398e:	e7f2      	b.n	1a003976 <Chip_I2C_EventHandlerPolling+0x16>
}
1a003990:	bd38      	pop	{r3, r4, r5, pc}
1a003992:	bf00      	nop
1a003994:	10000008 	.word	0x10000008

1a003998 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003998:	4b03      	ldr	r3, [pc, #12]	; (1a0039a8 <Chip_SSP_GetClockIndex+0x10>)
1a00399a:	4298      	cmp	r0, r3
1a00399c:	d001      	beq.n	1a0039a2 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a00399e:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0039a0:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0039a2:	20a5      	movs	r0, #165	; 0xa5
1a0039a4:	4770      	bx	lr
1a0039a6:	bf00      	nop
1a0039a8:	400c5000 	.word	0x400c5000

1a0039ac <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0039ac:	4b04      	ldr	r3, [pc, #16]	; (1a0039c0 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0039ae:	4298      	cmp	r0, r3
1a0039b0:	d002      	beq.n	1a0039b8 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0039b2:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0039b6:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0039b8:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0039bc:	4770      	bx	lr
1a0039be:	bf00      	nop
1a0039c0:	400c5000 	.word	0x400c5000

1a0039c4 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0039c4:	6803      	ldr	r3, [r0, #0]
1a0039c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0039ca:	0209      	lsls	r1, r1, #8
1a0039cc:	b289      	uxth	r1, r1
1a0039ce:	4319      	orrs	r1, r3
1a0039d0:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0039d2:	6102      	str	r2, [r0, #16]
}
1a0039d4:	4770      	bx	lr

1a0039d6 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0039d6:	b570      	push	{r4, r5, r6, lr}
1a0039d8:	4606      	mov	r6, r0
1a0039da:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0039dc:	f7ff ffe6 	bl	1a0039ac <Chip_SSP_GetPeriphClockIndex>
1a0039e0:	f7ff fd42 	bl	1a003468 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0039e4:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0039e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0039ea:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0039ec:	e000      	b.n	1a0039f0 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0039ee:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0039f0:	42ab      	cmp	r3, r5
1a0039f2:	d90b      	bls.n	1a003a0c <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0039f4:	1c4c      	adds	r4, r1, #1
1a0039f6:	fb02 f304 	mul.w	r3, r2, r4
1a0039fa:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0039fe:	429d      	cmp	r5, r3
1a003a00:	d2f6      	bcs.n	1a0039f0 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003a02:	2cff      	cmp	r4, #255	; 0xff
1a003a04:	d9f3      	bls.n	1a0039ee <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a003a06:	3202      	adds	r2, #2
				cr0_div = 0;
1a003a08:	2100      	movs	r1, #0
1a003a0a:	e7f1      	b.n	1a0039f0 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003a0c:	4630      	mov	r0, r6
1a003a0e:	f7ff ffd9 	bl	1a0039c4 <Chip_SSP_SetClockRate>
}
1a003a12:	bd70      	pop	{r4, r5, r6, pc}

1a003a14 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003a14:	b510      	push	{r4, lr}
1a003a16:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003a18:	f7ff ffbe 	bl	1a003998 <Chip_SSP_GetClockIndex>
1a003a1c:	f7ff fd0a 	bl	1a003434 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003a20:	4620      	mov	r0, r4
1a003a22:	f7ff ffc3 	bl	1a0039ac <Chip_SSP_GetPeriphClockIndex>
1a003a26:	f7ff fd05 	bl	1a003434 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003a2a:	6863      	ldr	r3, [r4, #4]
1a003a2c:	f023 0304 	bic.w	r3, r3, #4
1a003a30:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003a32:	6823      	ldr	r3, [r4, #0]
1a003a34:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003a38:	f043 0307 	orr.w	r3, r3, #7
1a003a3c:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003a3e:	4902      	ldr	r1, [pc, #8]	; (1a003a48 <Chip_SSP_Init+0x34>)
1a003a40:	4620      	mov	r0, r4
1a003a42:	f7ff ffc8 	bl	1a0039d6 <Chip_SSP_SetBitRate>
}
1a003a46:	bd10      	pop	{r4, pc}
1a003a48:	000186a0 	.word	0x000186a0

1a003a4c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a003a4c:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a003a4e:	4a0b      	ldr	r2, [pc, #44]	; (1a003a7c <SystemInit+0x30>)
1a003a50:	4b0b      	ldr	r3, [pc, #44]	; (1a003a80 <SystemInit+0x34>)
1a003a52:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003a54:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003a58:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a003a5a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a003a5e:	2b20      	cmp	r3, #32
1a003a60:	d004      	beq.n	1a003a6c <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a003a62:	f7ff f921 	bl	1a002ca8 <Board_SystemInit>
   Board_Init();
1a003a66:	f7ff f8a7 	bl	1a002bb8 <Board_Init>
}
1a003a6a:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003a6c:	4a04      	ldr	r2, [pc, #16]	; (1a003a80 <SystemInit+0x34>)
1a003a6e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003a72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003a76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a003a7a:	e7f2      	b.n	1a003a62 <SystemInit+0x16>
1a003a7c:	1a000000 	.word	0x1a000000
1a003a80:	e000ed00 	.word	0xe000ed00

1a003a84 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003a84:	4b04      	ldr	r3, [pc, #16]	; (1a003a98 <cyclesCounterInit+0x14>)
1a003a86:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a003a88:	4a04      	ldr	r2, [pc, #16]	; (1a003a9c <cyclesCounterInit+0x18>)
1a003a8a:	6813      	ldr	r3, [r2, #0]
1a003a8c:	f043 0301 	orr.w	r3, r3, #1
1a003a90:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a003a92:	2001      	movs	r0, #1
1a003a94:	4770      	bx	lr
1a003a96:	bf00      	nop
1a003a98:	10000040 	.word	0x10000040
1a003a9c:	e0001000 	.word	0xe0001000

1a003aa0 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a003aa0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003aa4:	0083      	lsls	r3, r0, #2
1a003aa6:	4a03      	ldr	r2, [pc, #12]	; (1a003ab4 <uartTxReady+0x14>)
1a003aa8:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a003aaa:	6958      	ldr	r0, [r3, #20]
}
1a003aac:	f000 0020 	and.w	r0, r0, #32
1a003ab0:	4770      	bx	lr
1a003ab2:	bf00      	nop
1a003ab4:	1a006210 	.word	0x1a006210

1a003ab8 <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a003ab8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003abc:	0083      	lsls	r3, r0, #2
1a003abe:	4a02      	ldr	r2, [pc, #8]	; (1a003ac8 <uartTxWrite+0x10>)
1a003ac0:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a003ac2:	6019      	str	r1, [r3, #0]
}
1a003ac4:	4770      	bx	lr
1a003ac6:	bf00      	nop
1a003ac8:	1a006210 	.word	0x1a006210

1a003acc <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a003acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003ad0:	4680      	mov	r8, r0
1a003ad2:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a003ad4:	4c19      	ldr	r4, [pc, #100]	; (1a003b3c <uartInit+0x70>)
1a003ad6:	0045      	lsls	r5, r0, #1
1a003ad8:	182a      	adds	r2, r5, r0
1a003ada:	0093      	lsls	r3, r2, #2
1a003adc:	18e6      	adds	r6, r4, r3
1a003ade:	58e7      	ldr	r7, [r4, r3]
1a003ae0:	4638      	mov	r0, r7
1a003ae2:	f7ff f8fd 	bl	1a002ce0 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a003ae6:	4649      	mov	r1, r9
1a003ae8:	4638      	mov	r0, r7
1a003aea:	f7ff f923 	bl	1a002d34 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a003aee:	2307      	movs	r3, #7
1a003af0:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003af2:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a003af4:	2301      	movs	r3, #1
1a003af6:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a003af8:	7930      	ldrb	r0, [r6, #4]
1a003afa:	7973      	ldrb	r3, [r6, #5]
1a003afc:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003afe:	f042 0218 	orr.w	r2, r2, #24
1a003b02:	490f      	ldr	r1, [pc, #60]	; (1a003b40 <uartInit+0x74>)
1a003b04:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a003b0c:	79f0      	ldrb	r0, [r6, #7]
1a003b0e:	7a33      	ldrb	r3, [r6, #8]
1a003b10:	7a72      	ldrb	r2, [r6, #9]
1a003b12:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003b16:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a003b1e:	f1b8 0f01 	cmp.w	r8, #1
1a003b22:	d001      	beq.n	1a003b28 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a003b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a003b28:	4a06      	ldr	r2, [pc, #24]	; (1a003b44 <uartInit+0x78>)
1a003b2a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a003b2c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a003b30:	64d3      	str	r3, [r2, #76]	; 0x4c
1a003b32:	221a      	movs	r2, #26
1a003b34:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a003b38:	e7f4      	b.n	1a003b24 <uartInit+0x58>
1a003b3a:	bf00      	nop
1a003b3c:	1a006210 	.word	0x1a006210
1a003b40:	40086000 	.word	0x40086000
1a003b44:	40081000 	.word	0x40081000

1a003b48 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a003b48:	b538      	push	{r3, r4, r5, lr}
1a003b4a:	4604      	mov	r4, r0
1a003b4c:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a003b4e:	4620      	mov	r0, r4
1a003b50:	f7ff ffa6 	bl	1a003aa0 <uartTxReady>
1a003b54:	2800      	cmp	r0, #0
1a003b56:	d0fa      	beq.n	1a003b4e <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a003b58:	4629      	mov	r1, r5
1a003b5a:	4620      	mov	r0, r4
1a003b5c:	f7ff ffac 	bl	1a003ab8 <uartTxWrite>
}
1a003b60:	bd38      	pop	{r3, r4, r5, pc}

1a003b62 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a003b62:	b538      	push	{r3, r4, r5, lr}
1a003b64:	4605      	mov	r5, r0
1a003b66:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a003b68:	e003      	b.n	1a003b72 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a003b6a:	4628      	mov	r0, r5
1a003b6c:	f7ff ffec 	bl	1a003b48 <uartWriteByte>
      str++;
1a003b70:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a003b72:	7821      	ldrb	r1, [r4, #0]
1a003b74:	2900      	cmp	r1, #0
1a003b76:	d1f8      	bne.n	1a003b6a <uartWriteString+0x8>
   }
}
1a003b78:	bd38      	pop	{r3, r4, r5, pc}

1a003b7a <tickRead>:
}
*/

// Read Tick Counter
tick_t tickRead( void )
{
1a003b7a:	b508      	push	{r3, lr}
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
1a003b7c:	f7fe f840 	bl	1a001c00 <xTaskGetTickCount>
   #else
      return tickCounter;
   #endif
}
1a003b80:	2100      	movs	r1, #0
1a003b82:	bd08      	pop	{r3, pc}

1a003b84 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a003b84:	b538      	push	{r3, r4, r5, lr}
1a003b86:	4604      	mov	r4, r0
1a003b88:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a003b8a:	4b08      	ldr	r3, [pc, #32]	; (1a003bac <i2cHardwareInit+0x28>)
1a003b8c:	f640 0208 	movw	r2, #2056	; 0x808
1a003b90:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE ); // Equal for CIAA-NXP and EDU-CIAA-NXP on I2C0

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a003b94:	f7ff fe7a 	bl	1a00388c <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a003b98:	4629      	mov	r1, r5
1a003b9a:	4620      	mov	r0, r4
1a003b9c:	f7ff fe88 	bl	1a0038b0 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a003ba0:	4903      	ldr	r1, [pc, #12]	; (1a003bb0 <i2cHardwareInit+0x2c>)
1a003ba2:	4620      	mov	r0, r4
1a003ba4:	f7ff fea0 	bl	1a0038e8 <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a003ba8:	2001      	movs	r0, #1
1a003baa:	bd38      	pop	{r3, r4, r5, pc}
1a003bac:	40086000 	.word	0x40086000
1a003bb0:	1a003961 	.word	0x1a003961

1a003bb4 <i2cHardwareRead>:
                               uint16_t dataToReadBufferSize,
                               bool_t   sendWriteStop,
                               uint8_t* receiveDataBuffer,
                               uint16_t receiveDataBufferSize,
                               bool_t   sendReadStop )
{
1a003bb4:	b500      	push	{lr}
1a003bb6:	b085      	sub	sp, #20

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   i2cData.slaveAddr = i2cSlaveAddress;
1a003bb8:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a003bbc:	2100      	movs	r1, #0
1a003bbe:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a003bc2:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = dataToReadBuffer;
1a003bc6:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = dataToReadBufferSize;
1a003bc8:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = receiveDataBuffer;
1a003bcc:	9b07      	ldr	r3, [sp, #28]
1a003bce:	9303      	str	r3, [sp, #12]
   i2cData.rxSz      = receiveDataBufferSize;
1a003bd0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
1a003bd4:	f8ad 3006 	strh.w	r3, [sp, #6]

   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a003bd8:	4669      	mov	r1, sp
1a003bda:	4804      	ldr	r0, [pc, #16]	; (1a003bec <i2cHardwareRead+0x38>)
1a003bdc:	f7ff fda3 	bl	1a003726 <Chip_I2CM_XferBlocking>
1a003be0:	b100      	cbz	r0, 1a003be4 <i2cHardwareRead+0x30>
      return FALSE;
   }

   return TRUE;
1a003be2:	2001      	movs	r0, #1
}
1a003be4:	b005      	add	sp, #20
1a003be6:	f85d fb04 	ldr.w	pc, [sp], #4
1a003bea:	bf00      	nop
1a003bec:	400a1000 	.word	0x400a1000

1a003bf0 <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a003bf0:	b108      	cbz	r0, 1a003bf6 <i2cHardwareWrite+0x6>
      return FALSE;
1a003bf2:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a003bf4:	4770      	bx	lr
{
1a003bf6:	b500      	push	{lr}
1a003bf8:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a003bfa:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a003bfe:	2100      	movs	r1, #0
1a003c00:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a003c04:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a003c08:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a003c0a:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a003c0e:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a003c10:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a003c14:	4669      	mov	r1, sp
1a003c16:	4804      	ldr	r0, [pc, #16]	; (1a003c28 <i2cHardwareWrite+0x38>)
1a003c18:	f7ff fd85 	bl	1a003726 <Chip_I2CM_XferBlocking>
1a003c1c:	b100      	cbz	r0, 1a003c20 <i2cHardwareWrite+0x30>
   return TRUE;
1a003c1e:	2001      	movs	r0, #1
}
1a003c20:	b005      	add	sp, #20
1a003c22:	f85d fb04 	ldr.w	pc, [sp], #4
1a003c26:	bf00      	nop
1a003c28:	400a1000 	.word	0x400a1000

1a003c2c <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a003c2c:	b108      	cbz	r0, 1a003c32 <i2cInit+0x6>
      return FALSE;
1a003c2e:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a003c30:	4770      	bx	lr
{
1a003c32:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a003c34:	f7ff ffa6 	bl	1a003b84 <i2cHardwareInit>
}
1a003c38:	bd08      	pop	{r3, pc}

1a003c3a <i2cRead>:
                bool_t   sendReadStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a003c3a:	b108      	cbz	r0, 1a003c40 <i2cRead+0x6>
      return FALSE;
1a003c3c:	2000      	movs	r0, #0
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
}
1a003c3e:	4770      	bx	lr
{
1a003c40:	b510      	push	{r4, lr}
1a003c42:	b084      	sub	sp, #16
   retVal = i2cHardwareRead( i2cNumber,
1a003c44:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
1a003c48:	9403      	str	r4, [sp, #12]
1a003c4a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
1a003c4e:	9402      	str	r4, [sp, #8]
1a003c50:	9c07      	ldr	r4, [sp, #28]
1a003c52:	9401      	str	r4, [sp, #4]
1a003c54:	f89d 4018 	ldrb.w	r4, [sp, #24]
1a003c58:	9400      	str	r4, [sp, #0]
1a003c5a:	f7ff ffab 	bl	1a003bb4 <i2cHardwareRead>
}
1a003c5e:	b004      	add	sp, #16
1a003c60:	bd10      	pop	{r4, pc}

1a003c62 <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a003c62:	b108      	cbz	r0, 1a003c68 <i2cWrite+0x6>
      return FALSE;
1a003c64:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a003c66:	4770      	bx	lr
{
1a003c68:	b510      	push	{r4, lr}
1a003c6a:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a003c6c:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a003c70:	9400      	str	r4, [sp, #0]
1a003c72:	f7ff ffbd 	bl	1a003bf0 <i2cHardwareWrite>
}
1a003c76:	b002      	add	sp, #8
1a003c78:	bd10      	pop	{r4, pc}
1a003c7a:	Address 0x000000001a003c7a is out of bounds.


1a003c7c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a003c7c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a003c7e:	4d0b      	ldr	r5, [pc, #44]	; (1a003cac <gpioObtainPinInit+0x30>)
1a003c80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a003c84:	182c      	adds	r4, r5, r0
1a003c86:	5628      	ldrsb	r0, [r5, r0]
1a003c88:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a003c8a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a003c8e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a003c90:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a003c94:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a003c96:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a003c9a:	9b02      	ldr	r3, [sp, #8]
1a003c9c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a003c9e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a003ca2:	9b03      	ldr	r3, [sp, #12]
1a003ca4:	701a      	strb	r2, [r3, #0]
}
1a003ca6:	bc30      	pop	{r4, r5}
1a003ca8:	4770      	bx	lr
1a003caa:	bf00      	nop
1a003cac:	1a006258 	.word	0x1a006258

1a003cb0 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a003cb0:	f110 0f02 	cmn.w	r0, #2
1a003cb4:	f000 80c7 	beq.w	1a003e46 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a003cb8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003cbc:	f000 80c5 	beq.w	1a003e4a <gpioInit+0x19a>
{
1a003cc0:	b570      	push	{r4, r5, r6, lr}
1a003cc2:	b084      	sub	sp, #16
1a003cc4:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003cc6:	2300      	movs	r3, #0
1a003cc8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003ccc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003cd0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003cd4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003cd8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003cdc:	f10d 030b 	add.w	r3, sp, #11
1a003ce0:	9301      	str	r3, [sp, #4]
1a003ce2:	ab03      	add	r3, sp, #12
1a003ce4:	9300      	str	r3, [sp, #0]
1a003ce6:	f10d 030d 	add.w	r3, sp, #13
1a003cea:	f10d 020e 	add.w	r2, sp, #14
1a003cee:	f10d 010f 	add.w	r1, sp, #15
1a003cf2:	f7ff ffc3 	bl	1a003c7c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a003cf6:	2c05      	cmp	r4, #5
1a003cf8:	f200 80a9 	bhi.w	1a003e4e <gpioInit+0x19e>
1a003cfc:	e8df f004 	tbb	[pc, r4]
1a003d00:	45278109 	.word	0x45278109
1a003d04:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a003d06:	4853      	ldr	r0, [pc, #332]	; (1a003e54 <gpioInit+0x1a4>)
1a003d08:	f7ff fd1f 	bl	1a00374a <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a003d0c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a003d0e:	b004      	add	sp, #16
1a003d10:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a003d12:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003d16:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003d1a:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003d1e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003d22:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003d26:	494c      	ldr	r1, [pc, #304]	; (1a003e58 <gpioInit+0x1a8>)
1a003d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003d2c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003d30:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003d34:	2001      	movs	r0, #1
1a003d36:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a003d3a:	4c46      	ldr	r4, [pc, #280]	; (1a003e54 <gpioInit+0x1a4>)
1a003d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003d40:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003d44:	ea22 0201 	bic.w	r2, r2, r1
1a003d48:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003d4c:	e7df      	b.n	1a003d0e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003d4e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003d52:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003d56:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003d5a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a003d5e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003d62:	493d      	ldr	r1, [pc, #244]	; (1a003e58 <gpioInit+0x1a8>)
1a003d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003d68:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003d6c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003d70:	2001      	movs	r0, #1
1a003d72:	fa00 f102 	lsl.w	r1, r0, r2
1a003d76:	4c37      	ldr	r4, [pc, #220]	; (1a003e54 <gpioInit+0x1a4>)
1a003d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003d7c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003d80:	ea22 0201 	bic.w	r2, r2, r1
1a003d84:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003d88:	e7c1      	b.n	1a003d0e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003d8a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003d8e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003d92:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003d96:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a003d9a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003d9e:	492e      	ldr	r1, [pc, #184]	; (1a003e58 <gpioInit+0x1a8>)
1a003da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003da4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003da8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003dac:	2001      	movs	r0, #1
1a003dae:	fa00 f102 	lsl.w	r1, r0, r2
1a003db2:	4c28      	ldr	r4, [pc, #160]	; (1a003e54 <gpioInit+0x1a4>)
1a003db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003db8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003dbc:	ea22 0201 	bic.w	r2, r2, r1
1a003dc0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003dc4:	e7a3      	b.n	1a003d0e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003dc6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003dca:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003dce:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003dd2:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a003dd6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003dda:	491f      	ldr	r1, [pc, #124]	; (1a003e58 <gpioInit+0x1a8>)
1a003ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003de0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003de4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003de8:	2001      	movs	r0, #1
1a003dea:	fa00 f102 	lsl.w	r1, r0, r2
1a003dee:	4c19      	ldr	r4, [pc, #100]	; (1a003e54 <gpioInit+0x1a4>)
1a003df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003df4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003df8:	ea22 0201 	bic.w	r2, r2, r1
1a003dfc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003e00:	e785      	b.n	1a003d0e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003e02:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003e06:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003e0a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003e0e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003e12:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003e16:	4910      	ldr	r1, [pc, #64]	; (1a003e58 <gpioInit+0x1a8>)
1a003e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003e1c:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a003e20:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003e24:	2001      	movs	r0, #1
1a003e26:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a003e2a:	4b0a      	ldr	r3, [pc, #40]	; (1a003e54 <gpioInit+0x1a4>)
1a003e2c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a003e30:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a003e34:	4331      	orrs	r1, r6
1a003e36:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a003e3a:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a003e3c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a003e40:	2100      	movs	r1, #0
1a003e42:	5499      	strb	r1, [r3, r2]
1a003e44:	e763      	b.n	1a003d0e <gpioInit+0x5e>
	  return FALSE;
1a003e46:	2000      	movs	r0, #0
1a003e48:	4770      	bx	lr
	  return FALSE;
1a003e4a:	2000      	movs	r0, #0
}
1a003e4c:	4770      	bx	lr
      ret_val = 0;
1a003e4e:	2000      	movs	r0, #0
1a003e50:	e75d      	b.n	1a003d0e <gpioInit+0x5e>
1a003e52:	bf00      	nop
1a003e54:	400f4000 	.word	0x400f4000
1a003e58:	40086000 	.word	0x40086000

1a003e5c <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a003e5c:	f110 0f02 	cmn.w	r0, #2
1a003e60:	d02d      	beq.n	1a003ebe <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a003e62:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003e66:	d02c      	beq.n	1a003ec2 <gpioWrite+0x66>
{
1a003e68:	b510      	push	{r4, lr}
1a003e6a:	b084      	sub	sp, #16
1a003e6c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003e6e:	2300      	movs	r3, #0
1a003e70:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003e74:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003e78:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003e7c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003e80:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003e84:	f10d 030b 	add.w	r3, sp, #11
1a003e88:	9301      	str	r3, [sp, #4]
1a003e8a:	ab03      	add	r3, sp, #12
1a003e8c:	9300      	str	r3, [sp, #0]
1a003e8e:	f10d 030d 	add.w	r3, sp, #13
1a003e92:	f10d 020e 	add.w	r2, sp, #14
1a003e96:	f10d 010f 	add.w	r1, sp, #15
1a003e9a:	f7ff feef 	bl	1a003c7c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a003e9e:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003ea2:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a003ea6:	1c21      	adds	r1, r4, #0
1a003ea8:	bf18      	it	ne
1a003eaa:	2101      	movne	r1, #1
1a003eac:	015b      	lsls	r3, r3, #5
1a003eae:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003eb2:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003eb6:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a003eb8:	2001      	movs	r0, #1
}
1a003eba:	b004      	add	sp, #16
1a003ebc:	bd10      	pop	{r4, pc}
	  return FALSE;
1a003ebe:	2000      	movs	r0, #0
1a003ec0:	4770      	bx	lr
	  return FALSE;
1a003ec2:	2000      	movs	r0, #0
}
1a003ec4:	4770      	bx	lr
1a003ec6:	Address 0x000000001a003ec6 is out of bounds.


1a003ec8 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003ec8:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003eca:	4b04      	ldr	r3, [pc, #16]	; (1a003edc <USB0_IRQHandler+0x14>)
1a003ecc:	681b      	ldr	r3, [r3, #0]
1a003ece:	681b      	ldr	r3, [r3, #0]
1a003ed0:	68db      	ldr	r3, [r3, #12]
1a003ed2:	4a03      	ldr	r2, [pc, #12]	; (1a003ee0 <USB0_IRQHandler+0x18>)
1a003ed4:	6810      	ldr	r0, [r2, #0]
1a003ed6:	4798      	blx	r3
}
1a003ed8:	bd08      	pop	{r3, pc}
1a003eda:	bf00      	nop
1a003edc:	10002b8c 	.word	0x10002b8c
1a003ee0:	10002b2c 	.word	0x10002b2c

1a003ee4 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a003ee4:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a003ee6:	f7ff fae5 	bl	1a0034b4 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a003eea:	4b18      	ldr	r3, [pc, #96]	; (1a003f4c <boardInit+0x68>)
1a003eec:	6818      	ldr	r0, [r3, #0]
1a003eee:	f7ff fdc9 	bl	1a003a84 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a003ef2:	2105      	movs	r1, #5
1a003ef4:	2000      	movs	r0, #0
1a003ef6:	f7ff fedb 	bl	1a003cb0 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a003efa:	2100      	movs	r1, #0
1a003efc:	2024      	movs	r0, #36	; 0x24
1a003efe:	f7ff fed7 	bl	1a003cb0 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a003f02:	2100      	movs	r1, #0
1a003f04:	2025      	movs	r0, #37	; 0x25
1a003f06:	f7ff fed3 	bl	1a003cb0 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a003f0a:	2100      	movs	r1, #0
1a003f0c:	2026      	movs	r0, #38	; 0x26
1a003f0e:	f7ff fecf 	bl	1a003cb0 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a003f12:	2100      	movs	r1, #0
1a003f14:	2027      	movs	r0, #39	; 0x27
1a003f16:	f7ff fecb 	bl	1a003cb0 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a003f1a:	2101      	movs	r1, #1
1a003f1c:	2028      	movs	r0, #40	; 0x28
1a003f1e:	f7ff fec7 	bl	1a003cb0 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a003f22:	2101      	movs	r1, #1
1a003f24:	2029      	movs	r0, #41	; 0x29
1a003f26:	f7ff fec3 	bl	1a003cb0 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a003f2a:	2101      	movs	r1, #1
1a003f2c:	202a      	movs	r0, #42	; 0x2a
1a003f2e:	f7ff febf 	bl	1a003cb0 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a003f32:	2101      	movs	r1, #1
1a003f34:	202b      	movs	r0, #43	; 0x2b
1a003f36:	f7ff febb 	bl	1a003cb0 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a003f3a:	2101      	movs	r1, #1
1a003f3c:	202c      	movs	r0, #44	; 0x2c
1a003f3e:	f7ff feb7 	bl	1a003cb0 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a003f42:	2101      	movs	r1, #1
1a003f44:	202d      	movs	r0, #45	; 0x2d
1a003f46:	f7ff feb3 	bl	1a003cb0 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a003f4a:	bd08      	pop	{r3, pc}
1a003f4c:	10002b88 	.word	0x10002b88

1a003f50 <delayInaccurateMs>:
/*==================[external functions definition]==========================*/

/* ---- Inaccurate Blocking Delay ---- */

void delayInaccurateMs(tick_t delay_ms)
{
1a003f50:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
1a003f54:	b085      	sub	sp, #20
   volatile tick_t i;
   volatile tick_t delay;
   delay = INACCURATE_TO_MS * delay_ms;
1a003f56:	008c      	lsls	r4, r1, #2
1a003f58:	0082      	lsls	r2, r0, #2
1a003f5a:	ea44 7390 	orr.w	r3, r4, r0, lsr #30
1a003f5e:	eb12 0b00 	adds.w	fp, r2, r0
1a003f62:	eb43 0c01 	adc.w	ip, r3, r1
1a003f66:	ea4f 210c 	mov.w	r1, ip, lsl #8
1a003f6a:	ea41 611b 	orr.w	r1, r1, fp, lsr #24
1a003f6e:	ea4f 200b 	mov.w	r0, fp, lsl #8
1a003f72:	ebb0 000b 	subs.w	r0, r0, fp
1a003f76:	eb61 010c 	sbc.w	r1, r1, ip
1a003f7a:	010b      	lsls	r3, r1, #4
1a003f7c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
1a003f80:	0102      	lsls	r2, r0, #4
1a003f82:	4614      	mov	r4, r2
1a003f84:	461d      	mov	r5, r3
1a003f86:	e9cd 4500 	strd	r4, r5, [sp]
   for( i=delay; i>0; i-- );
1a003f8a:	e9dd 2300 	ldrd	r2, r3, [sp]
1a003f8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a003f92:	e007      	b.n	1a003fa4 <delayInaccurateMs+0x54>
1a003f94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a003f98:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a003f9c:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a003fa0:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a003fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003fa8:	4313      	orrs	r3, r2
1a003faa:	d1f3      	bne.n	1a003f94 <delayInaccurateMs+0x44>
}
1a003fac:	b005      	add	sp, #20
1a003fae:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
1a003fb2:	4770      	bx	lr

1a003fb4 <delayInaccurateUs>:

void delayInaccurateUs( tick_t delay_us )
{
1a003fb4:	e92d 4800 	stmdb	sp!, {fp, lr}
1a003fb8:	b084      	sub	sp, #16
   volatile tick_t i;
   volatile tick_t delay;
   delay = (INACCURATE_TO_US_x10 * delay_us) / 10;
1a003fba:	1802      	adds	r2, r0, r0
1a003fbc:	eb41 0301 	adc.w	r3, r1, r1
1a003fc0:	eb10 0b02 	adds.w	fp, r0, r2
1a003fc4:	eb41 0c03 	adc.w	ip, r1, r3
1a003fc8:	ea4f 130c 	mov.w	r3, ip, lsl #4
1a003fcc:	ea43 731b 	orr.w	r3, r3, fp, lsr #28
1a003fd0:	ea4f 120b 	mov.w	r2, fp, lsl #4
1a003fd4:	eb1b 0002 	adds.w	r0, fp, r2
1a003fd8:	eb4c 0103 	adc.w	r1, ip, r3
1a003fdc:	008b      	lsls	r3, r1, #2
1a003fde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
1a003fe2:	0082      	lsls	r2, r0, #2
1a003fe4:	4610      	mov	r0, r2
1a003fe6:	4619      	mov	r1, r3
1a003fe8:	220a      	movs	r2, #10
1a003fea:	2300      	movs	r3, #0
1a003fec:	f000 fe1e 	bl	1a004c2c <__aeabi_uldivmod>
1a003ff0:	e9cd 0100 	strd	r0, r1, [sp]
   for( i=delay; i>0; i-- );
1a003ff4:	e9dd 2300 	ldrd	r2, r3, [sp]
1a003ff8:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a003ffc:	e007      	b.n	1a00400e <delayInaccurateUs+0x5a>
1a003ffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a004002:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a004006:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a00400a:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a00400e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004012:	4313      	orrs	r3, r2
1a004014:	d1f3      	bne.n	1a003ffe <delayInaccurateUs+0x4a>
}
1a004016:	b004      	add	sp, #16
1a004018:	e8bd 8800 	ldmia.w	sp!, {fp, pc}

1a00401c <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a00401c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004020:	4680      	mov	r8, r0
1a004022:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a004024:	f7ff fda9 	bl	1a003b7a <tickRead>
1a004028:	4606      	mov	r6, r0
1a00402a:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a00402c:	f7ff fda5 	bl	1a003b7a <tickRead>
1a004030:	1b84      	subs	r4, r0, r6
1a004032:	eb61 0507 	sbc.w	r5, r1, r7
1a004036:	4b06      	ldr	r3, [pc, #24]	; (1a004050 <delay+0x34>)
1a004038:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00403c:	4640      	mov	r0, r8
1a00403e:	4649      	mov	r1, r9
1a004040:	f000 fdf4 	bl	1a004c2c <__aeabi_uldivmod>
1a004044:	428d      	cmp	r5, r1
1a004046:	bf08      	it	eq
1a004048:	4284      	cmpeq	r4, r0
1a00404a:	d3ef      	bcc.n	1a00402c <delay+0x10>
}
1a00404c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a004050:	10000048 	.word	0x10000048

1a004054 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a004054:	b508      	push	{r3, lr}
1a004056:	460b      	mov	r3, r1
   *printer = uart;
1a004058:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a00405a:	4611      	mov	r1, r2
1a00405c:	4618      	mov	r0, r3
1a00405e:	f7ff fd35 	bl	1a003acc <uartInit>
}
1a004062:	bd08      	pop	{r3, pc}

1a004064 <printString>:
}

// Print String

void printString( print_t printer, const char* string )
{
1a004064:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a004066:	f7ff fd7c 	bl	1a003b62 <uartWriteString>
}
1a00406a:	bd08      	pop	{r3, pc}

1a00406c <printEnter>:

void printEnter( print_t printer )
{
1a00406c:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a00406e:	4902      	ldr	r1, [pc, #8]	; (1a004078 <printEnter+0xc>)
1a004070:	f7ff fd77 	bl	1a003b62 <uartWriteString>
}
1a004074:	bd08      	pop	{r3, pc}
1a004076:	bf00      	nop
1a004078:	1a00607c 	.word	0x1a00607c

1a00407c <floatToString>:
};

// Ftoa implementation from:
// https://github.com/antongus/stm32tpl/blob/master/ftoa.c
char* floatToString( float value, char* result, int32_t precision )
{
1a00407c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a004080:	b083      	sub	sp, #12
1a004082:	4605      	mov	r5, r0
1a004084:	460c      	mov	r4, r1
   char * p1;
   char c;
   long intPart;

   // check precision bounds
   if (precision > MAX_PRECISION)
1a004086:	290a      	cmp	r1, #10
1a004088:	dd00      	ble.n	1a00408c <floatToString+0x10>
      precision = MAX_PRECISION;
1a00408a:	240a      	movs	r4, #10

   // sign stuff
   if (value < 0) {
1a00408c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
1a004090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a004094:	d427      	bmi.n	1a0040e6 <floatToString+0x6a>
   char * ptr = result;
1a004096:	462e      	mov	r6, r5
      value = -value;
      *ptr++ = '-';
   }

   if (precision < 0) { // negative precision == automatic precision guess
1a004098:	2c00      	cmp	r4, #0
1a00409a:	db2a      	blt.n	1a0040f2 <floatToString+0x76>
      else if (value < 100000.0) precision = 1;
      else precision = 0;
   }

   // round value according the precision
   if (precision)
1a00409c:	b184      	cbz	r4, 1a0040c0 <floatToString+0x44>
      value += rounders[precision];
1a00409e:	4b50      	ldr	r3, [pc, #320]	; (1a0041e0 <floatToString+0x164>)
1a0040a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
1a0040a4:	e9d3 8900 	ldrd	r8, r9, [r3]
1a0040a8:	ee10 0a10 	vmov	r0, s0
1a0040ac:	f000 fb04 	bl	1a0046b8 <__aeabi_f2d>
1a0040b0:	4642      	mov	r2, r8
1a0040b2:	464b      	mov	r3, r9
1a0040b4:	f000 f9a2 	bl	1a0043fc <__adddf3>
1a0040b8:	f000 fd68 	bl	1a004b8c <__aeabi_d2f>
1a0040bc:	ee00 0a10 	vmov	s0, r0

   // integer part...
   intPart = value;
1a0040c0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
1a0040c4:	ee17 1a90 	vmov	r1, s15
   value -= intPart;
1a0040c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a0040cc:	ee30 0a67 	vsub.f32	s0, s0, s15

   if (!intPart)
1a0040d0:	2900      	cmp	r1, #0
1a0040d2:	d159      	bne.n	1a004188 <floatToString+0x10c>
      *ptr++ = '0';
1a0040d4:	1c72      	adds	r2, r6, #1
1a0040d6:	2330      	movs	r3, #48	; 0x30
1a0040d8:	7033      	strb	r3, [r6, #0]
      // restore end pos
      ptr = p1;
   }

   // decimal part
   if (precision) {
1a0040da:	2c00      	cmp	r4, #0
1a0040dc:	d079      	beq.n	1a0041d2 <floatToString+0x156>
      // place decimal point
      *ptr++ = '.';
1a0040de:	232e      	movs	r3, #46	; 0x2e
1a0040e0:	7013      	strb	r3, [r2, #0]
1a0040e2:	3201      	adds	r2, #1

      // convert
      while (precision--) {
1a0040e4:	e072      	b.n	1a0041cc <floatToString+0x150>
      value = -value;
1a0040e6:	eeb1 0a40 	vneg.f32	s0, s0
      *ptr++ = '-';
1a0040ea:	1c6e      	adds	r6, r5, #1
1a0040ec:	232d      	movs	r3, #45	; 0x2d
1a0040ee:	702b      	strb	r3, [r5, #0]
1a0040f0:	e7d2      	b.n	1a004098 <floatToString+0x1c>
      if (value < 1.0) precision = 6;
1a0040f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
1a0040f6:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a0040fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0040fe:	d424      	bmi.n	1a00414a <floatToString+0xce>
      else if (value < 10.0) precision = 5;
1a004100:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
1a004104:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a004108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a00410c:	d41f      	bmi.n	1a00414e <floatToString+0xd2>
      else if (value < 100.0) precision = 4;
1a00410e:	eddf 7a35 	vldr	s15, [pc, #212]	; 1a0041e4 <floatToString+0x168>
1a004112:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a004116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a00411a:	d41a      	bmi.n	1a004152 <floatToString+0xd6>
      else if (value < 1000.0) precision = 3;
1a00411c:	eddf 7a32 	vldr	s15, [pc, #200]	; 1a0041e8 <floatToString+0x16c>
1a004120:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a004124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a004128:	d415      	bmi.n	1a004156 <floatToString+0xda>
      else if (value < 10000.0) precision = 2;
1a00412a:	eddf 7a30 	vldr	s15, [pc, #192]	; 1a0041ec <floatToString+0x170>
1a00412e:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a004132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a004136:	d410      	bmi.n	1a00415a <floatToString+0xde>
      else if (value < 100000.0) precision = 1;
1a004138:	eddf 7a2d 	vldr	s15, [pc, #180]	; 1a0041f0 <floatToString+0x174>
1a00413c:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a004140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a004144:	d40b      	bmi.n	1a00415e <floatToString+0xe2>
      else precision = 0;
1a004146:	2400      	movs	r4, #0
1a004148:	e7ba      	b.n	1a0040c0 <floatToString+0x44>
      if (value < 1.0) precision = 6;
1a00414a:	2406      	movs	r4, #6
1a00414c:	e7a7      	b.n	1a00409e <floatToString+0x22>
      else if (value < 10.0) precision = 5;
1a00414e:	2405      	movs	r4, #5
1a004150:	e7a5      	b.n	1a00409e <floatToString+0x22>
      else if (value < 100.0) precision = 4;
1a004152:	2404      	movs	r4, #4
1a004154:	e7a3      	b.n	1a00409e <floatToString+0x22>
      else if (value < 1000.0) precision = 3;
1a004156:	2403      	movs	r4, #3
1a004158:	e7a1      	b.n	1a00409e <floatToString+0x22>
      else if (value < 10000.0) precision = 2;
1a00415a:	2402      	movs	r4, #2
1a00415c:	e79f      	b.n	1a00409e <floatToString+0x22>
      else if (value < 100000.0) precision = 1;
1a00415e:	2401      	movs	r4, #1
1a004160:	e79d      	b.n	1a00409e <floatToString+0x22>
         *p++ = '0' + intPart % 10;
1a004162:	4824      	ldr	r0, [pc, #144]	; (1a0041f4 <floatToString+0x178>)
1a004164:	fb80 3001 	smull	r3, r0, r0, r1
1a004168:	17cb      	asrs	r3, r1, #31
1a00416a:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
1a00416e:	461f      	mov	r7, r3
1a004170:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a004174:	0058      	lsls	r0, r3, #1
1a004176:	1a0b      	subs	r3, r1, r0
1a004178:	3330      	adds	r3, #48	; 0x30
1a00417a:	7013      	strb	r3, [r2, #0]
         intPart /= 10;
1a00417c:	4639      	mov	r1, r7
         *p++ = '0' + intPart % 10;
1a00417e:	3201      	adds	r2, #1
      while (intPart) {
1a004180:	2900      	cmp	r1, #0
1a004182:	d1ee      	bne.n	1a004162 <floatToString+0xe6>
1a004184:	4613      	mov	r3, r2
1a004186:	e009      	b.n	1a00419c <floatToString+0x120>
      p = ptr;
1a004188:	4632      	mov	r2, r6
1a00418a:	e7f9      	b.n	1a004180 <floatToString+0x104>
         c = *--p;
1a00418c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
         *p = *ptr;
1a004190:	4631      	mov	r1, r6
1a004192:	f811 7b01 	ldrb.w	r7, [r1], #1
1a004196:	701f      	strb	r7, [r3, #0]
         *ptr++ = c;
1a004198:	7030      	strb	r0, [r6, #0]
1a00419a:	460e      	mov	r6, r1
      while (p > ptr) {
1a00419c:	429e      	cmp	r6, r3
1a00419e:	d3f5      	bcc.n	1a00418c <floatToString+0x110>
1a0041a0:	e79b      	b.n	1a0040da <floatToString+0x5e>
         value *= 10.0;
1a0041a2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
1a0041a6:	ee20 0a27 	vmul.f32	s0, s0, s15
         c = value;
1a0041aa:	eefc 7ac0 	vcvt.u32.f32	s15, s0
1a0041ae:	edcd 7a01 	vstr	s15, [sp, #4]
1a0041b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
         *ptr++ = '0' + c;
1a0041b6:	f103 0030 	add.w	r0, r3, #48	; 0x30
1a0041ba:	7010      	strb	r0, [r2, #0]
         value -= c;
1a0041bc:	ee07 3a90 	vmov	s15, r3
1a0041c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a0041c4:	ee30 0a67 	vsub.f32	s0, s0, s15
         *ptr++ = '0' + c;
1a0041c8:	3201      	adds	r2, #1
      while (precision--) {
1a0041ca:	460c      	mov	r4, r1
1a0041cc:	1e61      	subs	r1, r4, #1
1a0041ce:	2c00      	cmp	r4, #0
1a0041d0:	d1e7      	bne.n	1a0041a2 <floatToString+0x126>
      }
   }

   // terminating zero
   *ptr = 0;
1a0041d2:	2300      	movs	r3, #0
1a0041d4:	7013      	strb	r3, [r2, #0]

   return result;
}
1a0041d6:	4628      	mov	r0, r5
1a0041d8:	b003      	add	sp, #12
1a0041da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0041de:	bf00      	nop
1a0041e0:	1a006340 	.word	0x1a006340
1a0041e4:	42c80000 	.word	0x42c80000
1a0041e8:	447a0000 	.word	0x447a0000
1a0041ec:	461c4000 	.word	0x461c4000
1a0041f0:	47c35000 	.word	0x47c35000
1a0041f4:	66666667 	.word	0x66666667

1a0041f8 <lcdPinSet>:
}



static void lcdPinSet( uint8_t pin, bool_t status )
{
1a0041f8:	b508      	push	{r3, lr}
#ifdef LCD_HD44780_I2C_PCF8574T
   pcf8574TGpioWrite( pin, status );
#else
   gpioWrite( pin, status );
1a0041fa:	b240      	sxtb	r0, r0
1a0041fc:	f7ff fe2e 	bl	1a003e5c <gpioWrite>
#endif
}
1a004200:	bd08      	pop	{r3, pc}

1a004202 <lcdSendNibble>:
   lcdPinSet( LCD_HD44780_EN, OFF );      // EN = 0 for H-to-L pulse
   //lcdDelay_us(50); // commands need > 37us to settle
}

static void lcdSendNibble( uint8_t nibble )
{
1a004202:	b510      	push	{r4, lr}
1a004204:	4604      	mov	r4, r0
   lcdPinSet( LCD_HD44780_D7, ( nibble & 0x80 ) );
1a004206:	f000 0180 	and.w	r1, r0, #128	; 0x80
1a00420a:	2014      	movs	r0, #20
1a00420c:	f7ff fff4 	bl	1a0041f8 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D6, ( nibble & 0x40 ) );
1a004210:	f004 0140 	and.w	r1, r4, #64	; 0x40
1a004214:	2012      	movs	r0, #18
1a004216:	f7ff ffef 	bl	1a0041f8 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D5, ( nibble & 0x20 ) );
1a00421a:	f004 0120 	and.w	r1, r4, #32
1a00421e:	2011      	movs	r0, #17
1a004220:	f7ff ffea 	bl	1a0041f8 <lcdPinSet>
   lcdPinSet( LCD_HD44780_D4, ( nibble & 0x10 ) );
1a004224:	f004 0110 	and.w	r1, r4, #16
1a004228:	2010      	movs	r0, #16
1a00422a:	f7ff ffe5 	bl	1a0041f8 <lcdPinSet>
}
1a00422e:	bd10      	pop	{r4, pc}

1a004230 <lcdEnablePulse>:
{
1a004230:	b508      	push	{r3, lr}
   lcdPinSet( LCD_HD44780_EN, ON );       // EN = 1 for H-to-L pulse
1a004232:	2101      	movs	r1, #1
1a004234:	2021      	movs	r0, #33	; 0x21
1a004236:	f7ff ffdf 	bl	1a0041f8 <lcdPinSet>
   lcdDelay_us( LCD_EN_PULSE_WAIT_US );   // Wait to make EN wider //lcdDelay_us(1);
1a00423a:	2019      	movs	r0, #25
1a00423c:	2100      	movs	r1, #0
1a00423e:	f7ff feb9 	bl	1a003fb4 <delayInaccurateUs>
   lcdPinSet( LCD_HD44780_EN, OFF );      // EN = 0 for H-to-L pulse
1a004242:	2100      	movs	r1, #0
1a004244:	2021      	movs	r0, #33	; 0x21
1a004246:	f7ff ffd7 	bl	1a0041f8 <lcdPinSet>
}
1a00424a:	bd08      	pop	{r3, pc}

1a00424c <lcdCommand>:

/*==================[definiciones de funciones externas]=====================*/

void lcdCommand( uint8_t cmd )
{
1a00424c:	b510      	push	{r4, lr}
1a00424e:	4604      	mov	r4, r0
   lcdSendNibble( cmd & 0xF0 );          // Send high nibble to D7-D4
1a004250:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a004254:	f7ff ffd5 	bl	1a004202 <lcdSendNibble>

   lcdPinSet( LCD_HD44780_RS, OFF );   // RS = 0 for command
1a004258:	2100      	movs	r1, #0
1a00425a:	2013      	movs	r0, #19
1a00425c:	f7ff ffcc 	bl	1a0041f8 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a004260:	2100      	movs	r1, #0
1a004262:	20ff      	movs	r0, #255	; 0xff
1a004264:	f7ff ffc8 	bl	1a0041f8 <lcdPinSet>

   lcdEnablePulse();
1a004268:	f7ff ffe2 	bl	1a004230 <lcdEnablePulse>
   lcdDelay_us( LCD_LOW_WAIT_US );       // Wait
1a00426c:	2019      	movs	r0, #25
1a00426e:	2100      	movs	r1, #0
1a004270:	f7ff fea0 	bl	1a003fb4 <delayInaccurateUs>

   lcdSendNibble( cmd << 4 );            // Send low nibble to D7-D4
1a004274:	0120      	lsls	r0, r4, #4
1a004276:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a00427a:	f7ff ffc2 	bl	1a004202 <lcdSendNibble>
   lcdEnablePulse();
1a00427e:	f7ff ffd7 	bl	1a004230 <lcdEnablePulse>
}
1a004282:	bd10      	pop	{r4, pc}

1a004284 <lcdData>:

void lcdData( uint8_t data )
{
1a004284:	b510      	push	{r4, lr}
1a004286:	4604      	mov	r4, r0
   lcdSendNibble( data & 0xF0 );         // Send high nibble to D7-D4
1a004288:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a00428c:	f7ff ffb9 	bl	1a004202 <lcdSendNibble>

   lcdPinSet( LCD_HD44780_RS, ON );    // RS = 1 for data
1a004290:	2101      	movs	r1, #1
1a004292:	2013      	movs	r0, #19
1a004294:	f7ff ffb0 	bl	1a0041f8 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a004298:	2100      	movs	r1, #0
1a00429a:	20ff      	movs	r0, #255	; 0xff
1a00429c:	f7ff ffac 	bl	1a0041f8 <lcdPinSet>

   lcdEnablePulse();
1a0042a0:	f7ff ffc6 	bl	1a004230 <lcdEnablePulse>

   lcdSendNibble( data << 4 );           // Send low nibble to D7-D4
1a0042a4:	0120      	lsls	r0, r4, #4
1a0042a6:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a0042aa:	f7ff ffaa 	bl	1a004202 <lcdSendNibble>
   lcdEnablePulse();
1a0042ae:	f7ff ffbf 	bl	1a004230 <lcdEnablePulse>
}
1a0042b2:	bd10      	pop	{r4, pc}

1a0042b4 <lcdGoToXY>:

   lcdGoToXY( 0, 0 );
}

void lcdGoToXY( uint8_t x, uint8_t y )
{
1a0042b4:	b530      	push	{r4, r5, lr}
1a0042b6:	b083      	sub	sp, #12
1a0042b8:	4605      	mov	r5, r0
1a0042ba:	460c      	mov	r4, r1
   uint8_t firstCharAdress[] = { 0x80, 0xC0, 0x94, 0xD4 };   // See table 12-5
1a0042bc:	4b09      	ldr	r3, [pc, #36]	; (1a0042e4 <lcdGoToXY+0x30>)
1a0042be:	681b      	ldr	r3, [r3, #0]
1a0042c0:	9301      	str	r3, [sp, #4]
   //lcdCommand( firstCharAdress[ y - 1 ] + x - 1 ); // Start in {x,y} = {1,1}
   lcdCommand( firstCharAdress[y] + x );             // Start in {x,y} = {0,0}
1a0042c2:	ab02      	add	r3, sp, #8
1a0042c4:	440b      	add	r3, r1
1a0042c6:	f813 0c04 	ldrb.w	r0, [r3, #-4]
1a0042ca:	4428      	add	r0, r5
1a0042cc:	b2c0      	uxtb	r0, r0
1a0042ce:	f7ff ffbd 	bl	1a00424c <lcdCommand>
   lcdDelay_us( LCD_HIGH_WAIT_US );      // Wait
1a0042d2:	2064      	movs	r0, #100	; 0x64
1a0042d4:	2100      	movs	r1, #0
1a0042d6:	f7ff fe6d 	bl	1a003fb4 <delayInaccurateUs>
   lcd.x = x;
1a0042da:	4b03      	ldr	r3, [pc, #12]	; (1a0042e8 <lcdGoToXY+0x34>)
1a0042dc:	721d      	strb	r5, [r3, #8]
   lcd.y = y;
1a0042de:	725c      	strb	r4, [r3, #9]
}
1a0042e0:	b003      	add	sp, #12
1a0042e2:	bd30      	pop	{r4, r5, pc}
1a0042e4:	1a006398 	.word	0x1a006398
1a0042e8:	10002b30 	.word	0x10002b30

1a0042ec <lcdClear>:

void lcdClear( void )
{
1a0042ec:	b508      	push	{r3, lr}
   lcdCommand( 0x01 );                   // Command 0x01 for clear LCD
1a0042ee:	2001      	movs	r0, #1
1a0042f0:	f7ff ffac 	bl	1a00424c <lcdCommand>
   lcdDelay_ms(LCD_CLR_DISP_WAIT_MS);    // Wait
1a0042f4:	2003      	movs	r0, #3
1a0042f6:	2100      	movs	r1, #0
1a0042f8:	f7ff fe2a 	bl	1a003f50 <delayInaccurateMs>
}
1a0042fc:	bd08      	pop	{r3, pc}
1a0042fe:	Address 0x000000001a0042fe is out of bounds.


1a004300 <lcdInit>:
{
1a004300:	b538      	push	{r3, r4, r5, lr}
   lcd.lineWidth = lineWidth;
1a004302:	4d2f      	ldr	r5, [pc, #188]	; (1a0043c0 <lcdInit+0xc0>)
1a004304:	8028      	strh	r0, [r5, #0]
   lcd.amountOfLines = amountOfLines;
1a004306:	8069      	strh	r1, [r5, #2]
   lcd.charWidth = charWidth;
1a004308:	80aa      	strh	r2, [r5, #4]
   lcd.charHeight = charHeight;
1a00430a:	80eb      	strh	r3, [r5, #6]
   lcd.x = 0;
1a00430c:	2400      	movs	r4, #0
1a00430e:	722c      	strb	r4, [r5, #8]
   lcd.y = 0;
1a004310:	726c      	strb	r4, [r5, #9]
   lcdInitPinAsOutput( LCD_HD44780_RS );
1a004312:	2101      	movs	r1, #1
1a004314:	2013      	movs	r0, #19
1a004316:	f7ff fccb 	bl	1a003cb0 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_RW );
1a00431a:	2101      	movs	r1, #1
1a00431c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004320:	f7ff fcc6 	bl	1a003cb0 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_EN );
1a004324:	2101      	movs	r1, #1
1a004326:	2021      	movs	r0, #33	; 0x21
1a004328:	f7ff fcc2 	bl	1a003cb0 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_D4 );
1a00432c:	2101      	movs	r1, #1
1a00432e:	2010      	movs	r0, #16
1a004330:	f7ff fcbe 	bl	1a003cb0 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_D5 );
1a004334:	2101      	movs	r1, #1
1a004336:	2011      	movs	r0, #17
1a004338:	f7ff fcba 	bl	1a003cb0 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_D6 );
1a00433c:	2101      	movs	r1, #1
1a00433e:	2012      	movs	r0, #18
1a004340:	f7ff fcb6 	bl	1a003cb0 <gpioInit>
   lcdInitPinAsOutput( LCD_HD44780_D7 );
1a004344:	2101      	movs	r1, #1
1a004346:	2014      	movs	r0, #20
1a004348:	f7ff fcb2 	bl	1a003cb0 <gpioInit>
   lcdPinSet( LCD_HD44780_RW, OFF );     // RW = 0
1a00434c:	4621      	mov	r1, r4
1a00434e:	20ff      	movs	r0, #255	; 0xff
1a004350:	f7ff ff52 	bl	1a0041f8 <lcdPinSet>
   lcdPinSet( LCD_HD44780_RS, OFF );     // RS = 0
1a004354:	4621      	mov	r1, r4
1a004356:	2013      	movs	r0, #19
1a004358:	f7ff ff4e 	bl	1a0041f8 <lcdPinSet>
   lcdPinSet( LCD_HD44780_EN, OFF );     // EN = 0
1a00435c:	4621      	mov	r1, r4
1a00435e:	2021      	movs	r0, #33	; 0x21
1a004360:	f7ff ff4a 	bl	1a0041f8 <lcdPinSet>
   lcdCommand( 0x33 );                   // Command 0x33 for 4-bit mode
1a004364:	2033      	movs	r0, #51	; 0x33
1a004366:	f7ff ff71 	bl	1a00424c <lcdCommand>
   lcdCommandDelay();                    // Wait
1a00436a:	202d      	movs	r0, #45	; 0x2d
1a00436c:	2100      	movs	r1, #0
1a00436e:	f7ff fe21 	bl	1a003fb4 <delayInaccurateUs>
   lcdCommand( 0x32 );                   // Command 0x32 for 4-bit mode
1a004372:	2032      	movs	r0, #50	; 0x32
1a004374:	f7ff ff6a 	bl	1a00424c <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004378:	202d      	movs	r0, #45	; 0x2d
1a00437a:	2100      	movs	r1, #0
1a00437c:	f7ff fe1a 	bl	1a003fb4 <delayInaccurateUs>
   lcdCommand( 0x28 );                   // Command 0x28 for 4-bit mode
1a004380:	2028      	movs	r0, #40	; 0x28
1a004382:	f7ff ff63 	bl	1a00424c <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004386:	202d      	movs	r0, #45	; 0x2d
1a004388:	2100      	movs	r1, #0
1a00438a:	f7ff fe13 	bl	1a003fb4 <delayInaccurateUs>
   lcdCommand( 0x0E );                   // Command 0x0E for display on, cursor on
1a00438e:	200e      	movs	r0, #14
1a004390:	f7ff ff5c 	bl	1a00424c <lcdCommand>
   lcdCommandDelay();                    // Wait
1a004394:	202d      	movs	r0, #45	; 0x2d
1a004396:	2100      	movs	r1, #0
1a004398:	f7ff fe0c 	bl	1a003fb4 <delayInaccurateUs>
   lcdClear();                           // Command for clear LCD
1a00439c:	f7ff ffa6 	bl	1a0042ec <lcdClear>
   lcdCommand( 0x06 );                   // Command 0x06 for Shift cursor right
1a0043a0:	2006      	movs	r0, #6
1a0043a2:	f7ff ff53 	bl	1a00424c <lcdCommand>
   lcdCommandDelay();                    // Wait
1a0043a6:	202d      	movs	r0, #45	; 0x2d
1a0043a8:	2100      	movs	r1, #0
1a0043aa:	f7ff fe03 	bl	1a003fb4 <delayInaccurateUs>
   lcdDelay_ms( 1 );                     // Wait
1a0043ae:	2001      	movs	r0, #1
1a0043b0:	2100      	movs	r1, #0
1a0043b2:	f7ff fdcd 	bl	1a003f50 <delayInaccurateMs>
   lcdGoToXY( 0, 0 );
1a0043b6:	4621      	mov	r1, r4
1a0043b8:	4620      	mov	r0, r4
1a0043ba:	f7ff ff7b 	bl	1a0042b4 <lcdGoToXY>
}
1a0043be:	bd38      	pop	{r3, r4, r5, pc}
1a0043c0:	10002b30 	.word	0x10002b30

1a0043c4 <lcdCursorSet>:

void lcdCursorSet( LCDCursorModes_t mode )
{
1a0043c4:	b508      	push	{r3, lr}
   lcdCommand( 0b00001100 | mode );
1a0043c6:	f040 000c 	orr.w	r0, r0, #12
1a0043ca:	f7ff ff3f 	bl	1a00424c <lcdCommand>
   lcdDelay_ms(LCD_CLR_DISP_WAIT_MS); // Wait
1a0043ce:	2003      	movs	r0, #3
1a0043d0:	2100      	movs	r1, #0
1a0043d2:	f7ff fdbd 	bl	1a003f50 <delayInaccurateMs>
}
1a0043d6:	bd08      	pop	{r3, pc}

1a0043d8 <lcdSendStringRaw>:

void lcdSendStringRaw( char* str )
{
1a0043d8:	b538      	push	{r3, r4, r5, lr}
1a0043da:	4605      	mov	r5, r0
   uint8_t i = 0;
1a0043dc:	2400      	movs	r4, #0
   while( str[i] != 0 ) {
1a0043de:	e003      	b.n	1a0043e8 <lcdSendStringRaw+0x10>
      lcdData( str[i] );
1a0043e0:	f7ff ff50 	bl	1a004284 <lcdData>
      i++;
1a0043e4:	3401      	adds	r4, #1
1a0043e6:	b2e4      	uxtb	r4, r4
   while( str[i] != 0 ) {
1a0043e8:	5d28      	ldrb	r0, [r5, r4]
1a0043ea:	2800      	cmp	r0, #0
1a0043ec:	d1f8      	bne.n	1a0043e0 <lcdSendStringRaw+0x8>
   }
}
1a0043ee:	bd38      	pop	{r3, r4, r5, pc}

1a0043f0 <__aeabi_drsub>:
1a0043f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a0043f4:	e002      	b.n	1a0043fc <__adddf3>
1a0043f6:	bf00      	nop

1a0043f8 <__aeabi_dsub>:
1a0043f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a0043fc <__adddf3>:
1a0043fc:	b530      	push	{r4, r5, lr}
1a0043fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a004402:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a004406:	ea94 0f05 	teq	r4, r5
1a00440a:	bf08      	it	eq
1a00440c:	ea90 0f02 	teqeq	r0, r2
1a004410:	bf1f      	itttt	ne
1a004412:	ea54 0c00 	orrsne.w	ip, r4, r0
1a004416:	ea55 0c02 	orrsne.w	ip, r5, r2
1a00441a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a00441e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a004422:	f000 80e2 	beq.w	1a0045ea <__adddf3+0x1ee>
1a004426:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a00442a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a00442e:	bfb8      	it	lt
1a004430:	426d      	neglt	r5, r5
1a004432:	dd0c      	ble.n	1a00444e <__adddf3+0x52>
1a004434:	442c      	add	r4, r5
1a004436:	ea80 0202 	eor.w	r2, r0, r2
1a00443a:	ea81 0303 	eor.w	r3, r1, r3
1a00443e:	ea82 0000 	eor.w	r0, r2, r0
1a004442:	ea83 0101 	eor.w	r1, r3, r1
1a004446:	ea80 0202 	eor.w	r2, r0, r2
1a00444a:	ea81 0303 	eor.w	r3, r1, r3
1a00444e:	2d36      	cmp	r5, #54	; 0x36
1a004450:	bf88      	it	hi
1a004452:	bd30      	pophi	{r4, r5, pc}
1a004454:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a004458:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a00445c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a004460:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a004464:	d002      	beq.n	1a00446c <__adddf3+0x70>
1a004466:	4240      	negs	r0, r0
1a004468:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00446c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a004470:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a004474:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a004478:	d002      	beq.n	1a004480 <__adddf3+0x84>
1a00447a:	4252      	negs	r2, r2
1a00447c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a004480:	ea94 0f05 	teq	r4, r5
1a004484:	f000 80a7 	beq.w	1a0045d6 <__adddf3+0x1da>
1a004488:	f1a4 0401 	sub.w	r4, r4, #1
1a00448c:	f1d5 0e20 	rsbs	lr, r5, #32
1a004490:	db0d      	blt.n	1a0044ae <__adddf3+0xb2>
1a004492:	fa02 fc0e 	lsl.w	ip, r2, lr
1a004496:	fa22 f205 	lsr.w	r2, r2, r5
1a00449a:	1880      	adds	r0, r0, r2
1a00449c:	f141 0100 	adc.w	r1, r1, #0
1a0044a0:	fa03 f20e 	lsl.w	r2, r3, lr
1a0044a4:	1880      	adds	r0, r0, r2
1a0044a6:	fa43 f305 	asr.w	r3, r3, r5
1a0044aa:	4159      	adcs	r1, r3
1a0044ac:	e00e      	b.n	1a0044cc <__adddf3+0xd0>
1a0044ae:	f1a5 0520 	sub.w	r5, r5, #32
1a0044b2:	f10e 0e20 	add.w	lr, lr, #32
1a0044b6:	2a01      	cmp	r2, #1
1a0044b8:	fa03 fc0e 	lsl.w	ip, r3, lr
1a0044bc:	bf28      	it	cs
1a0044be:	f04c 0c02 	orrcs.w	ip, ip, #2
1a0044c2:	fa43 f305 	asr.w	r3, r3, r5
1a0044c6:	18c0      	adds	r0, r0, r3
1a0044c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a0044cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0044d0:	d507      	bpl.n	1a0044e2 <__adddf3+0xe6>
1a0044d2:	f04f 0e00 	mov.w	lr, #0
1a0044d6:	f1dc 0c00 	rsbs	ip, ip, #0
1a0044da:	eb7e 0000 	sbcs.w	r0, lr, r0
1a0044de:	eb6e 0101 	sbc.w	r1, lr, r1
1a0044e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a0044e6:	d31b      	bcc.n	1a004520 <__adddf3+0x124>
1a0044e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a0044ec:	d30c      	bcc.n	1a004508 <__adddf3+0x10c>
1a0044ee:	0849      	lsrs	r1, r1, #1
1a0044f0:	ea5f 0030 	movs.w	r0, r0, rrx
1a0044f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a0044f8:	f104 0401 	add.w	r4, r4, #1
1a0044fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a004500:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a004504:	f080 809a 	bcs.w	1a00463c <__adddf3+0x240>
1a004508:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a00450c:	bf08      	it	eq
1a00450e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a004512:	f150 0000 	adcs.w	r0, r0, #0
1a004516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00451a:	ea41 0105 	orr.w	r1, r1, r5
1a00451e:	bd30      	pop	{r4, r5, pc}
1a004520:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a004524:	4140      	adcs	r0, r0
1a004526:	eb41 0101 	adc.w	r1, r1, r1
1a00452a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00452e:	f1a4 0401 	sub.w	r4, r4, #1
1a004532:	d1e9      	bne.n	1a004508 <__adddf3+0x10c>
1a004534:	f091 0f00 	teq	r1, #0
1a004538:	bf04      	itt	eq
1a00453a:	4601      	moveq	r1, r0
1a00453c:	2000      	moveq	r0, #0
1a00453e:	fab1 f381 	clz	r3, r1
1a004542:	bf08      	it	eq
1a004544:	3320      	addeq	r3, #32
1a004546:	f1a3 030b 	sub.w	r3, r3, #11
1a00454a:	f1b3 0220 	subs.w	r2, r3, #32
1a00454e:	da0c      	bge.n	1a00456a <__adddf3+0x16e>
1a004550:	320c      	adds	r2, #12
1a004552:	dd08      	ble.n	1a004566 <__adddf3+0x16a>
1a004554:	f102 0c14 	add.w	ip, r2, #20
1a004558:	f1c2 020c 	rsb	r2, r2, #12
1a00455c:	fa01 f00c 	lsl.w	r0, r1, ip
1a004560:	fa21 f102 	lsr.w	r1, r1, r2
1a004564:	e00c      	b.n	1a004580 <__adddf3+0x184>
1a004566:	f102 0214 	add.w	r2, r2, #20
1a00456a:	bfd8      	it	le
1a00456c:	f1c2 0c20 	rsble	ip, r2, #32
1a004570:	fa01 f102 	lsl.w	r1, r1, r2
1a004574:	fa20 fc0c 	lsr.w	ip, r0, ip
1a004578:	bfdc      	itt	le
1a00457a:	ea41 010c 	orrle.w	r1, r1, ip
1a00457e:	4090      	lslle	r0, r2
1a004580:	1ae4      	subs	r4, r4, r3
1a004582:	bfa2      	ittt	ge
1a004584:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a004588:	4329      	orrge	r1, r5
1a00458a:	bd30      	popge	{r4, r5, pc}
1a00458c:	ea6f 0404 	mvn.w	r4, r4
1a004590:	3c1f      	subs	r4, #31
1a004592:	da1c      	bge.n	1a0045ce <__adddf3+0x1d2>
1a004594:	340c      	adds	r4, #12
1a004596:	dc0e      	bgt.n	1a0045b6 <__adddf3+0x1ba>
1a004598:	f104 0414 	add.w	r4, r4, #20
1a00459c:	f1c4 0220 	rsb	r2, r4, #32
1a0045a0:	fa20 f004 	lsr.w	r0, r0, r4
1a0045a4:	fa01 f302 	lsl.w	r3, r1, r2
1a0045a8:	ea40 0003 	orr.w	r0, r0, r3
1a0045ac:	fa21 f304 	lsr.w	r3, r1, r4
1a0045b0:	ea45 0103 	orr.w	r1, r5, r3
1a0045b4:	bd30      	pop	{r4, r5, pc}
1a0045b6:	f1c4 040c 	rsb	r4, r4, #12
1a0045ba:	f1c4 0220 	rsb	r2, r4, #32
1a0045be:	fa20 f002 	lsr.w	r0, r0, r2
1a0045c2:	fa01 f304 	lsl.w	r3, r1, r4
1a0045c6:	ea40 0003 	orr.w	r0, r0, r3
1a0045ca:	4629      	mov	r1, r5
1a0045cc:	bd30      	pop	{r4, r5, pc}
1a0045ce:	fa21 f004 	lsr.w	r0, r1, r4
1a0045d2:	4629      	mov	r1, r5
1a0045d4:	bd30      	pop	{r4, r5, pc}
1a0045d6:	f094 0f00 	teq	r4, #0
1a0045da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a0045de:	bf06      	itte	eq
1a0045e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a0045e4:	3401      	addeq	r4, #1
1a0045e6:	3d01      	subne	r5, #1
1a0045e8:	e74e      	b.n	1a004488 <__adddf3+0x8c>
1a0045ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0045ee:	bf18      	it	ne
1a0045f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a0045f4:	d029      	beq.n	1a00464a <__adddf3+0x24e>
1a0045f6:	ea94 0f05 	teq	r4, r5
1a0045fa:	bf08      	it	eq
1a0045fc:	ea90 0f02 	teqeq	r0, r2
1a004600:	d005      	beq.n	1a00460e <__adddf3+0x212>
1a004602:	ea54 0c00 	orrs.w	ip, r4, r0
1a004606:	bf04      	itt	eq
1a004608:	4619      	moveq	r1, r3
1a00460a:	4610      	moveq	r0, r2
1a00460c:	bd30      	pop	{r4, r5, pc}
1a00460e:	ea91 0f03 	teq	r1, r3
1a004612:	bf1e      	ittt	ne
1a004614:	2100      	movne	r1, #0
1a004616:	2000      	movne	r0, #0
1a004618:	bd30      	popne	{r4, r5, pc}
1a00461a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a00461e:	d105      	bne.n	1a00462c <__adddf3+0x230>
1a004620:	0040      	lsls	r0, r0, #1
1a004622:	4149      	adcs	r1, r1
1a004624:	bf28      	it	cs
1a004626:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a00462a:	bd30      	pop	{r4, r5, pc}
1a00462c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a004630:	bf3c      	itt	cc
1a004632:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a004636:	bd30      	popcc	{r4, r5, pc}
1a004638:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a00463c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a004640:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a004644:	f04f 0000 	mov.w	r0, #0
1a004648:	bd30      	pop	{r4, r5, pc}
1a00464a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00464e:	bf1a      	itte	ne
1a004650:	4619      	movne	r1, r3
1a004652:	4610      	movne	r0, r2
1a004654:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a004658:	bf1c      	itt	ne
1a00465a:	460b      	movne	r3, r1
1a00465c:	4602      	movne	r2, r0
1a00465e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a004662:	bf06      	itte	eq
1a004664:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a004668:	ea91 0f03 	teqeq	r1, r3
1a00466c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a004670:	bd30      	pop	{r4, r5, pc}
1a004672:	bf00      	nop

1a004674 <__aeabi_ui2d>:
1a004674:	f090 0f00 	teq	r0, #0
1a004678:	bf04      	itt	eq
1a00467a:	2100      	moveq	r1, #0
1a00467c:	4770      	bxeq	lr
1a00467e:	b530      	push	{r4, r5, lr}
1a004680:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004684:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004688:	f04f 0500 	mov.w	r5, #0
1a00468c:	f04f 0100 	mov.w	r1, #0
1a004690:	e750      	b.n	1a004534 <__adddf3+0x138>
1a004692:	bf00      	nop

1a004694 <__aeabi_i2d>:
1a004694:	f090 0f00 	teq	r0, #0
1a004698:	bf04      	itt	eq
1a00469a:	2100      	moveq	r1, #0
1a00469c:	4770      	bxeq	lr
1a00469e:	b530      	push	{r4, r5, lr}
1a0046a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0046a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0046a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a0046ac:	bf48      	it	mi
1a0046ae:	4240      	negmi	r0, r0
1a0046b0:	f04f 0100 	mov.w	r1, #0
1a0046b4:	e73e      	b.n	1a004534 <__adddf3+0x138>
1a0046b6:	bf00      	nop

1a0046b8 <__aeabi_f2d>:
1a0046b8:	0042      	lsls	r2, r0, #1
1a0046ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a0046be:	ea4f 0131 	mov.w	r1, r1, rrx
1a0046c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a0046c6:	bf1f      	itttt	ne
1a0046c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a0046cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a0046d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a0046d4:	4770      	bxne	lr
1a0046d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a0046da:	bf08      	it	eq
1a0046dc:	4770      	bxeq	lr
1a0046de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a0046e2:	bf04      	itt	eq
1a0046e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a0046e8:	4770      	bxeq	lr
1a0046ea:	b530      	push	{r4, r5, lr}
1a0046ec:	f44f 7460 	mov.w	r4, #896	; 0x380
1a0046f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0046f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0046f8:	e71c      	b.n	1a004534 <__adddf3+0x138>
1a0046fa:	bf00      	nop

1a0046fc <__aeabi_ul2d>:
1a0046fc:	ea50 0201 	orrs.w	r2, r0, r1
1a004700:	bf08      	it	eq
1a004702:	4770      	bxeq	lr
1a004704:	b530      	push	{r4, r5, lr}
1a004706:	f04f 0500 	mov.w	r5, #0
1a00470a:	e00a      	b.n	1a004722 <__aeabi_l2d+0x16>

1a00470c <__aeabi_l2d>:
1a00470c:	ea50 0201 	orrs.w	r2, r0, r1
1a004710:	bf08      	it	eq
1a004712:	4770      	bxeq	lr
1a004714:	b530      	push	{r4, r5, lr}
1a004716:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a00471a:	d502      	bpl.n	1a004722 <__aeabi_l2d+0x16>
1a00471c:	4240      	negs	r0, r0
1a00471e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004722:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004726:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a00472a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a00472e:	f43f aed8 	beq.w	1a0044e2 <__adddf3+0xe6>
1a004732:	f04f 0203 	mov.w	r2, #3
1a004736:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a00473a:	bf18      	it	ne
1a00473c:	3203      	addne	r2, #3
1a00473e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a004742:	bf18      	it	ne
1a004744:	3203      	addne	r2, #3
1a004746:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a00474a:	f1c2 0320 	rsb	r3, r2, #32
1a00474e:	fa00 fc03 	lsl.w	ip, r0, r3
1a004752:	fa20 f002 	lsr.w	r0, r0, r2
1a004756:	fa01 fe03 	lsl.w	lr, r1, r3
1a00475a:	ea40 000e 	orr.w	r0, r0, lr
1a00475e:	fa21 f102 	lsr.w	r1, r1, r2
1a004762:	4414      	add	r4, r2
1a004764:	e6bd      	b.n	1a0044e2 <__adddf3+0xe6>
1a004766:	bf00      	nop

1a004768 <__aeabi_dmul>:
1a004768:	b570      	push	{r4, r5, r6, lr}
1a00476a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00476e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a004772:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a004776:	bf1d      	ittte	ne
1a004778:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a00477c:	ea94 0f0c 	teqne	r4, ip
1a004780:	ea95 0f0c 	teqne	r5, ip
1a004784:	f000 f8de 	bleq	1a004944 <__aeabi_dmul+0x1dc>
1a004788:	442c      	add	r4, r5
1a00478a:	ea81 0603 	eor.w	r6, r1, r3
1a00478e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a004792:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a004796:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a00479a:	bf18      	it	ne
1a00479c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a0047a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0047a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a0047a8:	d038      	beq.n	1a00481c <__aeabi_dmul+0xb4>
1a0047aa:	fba0 ce02 	umull	ip, lr, r0, r2
1a0047ae:	f04f 0500 	mov.w	r5, #0
1a0047b2:	fbe1 e502 	umlal	lr, r5, r1, r2
1a0047b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a0047ba:	fbe0 e503 	umlal	lr, r5, r0, r3
1a0047be:	f04f 0600 	mov.w	r6, #0
1a0047c2:	fbe1 5603 	umlal	r5, r6, r1, r3
1a0047c6:	f09c 0f00 	teq	ip, #0
1a0047ca:	bf18      	it	ne
1a0047cc:	f04e 0e01 	orrne.w	lr, lr, #1
1a0047d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a0047d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a0047d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a0047dc:	d204      	bcs.n	1a0047e8 <__aeabi_dmul+0x80>
1a0047de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a0047e2:	416d      	adcs	r5, r5
1a0047e4:	eb46 0606 	adc.w	r6, r6, r6
1a0047e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a0047ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a0047f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a0047f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a0047f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a0047fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a004800:	bf88      	it	hi
1a004802:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a004806:	d81e      	bhi.n	1a004846 <__aeabi_dmul+0xde>
1a004808:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a00480c:	bf08      	it	eq
1a00480e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a004812:	f150 0000 	adcs.w	r0, r0, #0
1a004816:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00481a:	bd70      	pop	{r4, r5, r6, pc}
1a00481c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a004820:	ea46 0101 	orr.w	r1, r6, r1
1a004824:	ea40 0002 	orr.w	r0, r0, r2
1a004828:	ea81 0103 	eor.w	r1, r1, r3
1a00482c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a004830:	bfc2      	ittt	gt
1a004832:	ebd4 050c 	rsbsgt	r5, r4, ip
1a004836:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a00483a:	bd70      	popgt	{r4, r5, r6, pc}
1a00483c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004840:	f04f 0e00 	mov.w	lr, #0
1a004844:	3c01      	subs	r4, #1
1a004846:	f300 80ab 	bgt.w	1a0049a0 <__aeabi_dmul+0x238>
1a00484a:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a00484e:	bfde      	ittt	le
1a004850:	2000      	movle	r0, #0
1a004852:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a004856:	bd70      	pople	{r4, r5, r6, pc}
1a004858:	f1c4 0400 	rsb	r4, r4, #0
1a00485c:	3c20      	subs	r4, #32
1a00485e:	da35      	bge.n	1a0048cc <__aeabi_dmul+0x164>
1a004860:	340c      	adds	r4, #12
1a004862:	dc1b      	bgt.n	1a00489c <__aeabi_dmul+0x134>
1a004864:	f104 0414 	add.w	r4, r4, #20
1a004868:	f1c4 0520 	rsb	r5, r4, #32
1a00486c:	fa00 f305 	lsl.w	r3, r0, r5
1a004870:	fa20 f004 	lsr.w	r0, r0, r4
1a004874:	fa01 f205 	lsl.w	r2, r1, r5
1a004878:	ea40 0002 	orr.w	r0, r0, r2
1a00487c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a004880:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a004884:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a004888:	fa21 f604 	lsr.w	r6, r1, r4
1a00488c:	eb42 0106 	adc.w	r1, r2, r6
1a004890:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a004894:	bf08      	it	eq
1a004896:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a00489a:	bd70      	pop	{r4, r5, r6, pc}
1a00489c:	f1c4 040c 	rsb	r4, r4, #12
1a0048a0:	f1c4 0520 	rsb	r5, r4, #32
1a0048a4:	fa00 f304 	lsl.w	r3, r0, r4
1a0048a8:	fa20 f005 	lsr.w	r0, r0, r5
1a0048ac:	fa01 f204 	lsl.w	r2, r1, r4
1a0048b0:	ea40 0002 	orr.w	r0, r0, r2
1a0048b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0048b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a0048bc:	f141 0100 	adc.w	r1, r1, #0
1a0048c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0048c4:	bf08      	it	eq
1a0048c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0048ca:	bd70      	pop	{r4, r5, r6, pc}
1a0048cc:	f1c4 0520 	rsb	r5, r4, #32
1a0048d0:	fa00 f205 	lsl.w	r2, r0, r5
1a0048d4:	ea4e 0e02 	orr.w	lr, lr, r2
1a0048d8:	fa20 f304 	lsr.w	r3, r0, r4
1a0048dc:	fa01 f205 	lsl.w	r2, r1, r5
1a0048e0:	ea43 0302 	orr.w	r3, r3, r2
1a0048e4:	fa21 f004 	lsr.w	r0, r1, r4
1a0048e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0048ec:	fa21 f204 	lsr.w	r2, r1, r4
1a0048f0:	ea20 0002 	bic.w	r0, r0, r2
1a0048f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a0048f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0048fc:	bf08      	it	eq
1a0048fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a004902:	bd70      	pop	{r4, r5, r6, pc}
1a004904:	f094 0f00 	teq	r4, #0
1a004908:	d10f      	bne.n	1a00492a <__aeabi_dmul+0x1c2>
1a00490a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a00490e:	0040      	lsls	r0, r0, #1
1a004910:	eb41 0101 	adc.w	r1, r1, r1
1a004914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004918:	bf08      	it	eq
1a00491a:	3c01      	subeq	r4, #1
1a00491c:	d0f7      	beq.n	1a00490e <__aeabi_dmul+0x1a6>
1a00491e:	ea41 0106 	orr.w	r1, r1, r6
1a004922:	f095 0f00 	teq	r5, #0
1a004926:	bf18      	it	ne
1a004928:	4770      	bxne	lr
1a00492a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a00492e:	0052      	lsls	r2, r2, #1
1a004930:	eb43 0303 	adc.w	r3, r3, r3
1a004934:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a004938:	bf08      	it	eq
1a00493a:	3d01      	subeq	r5, #1
1a00493c:	d0f7      	beq.n	1a00492e <__aeabi_dmul+0x1c6>
1a00493e:	ea43 0306 	orr.w	r3, r3, r6
1a004942:	4770      	bx	lr
1a004944:	ea94 0f0c 	teq	r4, ip
1a004948:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a00494c:	bf18      	it	ne
1a00494e:	ea95 0f0c 	teqne	r5, ip
1a004952:	d00c      	beq.n	1a00496e <__aeabi_dmul+0x206>
1a004954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a004958:	bf18      	it	ne
1a00495a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00495e:	d1d1      	bne.n	1a004904 <__aeabi_dmul+0x19c>
1a004960:	ea81 0103 	eor.w	r1, r1, r3
1a004964:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004968:	f04f 0000 	mov.w	r0, #0
1a00496c:	bd70      	pop	{r4, r5, r6, pc}
1a00496e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a004972:	bf06      	itte	eq
1a004974:	4610      	moveq	r0, r2
1a004976:	4619      	moveq	r1, r3
1a004978:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00497c:	d019      	beq.n	1a0049b2 <__aeabi_dmul+0x24a>
1a00497e:	ea94 0f0c 	teq	r4, ip
1a004982:	d102      	bne.n	1a00498a <__aeabi_dmul+0x222>
1a004984:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a004988:	d113      	bne.n	1a0049b2 <__aeabi_dmul+0x24a>
1a00498a:	ea95 0f0c 	teq	r5, ip
1a00498e:	d105      	bne.n	1a00499c <__aeabi_dmul+0x234>
1a004990:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a004994:	bf1c      	itt	ne
1a004996:	4610      	movne	r0, r2
1a004998:	4619      	movne	r1, r3
1a00499a:	d10a      	bne.n	1a0049b2 <__aeabi_dmul+0x24a>
1a00499c:	ea81 0103 	eor.w	r1, r1, r3
1a0049a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0049a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a0049a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0049ac:	f04f 0000 	mov.w	r0, #0
1a0049b0:	bd70      	pop	{r4, r5, r6, pc}
1a0049b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a0049b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a0049ba:	bd70      	pop	{r4, r5, r6, pc}

1a0049bc <__aeabi_ddiv>:
1a0049bc:	b570      	push	{r4, r5, r6, lr}
1a0049be:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a0049c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a0049c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a0049ca:	bf1d      	ittte	ne
1a0049cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a0049d0:	ea94 0f0c 	teqne	r4, ip
1a0049d4:	ea95 0f0c 	teqne	r5, ip
1a0049d8:	f000 f8a7 	bleq	1a004b2a <__aeabi_ddiv+0x16e>
1a0049dc:	eba4 0405 	sub.w	r4, r4, r5
1a0049e0:	ea81 0e03 	eor.w	lr, r1, r3
1a0049e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a0049e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0049ec:	f000 8088 	beq.w	1a004b00 <__aeabi_ddiv+0x144>
1a0049f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a0049f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a0049f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a0049fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a004a00:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a004a04:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a004a08:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a004a0c:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a004a10:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a004a14:	429d      	cmp	r5, r3
1a004a16:	bf08      	it	eq
1a004a18:	4296      	cmpeq	r6, r2
1a004a1a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a004a1e:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a004a22:	d202      	bcs.n	1a004a2a <__aeabi_ddiv+0x6e>
1a004a24:	085b      	lsrs	r3, r3, #1
1a004a26:	ea4f 0232 	mov.w	r2, r2, rrx
1a004a2a:	1ab6      	subs	r6, r6, r2
1a004a2c:	eb65 0503 	sbc.w	r5, r5, r3
1a004a30:	085b      	lsrs	r3, r3, #1
1a004a32:	ea4f 0232 	mov.w	r2, r2, rrx
1a004a36:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a004a3a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a004a3e:	ebb6 0e02 	subs.w	lr, r6, r2
1a004a42:	eb75 0e03 	sbcs.w	lr, r5, r3
1a004a46:	bf22      	ittt	cs
1a004a48:	1ab6      	subcs	r6, r6, r2
1a004a4a:	4675      	movcs	r5, lr
1a004a4c:	ea40 000c 	orrcs.w	r0, r0, ip
1a004a50:	085b      	lsrs	r3, r3, #1
1a004a52:	ea4f 0232 	mov.w	r2, r2, rrx
1a004a56:	ebb6 0e02 	subs.w	lr, r6, r2
1a004a5a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a004a5e:	bf22      	ittt	cs
1a004a60:	1ab6      	subcs	r6, r6, r2
1a004a62:	4675      	movcs	r5, lr
1a004a64:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a004a68:	085b      	lsrs	r3, r3, #1
1a004a6a:	ea4f 0232 	mov.w	r2, r2, rrx
1a004a6e:	ebb6 0e02 	subs.w	lr, r6, r2
1a004a72:	eb75 0e03 	sbcs.w	lr, r5, r3
1a004a76:	bf22      	ittt	cs
1a004a78:	1ab6      	subcs	r6, r6, r2
1a004a7a:	4675      	movcs	r5, lr
1a004a7c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a004a80:	085b      	lsrs	r3, r3, #1
1a004a82:	ea4f 0232 	mov.w	r2, r2, rrx
1a004a86:	ebb6 0e02 	subs.w	lr, r6, r2
1a004a8a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a004a8e:	bf22      	ittt	cs
1a004a90:	1ab6      	subcs	r6, r6, r2
1a004a92:	4675      	movcs	r5, lr
1a004a94:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a004a98:	ea55 0e06 	orrs.w	lr, r5, r6
1a004a9c:	d018      	beq.n	1a004ad0 <__aeabi_ddiv+0x114>
1a004a9e:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a004aa2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a004aa6:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a004aaa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a004aae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a004ab2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a004ab6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a004aba:	d1c0      	bne.n	1a004a3e <__aeabi_ddiv+0x82>
1a004abc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004ac0:	d10b      	bne.n	1a004ada <__aeabi_ddiv+0x11e>
1a004ac2:	ea41 0100 	orr.w	r1, r1, r0
1a004ac6:	f04f 0000 	mov.w	r0, #0
1a004aca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a004ace:	e7b6      	b.n	1a004a3e <__aeabi_ddiv+0x82>
1a004ad0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004ad4:	bf04      	itt	eq
1a004ad6:	4301      	orreq	r1, r0
1a004ad8:	2000      	moveq	r0, #0
1a004ada:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a004ade:	bf88      	it	hi
1a004ae0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a004ae4:	f63f aeaf 	bhi.w	1a004846 <__aeabi_dmul+0xde>
1a004ae8:	ebb5 0c03 	subs.w	ip, r5, r3
1a004aec:	bf04      	itt	eq
1a004aee:	ebb6 0c02 	subseq.w	ip, r6, r2
1a004af2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a004af6:	f150 0000 	adcs.w	r0, r0, #0
1a004afa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a004afe:	bd70      	pop	{r4, r5, r6, pc}
1a004b00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a004b04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a004b08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a004b0c:	bfc2      	ittt	gt
1a004b0e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a004b12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a004b16:	bd70      	popgt	{r4, r5, r6, pc}
1a004b18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004b1c:	f04f 0e00 	mov.w	lr, #0
1a004b20:	3c01      	subs	r4, #1
1a004b22:	e690      	b.n	1a004846 <__aeabi_dmul+0xde>
1a004b24:	ea45 0e06 	orr.w	lr, r5, r6
1a004b28:	e68d      	b.n	1a004846 <__aeabi_dmul+0xde>
1a004b2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a004b2e:	ea94 0f0c 	teq	r4, ip
1a004b32:	bf08      	it	eq
1a004b34:	ea95 0f0c 	teqeq	r5, ip
1a004b38:	f43f af3b 	beq.w	1a0049b2 <__aeabi_dmul+0x24a>
1a004b3c:	ea94 0f0c 	teq	r4, ip
1a004b40:	d10a      	bne.n	1a004b58 <__aeabi_ddiv+0x19c>
1a004b42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a004b46:	f47f af34 	bne.w	1a0049b2 <__aeabi_dmul+0x24a>
1a004b4a:	ea95 0f0c 	teq	r5, ip
1a004b4e:	f47f af25 	bne.w	1a00499c <__aeabi_dmul+0x234>
1a004b52:	4610      	mov	r0, r2
1a004b54:	4619      	mov	r1, r3
1a004b56:	e72c      	b.n	1a0049b2 <__aeabi_dmul+0x24a>
1a004b58:	ea95 0f0c 	teq	r5, ip
1a004b5c:	d106      	bne.n	1a004b6c <__aeabi_ddiv+0x1b0>
1a004b5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a004b62:	f43f aefd 	beq.w	1a004960 <__aeabi_dmul+0x1f8>
1a004b66:	4610      	mov	r0, r2
1a004b68:	4619      	mov	r1, r3
1a004b6a:	e722      	b.n	1a0049b2 <__aeabi_dmul+0x24a>
1a004b6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a004b70:	bf18      	it	ne
1a004b72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a004b76:	f47f aec5 	bne.w	1a004904 <__aeabi_dmul+0x19c>
1a004b7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a004b7e:	f47f af0d 	bne.w	1a00499c <__aeabi_dmul+0x234>
1a004b82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a004b86:	f47f aeeb 	bne.w	1a004960 <__aeabi_dmul+0x1f8>
1a004b8a:	e712      	b.n	1a0049b2 <__aeabi_dmul+0x24a>

1a004b8c <__aeabi_d2f>:
1a004b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a004b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a004b94:	bf24      	itt	cs
1a004b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a004b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a004b9e:	d90d      	bls.n	1a004bbc <__aeabi_d2f+0x30>
1a004ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a004ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a004ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a004bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a004bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a004bb4:	bf08      	it	eq
1a004bb6:	f020 0001 	biceq.w	r0, r0, #1
1a004bba:	4770      	bx	lr
1a004bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a004bc0:	d121      	bne.n	1a004c06 <__aeabi_d2f+0x7a>
1a004bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a004bc6:	bfbc      	itt	lt
1a004bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a004bcc:	4770      	bxlt	lr
1a004bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a004bd6:	f1c2 0218 	rsb	r2, r2, #24
1a004bda:	f1c2 0c20 	rsb	ip, r2, #32
1a004bde:	fa10 f30c 	lsls.w	r3, r0, ip
1a004be2:	fa20 f002 	lsr.w	r0, r0, r2
1a004be6:	bf18      	it	ne
1a004be8:	f040 0001 	orrne.w	r0, r0, #1
1a004bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a004bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a004bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
1a004bf8:	ea40 000c 	orr.w	r0, r0, ip
1a004bfc:	fa23 f302 	lsr.w	r3, r3, r2
1a004c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a004c04:	e7cc      	b.n	1a004ba0 <__aeabi_d2f+0x14>
1a004c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a004c0a:	d107      	bne.n	1a004c1c <__aeabi_d2f+0x90>
1a004c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a004c10:	bf1e      	ittt	ne
1a004c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a004c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a004c1a:	4770      	bxne	lr
1a004c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a004c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a004c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a004c28:	4770      	bx	lr
1a004c2a:	bf00      	nop

1a004c2c <__aeabi_uldivmod>:
1a004c2c:	b953      	cbnz	r3, 1a004c44 <__aeabi_uldivmod+0x18>
1a004c2e:	b94a      	cbnz	r2, 1a004c44 <__aeabi_uldivmod+0x18>
1a004c30:	2900      	cmp	r1, #0
1a004c32:	bf08      	it	eq
1a004c34:	2800      	cmpeq	r0, #0
1a004c36:	bf1c      	itt	ne
1a004c38:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a004c3c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a004c40:	f000 b972 	b.w	1a004f28 <__aeabi_idiv0>
1a004c44:	f1ad 0c08 	sub.w	ip, sp, #8
1a004c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a004c4c:	f000 f806 	bl	1a004c5c <__udivmoddi4>
1a004c50:	f8dd e004 	ldr.w	lr, [sp, #4]
1a004c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004c58:	b004      	add	sp, #16
1a004c5a:	4770      	bx	lr

1a004c5c <__udivmoddi4>:
1a004c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004c60:	9e08      	ldr	r6, [sp, #32]
1a004c62:	4604      	mov	r4, r0
1a004c64:	4688      	mov	r8, r1
1a004c66:	2b00      	cmp	r3, #0
1a004c68:	d14b      	bne.n	1a004d02 <__udivmoddi4+0xa6>
1a004c6a:	428a      	cmp	r2, r1
1a004c6c:	4615      	mov	r5, r2
1a004c6e:	d967      	bls.n	1a004d40 <__udivmoddi4+0xe4>
1a004c70:	fab2 f282 	clz	r2, r2
1a004c74:	b14a      	cbz	r2, 1a004c8a <__udivmoddi4+0x2e>
1a004c76:	f1c2 0720 	rsb	r7, r2, #32
1a004c7a:	fa01 f302 	lsl.w	r3, r1, r2
1a004c7e:	fa20 f707 	lsr.w	r7, r0, r7
1a004c82:	4095      	lsls	r5, r2
1a004c84:	ea47 0803 	orr.w	r8, r7, r3
1a004c88:	4094      	lsls	r4, r2
1a004c8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004c8e:	0c23      	lsrs	r3, r4, #16
1a004c90:	fbb8 f7fe 	udiv	r7, r8, lr
1a004c94:	fa1f fc85 	uxth.w	ip, r5
1a004c98:	fb0e 8817 	mls	r8, lr, r7, r8
1a004c9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a004ca0:	fb07 f10c 	mul.w	r1, r7, ip
1a004ca4:	4299      	cmp	r1, r3
1a004ca6:	d909      	bls.n	1a004cbc <__udivmoddi4+0x60>
1a004ca8:	18eb      	adds	r3, r5, r3
1a004caa:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a004cae:	f080 811b 	bcs.w	1a004ee8 <__udivmoddi4+0x28c>
1a004cb2:	4299      	cmp	r1, r3
1a004cb4:	f240 8118 	bls.w	1a004ee8 <__udivmoddi4+0x28c>
1a004cb8:	3f02      	subs	r7, #2
1a004cba:	442b      	add	r3, r5
1a004cbc:	1a5b      	subs	r3, r3, r1
1a004cbe:	b2a4      	uxth	r4, r4
1a004cc0:	fbb3 f0fe 	udiv	r0, r3, lr
1a004cc4:	fb0e 3310 	mls	r3, lr, r0, r3
1a004cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a004ccc:	fb00 fc0c 	mul.w	ip, r0, ip
1a004cd0:	45a4      	cmp	ip, r4
1a004cd2:	d909      	bls.n	1a004ce8 <__udivmoddi4+0x8c>
1a004cd4:	192c      	adds	r4, r5, r4
1a004cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004cda:	f080 8107 	bcs.w	1a004eec <__udivmoddi4+0x290>
1a004cde:	45a4      	cmp	ip, r4
1a004ce0:	f240 8104 	bls.w	1a004eec <__udivmoddi4+0x290>
1a004ce4:	3802      	subs	r0, #2
1a004ce6:	442c      	add	r4, r5
1a004ce8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a004cec:	eba4 040c 	sub.w	r4, r4, ip
1a004cf0:	2700      	movs	r7, #0
1a004cf2:	b11e      	cbz	r6, 1a004cfc <__udivmoddi4+0xa0>
1a004cf4:	40d4      	lsrs	r4, r2
1a004cf6:	2300      	movs	r3, #0
1a004cf8:	e9c6 4300 	strd	r4, r3, [r6]
1a004cfc:	4639      	mov	r1, r7
1a004cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004d02:	428b      	cmp	r3, r1
1a004d04:	d909      	bls.n	1a004d1a <__udivmoddi4+0xbe>
1a004d06:	2e00      	cmp	r6, #0
1a004d08:	f000 80eb 	beq.w	1a004ee2 <__udivmoddi4+0x286>
1a004d0c:	2700      	movs	r7, #0
1a004d0e:	e9c6 0100 	strd	r0, r1, [r6]
1a004d12:	4638      	mov	r0, r7
1a004d14:	4639      	mov	r1, r7
1a004d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004d1a:	fab3 f783 	clz	r7, r3
1a004d1e:	2f00      	cmp	r7, #0
1a004d20:	d147      	bne.n	1a004db2 <__udivmoddi4+0x156>
1a004d22:	428b      	cmp	r3, r1
1a004d24:	d302      	bcc.n	1a004d2c <__udivmoddi4+0xd0>
1a004d26:	4282      	cmp	r2, r0
1a004d28:	f200 80fa 	bhi.w	1a004f20 <__udivmoddi4+0x2c4>
1a004d2c:	1a84      	subs	r4, r0, r2
1a004d2e:	eb61 0303 	sbc.w	r3, r1, r3
1a004d32:	2001      	movs	r0, #1
1a004d34:	4698      	mov	r8, r3
1a004d36:	2e00      	cmp	r6, #0
1a004d38:	d0e0      	beq.n	1a004cfc <__udivmoddi4+0xa0>
1a004d3a:	e9c6 4800 	strd	r4, r8, [r6]
1a004d3e:	e7dd      	b.n	1a004cfc <__udivmoddi4+0xa0>
1a004d40:	b902      	cbnz	r2, 1a004d44 <__udivmoddi4+0xe8>
1a004d42:	deff      	udf	#255	; 0xff
1a004d44:	fab2 f282 	clz	r2, r2
1a004d48:	2a00      	cmp	r2, #0
1a004d4a:	f040 808f 	bne.w	1a004e6c <__udivmoddi4+0x210>
1a004d4e:	1b49      	subs	r1, r1, r5
1a004d50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004d54:	fa1f f885 	uxth.w	r8, r5
1a004d58:	2701      	movs	r7, #1
1a004d5a:	fbb1 fcfe 	udiv	ip, r1, lr
1a004d5e:	0c23      	lsrs	r3, r4, #16
1a004d60:	fb0e 111c 	mls	r1, lr, ip, r1
1a004d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a004d68:	fb08 f10c 	mul.w	r1, r8, ip
1a004d6c:	4299      	cmp	r1, r3
1a004d6e:	d907      	bls.n	1a004d80 <__udivmoddi4+0x124>
1a004d70:	18eb      	adds	r3, r5, r3
1a004d72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a004d76:	d202      	bcs.n	1a004d7e <__udivmoddi4+0x122>
1a004d78:	4299      	cmp	r1, r3
1a004d7a:	f200 80cd 	bhi.w	1a004f18 <__udivmoddi4+0x2bc>
1a004d7e:	4684      	mov	ip, r0
1a004d80:	1a59      	subs	r1, r3, r1
1a004d82:	b2a3      	uxth	r3, r4
1a004d84:	fbb1 f0fe 	udiv	r0, r1, lr
1a004d88:	fb0e 1410 	mls	r4, lr, r0, r1
1a004d8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a004d90:	fb08 f800 	mul.w	r8, r8, r0
1a004d94:	45a0      	cmp	r8, r4
1a004d96:	d907      	bls.n	1a004da8 <__udivmoddi4+0x14c>
1a004d98:	192c      	adds	r4, r5, r4
1a004d9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004d9e:	d202      	bcs.n	1a004da6 <__udivmoddi4+0x14a>
1a004da0:	45a0      	cmp	r8, r4
1a004da2:	f200 80b6 	bhi.w	1a004f12 <__udivmoddi4+0x2b6>
1a004da6:	4618      	mov	r0, r3
1a004da8:	eba4 0408 	sub.w	r4, r4, r8
1a004dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a004db0:	e79f      	b.n	1a004cf2 <__udivmoddi4+0x96>
1a004db2:	f1c7 0c20 	rsb	ip, r7, #32
1a004db6:	40bb      	lsls	r3, r7
1a004db8:	fa22 fe0c 	lsr.w	lr, r2, ip
1a004dbc:	ea4e 0e03 	orr.w	lr, lr, r3
1a004dc0:	fa01 f407 	lsl.w	r4, r1, r7
1a004dc4:	fa20 f50c 	lsr.w	r5, r0, ip
1a004dc8:	fa21 f30c 	lsr.w	r3, r1, ip
1a004dcc:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a004dd0:	4325      	orrs	r5, r4
1a004dd2:	fbb3 f9f8 	udiv	r9, r3, r8
1a004dd6:	0c2c      	lsrs	r4, r5, #16
1a004dd8:	fb08 3319 	mls	r3, r8, r9, r3
1a004ddc:	fa1f fa8e 	uxth.w	sl, lr
1a004de0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a004de4:	fb09 f40a 	mul.w	r4, r9, sl
1a004de8:	429c      	cmp	r4, r3
1a004dea:	fa02 f207 	lsl.w	r2, r2, r7
1a004dee:	fa00 f107 	lsl.w	r1, r0, r7
1a004df2:	d90b      	bls.n	1a004e0c <__udivmoddi4+0x1b0>
1a004df4:	eb1e 0303 	adds.w	r3, lr, r3
1a004df8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a004dfc:	f080 8087 	bcs.w	1a004f0e <__udivmoddi4+0x2b2>
1a004e00:	429c      	cmp	r4, r3
1a004e02:	f240 8084 	bls.w	1a004f0e <__udivmoddi4+0x2b2>
1a004e06:	f1a9 0902 	sub.w	r9, r9, #2
1a004e0a:	4473      	add	r3, lr
1a004e0c:	1b1b      	subs	r3, r3, r4
1a004e0e:	b2ad      	uxth	r5, r5
1a004e10:	fbb3 f0f8 	udiv	r0, r3, r8
1a004e14:	fb08 3310 	mls	r3, r8, r0, r3
1a004e18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a004e1c:	fb00 fa0a 	mul.w	sl, r0, sl
1a004e20:	45a2      	cmp	sl, r4
1a004e22:	d908      	bls.n	1a004e36 <__udivmoddi4+0x1da>
1a004e24:	eb1e 0404 	adds.w	r4, lr, r4
1a004e28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004e2c:	d26b      	bcs.n	1a004f06 <__udivmoddi4+0x2aa>
1a004e2e:	45a2      	cmp	sl, r4
1a004e30:	d969      	bls.n	1a004f06 <__udivmoddi4+0x2aa>
1a004e32:	3802      	subs	r0, #2
1a004e34:	4474      	add	r4, lr
1a004e36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a004e3a:	fba0 8902 	umull	r8, r9, r0, r2
1a004e3e:	eba4 040a 	sub.w	r4, r4, sl
1a004e42:	454c      	cmp	r4, r9
1a004e44:	46c2      	mov	sl, r8
1a004e46:	464b      	mov	r3, r9
1a004e48:	d354      	bcc.n	1a004ef4 <__udivmoddi4+0x298>
1a004e4a:	d051      	beq.n	1a004ef0 <__udivmoddi4+0x294>
1a004e4c:	2e00      	cmp	r6, #0
1a004e4e:	d069      	beq.n	1a004f24 <__udivmoddi4+0x2c8>
1a004e50:	ebb1 050a 	subs.w	r5, r1, sl
1a004e54:	eb64 0403 	sbc.w	r4, r4, r3
1a004e58:	fa04 fc0c 	lsl.w	ip, r4, ip
1a004e5c:	40fd      	lsrs	r5, r7
1a004e5e:	40fc      	lsrs	r4, r7
1a004e60:	ea4c 0505 	orr.w	r5, ip, r5
1a004e64:	e9c6 5400 	strd	r5, r4, [r6]
1a004e68:	2700      	movs	r7, #0
1a004e6a:	e747      	b.n	1a004cfc <__udivmoddi4+0xa0>
1a004e6c:	f1c2 0320 	rsb	r3, r2, #32
1a004e70:	fa20 f703 	lsr.w	r7, r0, r3
1a004e74:	4095      	lsls	r5, r2
1a004e76:	fa01 f002 	lsl.w	r0, r1, r2
1a004e7a:	fa21 f303 	lsr.w	r3, r1, r3
1a004e7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004e82:	4338      	orrs	r0, r7
1a004e84:	0c01      	lsrs	r1, r0, #16
1a004e86:	fbb3 f7fe 	udiv	r7, r3, lr
1a004e8a:	fa1f f885 	uxth.w	r8, r5
1a004e8e:	fb0e 3317 	mls	r3, lr, r7, r3
1a004e92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004e96:	fb07 f308 	mul.w	r3, r7, r8
1a004e9a:	428b      	cmp	r3, r1
1a004e9c:	fa04 f402 	lsl.w	r4, r4, r2
1a004ea0:	d907      	bls.n	1a004eb2 <__udivmoddi4+0x256>
1a004ea2:	1869      	adds	r1, r5, r1
1a004ea4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a004ea8:	d22f      	bcs.n	1a004f0a <__udivmoddi4+0x2ae>
1a004eaa:	428b      	cmp	r3, r1
1a004eac:	d92d      	bls.n	1a004f0a <__udivmoddi4+0x2ae>
1a004eae:	3f02      	subs	r7, #2
1a004eb0:	4429      	add	r1, r5
1a004eb2:	1acb      	subs	r3, r1, r3
1a004eb4:	b281      	uxth	r1, r0
1a004eb6:	fbb3 f0fe 	udiv	r0, r3, lr
1a004eba:	fb0e 3310 	mls	r3, lr, r0, r3
1a004ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004ec2:	fb00 f308 	mul.w	r3, r0, r8
1a004ec6:	428b      	cmp	r3, r1
1a004ec8:	d907      	bls.n	1a004eda <__udivmoddi4+0x27e>
1a004eca:	1869      	adds	r1, r5, r1
1a004ecc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a004ed0:	d217      	bcs.n	1a004f02 <__udivmoddi4+0x2a6>
1a004ed2:	428b      	cmp	r3, r1
1a004ed4:	d915      	bls.n	1a004f02 <__udivmoddi4+0x2a6>
1a004ed6:	3802      	subs	r0, #2
1a004ed8:	4429      	add	r1, r5
1a004eda:	1ac9      	subs	r1, r1, r3
1a004edc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a004ee0:	e73b      	b.n	1a004d5a <__udivmoddi4+0xfe>
1a004ee2:	4637      	mov	r7, r6
1a004ee4:	4630      	mov	r0, r6
1a004ee6:	e709      	b.n	1a004cfc <__udivmoddi4+0xa0>
1a004ee8:	4607      	mov	r7, r0
1a004eea:	e6e7      	b.n	1a004cbc <__udivmoddi4+0x60>
1a004eec:	4618      	mov	r0, r3
1a004eee:	e6fb      	b.n	1a004ce8 <__udivmoddi4+0x8c>
1a004ef0:	4541      	cmp	r1, r8
1a004ef2:	d2ab      	bcs.n	1a004e4c <__udivmoddi4+0x1f0>
1a004ef4:	ebb8 0a02 	subs.w	sl, r8, r2
1a004ef8:	eb69 020e 	sbc.w	r2, r9, lr
1a004efc:	3801      	subs	r0, #1
1a004efe:	4613      	mov	r3, r2
1a004f00:	e7a4      	b.n	1a004e4c <__udivmoddi4+0x1f0>
1a004f02:	4660      	mov	r0, ip
1a004f04:	e7e9      	b.n	1a004eda <__udivmoddi4+0x27e>
1a004f06:	4618      	mov	r0, r3
1a004f08:	e795      	b.n	1a004e36 <__udivmoddi4+0x1da>
1a004f0a:	4667      	mov	r7, ip
1a004f0c:	e7d1      	b.n	1a004eb2 <__udivmoddi4+0x256>
1a004f0e:	4681      	mov	r9, r0
1a004f10:	e77c      	b.n	1a004e0c <__udivmoddi4+0x1b0>
1a004f12:	3802      	subs	r0, #2
1a004f14:	442c      	add	r4, r5
1a004f16:	e747      	b.n	1a004da8 <__udivmoddi4+0x14c>
1a004f18:	f1ac 0c02 	sub.w	ip, ip, #2
1a004f1c:	442b      	add	r3, r5
1a004f1e:	e72f      	b.n	1a004d80 <__udivmoddi4+0x124>
1a004f20:	4638      	mov	r0, r7
1a004f22:	e708      	b.n	1a004d36 <__udivmoddi4+0xda>
1a004f24:	4637      	mov	r7, r6
1a004f26:	e6e9      	b.n	1a004cfc <__udivmoddi4+0xa0>

1a004f28 <__aeabi_idiv0>:
1a004f28:	4770      	bx	lr
1a004f2a:	bf00      	nop

1a004f2c <__sflush_r>:
1a004f2c:	898a      	ldrh	r2, [r1, #12]
1a004f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004f32:	4605      	mov	r5, r0
1a004f34:	0710      	lsls	r0, r2, #28
1a004f36:	460c      	mov	r4, r1
1a004f38:	d458      	bmi.n	1a004fec <__sflush_r+0xc0>
1a004f3a:	684b      	ldr	r3, [r1, #4]
1a004f3c:	2b00      	cmp	r3, #0
1a004f3e:	dc05      	bgt.n	1a004f4c <__sflush_r+0x20>
1a004f40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a004f42:	2b00      	cmp	r3, #0
1a004f44:	dc02      	bgt.n	1a004f4c <__sflush_r+0x20>
1a004f46:	2000      	movs	r0, #0
1a004f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004f4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a004f4e:	2e00      	cmp	r6, #0
1a004f50:	d0f9      	beq.n	1a004f46 <__sflush_r+0x1a>
1a004f52:	2300      	movs	r3, #0
1a004f54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a004f58:	682f      	ldr	r7, [r5, #0]
1a004f5a:	6a21      	ldr	r1, [r4, #32]
1a004f5c:	602b      	str	r3, [r5, #0]
1a004f5e:	d032      	beq.n	1a004fc6 <__sflush_r+0x9a>
1a004f60:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a004f62:	89a3      	ldrh	r3, [r4, #12]
1a004f64:	075a      	lsls	r2, r3, #29
1a004f66:	d505      	bpl.n	1a004f74 <__sflush_r+0x48>
1a004f68:	6863      	ldr	r3, [r4, #4]
1a004f6a:	1ac0      	subs	r0, r0, r3
1a004f6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a004f6e:	b10b      	cbz	r3, 1a004f74 <__sflush_r+0x48>
1a004f70:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a004f72:	1ac0      	subs	r0, r0, r3
1a004f74:	2300      	movs	r3, #0
1a004f76:	4602      	mov	r2, r0
1a004f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a004f7a:	6a21      	ldr	r1, [r4, #32]
1a004f7c:	4628      	mov	r0, r5
1a004f7e:	47b0      	blx	r6
1a004f80:	1c43      	adds	r3, r0, #1
1a004f82:	89a3      	ldrh	r3, [r4, #12]
1a004f84:	d106      	bne.n	1a004f94 <__sflush_r+0x68>
1a004f86:	6829      	ldr	r1, [r5, #0]
1a004f88:	291d      	cmp	r1, #29
1a004f8a:	d848      	bhi.n	1a00501e <__sflush_r+0xf2>
1a004f8c:	4a29      	ldr	r2, [pc, #164]	; (1a005034 <__sflush_r+0x108>)
1a004f8e:	40ca      	lsrs	r2, r1
1a004f90:	07d6      	lsls	r6, r2, #31
1a004f92:	d544      	bpl.n	1a00501e <__sflush_r+0xf2>
1a004f94:	2200      	movs	r2, #0
1a004f96:	6062      	str	r2, [r4, #4]
1a004f98:	04d9      	lsls	r1, r3, #19
1a004f9a:	6922      	ldr	r2, [r4, #16]
1a004f9c:	6022      	str	r2, [r4, #0]
1a004f9e:	d504      	bpl.n	1a004faa <__sflush_r+0x7e>
1a004fa0:	1c42      	adds	r2, r0, #1
1a004fa2:	d101      	bne.n	1a004fa8 <__sflush_r+0x7c>
1a004fa4:	682b      	ldr	r3, [r5, #0]
1a004fa6:	b903      	cbnz	r3, 1a004faa <__sflush_r+0x7e>
1a004fa8:	6560      	str	r0, [r4, #84]	; 0x54
1a004faa:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004fac:	602f      	str	r7, [r5, #0]
1a004fae:	2900      	cmp	r1, #0
1a004fb0:	d0c9      	beq.n	1a004f46 <__sflush_r+0x1a>
1a004fb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004fb6:	4299      	cmp	r1, r3
1a004fb8:	d002      	beq.n	1a004fc0 <__sflush_r+0x94>
1a004fba:	4628      	mov	r0, r5
1a004fbc:	f000 f968 	bl	1a005290 <_free_r>
1a004fc0:	2000      	movs	r0, #0
1a004fc2:	6360      	str	r0, [r4, #52]	; 0x34
1a004fc4:	e7c0      	b.n	1a004f48 <__sflush_r+0x1c>
1a004fc6:	2301      	movs	r3, #1
1a004fc8:	4628      	mov	r0, r5
1a004fca:	47b0      	blx	r6
1a004fcc:	1c41      	adds	r1, r0, #1
1a004fce:	d1c8      	bne.n	1a004f62 <__sflush_r+0x36>
1a004fd0:	682b      	ldr	r3, [r5, #0]
1a004fd2:	2b00      	cmp	r3, #0
1a004fd4:	d0c5      	beq.n	1a004f62 <__sflush_r+0x36>
1a004fd6:	2b1d      	cmp	r3, #29
1a004fd8:	d001      	beq.n	1a004fde <__sflush_r+0xb2>
1a004fda:	2b16      	cmp	r3, #22
1a004fdc:	d101      	bne.n	1a004fe2 <__sflush_r+0xb6>
1a004fde:	602f      	str	r7, [r5, #0]
1a004fe0:	e7b1      	b.n	1a004f46 <__sflush_r+0x1a>
1a004fe2:	89a3      	ldrh	r3, [r4, #12]
1a004fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004fe8:	81a3      	strh	r3, [r4, #12]
1a004fea:	e7ad      	b.n	1a004f48 <__sflush_r+0x1c>
1a004fec:	690f      	ldr	r7, [r1, #16]
1a004fee:	2f00      	cmp	r7, #0
1a004ff0:	d0a9      	beq.n	1a004f46 <__sflush_r+0x1a>
1a004ff2:	0793      	lsls	r3, r2, #30
1a004ff4:	680e      	ldr	r6, [r1, #0]
1a004ff6:	bf08      	it	eq
1a004ff8:	694b      	ldreq	r3, [r1, #20]
1a004ffa:	600f      	str	r7, [r1, #0]
1a004ffc:	bf18      	it	ne
1a004ffe:	2300      	movne	r3, #0
1a005000:	eba6 0807 	sub.w	r8, r6, r7
1a005004:	608b      	str	r3, [r1, #8]
1a005006:	f1b8 0f00 	cmp.w	r8, #0
1a00500a:	dd9c      	ble.n	1a004f46 <__sflush_r+0x1a>
1a00500c:	4643      	mov	r3, r8
1a00500e:	463a      	mov	r2, r7
1a005010:	6a21      	ldr	r1, [r4, #32]
1a005012:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a005014:	4628      	mov	r0, r5
1a005016:	47b0      	blx	r6
1a005018:	2800      	cmp	r0, #0
1a00501a:	dc06      	bgt.n	1a00502a <__sflush_r+0xfe>
1a00501c:	89a3      	ldrh	r3, [r4, #12]
1a00501e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005022:	81a3      	strh	r3, [r4, #12]
1a005024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005028:	e78e      	b.n	1a004f48 <__sflush_r+0x1c>
1a00502a:	4407      	add	r7, r0
1a00502c:	eba8 0800 	sub.w	r8, r8, r0
1a005030:	e7e9      	b.n	1a005006 <__sflush_r+0xda>
1a005032:	bf00      	nop
1a005034:	20400001 	.word	0x20400001

1a005038 <_fflush_r>:
1a005038:	b538      	push	{r3, r4, r5, lr}
1a00503a:	690b      	ldr	r3, [r1, #16]
1a00503c:	4605      	mov	r5, r0
1a00503e:	460c      	mov	r4, r1
1a005040:	b1db      	cbz	r3, 1a00507a <_fflush_r+0x42>
1a005042:	b118      	cbz	r0, 1a00504c <_fflush_r+0x14>
1a005044:	6983      	ldr	r3, [r0, #24]
1a005046:	b90b      	cbnz	r3, 1a00504c <_fflush_r+0x14>
1a005048:	f000 f860 	bl	1a00510c <__sinit>
1a00504c:	4b0c      	ldr	r3, [pc, #48]	; (1a005080 <_fflush_r+0x48>)
1a00504e:	429c      	cmp	r4, r3
1a005050:	d109      	bne.n	1a005066 <_fflush_r+0x2e>
1a005052:	686c      	ldr	r4, [r5, #4]
1a005054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005058:	b17b      	cbz	r3, 1a00507a <_fflush_r+0x42>
1a00505a:	4621      	mov	r1, r4
1a00505c:	4628      	mov	r0, r5
1a00505e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a005062:	f7ff bf63 	b.w	1a004f2c <__sflush_r>
1a005066:	4b07      	ldr	r3, [pc, #28]	; (1a005084 <_fflush_r+0x4c>)
1a005068:	429c      	cmp	r4, r3
1a00506a:	d101      	bne.n	1a005070 <_fflush_r+0x38>
1a00506c:	68ac      	ldr	r4, [r5, #8]
1a00506e:	e7f1      	b.n	1a005054 <_fflush_r+0x1c>
1a005070:	4b05      	ldr	r3, [pc, #20]	; (1a005088 <_fflush_r+0x50>)
1a005072:	429c      	cmp	r4, r3
1a005074:	bf08      	it	eq
1a005076:	68ec      	ldreq	r4, [r5, #12]
1a005078:	e7ec      	b.n	1a005054 <_fflush_r+0x1c>
1a00507a:	2000      	movs	r0, #0
1a00507c:	bd38      	pop	{r3, r4, r5, pc}
1a00507e:	bf00      	nop
1a005080:	1a0063bc 	.word	0x1a0063bc
1a005084:	1a0063dc 	.word	0x1a0063dc
1a005088:	1a00639c 	.word	0x1a00639c

1a00508c <std>:
1a00508c:	2300      	movs	r3, #0
1a00508e:	b510      	push	{r4, lr}
1a005090:	4604      	mov	r4, r0
1a005092:	e9c0 3300 	strd	r3, r3, [r0]
1a005096:	6083      	str	r3, [r0, #8]
1a005098:	8181      	strh	r1, [r0, #12]
1a00509a:	6643      	str	r3, [r0, #100]	; 0x64
1a00509c:	81c2      	strh	r2, [r0, #14]
1a00509e:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0050a2:	6183      	str	r3, [r0, #24]
1a0050a4:	4619      	mov	r1, r3
1a0050a6:	2208      	movs	r2, #8
1a0050a8:	305c      	adds	r0, #92	; 0x5c
1a0050aa:	f000 f8e8 	bl	1a00527e <memset>
1a0050ae:	4b05      	ldr	r3, [pc, #20]	; (1a0050c4 <std+0x38>)
1a0050b0:	6263      	str	r3, [r4, #36]	; 0x24
1a0050b2:	4b05      	ldr	r3, [pc, #20]	; (1a0050c8 <std+0x3c>)
1a0050b4:	62a3      	str	r3, [r4, #40]	; 0x28
1a0050b6:	4b05      	ldr	r3, [pc, #20]	; (1a0050cc <std+0x40>)
1a0050b8:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0050ba:	4b05      	ldr	r3, [pc, #20]	; (1a0050d0 <std+0x44>)
1a0050bc:	6224      	str	r4, [r4, #32]
1a0050be:	6323      	str	r3, [r4, #48]	; 0x30
1a0050c0:	bd10      	pop	{r4, pc}
1a0050c2:	bf00      	nop
1a0050c4:	1a0054d9 	.word	0x1a0054d9
1a0050c8:	1a0054fb 	.word	0x1a0054fb
1a0050cc:	1a005533 	.word	0x1a005533
1a0050d0:	1a005557 	.word	0x1a005557

1a0050d4 <_cleanup_r>:
1a0050d4:	4901      	ldr	r1, [pc, #4]	; (1a0050dc <_cleanup_r+0x8>)
1a0050d6:	f000 b885 	b.w	1a0051e4 <_fwalk_reent>
1a0050da:	bf00      	nop
1a0050dc:	1a005039 	.word	0x1a005039

1a0050e0 <__sfmoreglue>:
1a0050e0:	b570      	push	{r4, r5, r6, lr}
1a0050e2:	1e4a      	subs	r2, r1, #1
1a0050e4:	2568      	movs	r5, #104	; 0x68
1a0050e6:	4355      	muls	r5, r2
1a0050e8:	460e      	mov	r6, r1
1a0050ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a0050ee:	f000 f91d 	bl	1a00532c <_malloc_r>
1a0050f2:	4604      	mov	r4, r0
1a0050f4:	b140      	cbz	r0, 1a005108 <__sfmoreglue+0x28>
1a0050f6:	2100      	movs	r1, #0
1a0050f8:	e9c0 1600 	strd	r1, r6, [r0]
1a0050fc:	300c      	adds	r0, #12
1a0050fe:	60a0      	str	r0, [r4, #8]
1a005100:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a005104:	f000 f8bb 	bl	1a00527e <memset>
1a005108:	4620      	mov	r0, r4
1a00510a:	bd70      	pop	{r4, r5, r6, pc}

1a00510c <__sinit>:
1a00510c:	6983      	ldr	r3, [r0, #24]
1a00510e:	b510      	push	{r4, lr}
1a005110:	4604      	mov	r4, r0
1a005112:	bb33      	cbnz	r3, 1a005162 <__sinit+0x56>
1a005114:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a005118:	6503      	str	r3, [r0, #80]	; 0x50
1a00511a:	4b12      	ldr	r3, [pc, #72]	; (1a005164 <__sinit+0x58>)
1a00511c:	4a12      	ldr	r2, [pc, #72]	; (1a005168 <__sinit+0x5c>)
1a00511e:	681b      	ldr	r3, [r3, #0]
1a005120:	6282      	str	r2, [r0, #40]	; 0x28
1a005122:	4298      	cmp	r0, r3
1a005124:	bf04      	itt	eq
1a005126:	2301      	moveq	r3, #1
1a005128:	6183      	streq	r3, [r0, #24]
1a00512a:	f000 f81f 	bl	1a00516c <__sfp>
1a00512e:	6060      	str	r0, [r4, #4]
1a005130:	4620      	mov	r0, r4
1a005132:	f000 f81b 	bl	1a00516c <__sfp>
1a005136:	60a0      	str	r0, [r4, #8]
1a005138:	4620      	mov	r0, r4
1a00513a:	f000 f817 	bl	1a00516c <__sfp>
1a00513e:	2200      	movs	r2, #0
1a005140:	60e0      	str	r0, [r4, #12]
1a005142:	2104      	movs	r1, #4
1a005144:	6860      	ldr	r0, [r4, #4]
1a005146:	f7ff ffa1 	bl	1a00508c <std>
1a00514a:	2201      	movs	r2, #1
1a00514c:	2109      	movs	r1, #9
1a00514e:	68a0      	ldr	r0, [r4, #8]
1a005150:	f7ff ff9c 	bl	1a00508c <std>
1a005154:	2202      	movs	r2, #2
1a005156:	2112      	movs	r1, #18
1a005158:	68e0      	ldr	r0, [r4, #12]
1a00515a:	f7ff ff97 	bl	1a00508c <std>
1a00515e:	2301      	movs	r3, #1
1a005160:	61a3      	str	r3, [r4, #24]
1a005162:	bd10      	pop	{r4, pc}
1a005164:	1a0063fc 	.word	0x1a0063fc
1a005168:	1a0050d5 	.word	0x1a0050d5

1a00516c <__sfp>:
1a00516c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00516e:	4b1b      	ldr	r3, [pc, #108]	; (1a0051dc <__sfp+0x70>)
1a005170:	681e      	ldr	r6, [r3, #0]
1a005172:	69b3      	ldr	r3, [r6, #24]
1a005174:	4607      	mov	r7, r0
1a005176:	b913      	cbnz	r3, 1a00517e <__sfp+0x12>
1a005178:	4630      	mov	r0, r6
1a00517a:	f7ff ffc7 	bl	1a00510c <__sinit>
1a00517e:	3648      	adds	r6, #72	; 0x48
1a005180:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a005184:	3b01      	subs	r3, #1
1a005186:	d503      	bpl.n	1a005190 <__sfp+0x24>
1a005188:	6833      	ldr	r3, [r6, #0]
1a00518a:	b133      	cbz	r3, 1a00519a <__sfp+0x2e>
1a00518c:	6836      	ldr	r6, [r6, #0]
1a00518e:	e7f7      	b.n	1a005180 <__sfp+0x14>
1a005190:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a005194:	b16d      	cbz	r5, 1a0051b2 <__sfp+0x46>
1a005196:	3468      	adds	r4, #104	; 0x68
1a005198:	e7f4      	b.n	1a005184 <__sfp+0x18>
1a00519a:	2104      	movs	r1, #4
1a00519c:	4638      	mov	r0, r7
1a00519e:	f7ff ff9f 	bl	1a0050e0 <__sfmoreglue>
1a0051a2:	6030      	str	r0, [r6, #0]
1a0051a4:	2800      	cmp	r0, #0
1a0051a6:	d1f1      	bne.n	1a00518c <__sfp+0x20>
1a0051a8:	230c      	movs	r3, #12
1a0051aa:	603b      	str	r3, [r7, #0]
1a0051ac:	4604      	mov	r4, r0
1a0051ae:	4620      	mov	r0, r4
1a0051b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0051b2:	4b0b      	ldr	r3, [pc, #44]	; (1a0051e0 <__sfp+0x74>)
1a0051b4:	6665      	str	r5, [r4, #100]	; 0x64
1a0051b6:	e9c4 5500 	strd	r5, r5, [r4]
1a0051ba:	60a5      	str	r5, [r4, #8]
1a0051bc:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a0051c0:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a0051c4:	2208      	movs	r2, #8
1a0051c6:	4629      	mov	r1, r5
1a0051c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a0051cc:	f000 f857 	bl	1a00527e <memset>
1a0051d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a0051d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a0051d8:	e7e9      	b.n	1a0051ae <__sfp+0x42>
1a0051da:	bf00      	nop
1a0051dc:	1a0063fc 	.word	0x1a0063fc
1a0051e0:	ffff0001 	.word	0xffff0001

1a0051e4 <_fwalk_reent>:
1a0051e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0051e8:	4680      	mov	r8, r0
1a0051ea:	4689      	mov	r9, r1
1a0051ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a0051f0:	2600      	movs	r6, #0
1a0051f2:	b914      	cbnz	r4, 1a0051fa <_fwalk_reent+0x16>
1a0051f4:	4630      	mov	r0, r6
1a0051f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0051fa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a0051fe:	3f01      	subs	r7, #1
1a005200:	d501      	bpl.n	1a005206 <_fwalk_reent+0x22>
1a005202:	6824      	ldr	r4, [r4, #0]
1a005204:	e7f5      	b.n	1a0051f2 <_fwalk_reent+0xe>
1a005206:	89ab      	ldrh	r3, [r5, #12]
1a005208:	2b01      	cmp	r3, #1
1a00520a:	d907      	bls.n	1a00521c <_fwalk_reent+0x38>
1a00520c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a005210:	3301      	adds	r3, #1
1a005212:	d003      	beq.n	1a00521c <_fwalk_reent+0x38>
1a005214:	4629      	mov	r1, r5
1a005216:	4640      	mov	r0, r8
1a005218:	47c8      	blx	r9
1a00521a:	4306      	orrs	r6, r0
1a00521c:	3568      	adds	r5, #104	; 0x68
1a00521e:	e7ee      	b.n	1a0051fe <_fwalk_reent+0x1a>

1a005220 <__libc_init_array>:
1a005220:	b570      	push	{r4, r5, r6, lr}
1a005222:	4e0d      	ldr	r6, [pc, #52]	; (1a005258 <__libc_init_array+0x38>)
1a005224:	4c0d      	ldr	r4, [pc, #52]	; (1a00525c <__libc_init_array+0x3c>)
1a005226:	1ba4      	subs	r4, r4, r6
1a005228:	10a4      	asrs	r4, r4, #2
1a00522a:	2500      	movs	r5, #0
1a00522c:	42a5      	cmp	r5, r4
1a00522e:	d109      	bne.n	1a005244 <__libc_init_array+0x24>
1a005230:	4e0b      	ldr	r6, [pc, #44]	; (1a005260 <__libc_init_array+0x40>)
1a005232:	4c0c      	ldr	r4, [pc, #48]	; (1a005264 <__libc_init_array+0x44>)
1a005234:	f7fb fd0f 	bl	1a000c56 <_init>
1a005238:	1ba4      	subs	r4, r4, r6
1a00523a:	10a4      	asrs	r4, r4, #2
1a00523c:	2500      	movs	r5, #0
1a00523e:	42a5      	cmp	r5, r4
1a005240:	d105      	bne.n	1a00524e <__libc_init_array+0x2e>
1a005242:	bd70      	pop	{r4, r5, r6, pc}
1a005244:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a005248:	4798      	blx	r3
1a00524a:	3501      	adds	r5, #1
1a00524c:	e7ee      	b.n	1a00522c <__libc_init_array+0xc>
1a00524e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a005252:	4798      	blx	r3
1a005254:	3501      	adds	r5, #1
1a005256:	e7f2      	b.n	1a00523e <__libc_init_array+0x1e>
1a005258:	1a006434 	.word	0x1a006434
1a00525c:	1a006434 	.word	0x1a006434
1a005260:	1a006434 	.word	0x1a006434
1a005264:	1a006438 	.word	0x1a006438

1a005268 <memcpy>:
1a005268:	b510      	push	{r4, lr}
1a00526a:	1e43      	subs	r3, r0, #1
1a00526c:	440a      	add	r2, r1
1a00526e:	4291      	cmp	r1, r2
1a005270:	d100      	bne.n	1a005274 <memcpy+0xc>
1a005272:	bd10      	pop	{r4, pc}
1a005274:	f811 4b01 	ldrb.w	r4, [r1], #1
1a005278:	f803 4f01 	strb.w	r4, [r3, #1]!
1a00527c:	e7f7      	b.n	1a00526e <memcpy+0x6>

1a00527e <memset>:
1a00527e:	4402      	add	r2, r0
1a005280:	4603      	mov	r3, r0
1a005282:	4293      	cmp	r3, r2
1a005284:	d100      	bne.n	1a005288 <memset+0xa>
1a005286:	4770      	bx	lr
1a005288:	f803 1b01 	strb.w	r1, [r3], #1
1a00528c:	e7f9      	b.n	1a005282 <memset+0x4>
1a00528e:	Address 0x000000001a00528e is out of bounds.


1a005290 <_free_r>:
1a005290:	b538      	push	{r3, r4, r5, lr}
1a005292:	4605      	mov	r5, r0
1a005294:	2900      	cmp	r1, #0
1a005296:	d045      	beq.n	1a005324 <_free_r+0x94>
1a005298:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a00529c:	1f0c      	subs	r4, r1, #4
1a00529e:	2b00      	cmp	r3, #0
1a0052a0:	bfb8      	it	lt
1a0052a2:	18e4      	addlt	r4, r4, r3
1a0052a4:	f000 fa80 	bl	1a0057a8 <__malloc_lock>
1a0052a8:	4a1f      	ldr	r2, [pc, #124]	; (1a005328 <_free_r+0x98>)
1a0052aa:	6813      	ldr	r3, [r2, #0]
1a0052ac:	4610      	mov	r0, r2
1a0052ae:	b933      	cbnz	r3, 1a0052be <_free_r+0x2e>
1a0052b0:	6063      	str	r3, [r4, #4]
1a0052b2:	6014      	str	r4, [r2, #0]
1a0052b4:	4628      	mov	r0, r5
1a0052b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0052ba:	f000 ba76 	b.w	1a0057aa <__malloc_unlock>
1a0052be:	42a3      	cmp	r3, r4
1a0052c0:	d90c      	bls.n	1a0052dc <_free_r+0x4c>
1a0052c2:	6821      	ldr	r1, [r4, #0]
1a0052c4:	1862      	adds	r2, r4, r1
1a0052c6:	4293      	cmp	r3, r2
1a0052c8:	bf04      	itt	eq
1a0052ca:	681a      	ldreq	r2, [r3, #0]
1a0052cc:	685b      	ldreq	r3, [r3, #4]
1a0052ce:	6063      	str	r3, [r4, #4]
1a0052d0:	bf04      	itt	eq
1a0052d2:	1852      	addeq	r2, r2, r1
1a0052d4:	6022      	streq	r2, [r4, #0]
1a0052d6:	6004      	str	r4, [r0, #0]
1a0052d8:	e7ec      	b.n	1a0052b4 <_free_r+0x24>
1a0052da:	4613      	mov	r3, r2
1a0052dc:	685a      	ldr	r2, [r3, #4]
1a0052de:	b10a      	cbz	r2, 1a0052e4 <_free_r+0x54>
1a0052e0:	42a2      	cmp	r2, r4
1a0052e2:	d9fa      	bls.n	1a0052da <_free_r+0x4a>
1a0052e4:	6819      	ldr	r1, [r3, #0]
1a0052e6:	1858      	adds	r0, r3, r1
1a0052e8:	42a0      	cmp	r0, r4
1a0052ea:	d10b      	bne.n	1a005304 <_free_r+0x74>
1a0052ec:	6820      	ldr	r0, [r4, #0]
1a0052ee:	4401      	add	r1, r0
1a0052f0:	1858      	adds	r0, r3, r1
1a0052f2:	4282      	cmp	r2, r0
1a0052f4:	6019      	str	r1, [r3, #0]
1a0052f6:	d1dd      	bne.n	1a0052b4 <_free_r+0x24>
1a0052f8:	6810      	ldr	r0, [r2, #0]
1a0052fa:	6852      	ldr	r2, [r2, #4]
1a0052fc:	605a      	str	r2, [r3, #4]
1a0052fe:	4401      	add	r1, r0
1a005300:	6019      	str	r1, [r3, #0]
1a005302:	e7d7      	b.n	1a0052b4 <_free_r+0x24>
1a005304:	d902      	bls.n	1a00530c <_free_r+0x7c>
1a005306:	230c      	movs	r3, #12
1a005308:	602b      	str	r3, [r5, #0]
1a00530a:	e7d3      	b.n	1a0052b4 <_free_r+0x24>
1a00530c:	6820      	ldr	r0, [r4, #0]
1a00530e:	1821      	adds	r1, r4, r0
1a005310:	428a      	cmp	r2, r1
1a005312:	bf04      	itt	eq
1a005314:	6811      	ldreq	r1, [r2, #0]
1a005316:	6852      	ldreq	r2, [r2, #4]
1a005318:	6062      	str	r2, [r4, #4]
1a00531a:	bf04      	itt	eq
1a00531c:	1809      	addeq	r1, r1, r0
1a00531e:	6021      	streq	r1, [r4, #0]
1a005320:	605c      	str	r4, [r3, #4]
1a005322:	e7c7      	b.n	1a0052b4 <_free_r+0x24>
1a005324:	bd38      	pop	{r3, r4, r5, pc}
1a005326:	bf00      	nop
1a005328:	10002b3c 	.word	0x10002b3c

1a00532c <_malloc_r>:
1a00532c:	b570      	push	{r4, r5, r6, lr}
1a00532e:	1ccd      	adds	r5, r1, #3
1a005330:	f025 0503 	bic.w	r5, r5, #3
1a005334:	3508      	adds	r5, #8
1a005336:	2d0c      	cmp	r5, #12
1a005338:	bf38      	it	cc
1a00533a:	250c      	movcc	r5, #12
1a00533c:	2d00      	cmp	r5, #0
1a00533e:	4606      	mov	r6, r0
1a005340:	db01      	blt.n	1a005346 <_malloc_r+0x1a>
1a005342:	42a9      	cmp	r1, r5
1a005344:	d903      	bls.n	1a00534e <_malloc_r+0x22>
1a005346:	230c      	movs	r3, #12
1a005348:	6033      	str	r3, [r6, #0]
1a00534a:	2000      	movs	r0, #0
1a00534c:	bd70      	pop	{r4, r5, r6, pc}
1a00534e:	f000 fa2b 	bl	1a0057a8 <__malloc_lock>
1a005352:	4a21      	ldr	r2, [pc, #132]	; (1a0053d8 <_malloc_r+0xac>)
1a005354:	6814      	ldr	r4, [r2, #0]
1a005356:	4621      	mov	r1, r4
1a005358:	b991      	cbnz	r1, 1a005380 <_malloc_r+0x54>
1a00535a:	4c20      	ldr	r4, [pc, #128]	; (1a0053dc <_malloc_r+0xb0>)
1a00535c:	6823      	ldr	r3, [r4, #0]
1a00535e:	b91b      	cbnz	r3, 1a005368 <_malloc_r+0x3c>
1a005360:	4630      	mov	r0, r6
1a005362:	f7fb fccd 	bl	1a000d00 <_sbrk_r>
1a005366:	6020      	str	r0, [r4, #0]
1a005368:	4629      	mov	r1, r5
1a00536a:	4630      	mov	r0, r6
1a00536c:	f7fb fcc8 	bl	1a000d00 <_sbrk_r>
1a005370:	1c43      	adds	r3, r0, #1
1a005372:	d124      	bne.n	1a0053be <_malloc_r+0x92>
1a005374:	230c      	movs	r3, #12
1a005376:	6033      	str	r3, [r6, #0]
1a005378:	4630      	mov	r0, r6
1a00537a:	f000 fa16 	bl	1a0057aa <__malloc_unlock>
1a00537e:	e7e4      	b.n	1a00534a <_malloc_r+0x1e>
1a005380:	680b      	ldr	r3, [r1, #0]
1a005382:	1b5b      	subs	r3, r3, r5
1a005384:	d418      	bmi.n	1a0053b8 <_malloc_r+0x8c>
1a005386:	2b0b      	cmp	r3, #11
1a005388:	d90f      	bls.n	1a0053aa <_malloc_r+0x7e>
1a00538a:	600b      	str	r3, [r1, #0]
1a00538c:	50cd      	str	r5, [r1, r3]
1a00538e:	18cc      	adds	r4, r1, r3
1a005390:	4630      	mov	r0, r6
1a005392:	f000 fa0a 	bl	1a0057aa <__malloc_unlock>
1a005396:	f104 000b 	add.w	r0, r4, #11
1a00539a:	1d23      	adds	r3, r4, #4
1a00539c:	f020 0007 	bic.w	r0, r0, #7
1a0053a0:	1ac3      	subs	r3, r0, r3
1a0053a2:	d0d3      	beq.n	1a00534c <_malloc_r+0x20>
1a0053a4:	425a      	negs	r2, r3
1a0053a6:	50e2      	str	r2, [r4, r3]
1a0053a8:	e7d0      	b.n	1a00534c <_malloc_r+0x20>
1a0053aa:	428c      	cmp	r4, r1
1a0053ac:	684b      	ldr	r3, [r1, #4]
1a0053ae:	bf16      	itet	ne
1a0053b0:	6063      	strne	r3, [r4, #4]
1a0053b2:	6013      	streq	r3, [r2, #0]
1a0053b4:	460c      	movne	r4, r1
1a0053b6:	e7eb      	b.n	1a005390 <_malloc_r+0x64>
1a0053b8:	460c      	mov	r4, r1
1a0053ba:	6849      	ldr	r1, [r1, #4]
1a0053bc:	e7cc      	b.n	1a005358 <_malloc_r+0x2c>
1a0053be:	1cc4      	adds	r4, r0, #3
1a0053c0:	f024 0403 	bic.w	r4, r4, #3
1a0053c4:	42a0      	cmp	r0, r4
1a0053c6:	d005      	beq.n	1a0053d4 <_malloc_r+0xa8>
1a0053c8:	1a21      	subs	r1, r4, r0
1a0053ca:	4630      	mov	r0, r6
1a0053cc:	f7fb fc98 	bl	1a000d00 <_sbrk_r>
1a0053d0:	3001      	adds	r0, #1
1a0053d2:	d0cf      	beq.n	1a005374 <_malloc_r+0x48>
1a0053d4:	6025      	str	r5, [r4, #0]
1a0053d6:	e7db      	b.n	1a005390 <_malloc_r+0x64>
1a0053d8:	10002b3c 	.word	0x10002b3c
1a0053dc:	10002b40 	.word	0x10002b40

1a0053e0 <iprintf>:
1a0053e0:	b40f      	push	{r0, r1, r2, r3}
1a0053e2:	4b0a      	ldr	r3, [pc, #40]	; (1a00540c <iprintf+0x2c>)
1a0053e4:	b513      	push	{r0, r1, r4, lr}
1a0053e6:	681c      	ldr	r4, [r3, #0]
1a0053e8:	b124      	cbz	r4, 1a0053f4 <iprintf+0x14>
1a0053ea:	69a3      	ldr	r3, [r4, #24]
1a0053ec:	b913      	cbnz	r3, 1a0053f4 <iprintf+0x14>
1a0053ee:	4620      	mov	r0, r4
1a0053f0:	f7ff fe8c 	bl	1a00510c <__sinit>
1a0053f4:	ab05      	add	r3, sp, #20
1a0053f6:	9a04      	ldr	r2, [sp, #16]
1a0053f8:	68a1      	ldr	r1, [r4, #8]
1a0053fa:	9301      	str	r3, [sp, #4]
1a0053fc:	4620      	mov	r0, r4
1a0053fe:	f000 f9ff 	bl	1a005800 <_vfiprintf_r>
1a005402:	b002      	add	sp, #8
1a005404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a005408:	b004      	add	sp, #16
1a00540a:	4770      	bx	lr
1a00540c:	10000050 	.word	0x10000050

1a005410 <_puts_r>:
1a005410:	b570      	push	{r4, r5, r6, lr}
1a005412:	460e      	mov	r6, r1
1a005414:	4605      	mov	r5, r0
1a005416:	b118      	cbz	r0, 1a005420 <_puts_r+0x10>
1a005418:	6983      	ldr	r3, [r0, #24]
1a00541a:	b90b      	cbnz	r3, 1a005420 <_puts_r+0x10>
1a00541c:	f7ff fe76 	bl	1a00510c <__sinit>
1a005420:	69ab      	ldr	r3, [r5, #24]
1a005422:	68ac      	ldr	r4, [r5, #8]
1a005424:	b913      	cbnz	r3, 1a00542c <_puts_r+0x1c>
1a005426:	4628      	mov	r0, r5
1a005428:	f7ff fe70 	bl	1a00510c <__sinit>
1a00542c:	4b23      	ldr	r3, [pc, #140]	; (1a0054bc <_puts_r+0xac>)
1a00542e:	429c      	cmp	r4, r3
1a005430:	d117      	bne.n	1a005462 <_puts_r+0x52>
1a005432:	686c      	ldr	r4, [r5, #4]
1a005434:	89a3      	ldrh	r3, [r4, #12]
1a005436:	071b      	lsls	r3, r3, #28
1a005438:	d51d      	bpl.n	1a005476 <_puts_r+0x66>
1a00543a:	6923      	ldr	r3, [r4, #16]
1a00543c:	b1db      	cbz	r3, 1a005476 <_puts_r+0x66>
1a00543e:	3e01      	subs	r6, #1
1a005440:	68a3      	ldr	r3, [r4, #8]
1a005442:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a005446:	3b01      	subs	r3, #1
1a005448:	60a3      	str	r3, [r4, #8]
1a00544a:	b9e9      	cbnz	r1, 1a005488 <_puts_r+0x78>
1a00544c:	2b00      	cmp	r3, #0
1a00544e:	da2e      	bge.n	1a0054ae <_puts_r+0x9e>
1a005450:	4622      	mov	r2, r4
1a005452:	210a      	movs	r1, #10
1a005454:	4628      	mov	r0, r5
1a005456:	f000 f883 	bl	1a005560 <__swbuf_r>
1a00545a:	3001      	adds	r0, #1
1a00545c:	d011      	beq.n	1a005482 <_puts_r+0x72>
1a00545e:	200a      	movs	r0, #10
1a005460:	e011      	b.n	1a005486 <_puts_r+0x76>
1a005462:	4b17      	ldr	r3, [pc, #92]	; (1a0054c0 <_puts_r+0xb0>)
1a005464:	429c      	cmp	r4, r3
1a005466:	d101      	bne.n	1a00546c <_puts_r+0x5c>
1a005468:	68ac      	ldr	r4, [r5, #8]
1a00546a:	e7e3      	b.n	1a005434 <_puts_r+0x24>
1a00546c:	4b15      	ldr	r3, [pc, #84]	; (1a0054c4 <_puts_r+0xb4>)
1a00546e:	429c      	cmp	r4, r3
1a005470:	bf08      	it	eq
1a005472:	68ec      	ldreq	r4, [r5, #12]
1a005474:	e7de      	b.n	1a005434 <_puts_r+0x24>
1a005476:	4621      	mov	r1, r4
1a005478:	4628      	mov	r0, r5
1a00547a:	f000 f8c3 	bl	1a005604 <__swsetup_r>
1a00547e:	2800      	cmp	r0, #0
1a005480:	d0dd      	beq.n	1a00543e <_puts_r+0x2e>
1a005482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005486:	bd70      	pop	{r4, r5, r6, pc}
1a005488:	2b00      	cmp	r3, #0
1a00548a:	da04      	bge.n	1a005496 <_puts_r+0x86>
1a00548c:	69a2      	ldr	r2, [r4, #24]
1a00548e:	429a      	cmp	r2, r3
1a005490:	dc06      	bgt.n	1a0054a0 <_puts_r+0x90>
1a005492:	290a      	cmp	r1, #10
1a005494:	d004      	beq.n	1a0054a0 <_puts_r+0x90>
1a005496:	6823      	ldr	r3, [r4, #0]
1a005498:	1c5a      	adds	r2, r3, #1
1a00549a:	6022      	str	r2, [r4, #0]
1a00549c:	7019      	strb	r1, [r3, #0]
1a00549e:	e7cf      	b.n	1a005440 <_puts_r+0x30>
1a0054a0:	4622      	mov	r2, r4
1a0054a2:	4628      	mov	r0, r5
1a0054a4:	f000 f85c 	bl	1a005560 <__swbuf_r>
1a0054a8:	3001      	adds	r0, #1
1a0054aa:	d1c9      	bne.n	1a005440 <_puts_r+0x30>
1a0054ac:	e7e9      	b.n	1a005482 <_puts_r+0x72>
1a0054ae:	6823      	ldr	r3, [r4, #0]
1a0054b0:	200a      	movs	r0, #10
1a0054b2:	1c5a      	adds	r2, r3, #1
1a0054b4:	6022      	str	r2, [r4, #0]
1a0054b6:	7018      	strb	r0, [r3, #0]
1a0054b8:	e7e5      	b.n	1a005486 <_puts_r+0x76>
1a0054ba:	bf00      	nop
1a0054bc:	1a0063bc 	.word	0x1a0063bc
1a0054c0:	1a0063dc 	.word	0x1a0063dc
1a0054c4:	1a00639c 	.word	0x1a00639c

1a0054c8 <puts>:
1a0054c8:	4b02      	ldr	r3, [pc, #8]	; (1a0054d4 <puts+0xc>)
1a0054ca:	4601      	mov	r1, r0
1a0054cc:	6818      	ldr	r0, [r3, #0]
1a0054ce:	f7ff bf9f 	b.w	1a005410 <_puts_r>
1a0054d2:	bf00      	nop
1a0054d4:	10000050 	.word	0x10000050

1a0054d8 <__sread>:
1a0054d8:	b510      	push	{r4, lr}
1a0054da:	460c      	mov	r4, r1
1a0054dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0054e0:	f7fb fbd2 	bl	1a000c88 <_read_r>
1a0054e4:	2800      	cmp	r0, #0
1a0054e6:	bfab      	itete	ge
1a0054e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a0054ea:	89a3      	ldrhlt	r3, [r4, #12]
1a0054ec:	181b      	addge	r3, r3, r0
1a0054ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a0054f2:	bfac      	ite	ge
1a0054f4:	6563      	strge	r3, [r4, #84]	; 0x54
1a0054f6:	81a3      	strhlt	r3, [r4, #12]
1a0054f8:	bd10      	pop	{r4, pc}

1a0054fa <__swrite>:
1a0054fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0054fe:	461f      	mov	r7, r3
1a005500:	898b      	ldrh	r3, [r1, #12]
1a005502:	05db      	lsls	r3, r3, #23
1a005504:	4605      	mov	r5, r0
1a005506:	460c      	mov	r4, r1
1a005508:	4616      	mov	r6, r2
1a00550a:	d505      	bpl.n	1a005518 <__swrite+0x1e>
1a00550c:	2302      	movs	r3, #2
1a00550e:	2200      	movs	r2, #0
1a005510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005514:	f7fb fbb3 	bl	1a000c7e <_lseek_r>
1a005518:	89a3      	ldrh	r3, [r4, #12]
1a00551a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a00551e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a005522:	81a3      	strh	r3, [r4, #12]
1a005524:	4632      	mov	r2, r6
1a005526:	463b      	mov	r3, r7
1a005528:	4628      	mov	r0, r5
1a00552a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a00552e:	f7fb bbd2 	b.w	1a000cd6 <_write_r>

1a005532 <__sseek>:
1a005532:	b510      	push	{r4, lr}
1a005534:	460c      	mov	r4, r1
1a005536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00553a:	f7fb fba0 	bl	1a000c7e <_lseek_r>
1a00553e:	1c43      	adds	r3, r0, #1
1a005540:	89a3      	ldrh	r3, [r4, #12]
1a005542:	bf15      	itete	ne
1a005544:	6560      	strne	r0, [r4, #84]	; 0x54
1a005546:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a00554a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a00554e:	81a3      	strheq	r3, [r4, #12]
1a005550:	bf18      	it	ne
1a005552:	81a3      	strhne	r3, [r4, #12]
1a005554:	bd10      	pop	{r4, pc}

1a005556 <__sclose>:
1a005556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00555a:	f7fb bb7d 	b.w	1a000c58 <_close_r>
1a00555e:	Address 0x000000001a00555e is out of bounds.


1a005560 <__swbuf_r>:
1a005560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005562:	460e      	mov	r6, r1
1a005564:	4614      	mov	r4, r2
1a005566:	4605      	mov	r5, r0
1a005568:	b118      	cbz	r0, 1a005572 <__swbuf_r+0x12>
1a00556a:	6983      	ldr	r3, [r0, #24]
1a00556c:	b90b      	cbnz	r3, 1a005572 <__swbuf_r+0x12>
1a00556e:	f7ff fdcd 	bl	1a00510c <__sinit>
1a005572:	4b21      	ldr	r3, [pc, #132]	; (1a0055f8 <__swbuf_r+0x98>)
1a005574:	429c      	cmp	r4, r3
1a005576:	d12a      	bne.n	1a0055ce <__swbuf_r+0x6e>
1a005578:	686c      	ldr	r4, [r5, #4]
1a00557a:	69a3      	ldr	r3, [r4, #24]
1a00557c:	60a3      	str	r3, [r4, #8]
1a00557e:	89a3      	ldrh	r3, [r4, #12]
1a005580:	071a      	lsls	r2, r3, #28
1a005582:	d52e      	bpl.n	1a0055e2 <__swbuf_r+0x82>
1a005584:	6923      	ldr	r3, [r4, #16]
1a005586:	b363      	cbz	r3, 1a0055e2 <__swbuf_r+0x82>
1a005588:	6923      	ldr	r3, [r4, #16]
1a00558a:	6820      	ldr	r0, [r4, #0]
1a00558c:	1ac0      	subs	r0, r0, r3
1a00558e:	6963      	ldr	r3, [r4, #20]
1a005590:	b2f6      	uxtb	r6, r6
1a005592:	4283      	cmp	r3, r0
1a005594:	4637      	mov	r7, r6
1a005596:	dc04      	bgt.n	1a0055a2 <__swbuf_r+0x42>
1a005598:	4621      	mov	r1, r4
1a00559a:	4628      	mov	r0, r5
1a00559c:	f7ff fd4c 	bl	1a005038 <_fflush_r>
1a0055a0:	bb28      	cbnz	r0, 1a0055ee <__swbuf_r+0x8e>
1a0055a2:	68a3      	ldr	r3, [r4, #8]
1a0055a4:	3b01      	subs	r3, #1
1a0055a6:	60a3      	str	r3, [r4, #8]
1a0055a8:	6823      	ldr	r3, [r4, #0]
1a0055aa:	1c5a      	adds	r2, r3, #1
1a0055ac:	6022      	str	r2, [r4, #0]
1a0055ae:	701e      	strb	r6, [r3, #0]
1a0055b0:	6963      	ldr	r3, [r4, #20]
1a0055b2:	3001      	adds	r0, #1
1a0055b4:	4283      	cmp	r3, r0
1a0055b6:	d004      	beq.n	1a0055c2 <__swbuf_r+0x62>
1a0055b8:	89a3      	ldrh	r3, [r4, #12]
1a0055ba:	07db      	lsls	r3, r3, #31
1a0055bc:	d519      	bpl.n	1a0055f2 <__swbuf_r+0x92>
1a0055be:	2e0a      	cmp	r6, #10
1a0055c0:	d117      	bne.n	1a0055f2 <__swbuf_r+0x92>
1a0055c2:	4621      	mov	r1, r4
1a0055c4:	4628      	mov	r0, r5
1a0055c6:	f7ff fd37 	bl	1a005038 <_fflush_r>
1a0055ca:	b190      	cbz	r0, 1a0055f2 <__swbuf_r+0x92>
1a0055cc:	e00f      	b.n	1a0055ee <__swbuf_r+0x8e>
1a0055ce:	4b0b      	ldr	r3, [pc, #44]	; (1a0055fc <__swbuf_r+0x9c>)
1a0055d0:	429c      	cmp	r4, r3
1a0055d2:	d101      	bne.n	1a0055d8 <__swbuf_r+0x78>
1a0055d4:	68ac      	ldr	r4, [r5, #8]
1a0055d6:	e7d0      	b.n	1a00557a <__swbuf_r+0x1a>
1a0055d8:	4b09      	ldr	r3, [pc, #36]	; (1a005600 <__swbuf_r+0xa0>)
1a0055da:	429c      	cmp	r4, r3
1a0055dc:	bf08      	it	eq
1a0055de:	68ec      	ldreq	r4, [r5, #12]
1a0055e0:	e7cb      	b.n	1a00557a <__swbuf_r+0x1a>
1a0055e2:	4621      	mov	r1, r4
1a0055e4:	4628      	mov	r0, r5
1a0055e6:	f000 f80d 	bl	1a005604 <__swsetup_r>
1a0055ea:	2800      	cmp	r0, #0
1a0055ec:	d0cc      	beq.n	1a005588 <__swbuf_r+0x28>
1a0055ee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a0055f2:	4638      	mov	r0, r7
1a0055f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0055f6:	bf00      	nop
1a0055f8:	1a0063bc 	.word	0x1a0063bc
1a0055fc:	1a0063dc 	.word	0x1a0063dc
1a005600:	1a00639c 	.word	0x1a00639c

1a005604 <__swsetup_r>:
1a005604:	4b32      	ldr	r3, [pc, #200]	; (1a0056d0 <__swsetup_r+0xcc>)
1a005606:	b570      	push	{r4, r5, r6, lr}
1a005608:	681d      	ldr	r5, [r3, #0]
1a00560a:	4606      	mov	r6, r0
1a00560c:	460c      	mov	r4, r1
1a00560e:	b125      	cbz	r5, 1a00561a <__swsetup_r+0x16>
1a005610:	69ab      	ldr	r3, [r5, #24]
1a005612:	b913      	cbnz	r3, 1a00561a <__swsetup_r+0x16>
1a005614:	4628      	mov	r0, r5
1a005616:	f7ff fd79 	bl	1a00510c <__sinit>
1a00561a:	4b2e      	ldr	r3, [pc, #184]	; (1a0056d4 <__swsetup_r+0xd0>)
1a00561c:	429c      	cmp	r4, r3
1a00561e:	d10f      	bne.n	1a005640 <__swsetup_r+0x3c>
1a005620:	686c      	ldr	r4, [r5, #4]
1a005622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005626:	b29a      	uxth	r2, r3
1a005628:	0715      	lsls	r5, r2, #28
1a00562a:	d42c      	bmi.n	1a005686 <__swsetup_r+0x82>
1a00562c:	06d0      	lsls	r0, r2, #27
1a00562e:	d411      	bmi.n	1a005654 <__swsetup_r+0x50>
1a005630:	2209      	movs	r2, #9
1a005632:	6032      	str	r2, [r6, #0]
1a005634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005638:	81a3      	strh	r3, [r4, #12]
1a00563a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00563e:	e03e      	b.n	1a0056be <__swsetup_r+0xba>
1a005640:	4b25      	ldr	r3, [pc, #148]	; (1a0056d8 <__swsetup_r+0xd4>)
1a005642:	429c      	cmp	r4, r3
1a005644:	d101      	bne.n	1a00564a <__swsetup_r+0x46>
1a005646:	68ac      	ldr	r4, [r5, #8]
1a005648:	e7eb      	b.n	1a005622 <__swsetup_r+0x1e>
1a00564a:	4b24      	ldr	r3, [pc, #144]	; (1a0056dc <__swsetup_r+0xd8>)
1a00564c:	429c      	cmp	r4, r3
1a00564e:	bf08      	it	eq
1a005650:	68ec      	ldreq	r4, [r5, #12]
1a005652:	e7e6      	b.n	1a005622 <__swsetup_r+0x1e>
1a005654:	0751      	lsls	r1, r2, #29
1a005656:	d512      	bpl.n	1a00567e <__swsetup_r+0x7a>
1a005658:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a00565a:	b141      	cbz	r1, 1a00566e <__swsetup_r+0x6a>
1a00565c:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a005660:	4299      	cmp	r1, r3
1a005662:	d002      	beq.n	1a00566a <__swsetup_r+0x66>
1a005664:	4630      	mov	r0, r6
1a005666:	f7ff fe13 	bl	1a005290 <_free_r>
1a00566a:	2300      	movs	r3, #0
1a00566c:	6363      	str	r3, [r4, #52]	; 0x34
1a00566e:	89a3      	ldrh	r3, [r4, #12]
1a005670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a005674:	81a3      	strh	r3, [r4, #12]
1a005676:	2300      	movs	r3, #0
1a005678:	6063      	str	r3, [r4, #4]
1a00567a:	6923      	ldr	r3, [r4, #16]
1a00567c:	6023      	str	r3, [r4, #0]
1a00567e:	89a3      	ldrh	r3, [r4, #12]
1a005680:	f043 0308 	orr.w	r3, r3, #8
1a005684:	81a3      	strh	r3, [r4, #12]
1a005686:	6923      	ldr	r3, [r4, #16]
1a005688:	b94b      	cbnz	r3, 1a00569e <__swsetup_r+0x9a>
1a00568a:	89a3      	ldrh	r3, [r4, #12]
1a00568c:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a005690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a005694:	d003      	beq.n	1a00569e <__swsetup_r+0x9a>
1a005696:	4621      	mov	r1, r4
1a005698:	4630      	mov	r0, r6
1a00569a:	f000 f845 	bl	1a005728 <__smakebuf_r>
1a00569e:	89a2      	ldrh	r2, [r4, #12]
1a0056a0:	f012 0301 	ands.w	r3, r2, #1
1a0056a4:	d00c      	beq.n	1a0056c0 <__swsetup_r+0xbc>
1a0056a6:	2300      	movs	r3, #0
1a0056a8:	60a3      	str	r3, [r4, #8]
1a0056aa:	6963      	ldr	r3, [r4, #20]
1a0056ac:	425b      	negs	r3, r3
1a0056ae:	61a3      	str	r3, [r4, #24]
1a0056b0:	6923      	ldr	r3, [r4, #16]
1a0056b2:	b953      	cbnz	r3, 1a0056ca <__swsetup_r+0xc6>
1a0056b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0056b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a0056bc:	d1ba      	bne.n	1a005634 <__swsetup_r+0x30>
1a0056be:	bd70      	pop	{r4, r5, r6, pc}
1a0056c0:	0792      	lsls	r2, r2, #30
1a0056c2:	bf58      	it	pl
1a0056c4:	6963      	ldrpl	r3, [r4, #20]
1a0056c6:	60a3      	str	r3, [r4, #8]
1a0056c8:	e7f2      	b.n	1a0056b0 <__swsetup_r+0xac>
1a0056ca:	2000      	movs	r0, #0
1a0056cc:	e7f7      	b.n	1a0056be <__swsetup_r+0xba>
1a0056ce:	bf00      	nop
1a0056d0:	10000050 	.word	0x10000050
1a0056d4:	1a0063bc 	.word	0x1a0063bc
1a0056d8:	1a0063dc 	.word	0x1a0063dc
1a0056dc:	1a00639c 	.word	0x1a00639c

1a0056e0 <__swhatbuf_r>:
1a0056e0:	b570      	push	{r4, r5, r6, lr}
1a0056e2:	460e      	mov	r6, r1
1a0056e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0056e8:	2900      	cmp	r1, #0
1a0056ea:	b096      	sub	sp, #88	; 0x58
1a0056ec:	4614      	mov	r4, r2
1a0056ee:	461d      	mov	r5, r3
1a0056f0:	da07      	bge.n	1a005702 <__swhatbuf_r+0x22>
1a0056f2:	2300      	movs	r3, #0
1a0056f4:	602b      	str	r3, [r5, #0]
1a0056f6:	89b3      	ldrh	r3, [r6, #12]
1a0056f8:	061a      	lsls	r2, r3, #24
1a0056fa:	d410      	bmi.n	1a00571e <__swhatbuf_r+0x3e>
1a0056fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a005700:	e00e      	b.n	1a005720 <__swhatbuf_r+0x40>
1a005702:	466a      	mov	r2, sp
1a005704:	f7fb faad 	bl	1a000c62 <_fstat_r>
1a005708:	2800      	cmp	r0, #0
1a00570a:	dbf2      	blt.n	1a0056f2 <__swhatbuf_r+0x12>
1a00570c:	9a01      	ldr	r2, [sp, #4]
1a00570e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a005712:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a005716:	425a      	negs	r2, r3
1a005718:	415a      	adcs	r2, r3
1a00571a:	602a      	str	r2, [r5, #0]
1a00571c:	e7ee      	b.n	1a0056fc <__swhatbuf_r+0x1c>
1a00571e:	2340      	movs	r3, #64	; 0x40
1a005720:	2000      	movs	r0, #0
1a005722:	6023      	str	r3, [r4, #0]
1a005724:	b016      	add	sp, #88	; 0x58
1a005726:	bd70      	pop	{r4, r5, r6, pc}

1a005728 <__smakebuf_r>:
1a005728:	898b      	ldrh	r3, [r1, #12]
1a00572a:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a00572c:	079d      	lsls	r5, r3, #30
1a00572e:	4606      	mov	r6, r0
1a005730:	460c      	mov	r4, r1
1a005732:	d507      	bpl.n	1a005744 <__smakebuf_r+0x1c>
1a005734:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a005738:	6023      	str	r3, [r4, #0]
1a00573a:	6123      	str	r3, [r4, #16]
1a00573c:	2301      	movs	r3, #1
1a00573e:	6163      	str	r3, [r4, #20]
1a005740:	b002      	add	sp, #8
1a005742:	bd70      	pop	{r4, r5, r6, pc}
1a005744:	ab01      	add	r3, sp, #4
1a005746:	466a      	mov	r2, sp
1a005748:	f7ff ffca 	bl	1a0056e0 <__swhatbuf_r>
1a00574c:	9900      	ldr	r1, [sp, #0]
1a00574e:	4605      	mov	r5, r0
1a005750:	4630      	mov	r0, r6
1a005752:	f7ff fdeb 	bl	1a00532c <_malloc_r>
1a005756:	b948      	cbnz	r0, 1a00576c <__smakebuf_r+0x44>
1a005758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00575c:	059a      	lsls	r2, r3, #22
1a00575e:	d4ef      	bmi.n	1a005740 <__smakebuf_r+0x18>
1a005760:	f023 0303 	bic.w	r3, r3, #3
1a005764:	f043 0302 	orr.w	r3, r3, #2
1a005768:	81a3      	strh	r3, [r4, #12]
1a00576a:	e7e3      	b.n	1a005734 <__smakebuf_r+0xc>
1a00576c:	4b0d      	ldr	r3, [pc, #52]	; (1a0057a4 <__smakebuf_r+0x7c>)
1a00576e:	62b3      	str	r3, [r6, #40]	; 0x28
1a005770:	89a3      	ldrh	r3, [r4, #12]
1a005772:	6020      	str	r0, [r4, #0]
1a005774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a005778:	81a3      	strh	r3, [r4, #12]
1a00577a:	9b00      	ldr	r3, [sp, #0]
1a00577c:	6163      	str	r3, [r4, #20]
1a00577e:	9b01      	ldr	r3, [sp, #4]
1a005780:	6120      	str	r0, [r4, #16]
1a005782:	b15b      	cbz	r3, 1a00579c <__smakebuf_r+0x74>
1a005784:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a005788:	4630      	mov	r0, r6
1a00578a:	f7fb fa6f 	bl	1a000c6c <_isatty_r>
1a00578e:	b128      	cbz	r0, 1a00579c <__smakebuf_r+0x74>
1a005790:	89a3      	ldrh	r3, [r4, #12]
1a005792:	f023 0303 	bic.w	r3, r3, #3
1a005796:	f043 0301 	orr.w	r3, r3, #1
1a00579a:	81a3      	strh	r3, [r4, #12]
1a00579c:	89a3      	ldrh	r3, [r4, #12]
1a00579e:	431d      	orrs	r5, r3
1a0057a0:	81a5      	strh	r5, [r4, #12]
1a0057a2:	e7cd      	b.n	1a005740 <__smakebuf_r+0x18>
1a0057a4:	1a0050d5 	.word	0x1a0050d5

1a0057a8 <__malloc_lock>:
1a0057a8:	4770      	bx	lr

1a0057aa <__malloc_unlock>:
1a0057aa:	4770      	bx	lr

1a0057ac <__sfputc_r>:
1a0057ac:	6893      	ldr	r3, [r2, #8]
1a0057ae:	3b01      	subs	r3, #1
1a0057b0:	2b00      	cmp	r3, #0
1a0057b2:	b410      	push	{r4}
1a0057b4:	6093      	str	r3, [r2, #8]
1a0057b6:	da08      	bge.n	1a0057ca <__sfputc_r+0x1e>
1a0057b8:	6994      	ldr	r4, [r2, #24]
1a0057ba:	42a3      	cmp	r3, r4
1a0057bc:	db01      	blt.n	1a0057c2 <__sfputc_r+0x16>
1a0057be:	290a      	cmp	r1, #10
1a0057c0:	d103      	bne.n	1a0057ca <__sfputc_r+0x1e>
1a0057c2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0057c6:	f7ff becb 	b.w	1a005560 <__swbuf_r>
1a0057ca:	6813      	ldr	r3, [r2, #0]
1a0057cc:	1c58      	adds	r0, r3, #1
1a0057ce:	6010      	str	r0, [r2, #0]
1a0057d0:	7019      	strb	r1, [r3, #0]
1a0057d2:	4608      	mov	r0, r1
1a0057d4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0057d8:	4770      	bx	lr

1a0057da <__sfputs_r>:
1a0057da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0057dc:	4606      	mov	r6, r0
1a0057de:	460f      	mov	r7, r1
1a0057e0:	4614      	mov	r4, r2
1a0057e2:	18d5      	adds	r5, r2, r3
1a0057e4:	42ac      	cmp	r4, r5
1a0057e6:	d101      	bne.n	1a0057ec <__sfputs_r+0x12>
1a0057e8:	2000      	movs	r0, #0
1a0057ea:	e007      	b.n	1a0057fc <__sfputs_r+0x22>
1a0057ec:	463a      	mov	r2, r7
1a0057ee:	f814 1b01 	ldrb.w	r1, [r4], #1
1a0057f2:	4630      	mov	r0, r6
1a0057f4:	f7ff ffda 	bl	1a0057ac <__sfputc_r>
1a0057f8:	1c43      	adds	r3, r0, #1
1a0057fa:	d1f3      	bne.n	1a0057e4 <__sfputs_r+0xa>
1a0057fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0057fe:	Address 0x000000001a0057fe is out of bounds.


1a005800 <_vfiprintf_r>:
1a005800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005804:	460c      	mov	r4, r1
1a005806:	b09d      	sub	sp, #116	; 0x74
1a005808:	4617      	mov	r7, r2
1a00580a:	461d      	mov	r5, r3
1a00580c:	4606      	mov	r6, r0
1a00580e:	b118      	cbz	r0, 1a005818 <_vfiprintf_r+0x18>
1a005810:	6983      	ldr	r3, [r0, #24]
1a005812:	b90b      	cbnz	r3, 1a005818 <_vfiprintf_r+0x18>
1a005814:	f7ff fc7a 	bl	1a00510c <__sinit>
1a005818:	4b7c      	ldr	r3, [pc, #496]	; (1a005a0c <_vfiprintf_r+0x20c>)
1a00581a:	429c      	cmp	r4, r3
1a00581c:	d158      	bne.n	1a0058d0 <_vfiprintf_r+0xd0>
1a00581e:	6874      	ldr	r4, [r6, #4]
1a005820:	89a3      	ldrh	r3, [r4, #12]
1a005822:	0718      	lsls	r0, r3, #28
1a005824:	d55e      	bpl.n	1a0058e4 <_vfiprintf_r+0xe4>
1a005826:	6923      	ldr	r3, [r4, #16]
1a005828:	2b00      	cmp	r3, #0
1a00582a:	d05b      	beq.n	1a0058e4 <_vfiprintf_r+0xe4>
1a00582c:	2300      	movs	r3, #0
1a00582e:	9309      	str	r3, [sp, #36]	; 0x24
1a005830:	2320      	movs	r3, #32
1a005832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a005836:	2330      	movs	r3, #48	; 0x30
1a005838:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a00583c:	9503      	str	r5, [sp, #12]
1a00583e:	f04f 0b01 	mov.w	fp, #1
1a005842:	46b8      	mov	r8, r7
1a005844:	4645      	mov	r5, r8
1a005846:	f815 3b01 	ldrb.w	r3, [r5], #1
1a00584a:	b10b      	cbz	r3, 1a005850 <_vfiprintf_r+0x50>
1a00584c:	2b25      	cmp	r3, #37	; 0x25
1a00584e:	d154      	bne.n	1a0058fa <_vfiprintf_r+0xfa>
1a005850:	ebb8 0a07 	subs.w	sl, r8, r7
1a005854:	d00b      	beq.n	1a00586e <_vfiprintf_r+0x6e>
1a005856:	4653      	mov	r3, sl
1a005858:	463a      	mov	r2, r7
1a00585a:	4621      	mov	r1, r4
1a00585c:	4630      	mov	r0, r6
1a00585e:	f7ff ffbc 	bl	1a0057da <__sfputs_r>
1a005862:	3001      	adds	r0, #1
1a005864:	f000 80c2 	beq.w	1a0059ec <_vfiprintf_r+0x1ec>
1a005868:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00586a:	4453      	add	r3, sl
1a00586c:	9309      	str	r3, [sp, #36]	; 0x24
1a00586e:	f898 3000 	ldrb.w	r3, [r8]
1a005872:	2b00      	cmp	r3, #0
1a005874:	f000 80ba 	beq.w	1a0059ec <_vfiprintf_r+0x1ec>
1a005878:	2300      	movs	r3, #0
1a00587a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00587e:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a005882:	9304      	str	r3, [sp, #16]
1a005884:	9307      	str	r3, [sp, #28]
1a005886:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a00588a:	931a      	str	r3, [sp, #104]	; 0x68
1a00588c:	46a8      	mov	r8, r5
1a00588e:	2205      	movs	r2, #5
1a005890:	f818 1b01 	ldrb.w	r1, [r8], #1
1a005894:	485e      	ldr	r0, [pc, #376]	; (1a005a10 <_vfiprintf_r+0x210>)
1a005896:	f000 fa53 	bl	1a005d40 <memchr>
1a00589a:	9b04      	ldr	r3, [sp, #16]
1a00589c:	bb78      	cbnz	r0, 1a0058fe <_vfiprintf_r+0xfe>
1a00589e:	06d9      	lsls	r1, r3, #27
1a0058a0:	bf44      	itt	mi
1a0058a2:	2220      	movmi	r2, #32
1a0058a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0058a8:	071a      	lsls	r2, r3, #28
1a0058aa:	bf44      	itt	mi
1a0058ac:	222b      	movmi	r2, #43	; 0x2b
1a0058ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0058b2:	782a      	ldrb	r2, [r5, #0]
1a0058b4:	2a2a      	cmp	r2, #42	; 0x2a
1a0058b6:	d02a      	beq.n	1a00590e <_vfiprintf_r+0x10e>
1a0058b8:	9a07      	ldr	r2, [sp, #28]
1a0058ba:	46a8      	mov	r8, r5
1a0058bc:	2000      	movs	r0, #0
1a0058be:	250a      	movs	r5, #10
1a0058c0:	4641      	mov	r1, r8
1a0058c2:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0058c6:	3b30      	subs	r3, #48	; 0x30
1a0058c8:	2b09      	cmp	r3, #9
1a0058ca:	d969      	bls.n	1a0059a0 <_vfiprintf_r+0x1a0>
1a0058cc:	b360      	cbz	r0, 1a005928 <_vfiprintf_r+0x128>
1a0058ce:	e024      	b.n	1a00591a <_vfiprintf_r+0x11a>
1a0058d0:	4b50      	ldr	r3, [pc, #320]	; (1a005a14 <_vfiprintf_r+0x214>)
1a0058d2:	429c      	cmp	r4, r3
1a0058d4:	d101      	bne.n	1a0058da <_vfiprintf_r+0xda>
1a0058d6:	68b4      	ldr	r4, [r6, #8]
1a0058d8:	e7a2      	b.n	1a005820 <_vfiprintf_r+0x20>
1a0058da:	4b4f      	ldr	r3, [pc, #316]	; (1a005a18 <_vfiprintf_r+0x218>)
1a0058dc:	429c      	cmp	r4, r3
1a0058de:	bf08      	it	eq
1a0058e0:	68f4      	ldreq	r4, [r6, #12]
1a0058e2:	e79d      	b.n	1a005820 <_vfiprintf_r+0x20>
1a0058e4:	4621      	mov	r1, r4
1a0058e6:	4630      	mov	r0, r6
1a0058e8:	f7ff fe8c 	bl	1a005604 <__swsetup_r>
1a0058ec:	2800      	cmp	r0, #0
1a0058ee:	d09d      	beq.n	1a00582c <_vfiprintf_r+0x2c>
1a0058f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0058f4:	b01d      	add	sp, #116	; 0x74
1a0058f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0058fa:	46a8      	mov	r8, r5
1a0058fc:	e7a2      	b.n	1a005844 <_vfiprintf_r+0x44>
1a0058fe:	4a44      	ldr	r2, [pc, #272]	; (1a005a10 <_vfiprintf_r+0x210>)
1a005900:	1a80      	subs	r0, r0, r2
1a005902:	fa0b f000 	lsl.w	r0, fp, r0
1a005906:	4318      	orrs	r0, r3
1a005908:	9004      	str	r0, [sp, #16]
1a00590a:	4645      	mov	r5, r8
1a00590c:	e7be      	b.n	1a00588c <_vfiprintf_r+0x8c>
1a00590e:	9a03      	ldr	r2, [sp, #12]
1a005910:	1d11      	adds	r1, r2, #4
1a005912:	6812      	ldr	r2, [r2, #0]
1a005914:	9103      	str	r1, [sp, #12]
1a005916:	2a00      	cmp	r2, #0
1a005918:	db01      	blt.n	1a00591e <_vfiprintf_r+0x11e>
1a00591a:	9207      	str	r2, [sp, #28]
1a00591c:	e004      	b.n	1a005928 <_vfiprintf_r+0x128>
1a00591e:	4252      	negs	r2, r2
1a005920:	f043 0302 	orr.w	r3, r3, #2
1a005924:	9207      	str	r2, [sp, #28]
1a005926:	9304      	str	r3, [sp, #16]
1a005928:	f898 3000 	ldrb.w	r3, [r8]
1a00592c:	2b2e      	cmp	r3, #46	; 0x2e
1a00592e:	d10e      	bne.n	1a00594e <_vfiprintf_r+0x14e>
1a005930:	f898 3001 	ldrb.w	r3, [r8, #1]
1a005934:	2b2a      	cmp	r3, #42	; 0x2a
1a005936:	d138      	bne.n	1a0059aa <_vfiprintf_r+0x1aa>
1a005938:	9b03      	ldr	r3, [sp, #12]
1a00593a:	1d1a      	adds	r2, r3, #4
1a00593c:	681b      	ldr	r3, [r3, #0]
1a00593e:	9203      	str	r2, [sp, #12]
1a005940:	2b00      	cmp	r3, #0
1a005942:	bfb8      	it	lt
1a005944:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a005948:	f108 0802 	add.w	r8, r8, #2
1a00594c:	9305      	str	r3, [sp, #20]
1a00594e:	4d33      	ldr	r5, [pc, #204]	; (1a005a1c <_vfiprintf_r+0x21c>)
1a005950:	f898 1000 	ldrb.w	r1, [r8]
1a005954:	2203      	movs	r2, #3
1a005956:	4628      	mov	r0, r5
1a005958:	f000 f9f2 	bl	1a005d40 <memchr>
1a00595c:	b140      	cbz	r0, 1a005970 <_vfiprintf_r+0x170>
1a00595e:	2340      	movs	r3, #64	; 0x40
1a005960:	1b40      	subs	r0, r0, r5
1a005962:	fa03 f000 	lsl.w	r0, r3, r0
1a005966:	9b04      	ldr	r3, [sp, #16]
1a005968:	4303      	orrs	r3, r0
1a00596a:	f108 0801 	add.w	r8, r8, #1
1a00596e:	9304      	str	r3, [sp, #16]
1a005970:	f898 1000 	ldrb.w	r1, [r8]
1a005974:	482a      	ldr	r0, [pc, #168]	; (1a005a20 <_vfiprintf_r+0x220>)
1a005976:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a00597a:	2206      	movs	r2, #6
1a00597c:	f108 0701 	add.w	r7, r8, #1
1a005980:	f000 f9de 	bl	1a005d40 <memchr>
1a005984:	2800      	cmp	r0, #0
1a005986:	d037      	beq.n	1a0059f8 <_vfiprintf_r+0x1f8>
1a005988:	4b26      	ldr	r3, [pc, #152]	; (1a005a24 <_vfiprintf_r+0x224>)
1a00598a:	bb1b      	cbnz	r3, 1a0059d4 <_vfiprintf_r+0x1d4>
1a00598c:	9b03      	ldr	r3, [sp, #12]
1a00598e:	3307      	adds	r3, #7
1a005990:	f023 0307 	bic.w	r3, r3, #7
1a005994:	3308      	adds	r3, #8
1a005996:	9303      	str	r3, [sp, #12]
1a005998:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00599a:	444b      	add	r3, r9
1a00599c:	9309      	str	r3, [sp, #36]	; 0x24
1a00599e:	e750      	b.n	1a005842 <_vfiprintf_r+0x42>
1a0059a0:	fb05 3202 	mla	r2, r5, r2, r3
1a0059a4:	2001      	movs	r0, #1
1a0059a6:	4688      	mov	r8, r1
1a0059a8:	e78a      	b.n	1a0058c0 <_vfiprintf_r+0xc0>
1a0059aa:	2300      	movs	r3, #0
1a0059ac:	f108 0801 	add.w	r8, r8, #1
1a0059b0:	9305      	str	r3, [sp, #20]
1a0059b2:	4619      	mov	r1, r3
1a0059b4:	250a      	movs	r5, #10
1a0059b6:	4640      	mov	r0, r8
1a0059b8:	f810 2b01 	ldrb.w	r2, [r0], #1
1a0059bc:	3a30      	subs	r2, #48	; 0x30
1a0059be:	2a09      	cmp	r2, #9
1a0059c0:	d903      	bls.n	1a0059ca <_vfiprintf_r+0x1ca>
1a0059c2:	2b00      	cmp	r3, #0
1a0059c4:	d0c3      	beq.n	1a00594e <_vfiprintf_r+0x14e>
1a0059c6:	9105      	str	r1, [sp, #20]
1a0059c8:	e7c1      	b.n	1a00594e <_vfiprintf_r+0x14e>
1a0059ca:	fb05 2101 	mla	r1, r5, r1, r2
1a0059ce:	2301      	movs	r3, #1
1a0059d0:	4680      	mov	r8, r0
1a0059d2:	e7f0      	b.n	1a0059b6 <_vfiprintf_r+0x1b6>
1a0059d4:	ab03      	add	r3, sp, #12
1a0059d6:	9300      	str	r3, [sp, #0]
1a0059d8:	4622      	mov	r2, r4
1a0059da:	4b13      	ldr	r3, [pc, #76]	; (1a005a28 <_vfiprintf_r+0x228>)
1a0059dc:	a904      	add	r1, sp, #16
1a0059de:	4630      	mov	r0, r6
1a0059e0:	f3af 8000 	nop.w
1a0059e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0059e8:	4681      	mov	r9, r0
1a0059ea:	d1d5      	bne.n	1a005998 <_vfiprintf_r+0x198>
1a0059ec:	89a3      	ldrh	r3, [r4, #12]
1a0059ee:	065b      	lsls	r3, r3, #25
1a0059f0:	f53f af7e 	bmi.w	1a0058f0 <_vfiprintf_r+0xf0>
1a0059f4:	9809      	ldr	r0, [sp, #36]	; 0x24
1a0059f6:	e77d      	b.n	1a0058f4 <_vfiprintf_r+0xf4>
1a0059f8:	ab03      	add	r3, sp, #12
1a0059fa:	9300      	str	r3, [sp, #0]
1a0059fc:	4622      	mov	r2, r4
1a0059fe:	4b0a      	ldr	r3, [pc, #40]	; (1a005a28 <_vfiprintf_r+0x228>)
1a005a00:	a904      	add	r1, sp, #16
1a005a02:	4630      	mov	r0, r6
1a005a04:	f000 f888 	bl	1a005b18 <_printf_i>
1a005a08:	e7ec      	b.n	1a0059e4 <_vfiprintf_r+0x1e4>
1a005a0a:	bf00      	nop
1a005a0c:	1a0063bc 	.word	0x1a0063bc
1a005a10:	1a006400 	.word	0x1a006400
1a005a14:	1a0063dc 	.word	0x1a0063dc
1a005a18:	1a00639c 	.word	0x1a00639c
1a005a1c:	1a006406 	.word	0x1a006406
1a005a20:	1a00640a 	.word	0x1a00640a
1a005a24:	00000000 	.word	0x00000000
1a005a28:	1a0057db 	.word	0x1a0057db

1a005a2c <_printf_common>:
1a005a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a005a30:	4691      	mov	r9, r2
1a005a32:	461f      	mov	r7, r3
1a005a34:	688a      	ldr	r2, [r1, #8]
1a005a36:	690b      	ldr	r3, [r1, #16]
1a005a38:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a005a3c:	4293      	cmp	r3, r2
1a005a3e:	bfb8      	it	lt
1a005a40:	4613      	movlt	r3, r2
1a005a42:	f8c9 3000 	str.w	r3, [r9]
1a005a46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a005a4a:	4606      	mov	r6, r0
1a005a4c:	460c      	mov	r4, r1
1a005a4e:	b112      	cbz	r2, 1a005a56 <_printf_common+0x2a>
1a005a50:	3301      	adds	r3, #1
1a005a52:	f8c9 3000 	str.w	r3, [r9]
1a005a56:	6823      	ldr	r3, [r4, #0]
1a005a58:	0699      	lsls	r1, r3, #26
1a005a5a:	bf42      	ittt	mi
1a005a5c:	f8d9 3000 	ldrmi.w	r3, [r9]
1a005a60:	3302      	addmi	r3, #2
1a005a62:	f8c9 3000 	strmi.w	r3, [r9]
1a005a66:	6825      	ldr	r5, [r4, #0]
1a005a68:	f015 0506 	ands.w	r5, r5, #6
1a005a6c:	d107      	bne.n	1a005a7e <_printf_common+0x52>
1a005a6e:	f104 0a19 	add.w	sl, r4, #25
1a005a72:	68e3      	ldr	r3, [r4, #12]
1a005a74:	f8d9 2000 	ldr.w	r2, [r9]
1a005a78:	1a9b      	subs	r3, r3, r2
1a005a7a:	42ab      	cmp	r3, r5
1a005a7c:	dc28      	bgt.n	1a005ad0 <_printf_common+0xa4>
1a005a7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a005a82:	6822      	ldr	r2, [r4, #0]
1a005a84:	3300      	adds	r3, #0
1a005a86:	bf18      	it	ne
1a005a88:	2301      	movne	r3, #1
1a005a8a:	0692      	lsls	r2, r2, #26
1a005a8c:	d42d      	bmi.n	1a005aea <_printf_common+0xbe>
1a005a8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a005a92:	4639      	mov	r1, r7
1a005a94:	4630      	mov	r0, r6
1a005a96:	47c0      	blx	r8
1a005a98:	3001      	adds	r0, #1
1a005a9a:	d020      	beq.n	1a005ade <_printf_common+0xb2>
1a005a9c:	6823      	ldr	r3, [r4, #0]
1a005a9e:	68e5      	ldr	r5, [r4, #12]
1a005aa0:	f8d9 2000 	ldr.w	r2, [r9]
1a005aa4:	f003 0306 	and.w	r3, r3, #6
1a005aa8:	2b04      	cmp	r3, #4
1a005aaa:	bf08      	it	eq
1a005aac:	1aad      	subeq	r5, r5, r2
1a005aae:	68a3      	ldr	r3, [r4, #8]
1a005ab0:	6922      	ldr	r2, [r4, #16]
1a005ab2:	bf0c      	ite	eq
1a005ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a005ab8:	2500      	movne	r5, #0
1a005aba:	4293      	cmp	r3, r2
1a005abc:	bfc4      	itt	gt
1a005abe:	1a9b      	subgt	r3, r3, r2
1a005ac0:	18ed      	addgt	r5, r5, r3
1a005ac2:	f04f 0900 	mov.w	r9, #0
1a005ac6:	341a      	adds	r4, #26
1a005ac8:	454d      	cmp	r5, r9
1a005aca:	d11a      	bne.n	1a005b02 <_printf_common+0xd6>
1a005acc:	2000      	movs	r0, #0
1a005ace:	e008      	b.n	1a005ae2 <_printf_common+0xb6>
1a005ad0:	2301      	movs	r3, #1
1a005ad2:	4652      	mov	r2, sl
1a005ad4:	4639      	mov	r1, r7
1a005ad6:	4630      	mov	r0, r6
1a005ad8:	47c0      	blx	r8
1a005ada:	3001      	adds	r0, #1
1a005adc:	d103      	bne.n	1a005ae6 <_printf_common+0xba>
1a005ade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005ae6:	3501      	adds	r5, #1
1a005ae8:	e7c3      	b.n	1a005a72 <_printf_common+0x46>
1a005aea:	18e1      	adds	r1, r4, r3
1a005aec:	1c5a      	adds	r2, r3, #1
1a005aee:	2030      	movs	r0, #48	; 0x30
1a005af0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a005af4:	4422      	add	r2, r4
1a005af6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a005afa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a005afe:	3302      	adds	r3, #2
1a005b00:	e7c5      	b.n	1a005a8e <_printf_common+0x62>
1a005b02:	2301      	movs	r3, #1
1a005b04:	4622      	mov	r2, r4
1a005b06:	4639      	mov	r1, r7
1a005b08:	4630      	mov	r0, r6
1a005b0a:	47c0      	blx	r8
1a005b0c:	3001      	adds	r0, #1
1a005b0e:	d0e6      	beq.n	1a005ade <_printf_common+0xb2>
1a005b10:	f109 0901 	add.w	r9, r9, #1
1a005b14:	e7d8      	b.n	1a005ac8 <_printf_common+0x9c>
1a005b16:	Address 0x000000001a005b16 is out of bounds.


1a005b18 <_printf_i>:
1a005b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a005b1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a005b20:	460c      	mov	r4, r1
1a005b22:	7e09      	ldrb	r1, [r1, #24]
1a005b24:	b085      	sub	sp, #20
1a005b26:	296e      	cmp	r1, #110	; 0x6e
1a005b28:	4617      	mov	r7, r2
1a005b2a:	4606      	mov	r6, r0
1a005b2c:	4698      	mov	r8, r3
1a005b2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005b30:	f000 80b3 	beq.w	1a005c9a <_printf_i+0x182>
1a005b34:	d822      	bhi.n	1a005b7c <_printf_i+0x64>
1a005b36:	2963      	cmp	r1, #99	; 0x63
1a005b38:	d036      	beq.n	1a005ba8 <_printf_i+0x90>
1a005b3a:	d80a      	bhi.n	1a005b52 <_printf_i+0x3a>
1a005b3c:	2900      	cmp	r1, #0
1a005b3e:	f000 80b9 	beq.w	1a005cb4 <_printf_i+0x19c>
1a005b42:	2958      	cmp	r1, #88	; 0x58
1a005b44:	f000 8083 	beq.w	1a005c4e <_printf_i+0x136>
1a005b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005b4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a005b50:	e032      	b.n	1a005bb8 <_printf_i+0xa0>
1a005b52:	2964      	cmp	r1, #100	; 0x64
1a005b54:	d001      	beq.n	1a005b5a <_printf_i+0x42>
1a005b56:	2969      	cmp	r1, #105	; 0x69
1a005b58:	d1f6      	bne.n	1a005b48 <_printf_i+0x30>
1a005b5a:	6820      	ldr	r0, [r4, #0]
1a005b5c:	6813      	ldr	r3, [r2, #0]
1a005b5e:	0605      	lsls	r5, r0, #24
1a005b60:	f103 0104 	add.w	r1, r3, #4
1a005b64:	d52a      	bpl.n	1a005bbc <_printf_i+0xa4>
1a005b66:	681b      	ldr	r3, [r3, #0]
1a005b68:	6011      	str	r1, [r2, #0]
1a005b6a:	2b00      	cmp	r3, #0
1a005b6c:	da03      	bge.n	1a005b76 <_printf_i+0x5e>
1a005b6e:	222d      	movs	r2, #45	; 0x2d
1a005b70:	425b      	negs	r3, r3
1a005b72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a005b76:	486f      	ldr	r0, [pc, #444]	; (1a005d34 <_printf_i+0x21c>)
1a005b78:	220a      	movs	r2, #10
1a005b7a:	e039      	b.n	1a005bf0 <_printf_i+0xd8>
1a005b7c:	2973      	cmp	r1, #115	; 0x73
1a005b7e:	f000 809d 	beq.w	1a005cbc <_printf_i+0x1a4>
1a005b82:	d808      	bhi.n	1a005b96 <_printf_i+0x7e>
1a005b84:	296f      	cmp	r1, #111	; 0x6f
1a005b86:	d020      	beq.n	1a005bca <_printf_i+0xb2>
1a005b88:	2970      	cmp	r1, #112	; 0x70
1a005b8a:	d1dd      	bne.n	1a005b48 <_printf_i+0x30>
1a005b8c:	6823      	ldr	r3, [r4, #0]
1a005b8e:	f043 0320 	orr.w	r3, r3, #32
1a005b92:	6023      	str	r3, [r4, #0]
1a005b94:	e003      	b.n	1a005b9e <_printf_i+0x86>
1a005b96:	2975      	cmp	r1, #117	; 0x75
1a005b98:	d017      	beq.n	1a005bca <_printf_i+0xb2>
1a005b9a:	2978      	cmp	r1, #120	; 0x78
1a005b9c:	d1d4      	bne.n	1a005b48 <_printf_i+0x30>
1a005b9e:	2378      	movs	r3, #120	; 0x78
1a005ba0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a005ba4:	4864      	ldr	r0, [pc, #400]	; (1a005d38 <_printf_i+0x220>)
1a005ba6:	e055      	b.n	1a005c54 <_printf_i+0x13c>
1a005ba8:	6813      	ldr	r3, [r2, #0]
1a005baa:	1d19      	adds	r1, r3, #4
1a005bac:	681b      	ldr	r3, [r3, #0]
1a005bae:	6011      	str	r1, [r2, #0]
1a005bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005bb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a005bb8:	2301      	movs	r3, #1
1a005bba:	e08c      	b.n	1a005cd6 <_printf_i+0x1be>
1a005bbc:	681b      	ldr	r3, [r3, #0]
1a005bbe:	6011      	str	r1, [r2, #0]
1a005bc0:	f010 0f40 	tst.w	r0, #64	; 0x40
1a005bc4:	bf18      	it	ne
1a005bc6:	b21b      	sxthne	r3, r3
1a005bc8:	e7cf      	b.n	1a005b6a <_printf_i+0x52>
1a005bca:	6813      	ldr	r3, [r2, #0]
1a005bcc:	6825      	ldr	r5, [r4, #0]
1a005bce:	1d18      	adds	r0, r3, #4
1a005bd0:	6010      	str	r0, [r2, #0]
1a005bd2:	0628      	lsls	r0, r5, #24
1a005bd4:	d501      	bpl.n	1a005bda <_printf_i+0xc2>
1a005bd6:	681b      	ldr	r3, [r3, #0]
1a005bd8:	e002      	b.n	1a005be0 <_printf_i+0xc8>
1a005bda:	0668      	lsls	r0, r5, #25
1a005bdc:	d5fb      	bpl.n	1a005bd6 <_printf_i+0xbe>
1a005bde:	881b      	ldrh	r3, [r3, #0]
1a005be0:	4854      	ldr	r0, [pc, #336]	; (1a005d34 <_printf_i+0x21c>)
1a005be2:	296f      	cmp	r1, #111	; 0x6f
1a005be4:	bf14      	ite	ne
1a005be6:	220a      	movne	r2, #10
1a005be8:	2208      	moveq	r2, #8
1a005bea:	2100      	movs	r1, #0
1a005bec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a005bf0:	6865      	ldr	r5, [r4, #4]
1a005bf2:	60a5      	str	r5, [r4, #8]
1a005bf4:	2d00      	cmp	r5, #0
1a005bf6:	f2c0 8095 	blt.w	1a005d24 <_printf_i+0x20c>
1a005bfa:	6821      	ldr	r1, [r4, #0]
1a005bfc:	f021 0104 	bic.w	r1, r1, #4
1a005c00:	6021      	str	r1, [r4, #0]
1a005c02:	2b00      	cmp	r3, #0
1a005c04:	d13d      	bne.n	1a005c82 <_printf_i+0x16a>
1a005c06:	2d00      	cmp	r5, #0
1a005c08:	f040 808e 	bne.w	1a005d28 <_printf_i+0x210>
1a005c0c:	4665      	mov	r5, ip
1a005c0e:	2a08      	cmp	r2, #8
1a005c10:	d10b      	bne.n	1a005c2a <_printf_i+0x112>
1a005c12:	6823      	ldr	r3, [r4, #0]
1a005c14:	07db      	lsls	r3, r3, #31
1a005c16:	d508      	bpl.n	1a005c2a <_printf_i+0x112>
1a005c18:	6923      	ldr	r3, [r4, #16]
1a005c1a:	6862      	ldr	r2, [r4, #4]
1a005c1c:	429a      	cmp	r2, r3
1a005c1e:	bfde      	ittt	le
1a005c20:	2330      	movle	r3, #48	; 0x30
1a005c22:	f805 3c01 	strble.w	r3, [r5, #-1]
1a005c26:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a005c2a:	ebac 0305 	sub.w	r3, ip, r5
1a005c2e:	6123      	str	r3, [r4, #16]
1a005c30:	f8cd 8000 	str.w	r8, [sp]
1a005c34:	463b      	mov	r3, r7
1a005c36:	aa03      	add	r2, sp, #12
1a005c38:	4621      	mov	r1, r4
1a005c3a:	4630      	mov	r0, r6
1a005c3c:	f7ff fef6 	bl	1a005a2c <_printf_common>
1a005c40:	3001      	adds	r0, #1
1a005c42:	d14d      	bne.n	1a005ce0 <_printf_i+0x1c8>
1a005c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005c48:	b005      	add	sp, #20
1a005c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a005c4e:	4839      	ldr	r0, [pc, #228]	; (1a005d34 <_printf_i+0x21c>)
1a005c50:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a005c54:	6813      	ldr	r3, [r2, #0]
1a005c56:	6821      	ldr	r1, [r4, #0]
1a005c58:	1d1d      	adds	r5, r3, #4
1a005c5a:	681b      	ldr	r3, [r3, #0]
1a005c5c:	6015      	str	r5, [r2, #0]
1a005c5e:	060a      	lsls	r2, r1, #24
1a005c60:	d50b      	bpl.n	1a005c7a <_printf_i+0x162>
1a005c62:	07ca      	lsls	r2, r1, #31
1a005c64:	bf44      	itt	mi
1a005c66:	f041 0120 	orrmi.w	r1, r1, #32
1a005c6a:	6021      	strmi	r1, [r4, #0]
1a005c6c:	b91b      	cbnz	r3, 1a005c76 <_printf_i+0x15e>
1a005c6e:	6822      	ldr	r2, [r4, #0]
1a005c70:	f022 0220 	bic.w	r2, r2, #32
1a005c74:	6022      	str	r2, [r4, #0]
1a005c76:	2210      	movs	r2, #16
1a005c78:	e7b7      	b.n	1a005bea <_printf_i+0xd2>
1a005c7a:	064d      	lsls	r5, r1, #25
1a005c7c:	bf48      	it	mi
1a005c7e:	b29b      	uxthmi	r3, r3
1a005c80:	e7ef      	b.n	1a005c62 <_printf_i+0x14a>
1a005c82:	4665      	mov	r5, ip
1a005c84:	fbb3 f1f2 	udiv	r1, r3, r2
1a005c88:	fb02 3311 	mls	r3, r2, r1, r3
1a005c8c:	5cc3      	ldrb	r3, [r0, r3]
1a005c8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a005c92:	460b      	mov	r3, r1
1a005c94:	2900      	cmp	r1, #0
1a005c96:	d1f5      	bne.n	1a005c84 <_printf_i+0x16c>
1a005c98:	e7b9      	b.n	1a005c0e <_printf_i+0xf6>
1a005c9a:	6813      	ldr	r3, [r2, #0]
1a005c9c:	6825      	ldr	r5, [r4, #0]
1a005c9e:	6961      	ldr	r1, [r4, #20]
1a005ca0:	1d18      	adds	r0, r3, #4
1a005ca2:	6010      	str	r0, [r2, #0]
1a005ca4:	0628      	lsls	r0, r5, #24
1a005ca6:	681b      	ldr	r3, [r3, #0]
1a005ca8:	d501      	bpl.n	1a005cae <_printf_i+0x196>
1a005caa:	6019      	str	r1, [r3, #0]
1a005cac:	e002      	b.n	1a005cb4 <_printf_i+0x19c>
1a005cae:	066a      	lsls	r2, r5, #25
1a005cb0:	d5fb      	bpl.n	1a005caa <_printf_i+0x192>
1a005cb2:	8019      	strh	r1, [r3, #0]
1a005cb4:	2300      	movs	r3, #0
1a005cb6:	6123      	str	r3, [r4, #16]
1a005cb8:	4665      	mov	r5, ip
1a005cba:	e7b9      	b.n	1a005c30 <_printf_i+0x118>
1a005cbc:	6813      	ldr	r3, [r2, #0]
1a005cbe:	1d19      	adds	r1, r3, #4
1a005cc0:	6011      	str	r1, [r2, #0]
1a005cc2:	681d      	ldr	r5, [r3, #0]
1a005cc4:	6862      	ldr	r2, [r4, #4]
1a005cc6:	2100      	movs	r1, #0
1a005cc8:	4628      	mov	r0, r5
1a005cca:	f000 f839 	bl	1a005d40 <memchr>
1a005cce:	b108      	cbz	r0, 1a005cd4 <_printf_i+0x1bc>
1a005cd0:	1b40      	subs	r0, r0, r5
1a005cd2:	6060      	str	r0, [r4, #4]
1a005cd4:	6863      	ldr	r3, [r4, #4]
1a005cd6:	6123      	str	r3, [r4, #16]
1a005cd8:	2300      	movs	r3, #0
1a005cda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a005cde:	e7a7      	b.n	1a005c30 <_printf_i+0x118>
1a005ce0:	6923      	ldr	r3, [r4, #16]
1a005ce2:	462a      	mov	r2, r5
1a005ce4:	4639      	mov	r1, r7
1a005ce6:	4630      	mov	r0, r6
1a005ce8:	47c0      	blx	r8
1a005cea:	3001      	adds	r0, #1
1a005cec:	d0aa      	beq.n	1a005c44 <_printf_i+0x12c>
1a005cee:	6823      	ldr	r3, [r4, #0]
1a005cf0:	079b      	lsls	r3, r3, #30
1a005cf2:	d413      	bmi.n	1a005d1c <_printf_i+0x204>
1a005cf4:	68e0      	ldr	r0, [r4, #12]
1a005cf6:	9b03      	ldr	r3, [sp, #12]
1a005cf8:	4298      	cmp	r0, r3
1a005cfa:	bfb8      	it	lt
1a005cfc:	4618      	movlt	r0, r3
1a005cfe:	e7a3      	b.n	1a005c48 <_printf_i+0x130>
1a005d00:	2301      	movs	r3, #1
1a005d02:	464a      	mov	r2, r9
1a005d04:	4639      	mov	r1, r7
1a005d06:	4630      	mov	r0, r6
1a005d08:	47c0      	blx	r8
1a005d0a:	3001      	adds	r0, #1
1a005d0c:	d09a      	beq.n	1a005c44 <_printf_i+0x12c>
1a005d0e:	3501      	adds	r5, #1
1a005d10:	68e3      	ldr	r3, [r4, #12]
1a005d12:	9a03      	ldr	r2, [sp, #12]
1a005d14:	1a9b      	subs	r3, r3, r2
1a005d16:	42ab      	cmp	r3, r5
1a005d18:	dcf2      	bgt.n	1a005d00 <_printf_i+0x1e8>
1a005d1a:	e7eb      	b.n	1a005cf4 <_printf_i+0x1dc>
1a005d1c:	2500      	movs	r5, #0
1a005d1e:	f104 0919 	add.w	r9, r4, #25
1a005d22:	e7f5      	b.n	1a005d10 <_printf_i+0x1f8>
1a005d24:	2b00      	cmp	r3, #0
1a005d26:	d1ac      	bne.n	1a005c82 <_printf_i+0x16a>
1a005d28:	7803      	ldrb	r3, [r0, #0]
1a005d2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a005d2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005d32:	e76c      	b.n	1a005c0e <_printf_i+0xf6>
1a005d34:	1a006411 	.word	0x1a006411
1a005d38:	1a006422 	.word	0x1a006422
1a005d3c:	ffffffff 	.word	0xffffffff

1a005d40 <memchr>:
1a005d40:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a005d44:	2a10      	cmp	r2, #16
1a005d46:	db2b      	blt.n	1a005da0 <memchr+0x60>
1a005d48:	f010 0f07 	tst.w	r0, #7
1a005d4c:	d008      	beq.n	1a005d60 <memchr+0x20>
1a005d4e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005d52:	3a01      	subs	r2, #1
1a005d54:	428b      	cmp	r3, r1
1a005d56:	d02d      	beq.n	1a005db4 <memchr+0x74>
1a005d58:	f010 0f07 	tst.w	r0, #7
1a005d5c:	b342      	cbz	r2, 1a005db0 <memchr+0x70>
1a005d5e:	d1f6      	bne.n	1a005d4e <memchr+0xe>
1a005d60:	b4f0      	push	{r4, r5, r6, r7}
1a005d62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a005d66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a005d6a:	f022 0407 	bic.w	r4, r2, #7
1a005d6e:	f07f 0700 	mvns.w	r7, #0
1a005d72:	2300      	movs	r3, #0
1a005d74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a005d78:	3c08      	subs	r4, #8
1a005d7a:	ea85 0501 	eor.w	r5, r5, r1
1a005d7e:	ea86 0601 	eor.w	r6, r6, r1
1a005d82:	fa85 f547 	uadd8	r5, r5, r7
1a005d86:	faa3 f587 	sel	r5, r3, r7
1a005d8a:	fa86 f647 	uadd8	r6, r6, r7
1a005d8e:	faa5 f687 	sel	r6, r5, r7
1a005d92:	b98e      	cbnz	r6, 1a005db8 <memchr+0x78>
1a005d94:	d1ee      	bne.n	1a005d74 <memchr+0x34>
1a005d96:	bcf0      	pop	{r4, r5, r6, r7}
1a005d98:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a005d9c:	f002 0207 	and.w	r2, r2, #7
1a005da0:	b132      	cbz	r2, 1a005db0 <memchr+0x70>
1a005da2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005da6:	3a01      	subs	r2, #1
1a005da8:	ea83 0301 	eor.w	r3, r3, r1
1a005dac:	b113      	cbz	r3, 1a005db4 <memchr+0x74>
1a005dae:	d1f8      	bne.n	1a005da2 <memchr+0x62>
1a005db0:	2000      	movs	r0, #0
1a005db2:	4770      	bx	lr
1a005db4:	3801      	subs	r0, #1
1a005db6:	4770      	bx	lr
1a005db8:	2d00      	cmp	r5, #0
1a005dba:	bf06      	itte	eq
1a005dbc:	4635      	moveq	r5, r6
1a005dbe:	3803      	subeq	r0, #3
1a005dc0:	3807      	subne	r0, #7
1a005dc2:	f015 0f01 	tst.w	r5, #1
1a005dc6:	d107      	bne.n	1a005dd8 <memchr+0x98>
1a005dc8:	3001      	adds	r0, #1
1a005dca:	f415 7f80 	tst.w	r5, #256	; 0x100
1a005dce:	bf02      	ittt	eq
1a005dd0:	3001      	addeq	r0, #1
1a005dd2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a005dd6:	3001      	addeq	r0, #1
1a005dd8:	bcf0      	pop	{r4, r5, r6, r7}
1a005dda:	3801      	subs	r0, #1
1a005ddc:	4770      	bx	lr
1a005dde:	bf00      	nop
1a005de0:	616e6946 	.word	0x616e6946
1a005de4:	5452206c 	.word	0x5452206c
1a005de8:	3120534f 	.word	0x3120534f
1a005dec:	00000000 	.word	0x00000000
1a005df0:	64616572 	.word	0x64616572
1a005df4:	32414e49 	.word	0x32414e49
1a005df8:	00003931 	.word	0x00003931
1a005dfc:	6e697270 	.word	0x6e697270
1a005e00:	52415574 	.word	0x52415574
1a005e04:	00000054 	.word	0x00000054
1a005e08:	6e697270 	.word	0x6e697270
1a005e0c:	746e4974 	.word	0x746e4974
1a005e10:	75727265 	.word	0x75727265
1a005e14:	00007470 	.word	0x00007470
1a005e18:	73206f4e 	.word	0x73206f4e
1a005e1c:	75702065 	.word	0x75702065
1a005e20:	69206f64 	.word	0x69206f64
1a005e24:	6963696e 	.word	0x6963696e
1a005e28:	65207261 	.word	0x65207261
1a005e2c:	6973206c 	.word	0x6973206c
1a005e30:	6d657473 	.word	0x6d657473
1a005e34:	6f632061 	.word	0x6f632061
1a005e38:	63657272 	.word	0x63657272
1a005e3c:	656d6174 	.word	0x656d6174
1a005e40:	0d65746e 	.word	0x0d65746e
1a005e44:	ffff000a 	.word	0xffff000a
1a005e48:	63696e49 	.word	0x63696e49
1a005e4c:	696c6169 	.word	0x696c6169
1a005e50:	646e617a 	.word	0x646e617a
1a005e54:	4e49206f 	.word	0x4e49206f
1a005e58:	39313241 	.word	0x39313241
1a005e5c:	0d2e2e2e 	.word	0x0d2e2e2e
1a005e60:	0000000a 	.word	0x0000000a
1a005e64:	32414e49 	.word	0x32414e49
1a005e68:	6e203931 	.word	0x6e203931
1a005e6c:	6e69206f 	.word	0x6e69206f
1a005e70:	61696369 	.word	0x61696369
1a005e74:	617a696c 	.word	0x617a696c
1a005e78:	202c6f64 	.word	0x202c6f64
1a005e7c:	69726576 	.word	0x69726576
1a005e80:	75716966 	.word	0x75716966
1a005e84:	616c2065 	.word	0x616c2065
1a005e88:	6f632073 	.word	0x6f632073
1a005e8c:	6978656e 	.word	0x6978656e
1a005e90:	73656e6f 	.word	0x73656e6f
1a005e94:	0d0a0d3a 	.word	0x0d0a0d3a
1a005e98:	0000000a 	.word	0x0000000a
1a005e9c:	64206553 	.word	0x64206553
1a005ea0:	65697465 	.word	0x65697465
1a005ea4:	6520656e 	.word	0x6520656e
1a005ea8:	7270206c 	.word	0x7270206c
1a005eac:	6172676f 	.word	0x6172676f
1a005eb0:	0d2e616d 	.word	0x0d2e616d
1a005eb4:	0000000a 	.word	0x0000000a
1a005eb8:	32414e49 	.word	0x32414e49
1a005ebc:	69203931 	.word	0x69203931
1a005ec0:	6963696e 	.word	0x6963696e
1a005ec4:	7a696c61 	.word	0x7a696c61
1a005ec8:	206f6461 	.word	0x206f6461
1a005ecc:	72726f63 	.word	0x72726f63
1a005ed0:	61746365 	.word	0x61746365
1a005ed4:	746e656d 	.word	0x746e656d
1a005ed8:	000a0d65 	.word	0x000a0d65
1a005edc:	6f206553 	.word	0x6f206553
1a005ee0:	6d697270 	.word	0x6d697270
1a005ee4:	54206f69 	.word	0x54206f69
1a005ee8:	31204345 	.word	0x31204345
1a005eec:	00000000 	.word	0x00000000
1a005ef0:	6f206553 	.word	0x6f206553
1a005ef4:	6d697270 	.word	0x6d697270
1a005ef8:	54206f69 	.word	0x54206f69
1a005efc:	32204345 	.word	0x32204345
1a005f00:	00000000 	.word	0x00000000
1a005f04:	6f206553 	.word	0x6f206553
1a005f08:	6d697072 	.word	0x6d697072
1a005f0c:	54206f69 	.word	0x54206f69
1a005f10:	33204345 	.word	0x33204345
1a005f14:	00000000 	.word	0x00000000
1a005f18:	6f206553 	.word	0x6f206553
1a005f1c:	6d697072 	.word	0x6d697072
1a005f20:	54206f69 	.word	0x54206f69
1a005f24:	34204345 	.word	0x34204345
1a005f28:	ffffff00 	.word	0xffffff00
1a005f2c:	32414e49 	.word	0x32414e49
1a005f30:	53203931 	.word	0x53203931
1a005f34:	746e7568 	.word	0x746e7568
1a005f38:	6c6f5620 	.word	0x6c6f5620
1a005f3c:	65676174 	.word	0x65676174
1a005f40:	566d5b20 	.word	0x566d5b20
1a005f44:	0a0d3a5d 	.word	0x0a0d3a5d
1a005f48:	00000000 	.word	0x00000000
1a005f4c:	6e756853 	.word	0x6e756853
1a005f50:	6f562074 	.word	0x6f562074
1a005f54:	6761746c 	.word	0x6761746c
1a005f58:	00203a65 	.word	0x00203a65
1a005f5c:	32414e49 	.word	0x32414e49
1a005f60:	42203931 	.word	0x42203931
1a005f64:	56207375 	.word	0x56207375
1a005f68:	61746c6f 	.word	0x61746c6f
1a005f6c:	5b206567 	.word	0x5b206567
1a005f70:	3a5d566d 	.word	0x3a5d566d
1a005f74:	00000a0d 	.word	0x00000a0d
1a005f78:	20737542 	.word	0x20737542
1a005f7c:	746c6f56 	.word	0x746c6f56
1a005f80:	3a656761 	.word	0x3a656761
1a005f84:	00000020 	.word	0x00000020
1a005f88:	32414e49 	.word	0x32414e49
1a005f8c:	50203931 	.word	0x50203931
1a005f90:	7265776f 	.word	0x7265776f
1a005f94:	576d5b20 	.word	0x576d5b20
1a005f98:	0a0d3a5d 	.word	0x0a0d3a5d
1a005f9c:	00000000 	.word	0x00000000
1a005fa0:	65776f50 	.word	0x65776f50
1a005fa4:	00203a72 	.word	0x00203a72
1a005fa8:	32414e49 	.word	0x32414e49
1a005fac:	43203931 	.word	0x43203931
1a005fb0:	65727275 	.word	0x65727275
1a005fb4:	5b20746e 	.word	0x5b20746e
1a005fb8:	3a5d416d 	.word	0x3a5d416d
1a005fbc:	00000a0d 	.word	0x00000a0d
1a005fc0:	72727543 	.word	0x72727543
1a005fc4:	3a746e65 	.word	0x3a746e65
1a005fc8:	ffff0020 	.word	0xffff0020
1a005fcc:	6c707041 	.word	0x6c707041
1a005fd0:	74616369 	.word	0x74616369
1a005fd4:	206e6f69 	.word	0x206e6f69
1a005fd8:	6c6c614d 	.word	0x6c6c614d
1a005fdc:	4620636f 	.word	0x4620636f
1a005fe0:	656c6961 	.word	0x656c6961
1a005fe4:	6f482064 	.word	0x6f482064
1a005fe8:	0d216b6f 	.word	0x0d216b6f
1a005fec:	00000000 	.word	0x00000000
1a005ff0:	7362696c 	.word	0x7362696c
1a005ff4:	6572662f 	.word	0x6572662f
1a005ff8:	6f747265 	.word	0x6f747265
1a005ffc:	6f732f73 	.word	0x6f732f73
1a006000:	65637275 	.word	0x65637275
1a006004:	6f6f682f 	.word	0x6f6f682f
1a006008:	632e736b 	.word	0x632e736b
1a00600c:	ffffff00 	.word	0xffffff00
1a006010:	70410a0d 	.word	0x70410a0d
1a006014:	63696c70 	.word	0x63696c70
1a006018:	6f697461 	.word	0x6f697461
1a00601c:	7453206e 	.word	0x7453206e
1a006020:	206b6361 	.word	0x206b6361
1a006024:	7265764f 	.word	0x7265764f
1a006028:	776f6c66 	.word	0x776f6c66
1a00602c:	6f202121 	.word	0x6f202121
1a006030:	6154206e 	.word	0x6154206e
1a006034:	203a6b73 	.word	0x203a6b73
1a006038:	0a0d7325 	.word	0x0a0d7325
1a00603c:	ffffff00 	.word	0xffffff00
1a006040:	41760a0d 	.word	0x41760a0d
1a006044:	72657373 	.word	0x72657373
1a006048:	6c614374 	.word	0x6c614374
1a00604c:	2864656c 	.word	0x2864656c
1a006050:	200a0d29 	.word	0x200a0d29
1a006054:	4c4c2020 	.word	0x4c4c2020
1a006058:	20656e69 	.word	0x20656e69
1a00605c:	626d754e 	.word	0x626d754e
1a006060:	3d207265 	.word	0x3d207265
1a006064:	0d642520 	.word	0x0d642520
1a006068:	2020200a 	.word	0x2020200a
1a00606c:	656c6946 	.word	0x656c6946
1a006070:	6d614e20 	.word	0x6d614e20
1a006074:	203d2065 	.word	0x203d2065
1a006078:	0a0d7325 	.word	0x0a0d7325
1a00607c:	ff000a0d 	.word	0xff000a0d
1a006080:	454c4449 	.word	0x454c4449
1a006084:	ffffff00 	.word	0xffffff00
1a006088:	51726d54 	.word	0x51726d54
1a00608c:	ffffff00 	.word	0xffffff00
1a006090:	20726d54 	.word	0x20726d54
1a006094:	00637653 	.word	0x00637653

1a006098 <ExtRateIn>:
1a006098:	00000000                                ....

1a00609c <GpioButtons>:
1a00609c:	08000400 09010900                       ........

1a0060a4 <GpioLeds>:
1a0060a4:	01050005 0e000205 0c010b01              ............

1a0060b0 <GpioPorts>:
1a0060b0:	03030003 0f050403 05031005 07030603     ................
1a0060c0:	ffff0802                                ....

1a0060c4 <OscRateIn>:
1a0060c4:	00b71b00                                ....

1a0060c8 <InitClkStates>:
1a0060c8:	01010f01                                ....

1a0060cc <pinmuxing>:
1a0060cc:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0060dc:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0060ec:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0060fc:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00610c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00611c:	00d50301 00d50401 00160107 00560207     ..............V.
1a00612c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00613c:	00570206                                ..W.

1a006140 <UART_BClock>:
1a006140:	01a201c2 01620182                       ......b.

1a006148 <UART_PClock>:
1a006148:	00820081 00a200a1 08040201 0f0f0f03     ................
1a006158:	000000ff                                ....

1a00615c <periph_to_base>:
1a00615c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a00616c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a00617c:	000100e0 01000100 01200003 00060120     .......... . ...
1a00618c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00619c:	01820013 00120182 01a201a2 01c20011     ................
1a0061ac:	001001c2 01e201e2 0202000f 000e0202     ................
1a0061bc:	02220222 0223000d 001c0223              "."...#.#...

1a0061c8 <InitClkStates>:
1a0061c8:	00010100 00010909 0001090a 01010701     ................
1a0061d8:	00010902 00010906 0101090c 0001090d     ................
1a0061e8:	0001090e 0001090f 00010910 00010911     ................
1a0061f8:	00010912 00010913 00011114 00011119     ................
1a006208:	0001111a 0001111b                       ........

1a006210 <lpcUarts>:
1a006210:	40081000 06020406 00180205 40081000     ...@...........@
1a006220:	09070509 00180706 40082000 00000000     ......... .@....
1a006230:	00190000 400c1000 07060107 001a0602     .......@........
1a006240:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a006250:	02020302 001b0204                       ........

1a006258 <gpioPinsInit>:
1a006258:	02000104 00050701 05010d03 04080100     ................
1a006268:	02020002 02000304 00000403 04070002     ................
1a006278:	030c0300 09050402 05040103 04030208     ................
1a006288:	04020305 06040504 0802000c 03000b06     ................
1a006298:	00090607 07060503 060f0504 03030004     ................
1a0062a8:	02000404 00050404 06040502 04060200     ................
1a0062b8:	0c050408 05040a04 0003010e 14010a00     ................
1a0062c8:	010f0000 0d000012 00001101 0010010c     ................
1a0062d8:	07070300 000f0300 01000001 00000000     ................
1a0062e8:	000a0600 08060603 06100504 04030005     ................
1a0062f8:	03000106 04090400 04010d05 010b0000     ................
1a006308:	0200000f 00000001 00010104 02010800     ................
1a006318:	01090000 09010006 05040002 04010200     ................
1a006328:	02020105 02020504 0e00000a 01000b02     ................
1a006338:	000c020b ffff0c01                       ........

1a006340 <rounders>:
1a006340:	00000000 3fe00000 9999999a 3fa99999     .......?.......?
1a006350:	47ae147b 3f747ae1 d2f1a9fc 3f40624d     {..G.zt?....Mb@?
1a006360:	eb1c432d 3f0a36e2 88e368f1 3ed4f8b5     -C...6.?.h.....>
1a006370:	a0b5ed8d 3ea0c6f7 9abcaf48 3e6ad7f2     .......>H.....j>
1a006380:	e2308c3a 3e35798e e826d695 3e012e0b     :.0..y5>..&....>
1a006390:	d9d7bdbb 3dcb7cdf d494c080              .....|.=....

1a00639c <__sf_fake_stderr>:
	...

1a0063bc <__sf_fake_stdin>:
	...

1a0063dc <__sf_fake_stdout>:
	...

1a0063fc <_global_impure_ptr>:
1a0063fc:	10000054 2b302d23 6c680020 6665004c     T...#-0+ .hlL.ef
1a00640c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a00641c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a00642c:	64636261 ff006665                       abcdef..
