
examples/c/sapi/rtos_freertos/dynamic_mem/freeRTOS_01_blinky/out/freeRTOS_01_blinky.elf:     file format elf32-littlearm
examples/c/sapi/rtos_freertos/dynamic_mem/freeRTOS_01_blinky/out/freeRTOS_01_blinky.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0003a1

Program Header:
0x70000001 off    0x00014378 vaddr 0x1a004378 paddr 0x1a004378 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x000100a8 vaddr 0x100000a8 paddr 0x100000a8 align 2**16
         filesz 0x00000000 memsz 0x00002ae0 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00004380 memsz 0x00004380 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a004380 align 2**16
         filesz 0x000000a4 memsz 0x000000a4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004374  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  10000000  1a004380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
  6 .bss          00002ae0  100000a8  100000a8  000100a8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 11 .init_array   00000004  1a004374  1a004374  00014374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a004378  1a004378  00014378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200a4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200a4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200a4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200a4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200a4  2**2
                  CONTENTS
 18 .noinit       00000000  10002b88  10002b88  000200a4  2**2
                  CONTENTS
 19 .debug_info   00025819  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004f6f  00000000  00000000  000458bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000a69b  00000000  00000000  0004a82c  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000ed8  00000000  00000000  00054ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000ff8  00000000  00000000  00055d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000f2ab  00000000  00000000  00056d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00011bf1  00000000  00000000  00066042  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002ee22  00000000  00000000  00077c33  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000a6a55  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000a6ad4  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002a5c  00000000  00000000  000a6b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000a8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a004374 l    d  .init_array	00000000 .init_array
1a004378 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002b88 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 freeRTOS_blinky.c
100000a8 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 system.c
100000ac l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_4.c
1a0004f4 l     F .text	00000064 prvHeapInit
100000b4 l     O .bss	00002000 ucHeap
1a000558 l     F .text	00000058 prvInsertBlockIntoFreeList
100000b0 l     O .bss	00000004 pxEnd
100020b4 l     O .bss	00000004 xBlockAllocatedBit
100020b8 l     O .bss	00000004 xFreeBytesRemaining
100020bc l     O .bss	00000004 xMinimumEverFreeBytesRemaining
100020c0 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a00073c l     F .text	0000001e prvIsQueueFull
1a00075a l     F .text	0000001a prvIsQueueEmpty
1a000774 l     F .text	00000076 prvCopyDataToQueue
1a0007ea l     F .text	00000024 prvCopyDataFromQueue
1a00080e l     F .text	0000006e prvUnlockQueue
1a000900 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100020c8 l     O .bss	00000168 uxIdleTaskStack.10728
10002230 l     O .bss	000005a0 uxTimerTaskStack.10735
100027d0 l     O .bss	00000060 xIdleTaskTCB.10727
10002830 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a000e94 l     F .text	0000002c prvResetNextTaskUnblockTime
1a000ec0 l     F .text	00000092 prvInitialiseNewTask
1a000f54 l     F .text	00000068 prvInitialiseTaskLists
1a000fbc l     F .text	000000ac prvAddNewTaskToReadyList
1a001068 l     F .text	00000038 prvDeleteTCB
1a0010a0 l     F .text	0000004c prvCheckTasksWaitingTermination
1a0010ec l     F .text	00000028 prvIdleTask
1a001114 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002894 l     O .bss	00000004 pxDelayedTaskList
10002898 l     O .bss	00000004 pxOverflowDelayedTaskList
1000289c l     O .bss	0000008c pxReadyTasksLists
10002928 l     O .bss	00000004 uxCurrentNumberOfTasks
1000292c l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002930 l     O .bss	00000004 uxPendedTicks
10002934 l     O .bss	00000004 uxSchedulerSuspended
10002938 l     O .bss	00000004 uxTaskNumber
1000293c l     O .bss	00000004 uxTopReadyPriority
10002940 l     O .bss	00000014 xDelayedTaskList1
10002954 l     O .bss	00000014 xDelayedTaskList2
10002968 l     O .bss	00000004 xNextTaskUnblockTime
1000296c l     O .bss	00000004 xNumOfOverflows
10002970 l     O .bss	00000014 xPendingReadyList
10002984 l     O .bss	00000004 xSchedulerRunning
10002988 l     O .bss	00000014 xSuspendedTaskList
1000299c l     O .bss	00000014 xTasksWaitingTermination
100029b0 l     O .bss	00000004 xTickCount
100029b4 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001960 l     F .text	00000020 prvGetNextExpireTime
1a001980 l     F .text	00000048 prvInsertTimerInActiveList
1a0019c8 l     F .text	00000070 prvCheckForValidListAndQueue
1a001a38 l     F .text	00000040 prvInitialiseNewTimer
1a001e08 l     F .text	00000016 prvTimerTask
1a001b94 l     F .text	00000078 prvSwitchTimerLists
1a001c0c l     F .text	0000002c prvSampleTimeNow
1a001c38 l     F .text	00000060 prvProcessExpiredTimer
1a001c98 l     F .text	00000074 prvProcessTimerOrBlockTask
1a001d0c l     F .text	000000fc prvProcessReceivedCommands
100029b8 l     O .bss	00000004 pxCurrentTimerList
100029bc l     O .bss	00000004 pxOverflowTimerList
100029c0 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10002a60 l     O .bss	00000014 xActiveTimerList1
10002a74 l     O .bss	00000014 xActiveTimerList2
10002a88 l     O .bss	00000004 xLastTime.11777
10002a8c l     O .bss	00000050 xStaticTimerQueue.11827
10002adc l     O .bss	00000004 xTimerQueue
10002ae0 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a001e20 l     F .text	00000040 prvTaskExitError
1a001e60 l     F .text	00000022 prvPortStartFirstTask
1a001e88 l     F .text	0000000e vPortEnableVFP
1a001ef0 l       .text	00000000 pxCurrentTCBConst2
1a001fd0 l       .text	00000000 pxCurrentTCBConst
10002ae4 l     O .bss	00000001 ucMaxSysCallPriority
10002ae8 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 board.c
1a0021a4 l     F .text	00000044 Board_LED_Init
1a0021e8 l     F .text	00000040 Board_TEC_Init
1a002228 l     F .text	00000040 Board_GPIO_Init
1a002268 l     F .text	00000030 Board_ADC_Init
1a002298 l     F .text	00000038 Board_SPI_Init
1a0022d0 l     F .text	00000024 Board_I2C_Init
1a004004 l     O .text	00000008 GpioButtons
1a00400c l     O .text	0000000c GpioLeds
1a004018 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004030 l     O .text	00000004 InitClkStates
1a004034 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002440 l     F .text	0000002c Chip_UART_GetIndex
1a0040a8 l     O .text	00000008 UART_BClock
1a0040b0 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0025e8 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0025fc l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0026b0 l     F .text	000000a4 pll_calc_divs
1a002754 l     F .text	0000010c pll_get_frac
1a002860 l     F .text	0000004c Chip_Clock_FindBaseClock
1a002ad4 l     F .text	00000022 Chip_Clock_GetDivRate
10002aec l     O .bss	00000008 audio_usb_pll_freq
1a0040c4 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a004130 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a002e28 l     F .text	00000014 Chip_SSP_GetClockIndex
1a002e3c l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a004178 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10002af4 l     O .bss	00000004 callBackFuncParams
10002af8 l     O .bss	00000008 tickCounter
10002b00 l     O .bss	00000004 tickHookFunction
10002b04 l     O .bss	00000030 tickerObject.11826
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00308c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002b34 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a003b64 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
10000044 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a004378 l       .init_array	00000000 __init_array_end
1a004374 l       .bss_RAM5	00000000 __preinit_array_end
1a004374 l       .init_array	00000000 __init_array_start
1a004374 l       .bss_RAM5	00000000 __preinit_array_start
1a0028f8 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000440 g     F .text	00000012 _isatty_r
1a0037bc g     F .text	000000b8 _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000452 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a001f38 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a002386 g     F .text	00000008 __stdio_init
1a003f6a g     F .text	00000024 __sseek
1a003be4 g     F .text	00000060 __sinit
1a003884 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a000d7c g     F .text	00000052 vQueueWaitForMessageRestricted
1a003bb8 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a0026a2 g     F .text	0000000c Chip_ADC_SetResolution
1a003f98 g     F .text	00000002 __malloc_unlock
1a001fd4 g     F .text	0000002c SysTick_Handler
1a0024c0 g     F .text	00000040 Chip_UART_SetBaud
1a00039c  w    F .text	00000002 initialise_monitor_handles
1a003434 g     F .text	00000008 printString
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a00232c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a001f70 g     F .text	00000064 PendSV_Handler
1a000b30 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a004380 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10002890 g     O .bss	00000004 pxCurrentTCB
1a000436 g     F .text	0000000a _fstat_r
53ff74ee g       *ABS*	00000000 __valid_user_code_checksum
1a004380 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0017ec g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a002b76 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002038 g     F .text	00000110 xPortStartScheduler
1a003794 g     F .text	00000016 memcpy
1a0016f8 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a003bac g     F .text	0000000c _cleanup_r
1a002000  w    F .text	00000038 vPortSetupTimerInterrupt
1a00344c g     F .text	00000000 .hidden __aeabi_uldivmod
10002b88 g       .noinit	00000000 _noinit
1a003874 g     F .text	00000010 puts
1a0006cc g     F .text	00000070 vPortFree
1a002ff2 g     F .text	00000018 uartWriteString
10002b80 g     O .bss	00000004 SystemCoreClock
1a00246c g     F .text	00000054 Chip_UART_Init
1a00300c g     F .text	00000034 tickerCallback
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002148 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a002bf4 g     F .text	0000004c Chip_Clock_GetRate
1a000dea g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a003424 g     F .text	00000010 printInitUart
1a0023c8 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a00347c g     F .text	000002cc .hidden __udivmoddi4
1a0004d4 g     F .text	00000020 _sbrk_r
1a004000 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00045c g     F .text	0000004e _read_r
1a000de4 g     F .text	00000006 vListInitialiseItem
1a000300 g     F .text	00000048 myTask
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000bfc g     F .text	00000158 xQueueReceive
10002b40 g     O .bss	00000040 xQueueRegistry
1a000e78 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a004378 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a004370 g     O .text	00000004 _global_impure_ptr
1a00374c g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0005b0 g     F .text	0000011c pvPortMalloc
1a002348 g     F .text	0000002c Board_Init
1a00042a  w    F .text	00000002 _init
1a000dce g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a001328 g     F .text	0000000c xTaskGetTickCount
1a0009b4 g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002b88 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a0003a0 g     F .text	00000088 Reset_Handler
1a003040 g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a002df0 g     F .text	00000038 Chip_I2C_SetClockRate
1a0018b0 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0028ac g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001760 g     F .text	0000008c xTaskRemoveFromEventList
1a000e92 g     F .text	00000002 vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a004310 g     O .text	00000020 __sf_fake_stderr
1a002dcc g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a00343c g     F .text	00000010 printEnter
1a002a68 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0041cc g     O .text	00000140 gpioPinsInit
1a002fd8 g     F .text	0000001a uartWriteByte
1a002e54 g     F .text	00000012 Chip_SSP_SetClockRate
1a0032fe g     F .text	00000016 gpioToggle
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a001804 g     F .text	00000080 xTaskCheckForTimeOut
1a003dc0 g     F .text	0000009c _free_r
1a002b50 g     F .text	00000026 Chip_Clock_GetBaseClock
100000a8 g       .bss	00000000 _bss
1a002670 g     F .text	00000032 Chip_ADC_SetSampleRate
1a001318 g     F .text	00000010 vTaskSuspendAll
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a002e66 g     F .text	0000003e Chip_SSP_SetBitRate
1a000e36 g     F .text	00000028 uxListRemove
1a002da8 g     F .text	00000002 Chip_GPIO_Init
1a00402c g     O .text	00000004 OscRateIn
1a002f5c g     F .text	0000007c uartInit
1a0011ac g     F .text	00000072 xTaskCreateStatic
10002b88 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a001630 g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000922 g     F .text	00000090 xQueueGenericCreateStatic
1a001728 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a00042c g     F .text	0000000a _close_r
1a0030c0 g     F .text	00000194 gpioInit
1a000e60 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a001b28 g     F .text	0000006c xTimerGenericCommand
1a003928 g     F .text	000000dc __swsetup_r
1a000e90 g     F .text	00000002 vApplicationStackOverflowHook
1a003748  w    F .text	00000002 .hidden __aeabi_ldiv0
1a003c44 g     F .text	00000078 __sfp
1a003f10 g     F .text	00000022 __sread
1a003314 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a003f96 g     F .text	00000002 __malloc_lock
1a002318 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a003b10 g     F .text	00000054 _fflush_r
1a004330 g     O .text	00000020 __sf_fake_stdin
1a002914 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0037aa g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000348 g     F .text	00000054 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a000e02 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a001ed0 g     F .text	00000024 SVC_Handler
1a003f8e g     F .text	00000008 __sclose
1a001a78 g     F .text	00000064 xTimerCreateTimerTask
1a003e5c g     F .text	000000b4 _malloc_r
1a002f30 g     F .text	00000018 uartTxReady
1a001540 g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a002b84 g     F .text	0000003c Chip_Clock_EnableOpts
1a00237e g     F .text	00000008 __stdio_getchar
1a002930 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0029e8 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a002edc g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a003254 g     F .text	00000056 gpioWrite
1a000428  w    F .text	00000002 _fini
1a00144c g     F .text	000000f4 xTaskResumeAll
1a001284 g     F .text	00000094 vTaskStartScheduler
1a002630 g     F .text	00000040 Chip_ADC_Init
10002b84 g     O .bss	00000004 g_pUsbApi
1a002390 g     F .text	00000038 Board_SetupMuxing
1a002500 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a0004aa g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000040 g     O .data	00000004 _impure_ptr
1a003a04 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a002f48 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001884 g     F .text	0000000c vTaskMissedYield
10002b88 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a002ea4 g     F .text	00000038 Chip_SSP_Init
1a000d54 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001334 g     F .text	00000118 xTaskIncrementTick
1a003cf8 g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a0022f4 g     F .text	00000024 Board_Debug_Init
1a002374 g     F .text	0000000a __stdio_putchar
1a00087c g     F .text	00000084 xQueueGenericReset
100000a4 g       .data	00000000 _edata
1a002dac g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a00121e g     F .text	00000066 xTaskCreate
1a002c54 g     F .text	00000154 Chip_SetupCoreClock
1a003f32 g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a003cbc g     F .text	0000003c _fwalk_reent
1a002c40 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0015e4 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a004350 g     O .text	00000020 __sf_fake_stdout
1a001890 g     F .text	00000020 xTaskGetSchedulerState
1a003748  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a003d40 g     F .text	00000080 __smakebuf_r
1a001e9c g     F .text	0000002c pxPortInitialiseStack
1a002bc0 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10002b3c g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a001adc g     F .text	0000004c xTimerCreateStatic
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0032aa g     F .text	00000054 gpioRead
1a003330 g     F .text	000000f4 boardInit
1a001ef4 g     F .text	00000044 vPortEnterCritical
10002b38 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002af8 g     F .text	00000058 Chip_Clock_SetBaseClock
1a002f14 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a002434 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 a1 03 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a ee 74 ff 53     }............t.S
	...
1a00002c:	d1 1e 00 1a 85 01 00 1a 00 00 00 00 71 1f 00 1a     ............q...
1a00003c:	d5 1f 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	15 33 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .3..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a004380 	.word	0x1a004380
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000a4 	.word	0x000000a4
1a000120:	1a004380 	.word	0x1a004380
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a004380 	.word	0x1a004380
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a004380 	.word	0x1a004380
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a004380 	.word	0x1a004380
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000a8 	.word	0x100000a8
1a000154:	00002ae0 	.word	0x00002ae0
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <myTask>:

/*==================[definiciones de funciones externas]=====================*/

// Implementacion de funcion de la tarea
void myTask( void* taskParmPtr )
{
1a000300:	b500      	push	{lr}
1a000302:	b083      	sub	sp, #12
   // ---------- CONFIGURACIONES ------------------------------
   printf( "Blinky con freeRTOS y sAPI.\r\n" );
1a000304:	480e      	ldr	r0, [pc, #56]	; (1a000340 <myTask+0x40>)
1a000306:	f003 fab5 	bl	1a003874 <puts>

   gpioWrite( LED1, ON );
1a00030a:	2101      	movs	r1, #1
1a00030c:	202d      	movs	r0, #45	; 0x2d
1a00030e:	f002 ffa1 	bl	1a003254 <gpioWrite>
   // Envia la tarea al estado bloqueado durante 1 s (delay)
   vTaskDelay( 1000 / portTICK_RATE_MS );
1a000312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000316:	f001 f965 	bl	1a0015e4 <vTaskDelay>
   gpioWrite( LED1, OFF ); 
1a00031a:	2100      	movs	r1, #0
1a00031c:	202d      	movs	r0, #45	; 0x2d
1a00031e:	f002 ff99 	bl	1a003254 <gpioWrite>

   // Tarea periodica cada 500 ms
   portTickType xPeriodicity =  500 / portTICK_RATE_MS;
   portTickType xLastWakeTime = xTaskGetTickCount();
1a000322:	f001 f801 	bl	1a001328 <xTaskGetTickCount>
1a000326:	9001      	str	r0, [sp, #4]
   
   // ---------- REPETIR POR SIEMPRE --------------------------
   while(TRUE) {
      gpioToggle( LEDB );
1a000328:	202c      	movs	r0, #44	; 0x2c
1a00032a:	f002 ffe8 	bl	1a0032fe <gpioToggle>
      printf( "Blink!\r\n" );
1a00032e:	4805      	ldr	r0, [pc, #20]	; (1a000344 <myTask+0x44>)
1a000330:	f003 faa0 	bl	1a003874 <puts>
      // Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
      vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a000334:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
1a000338:	a801      	add	r0, sp, #4
1a00033a:	f001 f901 	bl	1a001540 <vTaskDelayUntil>
1a00033e:	e7f3      	b.n	1a000328 <myTask+0x28>
1a000340:	1a003fc0 	.word	0x1a003fc0
1a000344:	1a003fe0 	.word	0x1a003fe0

1a000348 <main>:
{
1a000348:	b500      	push	{lr}
1a00034a:	b083      	sub	sp, #12
   boardConfig();
1a00034c:	f002 fff0 	bl	1a003330 <boardInit>
   debugPrintConfigUart( UART_USB, 115200 );
1a000350:	4c0e      	ldr	r4, [pc, #56]	; (1a00038c <main+0x44>)
1a000352:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a000356:	2103      	movs	r1, #3
1a000358:	4620      	mov	r0, r4
1a00035a:	f003 f863 	bl	1a003424 <printInitUart>
   debugPrintlnString( "Blinky con freeRTOS y sAPI." );
1a00035e:	490c      	ldr	r1, [pc, #48]	; (1a000390 <main+0x48>)
1a000360:	7820      	ldrb	r0, [r4, #0]
1a000362:	f003 f867 	bl	1a003434 <printString>
1a000366:	7820      	ldrb	r0, [r4, #0]
1a000368:	f003 f868 	bl	1a00343c <printEnter>
   gpioWrite( LED3, ON );
1a00036c:	2101      	movs	r1, #1
1a00036e:	202f      	movs	r0, #47	; 0x2f
1a000370:	f002 ff70 	bl	1a003254 <gpioWrite>
   xTaskCreate(
1a000374:	2300      	movs	r3, #0
1a000376:	9301      	str	r3, [sp, #4]
1a000378:	2201      	movs	r2, #1
1a00037a:	9200      	str	r2, [sp, #0]
1a00037c:	22b4      	movs	r2, #180	; 0xb4
1a00037e:	4905      	ldr	r1, [pc, #20]	; (1a000394 <main+0x4c>)
1a000380:	4805      	ldr	r0, [pc, #20]	; (1a000398 <main+0x50>)
1a000382:	f000 ff4c 	bl	1a00121e <xTaskCreate>
   vTaskStartScheduler();
1a000386:	f000 ff7d 	bl	1a001284 <vTaskStartScheduler>
1a00038a:	e7fe      	b.n	1a00038a <main+0x42>
1a00038c:	100000a8 	.word	0x100000a8
1a000390:	1a003f9c 	.word	0x1a003f9c
1a000394:	1a003fb8 	.word	0x1a003fb8
1a000398:	1a000301 	.word	0x1a000301

1a00039c <initialise_monitor_handles>:
}
1a00039c:	4770      	bx	lr
1a00039e:	Address 0x000000001a00039e is out of bounds.


1a0003a0 <Reset_Handler>:
void Reset_Handler(void) {
1a0003a0:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0003a2:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0003a4:	4b19      	ldr	r3, [pc, #100]	; (1a00040c <Reset_Handler+0x6c>)
1a0003a6:	4a1a      	ldr	r2, [pc, #104]	; (1a000410 <Reset_Handler+0x70>)
1a0003a8:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0003aa:	3304      	adds	r3, #4
1a0003ac:	4a19      	ldr	r2, [pc, #100]	; (1a000414 <Reset_Handler+0x74>)
1a0003ae:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0003b0:	2300      	movs	r3, #0
1a0003b2:	e005      	b.n	1a0003c0 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0003b4:	4a18      	ldr	r2, [pc, #96]	; (1a000418 <Reset_Handler+0x78>)
1a0003b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0003ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0003be:	3301      	adds	r3, #1
1a0003c0:	2b07      	cmp	r3, #7
1a0003c2:	d9f7      	bls.n	1a0003b4 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0003c4:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0003c6:	4b15      	ldr	r3, [pc, #84]	; (1a00041c <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0003c8:	e007      	b.n	1a0003da <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0003ca:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0003ce:	689a      	ldr	r2, [r3, #8]
1a0003d0:	6859      	ldr	r1, [r3, #4]
1a0003d2:	6818      	ldr	r0, [r3, #0]
1a0003d4:	f7ff fed9 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0003d8:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0003da:	4a11      	ldr	r2, [pc, #68]	; (1a000420 <Reset_Handler+0x80>)
1a0003dc:	4293      	cmp	r3, r2
1a0003de:	d3f4      	bcc.n	1a0003ca <Reset_Handler+0x2a>
1a0003e0:	e006      	b.n	1a0003f0 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0003e2:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0003e4:	6859      	ldr	r1, [r3, #4]
1a0003e6:	f854 0b08 	ldr.w	r0, [r4], #8
1a0003ea:	f7ff fedd 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0003ee:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0003f0:	4a0c      	ldr	r2, [pc, #48]	; (1a000424 <Reset_Handler+0x84>)
1a0003f2:	4293      	cmp	r3, r2
1a0003f4:	d3f5      	bcc.n	1a0003e2 <Reset_Handler+0x42>
    SystemInit();
1a0003f6:	f002 fd71 	bl	1a002edc <SystemInit>
    __libc_init_array();
1a0003fa:	f003 f9a7 	bl	1a00374c <__libc_init_array>
    initialise_monitor_handles();
1a0003fe:	f7ff ffcd 	bl	1a00039c <initialise_monitor_handles>
    main();
1a000402:	f7ff ffa1 	bl	1a000348 <main>
        __asm__ volatile("wfi");
1a000406:	bf30      	wfi
1a000408:	e7fd      	b.n	1a000406 <Reset_Handler+0x66>
1a00040a:	bf00      	nop
1a00040c:	40053100 	.word	0x40053100
1a000410:	10df1000 	.word	0x10df1000
1a000414:	01dff7ff 	.word	0x01dff7ff
1a000418:	e000e280 	.word	0xe000e280
1a00041c:	1a000114 	.word	0x1a000114
1a000420:	1a000150 	.word	0x1a000150
1a000424:	1a000178 	.word	0x1a000178

1a000428 <_fini>:
void _fini(void) {}
1a000428:	4770      	bx	lr

1a00042a <_init>:
void _init(void) {}
1a00042a:	4770      	bx	lr

1a00042c <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a00042c:	2309      	movs	r3, #9
1a00042e:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000434:	4770      	bx	lr

1a000436 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000436:	2358      	movs	r3, #88	; 0x58
1a000438:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00043a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00043e:	4770      	bx	lr

1a000440 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000440:	2902      	cmp	r1, #2
1a000442:	d801      	bhi.n	1a000448 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a000444:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a000446:	4770      	bx	lr
       SET_ERR(EBADF);
1a000448:	2309      	movs	r3, #9
1a00044a:	6003      	str	r3, [r0, #0]
       return -1;
1a00044c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000450:	4770      	bx	lr

1a000452 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000452:	2358      	movs	r3, #88	; 0x58
1a000454:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00045a:	4770      	bx	lr

1a00045c <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a00045c:	2902      	cmp	r1, #2
1a00045e:	d81f      	bhi.n	1a0004a0 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000464:	461d      	mov	r5, r3
1a000466:	4617      	mov	r7, r2
1a000468:	4606      	mov	r6, r0
  size_t i = 0;
1a00046a:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a00046c:	42ac      	cmp	r4, r5
1a00046e:	d211      	bcs.n	1a000494 <_read_r+0x38>
         int c = __stdio_getchar();
1a000470:	f001 ff85 	bl	1a00237e <__stdio_getchar>
         if( c != -1 ){
1a000474:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000478:	d0f8      	beq.n	1a00046c <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a00047a:	f104 0801 	add.w	r8, r4, #1
1a00047e:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000480:	280d      	cmp	r0, #13
1a000482:	d003      	beq.n	1a00048c <_read_r+0x30>
1a000484:	280a      	cmp	r0, #10
1a000486:	d001      	beq.n	1a00048c <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000488:	4644      	mov	r4, r8
1a00048a:	e7ef      	b.n	1a00046c <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a00048c:	f001 ff77 	bl	1a00237e <__stdio_getchar>
               return i;
1a000490:	4640      	mov	r0, r8
1a000492:	e003      	b.n	1a00049c <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000494:	2313      	movs	r3, #19
1a000496:	6033      	str	r3, [r6, #0]
      return -1;
1a000498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a00049c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a0004a0:	2313      	movs	r3, #19
1a0004a2:	6003      	str	r3, [r0, #0]
      return -1;
1a0004a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0004a8:	4770      	bx	lr

1a0004aa <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a0004aa:	2902      	cmp	r1, #2
1a0004ac:	d80c      	bhi.n	1a0004c8 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a0004ae:	b570      	push	{r4, r5, r6, lr}
1a0004b0:	461d      	mov	r5, r3
1a0004b2:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0004b4:	2400      	movs	r4, #0
1a0004b6:	e003      	b.n	1a0004c0 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a0004b8:	5d30      	ldrb	r0, [r6, r4]
1a0004ba:	f001 ff5b 	bl	1a002374 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0004be:	3401      	adds	r4, #1
1a0004c0:	42ac      	cmp	r4, r5
1a0004c2:	d3f9      	bcc.n	1a0004b8 <_write_r+0xe>
       return n;
1a0004c4:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0004c6:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0004c8:	2313      	movs	r3, #19
1a0004ca:	6003      	str	r3, [r0, #0]
       return -1;
1a0004cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0004d0:	4770      	bx	lr
1a0004d2:	Address 0x000000001a0004d2 is out of bounds.


1a0004d4 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0004d4:	4b05      	ldr	r3, [pc, #20]	; (1a0004ec <_sbrk_r+0x18>)
1a0004d6:	681b      	ldr	r3, [r3, #0]
1a0004d8:	b123      	cbz	r3, 1a0004e4 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0004da:	4b04      	ldr	r3, [pc, #16]	; (1a0004ec <_sbrk_r+0x18>)
1a0004dc:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0004de:	4401      	add	r1, r0
1a0004e0:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0004e2:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0004e4:	4b01      	ldr	r3, [pc, #4]	; (1a0004ec <_sbrk_r+0x18>)
1a0004e6:	4a02      	ldr	r2, [pc, #8]	; (1a0004f0 <_sbrk_r+0x1c>)
1a0004e8:	601a      	str	r2, [r3, #0]
1a0004ea:	e7f6      	b.n	1a0004da <_sbrk_r+0x6>
1a0004ec:	100000ac 	.word	0x100000ac
1a0004f0:	10002b88 	.word	0x10002b88

1a0004f4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a0004f4:	4a12      	ldr	r2, [pc, #72]	; (1a000540 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a0004f6:	f012 0f07 	tst.w	r2, #7
1a0004fa:	d01e      	beq.n	1a00053a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a0004fc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0004fe:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a000502:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a000506:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000508:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a00050a:	480e      	ldr	r0, [pc, #56]	; (1a000544 <prvHeapInit+0x50>)
1a00050c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a00050e:	2100      	movs	r1, #0
1a000510:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a000512:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a000514:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000516:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a00051a:	480b      	ldr	r0, [pc, #44]	; (1a000548 <prvHeapInit+0x54>)
1a00051c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a00051e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a000520:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a000522:	1a99      	subs	r1, r3, r2
1a000524:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a000526:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000528:	4b08      	ldr	r3, [pc, #32]	; (1a00054c <prvHeapInit+0x58>)
1a00052a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a00052c:	4b08      	ldr	r3, [pc, #32]	; (1a000550 <prvHeapInit+0x5c>)
1a00052e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a000530:	4b08      	ldr	r3, [pc, #32]	; (1a000554 <prvHeapInit+0x60>)
1a000532:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a000536:	601a      	str	r2, [r3, #0]
}
1a000538:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a00053a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a00053e:	e7e4      	b.n	1a00050a <prvHeapInit+0x16>
1a000540:	100000b4 	.word	0x100000b4
1a000544:	100020c0 	.word	0x100020c0
1a000548:	100000b0 	.word	0x100000b0
1a00054c:	100020bc 	.word	0x100020bc
1a000550:	100020b8 	.word	0x100020b8
1a000554:	100020b4 	.word	0x100020b4

1a000558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a000558:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a00055a:	4b13      	ldr	r3, [pc, #76]	; (1a0005a8 <prvInsertBlockIntoFreeList+0x50>)
1a00055c:	681a      	ldr	r2, [r3, #0]
1a00055e:	4282      	cmp	r2, r0
1a000560:	d31b      	bcc.n	1a00059a <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a000562:	6859      	ldr	r1, [r3, #4]
1a000564:	185c      	adds	r4, r3, r1
1a000566:	4284      	cmp	r4, r0
1a000568:	d103      	bne.n	1a000572 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a00056a:	6840      	ldr	r0, [r0, #4]
1a00056c:	4401      	add	r1, r0
1a00056e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a000570:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a000572:	6841      	ldr	r1, [r0, #4]
1a000574:	1844      	adds	r4, r0, r1
1a000576:	42a2      	cmp	r2, r4
1a000578:	d113      	bne.n	1a0005a2 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a00057a:	4c0c      	ldr	r4, [pc, #48]	; (1a0005ac <prvInsertBlockIntoFreeList+0x54>)
1a00057c:	6824      	ldr	r4, [r4, #0]
1a00057e:	42a2      	cmp	r2, r4
1a000580:	d00d      	beq.n	1a00059e <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a000582:	6852      	ldr	r2, [r2, #4]
1a000584:	4411      	add	r1, r2
1a000586:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a000588:	681a      	ldr	r2, [r3, #0]
1a00058a:	6812      	ldr	r2, [r2, #0]
1a00058c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a00058e:	4298      	cmp	r0, r3
1a000590:	d000      	beq.n	1a000594 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a000592:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a000594:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000598:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a00059a:	4613      	mov	r3, r2
1a00059c:	e7de      	b.n	1a00055c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a00059e:	6004      	str	r4, [r0, #0]
1a0005a0:	e7f5      	b.n	1a00058e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a0005a2:	6002      	str	r2, [r0, #0]
1a0005a4:	e7f3      	b.n	1a00058e <prvInsertBlockIntoFreeList+0x36>
1a0005a6:	bf00      	nop
1a0005a8:	100020c0 	.word	0x100020c0
1a0005ac:	100000b0 	.word	0x100000b0

1a0005b0 <pvPortMalloc>:
{
1a0005b0:	b570      	push	{r4, r5, r6, lr}
1a0005b2:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a0005b4:	f000 feb0 	bl	1a001318 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a0005b8:	4b3f      	ldr	r3, [pc, #252]	; (1a0006b8 <pvPortMalloc+0x108>)
1a0005ba:	681b      	ldr	r3, [r3, #0]
1a0005bc:	b1a3      	cbz	r3, 1a0005e8 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a0005be:	4b3f      	ldr	r3, [pc, #252]	; (1a0006bc <pvPortMalloc+0x10c>)
1a0005c0:	681b      	ldr	r3, [r3, #0]
1a0005c2:	421c      	tst	r4, r3
1a0005c4:	d013      	beq.n	1a0005ee <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
1a0005c6:	f000 ff41 	bl	1a00144c <xTaskResumeAll>
void *pvReturn = NULL;
1a0005ca:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a0005cc:	f000 fc61 	bl	1a000e92 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a0005d0:	f016 0f07 	tst.w	r6, #7
1a0005d4:	d06e      	beq.n	1a0006b4 <pvPortMalloc+0x104>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0005d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0005da:	f383 8811 	msr	BASEPRI, r3
1a0005de:	f3bf 8f6f 	isb	sy
1a0005e2:	f3bf 8f4f 	dsb	sy
1a0005e6:	e7fe      	b.n	1a0005e6 <pvPortMalloc+0x36>
			prvHeapInit();
1a0005e8:	f7ff ff84 	bl	1a0004f4 <prvHeapInit>
1a0005ec:	e7e7      	b.n	1a0005be <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
1a0005ee:	b194      	cbz	r4, 1a000616 <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a0005f0:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a0005f2:	f014 0f07 	tst.w	r4, #7
1a0005f6:	d00e      	beq.n	1a000616 <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a0005f8:	f024 0407 	bic.w	r4, r4, #7
1a0005fc:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a0005fe:	f004 0307 	and.w	r3, r4, #7
1a000602:	b143      	cbz	r3, 1a000616 <pvPortMalloc+0x66>
1a000604:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000608:	f383 8811 	msr	BASEPRI, r3
1a00060c:	f3bf 8f6f 	isb	sy
1a000610:	f3bf 8f4f 	dsb	sy
1a000614:	e7fe      	b.n	1a000614 <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a000616:	b134      	cbz	r4, 1a000626 <pvPortMalloc+0x76>
1a000618:	4b29      	ldr	r3, [pc, #164]	; (1a0006c0 <pvPortMalloc+0x110>)
1a00061a:	681b      	ldr	r3, [r3, #0]
1a00061c:	42a3      	cmp	r3, r4
1a00061e:	d306      	bcc.n	1a00062e <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a000620:	4b28      	ldr	r3, [pc, #160]	; (1a0006c4 <pvPortMalloc+0x114>)
1a000622:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000624:	e009      	b.n	1a00063a <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a000626:	f000 ff11 	bl	1a00144c <xTaskResumeAll>
void *pvReturn = NULL;
1a00062a:	2600      	movs	r6, #0
1a00062c:	e7ce      	b.n	1a0005cc <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
1a00062e:	f000 ff0d 	bl	1a00144c <xTaskResumeAll>
void *pvReturn = NULL;
1a000632:	2600      	movs	r6, #0
1a000634:	e7ca      	b.n	1a0005cc <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
1a000636:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a000638:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a00063a:	686a      	ldr	r2, [r5, #4]
1a00063c:	42a2      	cmp	r2, r4
1a00063e:	d202      	bcs.n	1a000646 <pvPortMalloc+0x96>
1a000640:	682a      	ldr	r2, [r5, #0]
1a000642:	2a00      	cmp	r2, #0
1a000644:	d1f7      	bne.n	1a000636 <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a000646:	4a1c      	ldr	r2, [pc, #112]	; (1a0006b8 <pvPortMalloc+0x108>)
1a000648:	6812      	ldr	r2, [r2, #0]
1a00064a:	42aa      	cmp	r2, r5
1a00064c:	d014      	beq.n	1a000678 <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a00064e:	681e      	ldr	r6, [r3, #0]
1a000650:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a000652:	682a      	ldr	r2, [r5, #0]
1a000654:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a000656:	686b      	ldr	r3, [r5, #4]
1a000658:	1b1b      	subs	r3, r3, r4
1a00065a:	2b10      	cmp	r3, #16
1a00065c:	d914      	bls.n	1a000688 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a00065e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000660:	f010 0f07 	tst.w	r0, #7
1a000664:	d00c      	beq.n	1a000680 <pvPortMalloc+0xd0>
1a000666:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00066a:	f383 8811 	msr	BASEPRI, r3
1a00066e:	f3bf 8f6f 	isb	sy
1a000672:	f3bf 8f4f 	dsb	sy
1a000676:	e7fe      	b.n	1a000676 <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a000678:	f000 fee8 	bl	1a00144c <xTaskResumeAll>
void *pvReturn = NULL;
1a00067c:	2600      	movs	r6, #0
1a00067e:	e7a5      	b.n	1a0005cc <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a000680:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a000682:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a000684:	f7ff ff68 	bl	1a000558 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a000688:	686a      	ldr	r2, [r5, #4]
1a00068a:	490d      	ldr	r1, [pc, #52]	; (1a0006c0 <pvPortMalloc+0x110>)
1a00068c:	680b      	ldr	r3, [r1, #0]
1a00068e:	1a9b      	subs	r3, r3, r2
1a000690:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a000692:	490d      	ldr	r1, [pc, #52]	; (1a0006c8 <pvPortMalloc+0x118>)
1a000694:	6809      	ldr	r1, [r1, #0]
1a000696:	428b      	cmp	r3, r1
1a000698:	d201      	bcs.n	1a00069e <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a00069a:	490b      	ldr	r1, [pc, #44]	; (1a0006c8 <pvPortMalloc+0x118>)
1a00069c:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a00069e:	4b07      	ldr	r3, [pc, #28]	; (1a0006bc <pvPortMalloc+0x10c>)
1a0006a0:	681b      	ldr	r3, [r3, #0]
1a0006a2:	4313      	orrs	r3, r2
1a0006a4:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a0006a6:	2300      	movs	r3, #0
1a0006a8:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a0006aa:	f000 fecf 	bl	1a00144c <xTaskResumeAll>
		if( pvReturn == NULL )
1a0006ae:	2e00      	cmp	r6, #0
1a0006b0:	d18e      	bne.n	1a0005d0 <pvPortMalloc+0x20>
1a0006b2:	e78b      	b.n	1a0005cc <pvPortMalloc+0x1c>
}
1a0006b4:	4630      	mov	r0, r6
1a0006b6:	bd70      	pop	{r4, r5, r6, pc}
1a0006b8:	100000b0 	.word	0x100000b0
1a0006bc:	100020b4 	.word	0x100020b4
1a0006c0:	100020b8 	.word	0x100020b8
1a0006c4:	100020c0 	.word	0x100020c0
1a0006c8:	100020bc 	.word	0x100020bc

1a0006cc <vPortFree>:
	if( pv != NULL )
1a0006cc:	b380      	cbz	r0, 1a000730 <vPortFree+0x64>
{
1a0006ce:	b538      	push	{r3, r4, r5, lr}
1a0006d0:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a0006d2:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a0006d6:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a0006da:	4916      	ldr	r1, [pc, #88]	; (1a000734 <vPortFree+0x68>)
1a0006dc:	6809      	ldr	r1, [r1, #0]
1a0006de:	420a      	tst	r2, r1
1a0006e0:	d108      	bne.n	1a0006f4 <vPortFree+0x28>
1a0006e2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006e6:	f383 8811 	msr	BASEPRI, r3
1a0006ea:	f3bf 8f6f 	isb	sy
1a0006ee:	f3bf 8f4f 	dsb	sy
1a0006f2:	e7fe      	b.n	1a0006f2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a0006f4:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a0006f8:	b140      	cbz	r0, 1a00070c <vPortFree+0x40>
1a0006fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006fe:	f383 8811 	msr	BASEPRI, r3
1a000702:	f3bf 8f6f 	isb	sy
1a000706:	f3bf 8f4f 	dsb	sy
1a00070a:	e7fe      	b.n	1a00070a <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a00070c:	ea22 0201 	bic.w	r2, r2, r1
1a000710:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a000714:	f000 fe00 	bl	1a001318 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a000718:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a00071c:	4a06      	ldr	r2, [pc, #24]	; (1a000738 <vPortFree+0x6c>)
1a00071e:	6813      	ldr	r3, [r2, #0]
1a000720:	440b      	add	r3, r1
1a000722:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a000724:	4628      	mov	r0, r5
1a000726:	f7ff ff17 	bl	1a000558 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a00072a:	f000 fe8f 	bl	1a00144c <xTaskResumeAll>
}
1a00072e:	bd38      	pop	{r3, r4, r5, pc}
1a000730:	4770      	bx	lr
1a000732:	bf00      	nop
1a000734:	100020b4 	.word	0x100020b4
1a000738:	100020b8 	.word	0x100020b8

1a00073c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a00073c:	b510      	push	{r4, lr}
1a00073e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000740:	f001 fbd8 	bl	1a001ef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000744:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000746:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000748:	429a      	cmp	r2, r3
1a00074a:	d004      	beq.n	1a000756 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a00074c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a00074e:	f001 fbf3 	bl	1a001f38 <vPortExitCritical>

	return xReturn;
}
1a000752:	4620      	mov	r0, r4
1a000754:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000756:	2401      	movs	r4, #1
1a000758:	e7f9      	b.n	1a00074e <prvIsQueueFull+0x12>

1a00075a <prvIsQueueEmpty>:
{
1a00075a:	b510      	push	{r4, lr}
1a00075c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a00075e:	f001 fbc9 	bl	1a001ef4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000762:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000764:	b123      	cbz	r3, 1a000770 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a000766:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a000768:	f001 fbe6 	bl	1a001f38 <vPortExitCritical>
}
1a00076c:	4620      	mov	r0, r4
1a00076e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000770:	2401      	movs	r4, #1
1a000772:	e7f9      	b.n	1a000768 <prvIsQueueEmpty+0xe>

1a000774 <prvCopyDataToQueue>:
{
1a000774:	b570      	push	{r4, r5, r6, lr}
1a000776:	4604      	mov	r4, r0
1a000778:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a00077a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a00077c:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00077e:	b95a      	cbnz	r2, 1a000798 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000780:	6803      	ldr	r3, [r0, #0]
1a000782:	b11b      	cbz	r3, 1a00078c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000784:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000786:	3501      	adds	r5, #1
1a000788:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a00078a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a00078c:	6840      	ldr	r0, [r0, #4]
1a00078e:	f001 f88f 	bl	1a0018b0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000792:	2300      	movs	r3, #0
1a000794:	6063      	str	r3, [r4, #4]
1a000796:	e7f6      	b.n	1a000786 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000798:	b96e      	cbnz	r6, 1a0007b6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a00079a:	6880      	ldr	r0, [r0, #8]
1a00079c:	f002 fffa 	bl	1a003794 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a0007a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0007a2:	68a3      	ldr	r3, [r4, #8]
1a0007a4:	4413      	add	r3, r2
1a0007a6:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0007a8:	6862      	ldr	r2, [r4, #4]
1a0007aa:	4293      	cmp	r3, r2
1a0007ac:	d319      	bcc.n	1a0007e2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a0007ae:	6823      	ldr	r3, [r4, #0]
1a0007b0:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a0007b2:	2000      	movs	r0, #0
1a0007b4:	e7e7      	b.n	1a000786 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0007b6:	68c0      	ldr	r0, [r0, #12]
1a0007b8:	f002 ffec 	bl	1a003794 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a0007bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0007be:	4252      	negs	r2, r2
1a0007c0:	68e3      	ldr	r3, [r4, #12]
1a0007c2:	4413      	add	r3, r2
1a0007c4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0007c6:	6821      	ldr	r1, [r4, #0]
1a0007c8:	428b      	cmp	r3, r1
1a0007ca:	d202      	bcs.n	1a0007d2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a0007cc:	6863      	ldr	r3, [r4, #4]
1a0007ce:	441a      	add	r2, r3
1a0007d0:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a0007d2:	2e02      	cmp	r6, #2
1a0007d4:	d001      	beq.n	1a0007da <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a0007d6:	2000      	movs	r0, #0
1a0007d8:	e7d5      	b.n	1a000786 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0007da:	b125      	cbz	r5, 1a0007e6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a0007dc:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a0007de:	2000      	movs	r0, #0
1a0007e0:	e7d1      	b.n	1a000786 <prvCopyDataToQueue+0x12>
1a0007e2:	2000      	movs	r0, #0
1a0007e4:	e7cf      	b.n	1a000786 <prvCopyDataToQueue+0x12>
1a0007e6:	2000      	movs	r0, #0
1a0007e8:	e7cd      	b.n	1a000786 <prvCopyDataToQueue+0x12>

1a0007ea <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a0007ea:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0007ec:	b172      	cbz	r2, 1a00080c <prvCopyDataFromQueue+0x22>
{
1a0007ee:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a0007f0:	68c3      	ldr	r3, [r0, #12]
1a0007f2:	4413      	add	r3, r2
1a0007f4:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a0007f6:	6844      	ldr	r4, [r0, #4]
1a0007f8:	42a3      	cmp	r3, r4
1a0007fa:	d301      	bcc.n	1a000800 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a0007fc:	6803      	ldr	r3, [r0, #0]
1a0007fe:	60c3      	str	r3, [r0, #12]
1a000800:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000802:	68c1      	ldr	r1, [r0, #12]
1a000804:	4620      	mov	r0, r4
1a000806:	f002 ffc5 	bl	1a003794 <memcpy>
}
1a00080a:	bd10      	pop	{r4, pc}
1a00080c:	4770      	bx	lr

1a00080e <prvUnlockQueue>:
{
1a00080e:	b538      	push	{r3, r4, r5, lr}
1a000810:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a000812:	f001 fb6f 	bl	1a001ef4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a000816:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a00081a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a00081c:	e003      	b.n	1a000826 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a00081e:	f001 f831 	bl	1a001884 <vTaskMissedYield>
			--cTxLock;
1a000822:	3c01      	subs	r4, #1
1a000824:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000826:	2c00      	cmp	r4, #0
1a000828:	dd08      	ble.n	1a00083c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00082a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a00082c:	b133      	cbz	r3, 1a00083c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00082e:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000832:	f000 ff95 	bl	1a001760 <xTaskRemoveFromEventList>
1a000836:	2800      	cmp	r0, #0
1a000838:	d0f3      	beq.n	1a000822 <prvUnlockQueue+0x14>
1a00083a:	e7f0      	b.n	1a00081e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a00083c:	23ff      	movs	r3, #255	; 0xff
1a00083e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a000842:	f001 fb79 	bl	1a001f38 <vPortExitCritical>
	taskENTER_CRITICAL();
1a000846:	f001 fb55 	bl	1a001ef4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a00084a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a00084e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000850:	e003      	b.n	1a00085a <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a000852:	f001 f817 	bl	1a001884 <vTaskMissedYield>
				--cRxLock;
1a000856:	3c01      	subs	r4, #1
1a000858:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a00085a:	2c00      	cmp	r4, #0
1a00085c:	dd08      	ble.n	1a000870 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00085e:	692b      	ldr	r3, [r5, #16]
1a000860:	b133      	cbz	r3, 1a000870 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000862:	f105 0010 	add.w	r0, r5, #16
1a000866:	f000 ff7b 	bl	1a001760 <xTaskRemoveFromEventList>
1a00086a:	2800      	cmp	r0, #0
1a00086c:	d0f3      	beq.n	1a000856 <prvUnlockQueue+0x48>
1a00086e:	e7f0      	b.n	1a000852 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a000870:	23ff      	movs	r3, #255	; 0xff
1a000872:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a000876:	f001 fb5f 	bl	1a001f38 <vPortExitCritical>
}
1a00087a:	bd38      	pop	{r3, r4, r5, pc}

1a00087c <xQueueGenericReset>:
{
1a00087c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a00087e:	b940      	cbnz	r0, 1a000892 <xQueueGenericReset+0x16>
1a000880:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000884:	f383 8811 	msr	BASEPRI, r3
1a000888:	f3bf 8f6f 	isb	sy
1a00088c:	f3bf 8f4f 	dsb	sy
1a000890:	e7fe      	b.n	1a000890 <xQueueGenericReset+0x14>
1a000892:	4604      	mov	r4, r0
1a000894:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a000896:	f001 fb2d 	bl	1a001ef4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a00089a:	6821      	ldr	r1, [r4, #0]
1a00089c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00089e:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0008a0:	fb03 1002 	mla	r0, r3, r2, r1
1a0008a4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a0008a6:	2000      	movs	r0, #0
1a0008a8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a0008aa:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a0008ac:	3a01      	subs	r2, #1
1a0008ae:	fb02 1303 	mla	r3, r2, r3, r1
1a0008b2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0008b4:	23ff      	movs	r3, #255	; 0xff
1a0008b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0008ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a0008be:	b9a5      	cbnz	r5, 1a0008ea <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0008c0:	6923      	ldr	r3, [r4, #16]
1a0008c2:	b91b      	cbnz	r3, 1a0008cc <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a0008c4:	f001 fb38 	bl	1a001f38 <vPortExitCritical>
}
1a0008c8:	2001      	movs	r0, #1
1a0008ca:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0008cc:	f104 0010 	add.w	r0, r4, #16
1a0008d0:	f000 ff46 	bl	1a001760 <xTaskRemoveFromEventList>
1a0008d4:	2800      	cmp	r0, #0
1a0008d6:	d0f5      	beq.n	1a0008c4 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a0008d8:	4b08      	ldr	r3, [pc, #32]	; (1a0008fc <xQueueGenericReset+0x80>)
1a0008da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0008de:	601a      	str	r2, [r3, #0]
1a0008e0:	f3bf 8f4f 	dsb	sy
1a0008e4:	f3bf 8f6f 	isb	sy
1a0008e8:	e7ec      	b.n	1a0008c4 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a0008ea:	f104 0010 	add.w	r0, r4, #16
1a0008ee:	f000 fa6e 	bl	1a000dce <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a0008f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0008f6:	f000 fa6a 	bl	1a000dce <vListInitialise>
1a0008fa:	e7e3      	b.n	1a0008c4 <xQueueGenericReset+0x48>
1a0008fc:	e000ed04 	.word	0xe000ed04

1a000900 <prvInitialiseNewQueue>:
{
1a000900:	b538      	push	{r3, r4, r5, lr}
1a000902:	461d      	mov	r5, r3
1a000904:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a000906:	460b      	mov	r3, r1
1a000908:	b149      	cbz	r1, 1a00091e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a00090a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a00090c:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a00090e:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000910:	2101      	movs	r1, #1
1a000912:	4620      	mov	r0, r4
1a000914:	f7ff ffb2 	bl	1a00087c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000918:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a00091c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a00091e:	6024      	str	r4, [r4, #0]
1a000920:	e7f4      	b.n	1a00090c <prvInitialiseNewQueue+0xc>

1a000922 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000922:	b940      	cbnz	r0, 1a000936 <xQueueGenericCreateStatic+0x14>
1a000924:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000928:	f383 8811 	msr	BASEPRI, r3
1a00092c:	f3bf 8f6f 	isb	sy
1a000930:	f3bf 8f4f 	dsb	sy
1a000934:	e7fe      	b.n	1a000934 <xQueueGenericCreateStatic+0x12>
	{
1a000936:	b510      	push	{r4, lr}
1a000938:	b084      	sub	sp, #16
1a00093a:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a00093c:	b153      	cbz	r3, 1a000954 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a00093e:	b192      	cbz	r2, 1a000966 <xQueueGenericCreateStatic+0x44>
1a000940:	b989      	cbnz	r1, 1a000966 <xQueueGenericCreateStatic+0x44>
1a000942:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000946:	f383 8811 	msr	BASEPRI, r3
1a00094a:	f3bf 8f6f 	isb	sy
1a00094e:	f3bf 8f4f 	dsb	sy
1a000952:	e7fe      	b.n	1a000952 <xQueueGenericCreateStatic+0x30>
1a000954:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000958:	f383 8811 	msr	BASEPRI, r3
1a00095c:	f3bf 8f6f 	isb	sy
1a000960:	f3bf 8f4f 	dsb	sy
1a000964:	e7fe      	b.n	1a000964 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000966:	b94a      	cbnz	r2, 1a00097c <xQueueGenericCreateStatic+0x5a>
1a000968:	b141      	cbz	r1, 1a00097c <xQueueGenericCreateStatic+0x5a>
1a00096a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00096e:	f383 8811 	msr	BASEPRI, r3
1a000972:	f3bf 8f6f 	isb	sy
1a000976:	f3bf 8f4f 	dsb	sy
1a00097a:	e7fe      	b.n	1a00097a <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a00097c:	2050      	movs	r0, #80	; 0x50
1a00097e:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000980:	9803      	ldr	r0, [sp, #12]
1a000982:	2850      	cmp	r0, #80	; 0x50
1a000984:	d008      	beq.n	1a000998 <xQueueGenericCreateStatic+0x76>
1a000986:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00098a:	f383 8811 	msr	BASEPRI, r3
1a00098e:	f3bf 8f6f 	isb	sy
1a000992:	f3bf 8f4f 	dsb	sy
1a000996:	e7fe      	b.n	1a000996 <xQueueGenericCreateStatic+0x74>
1a000998:	4620      	mov	r0, r4
1a00099a:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a00099c:	2301      	movs	r3, #1
1a00099e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0009a2:	9400      	str	r4, [sp, #0]
1a0009a4:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a0009a8:	f7ff ffaa 	bl	1a000900 <prvInitialiseNewQueue>
	}
1a0009ac:	4620      	mov	r0, r4
1a0009ae:	b004      	add	sp, #16
1a0009b0:	bd10      	pop	{r4, pc}
1a0009b2:	Address 0x000000001a0009b2 is out of bounds.


1a0009b4 <xQueueGenericSend>:
{
1a0009b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0009b6:	b085      	sub	sp, #20
1a0009b8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a0009ba:	b160      	cbz	r0, 1a0009d6 <xQueueGenericSend+0x22>
1a0009bc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0009be:	b999      	cbnz	r1, 1a0009e8 <xQueueGenericSend+0x34>
1a0009c0:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0009c2:	b18a      	cbz	r2, 1a0009e8 <xQueueGenericSend+0x34>
1a0009c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009c8:	f383 8811 	msr	BASEPRI, r3
1a0009cc:	f3bf 8f6f 	isb	sy
1a0009d0:	f3bf 8f4f 	dsb	sy
1a0009d4:	e7fe      	b.n	1a0009d4 <xQueueGenericSend+0x20>
1a0009d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009da:	f383 8811 	msr	BASEPRI, r3
1a0009de:	f3bf 8f6f 	isb	sy
1a0009e2:	f3bf 8f4f 	dsb	sy
1a0009e6:	e7fe      	b.n	1a0009e6 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0009e8:	2b02      	cmp	r3, #2
1a0009ea:	d10b      	bne.n	1a000a04 <xQueueGenericSend+0x50>
1a0009ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0009ee:	2a01      	cmp	r2, #1
1a0009f0:	d008      	beq.n	1a000a04 <xQueueGenericSend+0x50>
1a0009f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009f6:	f383 8811 	msr	BASEPRI, r3
1a0009fa:	f3bf 8f6f 	isb	sy
1a0009fe:	f3bf 8f4f 	dsb	sy
1a000a02:	e7fe      	b.n	1a000a02 <xQueueGenericSend+0x4e>
1a000a04:	461e      	mov	r6, r3
1a000a06:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000a08:	f000 ff42 	bl	1a001890 <xTaskGetSchedulerState>
1a000a0c:	b950      	cbnz	r0, 1a000a24 <xQueueGenericSend+0x70>
1a000a0e:	9b01      	ldr	r3, [sp, #4]
1a000a10:	b153      	cbz	r3, 1a000a28 <xQueueGenericSend+0x74>
1a000a12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a16:	f383 8811 	msr	BASEPRI, r3
1a000a1a:	f3bf 8f6f 	isb	sy
1a000a1e:	f3bf 8f4f 	dsb	sy
1a000a22:	e7fe      	b.n	1a000a22 <xQueueGenericSend+0x6e>
1a000a24:	2500      	movs	r5, #0
1a000a26:	e03a      	b.n	1a000a9e <xQueueGenericSend+0xea>
1a000a28:	2500      	movs	r5, #0
1a000a2a:	e038      	b.n	1a000a9e <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000a2c:	4632      	mov	r2, r6
1a000a2e:	4639      	mov	r1, r7
1a000a30:	4620      	mov	r0, r4
1a000a32:	f7ff fe9f 	bl	1a000774 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000a36:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000a38:	b94b      	cbnz	r3, 1a000a4e <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a000a3a:	b1a8      	cbz	r0, 1a000a68 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a000a3c:	4b3b      	ldr	r3, [pc, #236]	; (1a000b2c <xQueueGenericSend+0x178>)
1a000a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000a42:	601a      	str	r2, [r3, #0]
1a000a44:	f3bf 8f4f 	dsb	sy
1a000a48:	f3bf 8f6f 	isb	sy
1a000a4c:	e00c      	b.n	1a000a68 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000a4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000a52:	f000 fe85 	bl	1a001760 <xTaskRemoveFromEventList>
1a000a56:	b138      	cbz	r0, 1a000a68 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a000a58:	4b34      	ldr	r3, [pc, #208]	; (1a000b2c <xQueueGenericSend+0x178>)
1a000a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000a5e:	601a      	str	r2, [r3, #0]
1a000a60:	f3bf 8f4f 	dsb	sy
1a000a64:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000a68:	f001 fa66 	bl	1a001f38 <vPortExitCritical>
				return pdPASS;
1a000a6c:	2001      	movs	r0, #1
}
1a000a6e:	b005      	add	sp, #20
1a000a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a000a72:	f001 fa61 	bl	1a001f38 <vPortExitCritical>
					return errQUEUE_FULL;
1a000a76:	2000      	movs	r0, #0
1a000a78:	e7f9      	b.n	1a000a6e <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000a7a:	a802      	add	r0, sp, #8
1a000a7c:	f000 feb6 	bl	1a0017ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000a80:	2501      	movs	r5, #1
1a000a82:	e019      	b.n	1a000ab8 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a000a84:	2300      	movs	r3, #0
1a000a86:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000a8a:	e021      	b.n	1a000ad0 <xQueueGenericSend+0x11c>
1a000a8c:	2300      	movs	r3, #0
1a000a8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000a92:	e023      	b.n	1a000adc <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a000a94:	4620      	mov	r0, r4
1a000a96:	f7ff feba 	bl	1a00080e <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000a9a:	f000 fcd7 	bl	1a00144c <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000a9e:	f001 fa29 	bl	1a001ef4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000aa2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000aa4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000aa6:	429a      	cmp	r2, r3
1a000aa8:	d3c0      	bcc.n	1a000a2c <xQueueGenericSend+0x78>
1a000aaa:	2e02      	cmp	r6, #2
1a000aac:	d0be      	beq.n	1a000a2c <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000aae:	9b01      	ldr	r3, [sp, #4]
1a000ab0:	2b00      	cmp	r3, #0
1a000ab2:	d0de      	beq.n	1a000a72 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a000ab4:	2d00      	cmp	r5, #0
1a000ab6:	d0e0      	beq.n	1a000a7a <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a000ab8:	f001 fa3e 	bl	1a001f38 <vPortExitCritical>
		vTaskSuspendAll();
1a000abc:	f000 fc2c 	bl	1a001318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000ac0:	f001 fa18 	bl	1a001ef4 <vPortEnterCritical>
1a000ac4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000ac8:	b25b      	sxtb	r3, r3
1a000aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000ace:	d0d9      	beq.n	1a000a84 <xQueueGenericSend+0xd0>
1a000ad0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000ad4:	b25b      	sxtb	r3, r3
1a000ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000ada:	d0d7      	beq.n	1a000a8c <xQueueGenericSend+0xd8>
1a000adc:	f001 fa2c 	bl	1a001f38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000ae0:	a901      	add	r1, sp, #4
1a000ae2:	a802      	add	r0, sp, #8
1a000ae4:	f000 fe8e 	bl	1a001804 <xTaskCheckForTimeOut>
1a000ae8:	b9c8      	cbnz	r0, 1a000b1e <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000aea:	4620      	mov	r0, r4
1a000aec:	f7ff fe26 	bl	1a00073c <prvIsQueueFull>
1a000af0:	2800      	cmp	r0, #0
1a000af2:	d0cf      	beq.n	1a000a94 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000af4:	9901      	ldr	r1, [sp, #4]
1a000af6:	f104 0010 	add.w	r0, r4, #16
1a000afa:	f000 fdfd 	bl	1a0016f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000afe:	4620      	mov	r0, r4
1a000b00:	f7ff fe85 	bl	1a00080e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000b04:	f000 fca2 	bl	1a00144c <xTaskResumeAll>
1a000b08:	2800      	cmp	r0, #0
1a000b0a:	d1c8      	bne.n	1a000a9e <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a000b0c:	4b07      	ldr	r3, [pc, #28]	; (1a000b2c <xQueueGenericSend+0x178>)
1a000b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b12:	601a      	str	r2, [r3, #0]
1a000b14:	f3bf 8f4f 	dsb	sy
1a000b18:	f3bf 8f6f 	isb	sy
1a000b1c:	e7bf      	b.n	1a000a9e <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a000b1e:	4620      	mov	r0, r4
1a000b20:	f7ff fe75 	bl	1a00080e <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000b24:	f000 fc92 	bl	1a00144c <xTaskResumeAll>
			return errQUEUE_FULL;
1a000b28:	2000      	movs	r0, #0
1a000b2a:	e7a0      	b.n	1a000a6e <xQueueGenericSend+0xba>
1a000b2c:	e000ed04 	.word	0xe000ed04

1a000b30 <xQueueGenericSendFromISR>:
{
1a000b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000b34:	b160      	cbz	r0, 1a000b50 <xQueueGenericSendFromISR+0x20>
1a000b36:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000b38:	b999      	cbnz	r1, 1a000b62 <xQueueGenericSendFromISR+0x32>
1a000b3a:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000b3c:	b188      	cbz	r0, 1a000b62 <xQueueGenericSendFromISR+0x32>
1a000b3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b42:	f383 8811 	msr	BASEPRI, r3
1a000b46:	f3bf 8f6f 	isb	sy
1a000b4a:	f3bf 8f4f 	dsb	sy
1a000b4e:	e7fe      	b.n	1a000b4e <xQueueGenericSendFromISR+0x1e>
1a000b50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b54:	f383 8811 	msr	BASEPRI, r3
1a000b58:	f3bf 8f6f 	isb	sy
1a000b5c:	f3bf 8f4f 	dsb	sy
1a000b60:	e7fe      	b.n	1a000b60 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000b62:	2b02      	cmp	r3, #2
1a000b64:	d10b      	bne.n	1a000b7e <xQueueGenericSendFromISR+0x4e>
1a000b66:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000b68:	2801      	cmp	r0, #1
1a000b6a:	d008      	beq.n	1a000b7e <xQueueGenericSendFromISR+0x4e>
1a000b6c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b70:	f383 8811 	msr	BASEPRI, r3
1a000b74:	f3bf 8f6f 	isb	sy
1a000b78:	f3bf 8f4f 	dsb	sy
1a000b7c:	e7fe      	b.n	1a000b7c <xQueueGenericSendFromISR+0x4c>
1a000b7e:	461f      	mov	r7, r3
1a000b80:	4690      	mov	r8, r2
1a000b82:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000b84:	f001 fae0 	bl	1a002148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000b88:	f3ef 8611 	mrs	r6, BASEPRI
1a000b8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b90:	f383 8811 	msr	BASEPRI, r3
1a000b94:	f3bf 8f6f 	isb	sy
1a000b98:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000b9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000b9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000ba0:	429a      	cmp	r2, r3
1a000ba2:	d303      	bcc.n	1a000bac <xQueueGenericSendFromISR+0x7c>
1a000ba4:	2f02      	cmp	r7, #2
1a000ba6:	d001      	beq.n	1a000bac <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a000ba8:	2000      	movs	r0, #0
1a000baa:	e00f      	b.n	1a000bcc <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a000bac:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000bb0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000bb2:	463a      	mov	r2, r7
1a000bb4:	4649      	mov	r1, r9
1a000bb6:	4620      	mov	r0, r4
1a000bb8:	f7ff fddc 	bl	1a000774 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000bbc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000bc0:	d008      	beq.n	1a000bd4 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000bc2:	1c6b      	adds	r3, r5, #1
1a000bc4:	b25b      	sxtb	r3, r3
1a000bc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000bca:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000bcc:	f386 8811 	msr	BASEPRI, r6
}
1a000bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000bd6:	b15b      	cbz	r3, 1a000bf0 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000bd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000bdc:	f000 fdc0 	bl	1a001760 <xTaskRemoveFromEventList>
1a000be0:	b140      	cbz	r0, 1a000bf4 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a000be2:	f1b8 0f00 	cmp.w	r8, #0
1a000be6:	d007      	beq.n	1a000bf8 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000be8:	2001      	movs	r0, #1
1a000bea:	f8c8 0000 	str.w	r0, [r8]
1a000bee:	e7ed      	b.n	1a000bcc <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a000bf0:	2001      	movs	r0, #1
1a000bf2:	e7eb      	b.n	1a000bcc <xQueueGenericSendFromISR+0x9c>
1a000bf4:	2001      	movs	r0, #1
1a000bf6:	e7e9      	b.n	1a000bcc <xQueueGenericSendFromISR+0x9c>
1a000bf8:	2001      	movs	r0, #1
1a000bfa:	e7e7      	b.n	1a000bcc <xQueueGenericSendFromISR+0x9c>

1a000bfc <xQueueReceive>:
{
1a000bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000bfe:	b085      	sub	sp, #20
1a000c00:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000c02:	b160      	cbz	r0, 1a000c1e <xQueueReceive+0x22>
1a000c04:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000c06:	b999      	cbnz	r1, 1a000c30 <xQueueReceive+0x34>
1a000c08:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000c0a:	b18b      	cbz	r3, 1a000c30 <xQueueReceive+0x34>
	__asm volatile
1a000c0c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c10:	f383 8811 	msr	BASEPRI, r3
1a000c14:	f3bf 8f6f 	isb	sy
1a000c18:	f3bf 8f4f 	dsb	sy
1a000c1c:	e7fe      	b.n	1a000c1c <xQueueReceive+0x20>
1a000c1e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c22:	f383 8811 	msr	BASEPRI, r3
1a000c26:	f3bf 8f6f 	isb	sy
1a000c2a:	f3bf 8f4f 	dsb	sy
1a000c2e:	e7fe      	b.n	1a000c2e <xQueueReceive+0x32>
1a000c30:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000c32:	f000 fe2d 	bl	1a001890 <xTaskGetSchedulerState>
1a000c36:	b950      	cbnz	r0, 1a000c4e <xQueueReceive+0x52>
1a000c38:	9b01      	ldr	r3, [sp, #4]
1a000c3a:	b153      	cbz	r3, 1a000c52 <xQueueReceive+0x56>
1a000c3c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c40:	f383 8811 	msr	BASEPRI, r3
1a000c44:	f3bf 8f6f 	isb	sy
1a000c48:	f3bf 8f4f 	dsb	sy
1a000c4c:	e7fe      	b.n	1a000c4c <xQueueReceive+0x50>
1a000c4e:	2600      	movs	r6, #0
1a000c50:	e03e      	b.n	1a000cd0 <xQueueReceive+0xd4>
1a000c52:	2600      	movs	r6, #0
1a000c54:	e03c      	b.n	1a000cd0 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000c56:	4639      	mov	r1, r7
1a000c58:	4620      	mov	r0, r4
1a000c5a:	f7ff fdc6 	bl	1a0007ea <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000c5e:	3d01      	subs	r5, #1
1a000c60:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000c62:	6923      	ldr	r3, [r4, #16]
1a000c64:	b923      	cbnz	r3, 1a000c70 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a000c66:	f001 f967 	bl	1a001f38 <vPortExitCritical>
				return pdPASS;
1a000c6a:	2001      	movs	r0, #1
}
1a000c6c:	b005      	add	sp, #20
1a000c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000c70:	f104 0010 	add.w	r0, r4, #16
1a000c74:	f000 fd74 	bl	1a001760 <xTaskRemoveFromEventList>
1a000c78:	2800      	cmp	r0, #0
1a000c7a:	d0f4      	beq.n	1a000c66 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a000c7c:	4b34      	ldr	r3, [pc, #208]	; (1a000d50 <xQueueReceive+0x154>)
1a000c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000c82:	601a      	str	r2, [r3, #0]
1a000c84:	f3bf 8f4f 	dsb	sy
1a000c88:	f3bf 8f6f 	isb	sy
1a000c8c:	e7eb      	b.n	1a000c66 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a000c8e:	f001 f953 	bl	1a001f38 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000c92:	2000      	movs	r0, #0
1a000c94:	e7ea      	b.n	1a000c6c <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000c96:	a802      	add	r0, sp, #8
1a000c98:	f000 fda8 	bl	1a0017ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000c9c:	2601      	movs	r6, #1
1a000c9e:	e021      	b.n	1a000ce4 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a000ca0:	2300      	movs	r3, #0
1a000ca2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000ca6:	e029      	b.n	1a000cfc <xQueueReceive+0x100>
1a000ca8:	2300      	movs	r3, #0
1a000caa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000cae:	e02b      	b.n	1a000d08 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a000cb0:	4620      	mov	r0, r4
1a000cb2:	f7ff fdac 	bl	1a00080e <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000cb6:	f000 fbc9 	bl	1a00144c <xTaskResumeAll>
1a000cba:	e009      	b.n	1a000cd0 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a000cbc:	4620      	mov	r0, r4
1a000cbe:	f7ff fda6 	bl	1a00080e <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000cc2:	f000 fbc3 	bl	1a00144c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000cc6:	4620      	mov	r0, r4
1a000cc8:	f7ff fd47 	bl	1a00075a <prvIsQueueEmpty>
1a000ccc:	2800      	cmp	r0, #0
1a000cce:	d13d      	bne.n	1a000d4c <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a000cd0:	f001 f910 	bl	1a001ef4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000cd4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000cd6:	2d00      	cmp	r5, #0
1a000cd8:	d1bd      	bne.n	1a000c56 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000cda:	9b01      	ldr	r3, [sp, #4]
1a000cdc:	2b00      	cmp	r3, #0
1a000cde:	d0d6      	beq.n	1a000c8e <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a000ce0:	2e00      	cmp	r6, #0
1a000ce2:	d0d8      	beq.n	1a000c96 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a000ce4:	f001 f928 	bl	1a001f38 <vPortExitCritical>
		vTaskSuspendAll();
1a000ce8:	f000 fb16 	bl	1a001318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000cec:	f001 f902 	bl	1a001ef4 <vPortEnterCritical>
1a000cf0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000cf4:	b25b      	sxtb	r3, r3
1a000cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000cfa:	d0d1      	beq.n	1a000ca0 <xQueueReceive+0xa4>
1a000cfc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000d00:	b25b      	sxtb	r3, r3
1a000d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000d06:	d0cf      	beq.n	1a000ca8 <xQueueReceive+0xac>
1a000d08:	f001 f916 	bl	1a001f38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000d0c:	a901      	add	r1, sp, #4
1a000d0e:	a802      	add	r0, sp, #8
1a000d10:	f000 fd78 	bl	1a001804 <xTaskCheckForTimeOut>
1a000d14:	2800      	cmp	r0, #0
1a000d16:	d1d1      	bne.n	1a000cbc <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000d18:	4620      	mov	r0, r4
1a000d1a:	f7ff fd1e 	bl	1a00075a <prvIsQueueEmpty>
1a000d1e:	2800      	cmp	r0, #0
1a000d20:	d0c6      	beq.n	1a000cb0 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000d22:	9901      	ldr	r1, [sp, #4]
1a000d24:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000d28:	f000 fce6 	bl	1a0016f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000d2c:	4620      	mov	r0, r4
1a000d2e:	f7ff fd6e 	bl	1a00080e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000d32:	f000 fb8b 	bl	1a00144c <xTaskResumeAll>
1a000d36:	2800      	cmp	r0, #0
1a000d38:	d1ca      	bne.n	1a000cd0 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a000d3a:	4b05      	ldr	r3, [pc, #20]	; (1a000d50 <xQueueReceive+0x154>)
1a000d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d40:	601a      	str	r2, [r3, #0]
1a000d42:	f3bf 8f4f 	dsb	sy
1a000d46:	f3bf 8f6f 	isb	sy
1a000d4a:	e7c1      	b.n	1a000cd0 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a000d4c:	2000      	movs	r0, #0
1a000d4e:	e78d      	b.n	1a000c6c <xQueueReceive+0x70>
1a000d50:	e000ed04 	.word	0xe000ed04

1a000d54 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000d54:	2300      	movs	r3, #0
1a000d56:	2b07      	cmp	r3, #7
1a000d58:	d80c      	bhi.n	1a000d74 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a000d5a:	4a07      	ldr	r2, [pc, #28]	; (1a000d78 <vQueueAddToRegistry+0x24>)
1a000d5c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a000d60:	b10a      	cbz	r2, 1a000d66 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000d62:	3301      	adds	r3, #1
1a000d64:	e7f7      	b.n	1a000d56 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a000d66:	4a04      	ldr	r2, [pc, #16]	; (1a000d78 <vQueueAddToRegistry+0x24>)
1a000d68:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a000d6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a000d70:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a000d72:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a000d74:	4770      	bx	lr
1a000d76:	bf00      	nop
1a000d78:	10002b40 	.word	0x10002b40

1a000d7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a000d7c:	b570      	push	{r4, r5, r6, lr}
1a000d7e:	4604      	mov	r4, r0
1a000d80:	460d      	mov	r5, r1
1a000d82:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a000d84:	f001 f8b6 	bl	1a001ef4 <vPortEnterCritical>
1a000d88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000d8c:	b25b      	sxtb	r3, r3
1a000d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000d92:	d00d      	beq.n	1a000db0 <vQueueWaitForMessageRestricted+0x34>
1a000d94:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000d98:	b25b      	sxtb	r3, r3
1a000d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000d9e:	d00b      	beq.n	1a000db8 <vQueueWaitForMessageRestricted+0x3c>
1a000da0:	f001 f8ca 	bl	1a001f38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a000da4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000da6:	b15b      	cbz	r3, 1a000dc0 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a000da8:	4620      	mov	r0, r4
1a000daa:	f7ff fd30 	bl	1a00080e <prvUnlockQueue>
	}
1a000dae:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a000db0:	2300      	movs	r3, #0
1a000db2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000db6:	e7ed      	b.n	1a000d94 <vQueueWaitForMessageRestricted+0x18>
1a000db8:	2300      	movs	r3, #0
1a000dba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000dbe:	e7ef      	b.n	1a000da0 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a000dc0:	4632      	mov	r2, r6
1a000dc2:	4629      	mov	r1, r5
1a000dc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000dc8:	f000 fcae 	bl	1a001728 <vTaskPlaceOnEventListRestricted>
1a000dcc:	e7ec      	b.n	1a000da8 <vQueueWaitForMessageRestricted+0x2c>

1a000dce <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000dce:	f100 0308 	add.w	r3, r0, #8
1a000dd2:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a000dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000dd8:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000dda:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000ddc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a000dde:	2300      	movs	r3, #0
1a000de0:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a000de2:	4770      	bx	lr

1a000de4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a000de4:	2300      	movs	r3, #0
1a000de6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a000de8:	4770      	bx	lr

1a000dea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a000dea:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a000dec:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a000dee:	689a      	ldr	r2, [r3, #8]
1a000df0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a000df2:	689a      	ldr	r2, [r3, #8]
1a000df4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a000df6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000df8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000dfa:	6803      	ldr	r3, [r0, #0]
1a000dfc:	3301      	adds	r3, #1
1a000dfe:	6003      	str	r3, [r0, #0]
}
1a000e00:	4770      	bx	lr

1a000e02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a000e02:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a000e04:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a000e06:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000e0a:	d002      	beq.n	1a000e12 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000e0c:	f100 0208 	add.w	r2, r0, #8
1a000e10:	e002      	b.n	1a000e18 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a000e12:	6902      	ldr	r2, [r0, #16]
1a000e14:	e004      	b.n	1a000e20 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a000e16:	461a      	mov	r2, r3
1a000e18:	6853      	ldr	r3, [r2, #4]
1a000e1a:	681c      	ldr	r4, [r3, #0]
1a000e1c:	42ac      	cmp	r4, r5
1a000e1e:	d9fa      	bls.n	1a000e16 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a000e20:	6853      	ldr	r3, [r2, #4]
1a000e22:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a000e24:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a000e26:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a000e28:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a000e2a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a000e2c:	6803      	ldr	r3, [r0, #0]
1a000e2e:	3301      	adds	r3, #1
1a000e30:	6003      	str	r3, [r0, #0]
}
1a000e32:	bc30      	pop	{r4, r5}
1a000e34:	4770      	bx	lr

1a000e36 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a000e36:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a000e38:	6842      	ldr	r2, [r0, #4]
1a000e3a:	6881      	ldr	r1, [r0, #8]
1a000e3c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a000e3e:	6882      	ldr	r2, [r0, #8]
1a000e40:	6841      	ldr	r1, [r0, #4]
1a000e42:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a000e44:	685a      	ldr	r2, [r3, #4]
1a000e46:	4282      	cmp	r2, r0
1a000e48:	d006      	beq.n	1a000e58 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a000e4a:	2200      	movs	r2, #0
1a000e4c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a000e4e:	681a      	ldr	r2, [r3, #0]
1a000e50:	3a01      	subs	r2, #1
1a000e52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a000e54:	6818      	ldr	r0, [r3, #0]
}
1a000e56:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a000e58:	6882      	ldr	r2, [r0, #8]
1a000e5a:	605a      	str	r2, [r3, #4]
1a000e5c:	e7f5      	b.n	1a000e4a <uxListRemove+0x14>
1a000e5e:	Address 0x000000001a000e5e is out of bounds.


1a000e60 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a000e60:	4b03      	ldr	r3, [pc, #12]	; (1a000e70 <vApplicationGetIdleTaskMemory+0x10>)
1a000e62:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a000e64:	4b03      	ldr	r3, [pc, #12]	; (1a000e74 <vApplicationGetIdleTaskMemory+0x14>)
1a000e66:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a000e68:	235a      	movs	r3, #90	; 0x5a
1a000e6a:	6013      	str	r3, [r2, #0]
}
1a000e6c:	4770      	bx	lr
1a000e6e:	bf00      	nop
1a000e70:	100027d0 	.word	0x100027d0
1a000e74:	100020c8 	.word	0x100020c8

1a000e78 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a000e78:	4b03      	ldr	r3, [pc, #12]	; (1a000e88 <vApplicationGetTimerTaskMemory+0x10>)
1a000e7a:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a000e7c:	4b03      	ldr	r3, [pc, #12]	; (1a000e8c <vApplicationGetTimerTaskMemory+0x14>)
1a000e7e:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a000e80:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a000e84:	6013      	str	r3, [r2, #0]
1a000e86:	4770      	bx	lr
1a000e88:	10002830 	.word	0x10002830
1a000e8c:	10002230 	.word	0x10002230

1a000e90 <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a000e90:	e7fe      	b.n	1a000e90 <vApplicationStackOverflowHook>

1a000e92 <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a000e92:	e7fe      	b.n	1a000e92 <vApplicationMallocFailedHook>

1a000e94 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a000e94:	4b08      	ldr	r3, [pc, #32]	; (1a000eb8 <prvResetNextTaskUnblockTime+0x24>)
1a000e96:	681b      	ldr	r3, [r3, #0]
1a000e98:	681b      	ldr	r3, [r3, #0]
1a000e9a:	b13b      	cbz	r3, 1a000eac <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a000e9c:	4b06      	ldr	r3, [pc, #24]	; (1a000eb8 <prvResetNextTaskUnblockTime+0x24>)
1a000e9e:	681b      	ldr	r3, [r3, #0]
1a000ea0:	68db      	ldr	r3, [r3, #12]
1a000ea2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a000ea4:	685a      	ldr	r2, [r3, #4]
1a000ea6:	4b05      	ldr	r3, [pc, #20]	; (1a000ebc <prvResetNextTaskUnblockTime+0x28>)
1a000ea8:	601a      	str	r2, [r3, #0]
	}
}
1a000eaa:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a000eac:	4b03      	ldr	r3, [pc, #12]	; (1a000ebc <prvResetNextTaskUnblockTime+0x28>)
1a000eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000eb2:	601a      	str	r2, [r3, #0]
1a000eb4:	4770      	bx	lr
1a000eb6:	bf00      	nop
1a000eb8:	10002894 	.word	0x10002894
1a000ebc:	10002968 	.word	0x10002968

1a000ec0 <prvInitialiseNewTask>:
{
1a000ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000ec4:	4681      	mov	r9, r0
1a000ec6:	460d      	mov	r5, r1
1a000ec8:	4617      	mov	r7, r2
1a000eca:	469a      	mov	sl, r3
1a000ecc:	9e08      	ldr	r6, [sp, #32]
1a000ece:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a000ed2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a000ed4:	0092      	lsls	r2, r2, #2
1a000ed6:	21a5      	movs	r1, #165	; 0xa5
1a000ed8:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a000eda:	f002 fc66 	bl	1a0037aa <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a000ede:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a000ee0:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a000ee4:	3a01      	subs	r2, #1
1a000ee6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a000eea:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a000eee:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000ef0:	2300      	movs	r3, #0
1a000ef2:	2b0f      	cmp	r3, #15
1a000ef4:	d807      	bhi.n	1a000f06 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a000ef6:	5ce9      	ldrb	r1, [r5, r3]
1a000ef8:	18e2      	adds	r2, r4, r3
1a000efa:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a000efe:	5cea      	ldrb	r2, [r5, r3]
1a000f00:	b10a      	cbz	r2, 1a000f06 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a000f02:	3301      	adds	r3, #1
1a000f04:	e7f5      	b.n	1a000ef2 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a000f06:	2300      	movs	r3, #0
1a000f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a000f0c:	2e06      	cmp	r6, #6
1a000f0e:	d900      	bls.n	1a000f12 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a000f10:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a000f12:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a000f14:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a000f16:	2500      	movs	r5, #0
1a000f18:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a000f1a:	1d20      	adds	r0, r4, #4
1a000f1c:	f7ff ff62 	bl	1a000de4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a000f20:	f104 0018 	add.w	r0, r4, #24
1a000f24:	f7ff ff5e 	bl	1a000de4 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a000f28:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000f2a:	f1c6 0607 	rsb	r6, r6, #7
1a000f2e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a000f30:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a000f32:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a000f34:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a000f38:	4652      	mov	r2, sl
1a000f3a:	4649      	mov	r1, r9
1a000f3c:	4638      	mov	r0, r7
1a000f3e:	f000 ffad 	bl	1a001e9c <pxPortInitialiseStack>
1a000f42:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a000f44:	f1b8 0f00 	cmp.w	r8, #0
1a000f48:	d001      	beq.n	1a000f4e <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a000f4a:	f8c8 4000 	str.w	r4, [r8]
}
1a000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a000f52:	Address 0x000000001a000f52 is out of bounds.


1a000f54 <prvInitialiseTaskLists>:
{
1a000f54:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a000f56:	2400      	movs	r4, #0
1a000f58:	e007      	b.n	1a000f6a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a000f5a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a000f5e:	0093      	lsls	r3, r2, #2
1a000f60:	480e      	ldr	r0, [pc, #56]	; (1a000f9c <prvInitialiseTaskLists+0x48>)
1a000f62:	4418      	add	r0, r3
1a000f64:	f7ff ff33 	bl	1a000dce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a000f68:	3401      	adds	r4, #1
1a000f6a:	2c06      	cmp	r4, #6
1a000f6c:	d9f5      	bls.n	1a000f5a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a000f6e:	4d0c      	ldr	r5, [pc, #48]	; (1a000fa0 <prvInitialiseTaskLists+0x4c>)
1a000f70:	4628      	mov	r0, r5
1a000f72:	f7ff ff2c 	bl	1a000dce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a000f76:	4c0b      	ldr	r4, [pc, #44]	; (1a000fa4 <prvInitialiseTaskLists+0x50>)
1a000f78:	4620      	mov	r0, r4
1a000f7a:	f7ff ff28 	bl	1a000dce <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a000f7e:	480a      	ldr	r0, [pc, #40]	; (1a000fa8 <prvInitialiseTaskLists+0x54>)
1a000f80:	f7ff ff25 	bl	1a000dce <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a000f84:	4809      	ldr	r0, [pc, #36]	; (1a000fac <prvInitialiseTaskLists+0x58>)
1a000f86:	f7ff ff22 	bl	1a000dce <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a000f8a:	4809      	ldr	r0, [pc, #36]	; (1a000fb0 <prvInitialiseTaskLists+0x5c>)
1a000f8c:	f7ff ff1f 	bl	1a000dce <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a000f90:	4b08      	ldr	r3, [pc, #32]	; (1a000fb4 <prvInitialiseTaskLists+0x60>)
1a000f92:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a000f94:	4b08      	ldr	r3, [pc, #32]	; (1a000fb8 <prvInitialiseTaskLists+0x64>)
1a000f96:	601c      	str	r4, [r3, #0]
}
1a000f98:	bd38      	pop	{r3, r4, r5, pc}
1a000f9a:	bf00      	nop
1a000f9c:	1000289c 	.word	0x1000289c
1a000fa0:	10002940 	.word	0x10002940
1a000fa4:	10002954 	.word	0x10002954
1a000fa8:	10002970 	.word	0x10002970
1a000fac:	1000299c 	.word	0x1000299c
1a000fb0:	10002988 	.word	0x10002988
1a000fb4:	10002894 	.word	0x10002894
1a000fb8:	10002898 	.word	0x10002898

1a000fbc <prvAddNewTaskToReadyList>:
{
1a000fbc:	b510      	push	{r4, lr}
1a000fbe:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000fc0:	f000 ff98 	bl	1a001ef4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a000fc4:	4a21      	ldr	r2, [pc, #132]	; (1a00104c <prvAddNewTaskToReadyList+0x90>)
1a000fc6:	6813      	ldr	r3, [r2, #0]
1a000fc8:	3301      	adds	r3, #1
1a000fca:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a000fcc:	4b20      	ldr	r3, [pc, #128]	; (1a001050 <prvAddNewTaskToReadyList+0x94>)
1a000fce:	681b      	ldr	r3, [r3, #0]
1a000fd0:	b15b      	cbz	r3, 1a000fea <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a000fd2:	4b20      	ldr	r3, [pc, #128]	; (1a001054 <prvAddNewTaskToReadyList+0x98>)
1a000fd4:	681b      	ldr	r3, [r3, #0]
1a000fd6:	b96b      	cbnz	r3, 1a000ff4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a000fd8:	4b1d      	ldr	r3, [pc, #116]	; (1a001050 <prvAddNewTaskToReadyList+0x94>)
1a000fda:	681b      	ldr	r3, [r3, #0]
1a000fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a000fde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a000fe0:	429a      	cmp	r2, r3
1a000fe2:	d807      	bhi.n	1a000ff4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a000fe4:	4b1a      	ldr	r3, [pc, #104]	; (1a001050 <prvAddNewTaskToReadyList+0x94>)
1a000fe6:	601c      	str	r4, [r3, #0]
1a000fe8:	e004      	b.n	1a000ff4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a000fea:	4b19      	ldr	r3, [pc, #100]	; (1a001050 <prvAddNewTaskToReadyList+0x94>)
1a000fec:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a000fee:	6813      	ldr	r3, [r2, #0]
1a000ff0:	2b01      	cmp	r3, #1
1a000ff2:	d027      	beq.n	1a001044 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a000ff4:	4a18      	ldr	r2, [pc, #96]	; (1a001058 <prvAddNewTaskToReadyList+0x9c>)
1a000ff6:	6813      	ldr	r3, [r2, #0]
1a000ff8:	3301      	adds	r3, #1
1a000ffa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a000ffc:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a000ffe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001000:	2201      	movs	r2, #1
1a001002:	409a      	lsls	r2, r3
1a001004:	4915      	ldr	r1, [pc, #84]	; (1a00105c <prvAddNewTaskToReadyList+0xa0>)
1a001006:	6808      	ldr	r0, [r1, #0]
1a001008:	4302      	orrs	r2, r0
1a00100a:	600a      	str	r2, [r1, #0]
1a00100c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001010:	009a      	lsls	r2, r3, #2
1a001012:	1d21      	adds	r1, r4, #4
1a001014:	4812      	ldr	r0, [pc, #72]	; (1a001060 <prvAddNewTaskToReadyList+0xa4>)
1a001016:	4410      	add	r0, r2
1a001018:	f7ff fee7 	bl	1a000dea <vListInsertEnd>
	taskEXIT_CRITICAL();
1a00101c:	f000 ff8c 	bl	1a001f38 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001020:	4b0c      	ldr	r3, [pc, #48]	; (1a001054 <prvAddNewTaskToReadyList+0x98>)
1a001022:	681b      	ldr	r3, [r3, #0]
1a001024:	b16b      	cbz	r3, 1a001042 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001026:	4b0a      	ldr	r3, [pc, #40]	; (1a001050 <prvAddNewTaskToReadyList+0x94>)
1a001028:	681b      	ldr	r3, [r3, #0]
1a00102a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00102c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00102e:	429a      	cmp	r2, r3
1a001030:	d207      	bcs.n	1a001042 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001032:	4b0c      	ldr	r3, [pc, #48]	; (1a001064 <prvAddNewTaskToReadyList+0xa8>)
1a001034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001038:	601a      	str	r2, [r3, #0]
1a00103a:	f3bf 8f4f 	dsb	sy
1a00103e:	f3bf 8f6f 	isb	sy
}
1a001042:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001044:	f7ff ff86 	bl	1a000f54 <prvInitialiseTaskLists>
1a001048:	e7d4      	b.n	1a000ff4 <prvAddNewTaskToReadyList+0x38>
1a00104a:	bf00      	nop
1a00104c:	10002928 	.word	0x10002928
1a001050:	10002890 	.word	0x10002890
1a001054:	10002984 	.word	0x10002984
1a001058:	10002938 	.word	0x10002938
1a00105c:	1000293c 	.word	0x1000293c
1a001060:	1000289c 	.word	0x1000289c
1a001064:	e000ed04 	.word	0xe000ed04

1a001068 <prvDeleteTCB>:
	{
1a001068:	b510      	push	{r4, lr}
1a00106a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a00106c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001070:	b933      	cbnz	r3, 1a001080 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a001072:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001074:	f7ff fb2a 	bl	1a0006cc <vPortFree>
				vPortFree( pxTCB );
1a001078:	4620      	mov	r0, r4
1a00107a:	f7ff fb27 	bl	1a0006cc <vPortFree>
	}
1a00107e:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001080:	2b01      	cmp	r3, #1
1a001082:	d00a      	beq.n	1a00109a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001084:	2b02      	cmp	r3, #2
1a001086:	d0fa      	beq.n	1a00107e <prvDeleteTCB+0x16>
1a001088:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00108c:	f383 8811 	msr	BASEPRI, r3
1a001090:	f3bf 8f6f 	isb	sy
1a001094:	f3bf 8f4f 	dsb	sy
1a001098:	e7fe      	b.n	1a001098 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a00109a:	f7ff fb17 	bl	1a0006cc <vPortFree>
1a00109e:	e7ee      	b.n	1a00107e <prvDeleteTCB+0x16>

1a0010a0 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0010a0:	4b0f      	ldr	r3, [pc, #60]	; (1a0010e0 <prvCheckTasksWaitingTermination+0x40>)
1a0010a2:	681b      	ldr	r3, [r3, #0]
1a0010a4:	b1d3      	cbz	r3, 1a0010dc <prvCheckTasksWaitingTermination+0x3c>
{
1a0010a6:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a0010a8:	f000 ff24 	bl	1a001ef4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a0010ac:	4b0d      	ldr	r3, [pc, #52]	; (1a0010e4 <prvCheckTasksWaitingTermination+0x44>)
1a0010ae:	68db      	ldr	r3, [r3, #12]
1a0010b0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0010b2:	1d20      	adds	r0, r4, #4
1a0010b4:	f7ff febf 	bl	1a000e36 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a0010b8:	4a0b      	ldr	r2, [pc, #44]	; (1a0010e8 <prvCheckTasksWaitingTermination+0x48>)
1a0010ba:	6813      	ldr	r3, [r2, #0]
1a0010bc:	3b01      	subs	r3, #1
1a0010be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a0010c0:	4a07      	ldr	r2, [pc, #28]	; (1a0010e0 <prvCheckTasksWaitingTermination+0x40>)
1a0010c2:	6813      	ldr	r3, [r2, #0]
1a0010c4:	3b01      	subs	r3, #1
1a0010c6:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a0010c8:	f000 ff36 	bl	1a001f38 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a0010cc:	4620      	mov	r0, r4
1a0010ce:	f7ff ffcb 	bl	1a001068 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0010d2:	4b03      	ldr	r3, [pc, #12]	; (1a0010e0 <prvCheckTasksWaitingTermination+0x40>)
1a0010d4:	681b      	ldr	r3, [r3, #0]
1a0010d6:	2b00      	cmp	r3, #0
1a0010d8:	d1e6      	bne.n	1a0010a8 <prvCheckTasksWaitingTermination+0x8>
}
1a0010da:	bd10      	pop	{r4, pc}
1a0010dc:	4770      	bx	lr
1a0010de:	bf00      	nop
1a0010e0:	1000292c 	.word	0x1000292c
1a0010e4:	1000299c 	.word	0x1000299c
1a0010e8:	10002928 	.word	0x10002928

1a0010ec <prvIdleTask>:
{
1a0010ec:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a0010ee:	f7ff ffd7 	bl	1a0010a0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a0010f2:	4b06      	ldr	r3, [pc, #24]	; (1a00110c <prvIdleTask+0x20>)
1a0010f4:	681b      	ldr	r3, [r3, #0]
1a0010f6:	2b01      	cmp	r3, #1
1a0010f8:	d9f9      	bls.n	1a0010ee <prvIdleTask+0x2>
				taskYIELD();
1a0010fa:	4b05      	ldr	r3, [pc, #20]	; (1a001110 <prvIdleTask+0x24>)
1a0010fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001100:	601a      	str	r2, [r3, #0]
1a001102:	f3bf 8f4f 	dsb	sy
1a001106:	f3bf 8f6f 	isb	sy
1a00110a:	e7f0      	b.n	1a0010ee <prvIdleTask+0x2>
1a00110c:	1000289c 	.word	0x1000289c
1a001110:	e000ed04 	.word	0xe000ed04

1a001114 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001114:	b570      	push	{r4, r5, r6, lr}
1a001116:	4604      	mov	r4, r0
1a001118:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a00111a:	4b1d      	ldr	r3, [pc, #116]	; (1a001190 <prvAddCurrentTaskToDelayedList+0x7c>)
1a00111c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00111e:	4b1d      	ldr	r3, [pc, #116]	; (1a001194 <prvAddCurrentTaskToDelayedList+0x80>)
1a001120:	6818      	ldr	r0, [r3, #0]
1a001122:	3004      	adds	r0, #4
1a001124:	f7ff fe87 	bl	1a000e36 <uxListRemove>
1a001128:	b950      	cbnz	r0, 1a001140 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a00112a:	4b1a      	ldr	r3, [pc, #104]	; (1a001194 <prvAddCurrentTaskToDelayedList+0x80>)
1a00112c:	681b      	ldr	r3, [r3, #0]
1a00112e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001130:	2301      	movs	r3, #1
1a001132:	fa03 f202 	lsl.w	r2, r3, r2
1a001136:	4918      	ldr	r1, [pc, #96]	; (1a001198 <prvAddCurrentTaskToDelayedList+0x84>)
1a001138:	680b      	ldr	r3, [r1, #0]
1a00113a:	ea23 0302 	bic.w	r3, r3, r2
1a00113e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001140:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001144:	d013      	beq.n	1a00116e <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001146:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001148:	4b12      	ldr	r3, [pc, #72]	; (1a001194 <prvAddCurrentTaskToDelayedList+0x80>)
1a00114a:	681b      	ldr	r3, [r3, #0]
1a00114c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a00114e:	42a5      	cmp	r5, r4
1a001150:	d816      	bhi.n	1a001180 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001152:	4b12      	ldr	r3, [pc, #72]	; (1a00119c <prvAddCurrentTaskToDelayedList+0x88>)
1a001154:	6818      	ldr	r0, [r3, #0]
1a001156:	4b0f      	ldr	r3, [pc, #60]	; (1a001194 <prvAddCurrentTaskToDelayedList+0x80>)
1a001158:	6819      	ldr	r1, [r3, #0]
1a00115a:	3104      	adds	r1, #4
1a00115c:	f7ff fe51 	bl	1a000e02 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a001160:	4b0f      	ldr	r3, [pc, #60]	; (1a0011a0 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001162:	681b      	ldr	r3, [r3, #0]
1a001164:	42a3      	cmp	r3, r4
1a001166:	d912      	bls.n	1a00118e <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a001168:	4b0d      	ldr	r3, [pc, #52]	; (1a0011a0 <prvAddCurrentTaskToDelayedList+0x8c>)
1a00116a:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a00116c:	e00f      	b.n	1a00118e <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a00116e:	2e00      	cmp	r6, #0
1a001170:	d0e9      	beq.n	1a001146 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001172:	4b08      	ldr	r3, [pc, #32]	; (1a001194 <prvAddCurrentTaskToDelayedList+0x80>)
1a001174:	6819      	ldr	r1, [r3, #0]
1a001176:	3104      	adds	r1, #4
1a001178:	480a      	ldr	r0, [pc, #40]	; (1a0011a4 <prvAddCurrentTaskToDelayedList+0x90>)
1a00117a:	f7ff fe36 	bl	1a000dea <vListInsertEnd>
1a00117e:	e006      	b.n	1a00118e <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001180:	4b09      	ldr	r3, [pc, #36]	; (1a0011a8 <prvAddCurrentTaskToDelayedList+0x94>)
1a001182:	6818      	ldr	r0, [r3, #0]
1a001184:	4b03      	ldr	r3, [pc, #12]	; (1a001194 <prvAddCurrentTaskToDelayedList+0x80>)
1a001186:	6819      	ldr	r1, [r3, #0]
1a001188:	3104      	adds	r1, #4
1a00118a:	f7ff fe3a 	bl	1a000e02 <vListInsert>
}
1a00118e:	bd70      	pop	{r4, r5, r6, pc}
1a001190:	100029b0 	.word	0x100029b0
1a001194:	10002890 	.word	0x10002890
1a001198:	1000293c 	.word	0x1000293c
1a00119c:	10002894 	.word	0x10002894
1a0011a0:	10002968 	.word	0x10002968
1a0011a4:	10002988 	.word	0x10002988
1a0011a8:	10002898 	.word	0x10002898

1a0011ac <xTaskCreateStatic>:
	{
1a0011ac:	b570      	push	{r4, r5, r6, lr}
1a0011ae:	b086      	sub	sp, #24
1a0011b0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a0011b2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a0011b4:	b945      	cbnz	r5, 1a0011c8 <xTaskCreateStatic+0x1c>
1a0011b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011ba:	f383 8811 	msr	BASEPRI, r3
1a0011be:	f3bf 8f6f 	isb	sy
1a0011c2:	f3bf 8f4f 	dsb	sy
1a0011c6:	e7fe      	b.n	1a0011c6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a0011c8:	b944      	cbnz	r4, 1a0011dc <xTaskCreateStatic+0x30>
1a0011ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011ce:	f383 8811 	msr	BASEPRI, r3
1a0011d2:	f3bf 8f6f 	isb	sy
1a0011d6:	f3bf 8f4f 	dsb	sy
1a0011da:	e7fe      	b.n	1a0011da <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a0011dc:	2660      	movs	r6, #96	; 0x60
1a0011de:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a0011e0:	9e04      	ldr	r6, [sp, #16]
1a0011e2:	2e60      	cmp	r6, #96	; 0x60
1a0011e4:	d008      	beq.n	1a0011f8 <xTaskCreateStatic+0x4c>
1a0011e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011ea:	f383 8811 	msr	BASEPRI, r3
1a0011ee:	f3bf 8f6f 	isb	sy
1a0011f2:	f3bf 8f4f 	dsb	sy
1a0011f6:	e7fe      	b.n	1a0011f6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a0011f8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a0011fa:	2502      	movs	r5, #2
1a0011fc:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001200:	2500      	movs	r5, #0
1a001202:	9503      	str	r5, [sp, #12]
1a001204:	9402      	str	r4, [sp, #8]
1a001206:	ad05      	add	r5, sp, #20
1a001208:	9501      	str	r5, [sp, #4]
1a00120a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a00120c:	9500      	str	r5, [sp, #0]
1a00120e:	f7ff fe57 	bl	1a000ec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001212:	4620      	mov	r0, r4
1a001214:	f7ff fed2 	bl	1a000fbc <prvAddNewTaskToReadyList>
	}
1a001218:	9805      	ldr	r0, [sp, #20]
1a00121a:	b006      	add	sp, #24
1a00121c:	bd70      	pop	{r4, r5, r6, pc}

1a00121e <xTaskCreate>:
	{
1a00121e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001222:	b085      	sub	sp, #20
1a001224:	4607      	mov	r7, r0
1a001226:	4688      	mov	r8, r1
1a001228:	4615      	mov	r5, r2
1a00122a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00122c:	0090      	lsls	r0, r2, #2
1a00122e:	f7ff f9bf 	bl	1a0005b0 <pvPortMalloc>
			if( pxStack != NULL )
1a001232:	b308      	cbz	r0, 1a001278 <xTaskCreate+0x5a>
1a001234:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001236:	2060      	movs	r0, #96	; 0x60
1a001238:	f7ff f9ba 	bl	1a0005b0 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a00123c:	4604      	mov	r4, r0
1a00123e:	b1b8      	cbz	r0, 1a001270 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a001240:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001242:	b1e4      	cbz	r4, 1a00127e <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001244:	2300      	movs	r3, #0
1a001246:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a00124a:	9303      	str	r3, [sp, #12]
1a00124c:	9402      	str	r4, [sp, #8]
1a00124e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001250:	9301      	str	r3, [sp, #4]
1a001252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001254:	9300      	str	r3, [sp, #0]
1a001256:	464b      	mov	r3, r9
1a001258:	462a      	mov	r2, r5
1a00125a:	4641      	mov	r1, r8
1a00125c:	4638      	mov	r0, r7
1a00125e:	f7ff fe2f 	bl	1a000ec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001262:	4620      	mov	r0, r4
1a001264:	f7ff feaa 	bl	1a000fbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001268:	2001      	movs	r0, #1
	}
1a00126a:	b005      	add	sp, #20
1a00126c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a001270:	4630      	mov	r0, r6
1a001272:	f7ff fa2b 	bl	1a0006cc <vPortFree>
1a001276:	e7e4      	b.n	1a001242 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00127c:	e7f5      	b.n	1a00126a <xTaskCreate+0x4c>
1a00127e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a001282:	e7f2      	b.n	1a00126a <xTaskCreate+0x4c>

1a001284 <vTaskStartScheduler>:
{
1a001284:	b510      	push	{r4, lr}
1a001286:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001288:	2400      	movs	r4, #0
1a00128a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a00128c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a00128e:	aa07      	add	r2, sp, #28
1a001290:	a906      	add	r1, sp, #24
1a001292:	a805      	add	r0, sp, #20
1a001294:	f7ff fde4 	bl	1a000e60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001298:	9b05      	ldr	r3, [sp, #20]
1a00129a:	9302      	str	r3, [sp, #8]
1a00129c:	9b06      	ldr	r3, [sp, #24]
1a00129e:	9301      	str	r3, [sp, #4]
1a0012a0:	9400      	str	r4, [sp, #0]
1a0012a2:	4623      	mov	r3, r4
1a0012a4:	9a07      	ldr	r2, [sp, #28]
1a0012a6:	4917      	ldr	r1, [pc, #92]	; (1a001304 <vTaskStartScheduler+0x80>)
1a0012a8:	4817      	ldr	r0, [pc, #92]	; (1a001308 <vTaskStartScheduler+0x84>)
1a0012aa:	f7ff ff7f 	bl	1a0011ac <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a0012ae:	b140      	cbz	r0, 1a0012c2 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a0012b0:	f000 fbe2 	bl	1a001a78 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a0012b4:	2801      	cmp	r0, #1
1a0012b6:	d006      	beq.n	1a0012c6 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0012b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0012bc:	d018      	beq.n	1a0012f0 <vTaskStartScheduler+0x6c>
}
1a0012be:	b008      	add	sp, #32
1a0012c0:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a0012c2:	2000      	movs	r0, #0
1a0012c4:	e7f6      	b.n	1a0012b4 <vTaskStartScheduler+0x30>
1a0012c6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012ca:	f383 8811 	msr	BASEPRI, r3
1a0012ce:	f3bf 8f6f 	isb	sy
1a0012d2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a0012d6:	4b0d      	ldr	r3, [pc, #52]	; (1a00130c <vTaskStartScheduler+0x88>)
1a0012d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0012dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0012de:	4b0c      	ldr	r3, [pc, #48]	; (1a001310 <vTaskStartScheduler+0x8c>)
1a0012e0:	2201      	movs	r2, #1
1a0012e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a0012e4:	4b0b      	ldr	r3, [pc, #44]	; (1a001314 <vTaskStartScheduler+0x90>)
1a0012e6:	2200      	movs	r2, #0
1a0012e8:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a0012ea:	f000 fea5 	bl	1a002038 <xPortStartScheduler>
1a0012ee:	e7e6      	b.n	1a0012be <vTaskStartScheduler+0x3a>
1a0012f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012f4:	f383 8811 	msr	BASEPRI, r3
1a0012f8:	f3bf 8f6f 	isb	sy
1a0012fc:	f3bf 8f4f 	dsb	sy
1a001300:	e7fe      	b.n	1a001300 <vTaskStartScheduler+0x7c>
1a001302:	bf00      	nop
1a001304:	1a003fe8 	.word	0x1a003fe8
1a001308:	1a0010ed 	.word	0x1a0010ed
1a00130c:	10002968 	.word	0x10002968
1a001310:	10002984 	.word	0x10002984
1a001314:	100029b0 	.word	0x100029b0

1a001318 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001318:	4a02      	ldr	r2, [pc, #8]	; (1a001324 <vTaskSuspendAll+0xc>)
1a00131a:	6813      	ldr	r3, [r2, #0]
1a00131c:	3301      	adds	r3, #1
1a00131e:	6013      	str	r3, [r2, #0]
}
1a001320:	4770      	bx	lr
1a001322:	bf00      	nop
1a001324:	10002934 	.word	0x10002934

1a001328 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001328:	4b01      	ldr	r3, [pc, #4]	; (1a001330 <xTaskGetTickCount+0x8>)
1a00132a:	6818      	ldr	r0, [r3, #0]
}
1a00132c:	4770      	bx	lr
1a00132e:	bf00      	nop
1a001330:	100029b0 	.word	0x100029b0

1a001334 <xTaskIncrementTick>:
{
1a001334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001336:	4b3a      	ldr	r3, [pc, #232]	; (1a001420 <xTaskIncrementTick+0xec>)
1a001338:	681b      	ldr	r3, [r3, #0]
1a00133a:	2b00      	cmp	r3, #0
1a00133c:	d164      	bne.n	1a001408 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a00133e:	4b39      	ldr	r3, [pc, #228]	; (1a001424 <xTaskIncrementTick+0xf0>)
1a001340:	681d      	ldr	r5, [r3, #0]
1a001342:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001344:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001346:	b9c5      	cbnz	r5, 1a00137a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001348:	4b37      	ldr	r3, [pc, #220]	; (1a001428 <xTaskIncrementTick+0xf4>)
1a00134a:	681b      	ldr	r3, [r3, #0]
1a00134c:	681b      	ldr	r3, [r3, #0]
1a00134e:	b143      	cbz	r3, 1a001362 <xTaskIncrementTick+0x2e>
1a001350:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001354:	f383 8811 	msr	BASEPRI, r3
1a001358:	f3bf 8f6f 	isb	sy
1a00135c:	f3bf 8f4f 	dsb	sy
1a001360:	e7fe      	b.n	1a001360 <xTaskIncrementTick+0x2c>
1a001362:	4a31      	ldr	r2, [pc, #196]	; (1a001428 <xTaskIncrementTick+0xf4>)
1a001364:	6811      	ldr	r1, [r2, #0]
1a001366:	4b31      	ldr	r3, [pc, #196]	; (1a00142c <xTaskIncrementTick+0xf8>)
1a001368:	6818      	ldr	r0, [r3, #0]
1a00136a:	6010      	str	r0, [r2, #0]
1a00136c:	6019      	str	r1, [r3, #0]
1a00136e:	4a30      	ldr	r2, [pc, #192]	; (1a001430 <xTaskIncrementTick+0xfc>)
1a001370:	6813      	ldr	r3, [r2, #0]
1a001372:	3301      	adds	r3, #1
1a001374:	6013      	str	r3, [r2, #0]
1a001376:	f7ff fd8d 	bl	1a000e94 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a00137a:	4b2e      	ldr	r3, [pc, #184]	; (1a001434 <xTaskIncrementTick+0x100>)
1a00137c:	681b      	ldr	r3, [r3, #0]
1a00137e:	42ab      	cmp	r3, r5
1a001380:	d938      	bls.n	1a0013f4 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a001382:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001384:	4b2c      	ldr	r3, [pc, #176]	; (1a001438 <xTaskIncrementTick+0x104>)
1a001386:	681b      	ldr	r3, [r3, #0]
1a001388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00138a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00138e:	009a      	lsls	r2, r3, #2
1a001390:	4b2a      	ldr	r3, [pc, #168]	; (1a00143c <xTaskIncrementTick+0x108>)
1a001392:	589b      	ldr	r3, [r3, r2]
1a001394:	2b01      	cmp	r3, #1
1a001396:	d93c      	bls.n	1a001412 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001398:	2401      	movs	r4, #1
1a00139a:	e03a      	b.n	1a001412 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a00139c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00139e:	4b22      	ldr	r3, [pc, #136]	; (1a001428 <xTaskIncrementTick+0xf4>)
1a0013a0:	681b      	ldr	r3, [r3, #0]
1a0013a2:	681b      	ldr	r3, [r3, #0]
1a0013a4:	b343      	cbz	r3, 1a0013f8 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0013a6:	4b20      	ldr	r3, [pc, #128]	; (1a001428 <xTaskIncrementTick+0xf4>)
1a0013a8:	681b      	ldr	r3, [r3, #0]
1a0013aa:	68db      	ldr	r3, [r3, #12]
1a0013ac:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a0013ae:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a0013b0:	429d      	cmp	r5, r3
1a0013b2:	d326      	bcc.n	1a001402 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0013b4:	1d37      	adds	r7, r6, #4
1a0013b6:	4638      	mov	r0, r7
1a0013b8:	f7ff fd3d 	bl	1a000e36 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a0013bc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a0013be:	b11b      	cbz	r3, 1a0013c8 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0013c0:	f106 0018 	add.w	r0, r6, #24
1a0013c4:	f7ff fd37 	bl	1a000e36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0013c8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a0013ca:	2201      	movs	r2, #1
1a0013cc:	409a      	lsls	r2, r3
1a0013ce:	491c      	ldr	r1, [pc, #112]	; (1a001440 <xTaskIncrementTick+0x10c>)
1a0013d0:	6808      	ldr	r0, [r1, #0]
1a0013d2:	4302      	orrs	r2, r0
1a0013d4:	600a      	str	r2, [r1, #0]
1a0013d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0013da:	009a      	lsls	r2, r3, #2
1a0013dc:	4639      	mov	r1, r7
1a0013de:	4817      	ldr	r0, [pc, #92]	; (1a00143c <xTaskIncrementTick+0x108>)
1a0013e0:	4410      	add	r0, r2
1a0013e2:	f7ff fd02 	bl	1a000dea <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0013e6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a0013e8:	4b13      	ldr	r3, [pc, #76]	; (1a001438 <xTaskIncrementTick+0x104>)
1a0013ea:	681b      	ldr	r3, [r3, #0]
1a0013ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0013ee:	429a      	cmp	r2, r3
1a0013f0:	d2d4      	bcs.n	1a00139c <xTaskIncrementTick+0x68>
1a0013f2:	e7d4      	b.n	1a00139e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a0013f4:	2400      	movs	r4, #0
1a0013f6:	e7d2      	b.n	1a00139e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0013f8:	4b0e      	ldr	r3, [pc, #56]	; (1a001434 <xTaskIncrementTick+0x100>)
1a0013fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0013fe:	601a      	str	r2, [r3, #0]
					break;
1a001400:	e7c0      	b.n	1a001384 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001402:	4a0c      	ldr	r2, [pc, #48]	; (1a001434 <xTaskIncrementTick+0x100>)
1a001404:	6013      	str	r3, [r2, #0]
						break;
1a001406:	e7bd      	b.n	1a001384 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001408:	4a0e      	ldr	r2, [pc, #56]	; (1a001444 <xTaskIncrementTick+0x110>)
1a00140a:	6813      	ldr	r3, [r2, #0]
1a00140c:	3301      	adds	r3, #1
1a00140e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001410:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001412:	4b0d      	ldr	r3, [pc, #52]	; (1a001448 <xTaskIncrementTick+0x114>)
1a001414:	681b      	ldr	r3, [r3, #0]
1a001416:	b103      	cbz	r3, 1a00141a <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001418:	2401      	movs	r4, #1
}
1a00141a:	4620      	mov	r0, r4
1a00141c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00141e:	bf00      	nop
1a001420:	10002934 	.word	0x10002934
1a001424:	100029b0 	.word	0x100029b0
1a001428:	10002894 	.word	0x10002894
1a00142c:	10002898 	.word	0x10002898
1a001430:	1000296c 	.word	0x1000296c
1a001434:	10002968 	.word	0x10002968
1a001438:	10002890 	.word	0x10002890
1a00143c:	1000289c 	.word	0x1000289c
1a001440:	1000293c 	.word	0x1000293c
1a001444:	10002930 	.word	0x10002930
1a001448:	100029b4 	.word	0x100029b4

1a00144c <xTaskResumeAll>:
{
1a00144c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a00144e:	4b33      	ldr	r3, [pc, #204]	; (1a00151c <xTaskResumeAll+0xd0>)
1a001450:	681b      	ldr	r3, [r3, #0]
1a001452:	b943      	cbnz	r3, 1a001466 <xTaskResumeAll+0x1a>
1a001454:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001458:	f383 8811 	msr	BASEPRI, r3
1a00145c:	f3bf 8f6f 	isb	sy
1a001460:	f3bf 8f4f 	dsb	sy
1a001464:	e7fe      	b.n	1a001464 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001466:	f000 fd45 	bl	1a001ef4 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a00146a:	4b2c      	ldr	r3, [pc, #176]	; (1a00151c <xTaskResumeAll+0xd0>)
1a00146c:	681a      	ldr	r2, [r3, #0]
1a00146e:	3a01      	subs	r2, #1
1a001470:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001472:	681b      	ldr	r3, [r3, #0]
1a001474:	2b00      	cmp	r3, #0
1a001476:	d14d      	bne.n	1a001514 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001478:	4b29      	ldr	r3, [pc, #164]	; (1a001520 <xTaskResumeAll+0xd4>)
1a00147a:	681b      	ldr	r3, [r3, #0]
1a00147c:	b923      	cbnz	r3, 1a001488 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a00147e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001480:	f000 fd5a 	bl	1a001f38 <vPortExitCritical>
}
1a001484:	4620      	mov	r0, r4
1a001486:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a001488:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a00148a:	4b26      	ldr	r3, [pc, #152]	; (1a001524 <xTaskResumeAll+0xd8>)
1a00148c:	681b      	ldr	r3, [r3, #0]
1a00148e:	b31b      	cbz	r3, 1a0014d8 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001490:	4b24      	ldr	r3, [pc, #144]	; (1a001524 <xTaskResumeAll+0xd8>)
1a001492:	68db      	ldr	r3, [r3, #12]
1a001494:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001496:	f104 0018 	add.w	r0, r4, #24
1a00149a:	f7ff fccc 	bl	1a000e36 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00149e:	1d25      	adds	r5, r4, #4
1a0014a0:	4628      	mov	r0, r5
1a0014a2:	f7ff fcc8 	bl	1a000e36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0014a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0014a8:	2201      	movs	r2, #1
1a0014aa:	409a      	lsls	r2, r3
1a0014ac:	491e      	ldr	r1, [pc, #120]	; (1a001528 <xTaskResumeAll+0xdc>)
1a0014ae:	6808      	ldr	r0, [r1, #0]
1a0014b0:	4302      	orrs	r2, r0
1a0014b2:	600a      	str	r2, [r1, #0]
1a0014b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0014b8:	009a      	lsls	r2, r3, #2
1a0014ba:	4629      	mov	r1, r5
1a0014bc:	481b      	ldr	r0, [pc, #108]	; (1a00152c <xTaskResumeAll+0xe0>)
1a0014be:	4410      	add	r0, r2
1a0014c0:	f7ff fc93 	bl	1a000dea <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0014c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0014c6:	4b1a      	ldr	r3, [pc, #104]	; (1a001530 <xTaskResumeAll+0xe4>)
1a0014c8:	681b      	ldr	r3, [r3, #0]
1a0014ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0014cc:	429a      	cmp	r2, r3
1a0014ce:	d3dc      	bcc.n	1a00148a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a0014d0:	4b18      	ldr	r3, [pc, #96]	; (1a001534 <xTaskResumeAll+0xe8>)
1a0014d2:	2201      	movs	r2, #1
1a0014d4:	601a      	str	r2, [r3, #0]
1a0014d6:	e7d8      	b.n	1a00148a <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a0014d8:	b10c      	cbz	r4, 1a0014de <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a0014da:	f7ff fcdb 	bl	1a000e94 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a0014de:	4b16      	ldr	r3, [pc, #88]	; (1a001538 <xTaskResumeAll+0xec>)
1a0014e0:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a0014e2:	b154      	cbz	r4, 1a0014fa <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a0014e4:	f7ff ff26 	bl	1a001334 <xTaskIncrementTick>
1a0014e8:	b110      	cbz	r0, 1a0014f0 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a0014ea:	4b12      	ldr	r3, [pc, #72]	; (1a001534 <xTaskResumeAll+0xe8>)
1a0014ec:	2201      	movs	r2, #1
1a0014ee:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a0014f0:	3c01      	subs	r4, #1
1a0014f2:	d1f7      	bne.n	1a0014e4 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a0014f4:	4b10      	ldr	r3, [pc, #64]	; (1a001538 <xTaskResumeAll+0xec>)
1a0014f6:	2200      	movs	r2, #0
1a0014f8:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a0014fa:	4b0e      	ldr	r3, [pc, #56]	; (1a001534 <xTaskResumeAll+0xe8>)
1a0014fc:	681b      	ldr	r3, [r3, #0]
1a0014fe:	b15b      	cbz	r3, 1a001518 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a001500:	4b0e      	ldr	r3, [pc, #56]	; (1a00153c <xTaskResumeAll+0xf0>)
1a001502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001506:	601a      	str	r2, [r3, #0]
1a001508:	f3bf 8f4f 	dsb	sy
1a00150c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001510:	2401      	movs	r4, #1
1a001512:	e7b5      	b.n	1a001480 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a001514:	2400      	movs	r4, #0
1a001516:	e7b3      	b.n	1a001480 <xTaskResumeAll+0x34>
1a001518:	2400      	movs	r4, #0
1a00151a:	e7b1      	b.n	1a001480 <xTaskResumeAll+0x34>
1a00151c:	10002934 	.word	0x10002934
1a001520:	10002928 	.word	0x10002928
1a001524:	10002970 	.word	0x10002970
1a001528:	1000293c 	.word	0x1000293c
1a00152c:	1000289c 	.word	0x1000289c
1a001530:	10002890 	.word	0x10002890
1a001534:	100029b4 	.word	0x100029b4
1a001538:	10002930 	.word	0x10002930
1a00153c:	e000ed04 	.word	0xe000ed04

1a001540 <vTaskDelayUntil>:
	{
1a001540:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a001542:	b150      	cbz	r0, 1a00155a <vTaskDelayUntil+0x1a>
1a001544:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a001546:	b989      	cbnz	r1, 1a00156c <vTaskDelayUntil+0x2c>
1a001548:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00154c:	f383 8811 	msr	BASEPRI, r3
1a001550:	f3bf 8f6f 	isb	sy
1a001554:	f3bf 8f4f 	dsb	sy
1a001558:	e7fe      	b.n	1a001558 <vTaskDelayUntil+0x18>
1a00155a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00155e:	f383 8811 	msr	BASEPRI, r3
1a001562:	f3bf 8f6f 	isb	sy
1a001566:	f3bf 8f4f 	dsb	sy
1a00156a:	e7fe      	b.n	1a00156a <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a00156c:	4b1a      	ldr	r3, [pc, #104]	; (1a0015d8 <vTaskDelayUntil+0x98>)
1a00156e:	681b      	ldr	r3, [r3, #0]
1a001570:	b143      	cbz	r3, 1a001584 <vTaskDelayUntil+0x44>
1a001572:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001576:	f383 8811 	msr	BASEPRI, r3
1a00157a:	f3bf 8f6f 	isb	sy
1a00157e:	f3bf 8f4f 	dsb	sy
1a001582:	e7fe      	b.n	1a001582 <vTaskDelayUntil+0x42>
1a001584:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a001586:	f7ff fec7 	bl	1a001318 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a00158a:	4b14      	ldr	r3, [pc, #80]	; (1a0015dc <vTaskDelayUntil+0x9c>)
1a00158c:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a00158e:	682a      	ldr	r2, [r5, #0]
1a001590:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a001592:	4282      	cmp	r2, r0
1a001594:	d918      	bls.n	1a0015c8 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001596:	42a2      	cmp	r2, r4
1a001598:	d80c      	bhi.n	1a0015b4 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a00159a:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a00159c:	f7ff ff56 	bl	1a00144c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a0015a0:	b938      	cbnz	r0, 1a0015b2 <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a0015a2:	4b0f      	ldr	r3, [pc, #60]	; (1a0015e0 <vTaskDelayUntil+0xa0>)
1a0015a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0015a8:	601a      	str	r2, [r3, #0]
1a0015aa:	f3bf 8f4f 	dsb	sy
1a0015ae:	f3bf 8f6f 	isb	sy
	}
1a0015b2:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a0015b4:	42a0      	cmp	r0, r4
1a0015b6:	d301      	bcc.n	1a0015bc <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a0015b8:	602c      	str	r4, [r5, #0]
1a0015ba:	e7ef      	b.n	1a00159c <vTaskDelayUntil+0x5c>
1a0015bc:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a0015be:	2100      	movs	r1, #0
1a0015c0:	1a20      	subs	r0, r4, r0
1a0015c2:	f7ff fda7 	bl	1a001114 <prvAddCurrentTaskToDelayedList>
1a0015c6:	e7e9      	b.n	1a00159c <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a0015c8:	42a2      	cmp	r2, r4
1a0015ca:	d801      	bhi.n	1a0015d0 <vTaskDelayUntil+0x90>
1a0015cc:	42a0      	cmp	r0, r4
1a0015ce:	d201      	bcs.n	1a0015d4 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a0015d0:	602c      	str	r4, [r5, #0]
1a0015d2:	e7f4      	b.n	1a0015be <vTaskDelayUntil+0x7e>
1a0015d4:	602c      	str	r4, [r5, #0]
1a0015d6:	e7e1      	b.n	1a00159c <vTaskDelayUntil+0x5c>
1a0015d8:	10002934 	.word	0x10002934
1a0015dc:	100029b0 	.word	0x100029b0
1a0015e0:	e000ed04 	.word	0xe000ed04

1a0015e4 <vTaskDelay>:
	{
1a0015e4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a0015e6:	b1a8      	cbz	r0, 1a001614 <vTaskDelay+0x30>
1a0015e8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a0015ea:	4b0f      	ldr	r3, [pc, #60]	; (1a001628 <vTaskDelay+0x44>)
1a0015ec:	681b      	ldr	r3, [r3, #0]
1a0015ee:	b143      	cbz	r3, 1a001602 <vTaskDelay+0x1e>
1a0015f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015f4:	f383 8811 	msr	BASEPRI, r3
1a0015f8:	f3bf 8f6f 	isb	sy
1a0015fc:	f3bf 8f4f 	dsb	sy
1a001600:	e7fe      	b.n	1a001600 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a001602:	f7ff fe89 	bl	1a001318 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a001606:	2100      	movs	r1, #0
1a001608:	4620      	mov	r0, r4
1a00160a:	f7ff fd83 	bl	1a001114 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a00160e:	f7ff ff1d 	bl	1a00144c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001612:	b938      	cbnz	r0, 1a001624 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a001614:	4b05      	ldr	r3, [pc, #20]	; (1a00162c <vTaskDelay+0x48>)
1a001616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00161a:	601a      	str	r2, [r3, #0]
1a00161c:	f3bf 8f4f 	dsb	sy
1a001620:	f3bf 8f6f 	isb	sy
	}
1a001624:	bd10      	pop	{r4, pc}
1a001626:	bf00      	nop
1a001628:	10002934 	.word	0x10002934
1a00162c:	e000ed04 	.word	0xe000ed04

1a001630 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001630:	4b2c      	ldr	r3, [pc, #176]	; (1a0016e4 <vTaskSwitchContext+0xb4>)
1a001632:	681b      	ldr	r3, [r3, #0]
1a001634:	b11b      	cbz	r3, 1a00163e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a001636:	4b2c      	ldr	r3, [pc, #176]	; (1a0016e8 <vTaskSwitchContext+0xb8>)
1a001638:	2201      	movs	r2, #1
1a00163a:	601a      	str	r2, [r3, #0]
1a00163c:	4770      	bx	lr
{
1a00163e:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a001640:	4b29      	ldr	r3, [pc, #164]	; (1a0016e8 <vTaskSwitchContext+0xb8>)
1a001642:	2200      	movs	r2, #0
1a001644:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a001646:	4b29      	ldr	r3, [pc, #164]	; (1a0016ec <vTaskSwitchContext+0xbc>)
1a001648:	681b      	ldr	r3, [r3, #0]
1a00164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a00164c:	681a      	ldr	r2, [r3, #0]
1a00164e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001652:	d103      	bne.n	1a00165c <vTaskSwitchContext+0x2c>
1a001654:	685a      	ldr	r2, [r3, #4]
1a001656:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00165a:	d01b      	beq.n	1a001694 <vTaskSwitchContext+0x64>
1a00165c:	4b23      	ldr	r3, [pc, #140]	; (1a0016ec <vTaskSwitchContext+0xbc>)
1a00165e:	6818      	ldr	r0, [r3, #0]
1a001660:	6819      	ldr	r1, [r3, #0]
1a001662:	3134      	adds	r1, #52	; 0x34
1a001664:	f7ff fc14 	bl	1a000e90 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001668:	4b21      	ldr	r3, [pc, #132]	; (1a0016f0 <vTaskSwitchContext+0xc0>)
1a00166a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a00166c:	fab3 f383 	clz	r3, r3
1a001670:	b2db      	uxtb	r3, r3
1a001672:	f1c3 031f 	rsb	r3, r3, #31
1a001676:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a00167a:	008a      	lsls	r2, r1, #2
1a00167c:	491d      	ldr	r1, [pc, #116]	; (1a0016f4 <vTaskSwitchContext+0xc4>)
1a00167e:	588a      	ldr	r2, [r1, r2]
1a001680:	b98a      	cbnz	r2, 1a0016a6 <vTaskSwitchContext+0x76>
	__asm volatile
1a001682:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001686:	f383 8811 	msr	BASEPRI, r3
1a00168a:	f3bf 8f6f 	isb	sy
1a00168e:	f3bf 8f4f 	dsb	sy
1a001692:	e7fe      	b.n	1a001692 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001694:	689a      	ldr	r2, [r3, #8]
1a001696:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00169a:	d1df      	bne.n	1a00165c <vTaskSwitchContext+0x2c>
1a00169c:	68db      	ldr	r3, [r3, #12]
1a00169e:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a0016a2:	d1db      	bne.n	1a00165c <vTaskSwitchContext+0x2c>
1a0016a4:	e7e0      	b.n	1a001668 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0016a6:	4813      	ldr	r0, [pc, #76]	; (1a0016f4 <vTaskSwitchContext+0xc4>)
1a0016a8:	009a      	lsls	r2, r3, #2
1a0016aa:	18d4      	adds	r4, r2, r3
1a0016ac:	00a1      	lsls	r1, r4, #2
1a0016ae:	4401      	add	r1, r0
1a0016b0:	684c      	ldr	r4, [r1, #4]
1a0016b2:	6864      	ldr	r4, [r4, #4]
1a0016b4:	604c      	str	r4, [r1, #4]
1a0016b6:	441a      	add	r2, r3
1a0016b8:	0091      	lsls	r1, r2, #2
1a0016ba:	3108      	adds	r1, #8
1a0016bc:	4408      	add	r0, r1
1a0016be:	4284      	cmp	r4, r0
1a0016c0:	d009      	beq.n	1a0016d6 <vTaskSwitchContext+0xa6>
1a0016c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0016c6:	009a      	lsls	r2, r3, #2
1a0016c8:	4b0a      	ldr	r3, [pc, #40]	; (1a0016f4 <vTaskSwitchContext+0xc4>)
1a0016ca:	4413      	add	r3, r2
1a0016cc:	685b      	ldr	r3, [r3, #4]
1a0016ce:	68da      	ldr	r2, [r3, #12]
1a0016d0:	4b06      	ldr	r3, [pc, #24]	; (1a0016ec <vTaskSwitchContext+0xbc>)
1a0016d2:	601a      	str	r2, [r3, #0]
}
1a0016d4:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0016d6:	6861      	ldr	r1, [r4, #4]
1a0016d8:	4806      	ldr	r0, [pc, #24]	; (1a0016f4 <vTaskSwitchContext+0xc4>)
1a0016da:	2214      	movs	r2, #20
1a0016dc:	fb02 0203 	mla	r2, r2, r3, r0
1a0016e0:	6051      	str	r1, [r2, #4]
1a0016e2:	e7ee      	b.n	1a0016c2 <vTaskSwitchContext+0x92>
1a0016e4:	10002934 	.word	0x10002934
1a0016e8:	100029b4 	.word	0x100029b4
1a0016ec:	10002890 	.word	0x10002890
1a0016f0:	1000293c 	.word	0x1000293c
1a0016f4:	1000289c 	.word	0x1000289c

1a0016f8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a0016f8:	b940      	cbnz	r0, 1a00170c <vTaskPlaceOnEventList+0x14>
1a0016fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016fe:	f383 8811 	msr	BASEPRI, r3
1a001702:	f3bf 8f6f 	isb	sy
1a001706:	f3bf 8f4f 	dsb	sy
1a00170a:	e7fe      	b.n	1a00170a <vTaskPlaceOnEventList+0x12>
{
1a00170c:	b510      	push	{r4, lr}
1a00170e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001710:	4b04      	ldr	r3, [pc, #16]	; (1a001724 <vTaskPlaceOnEventList+0x2c>)
1a001712:	6819      	ldr	r1, [r3, #0]
1a001714:	3118      	adds	r1, #24
1a001716:	f7ff fb74 	bl	1a000e02 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a00171a:	2101      	movs	r1, #1
1a00171c:	4620      	mov	r0, r4
1a00171e:	f7ff fcf9 	bl	1a001114 <prvAddCurrentTaskToDelayedList>
}
1a001722:	bd10      	pop	{r4, pc}
1a001724:	10002890 	.word	0x10002890

1a001728 <vTaskPlaceOnEventListRestricted>:
	{
1a001728:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a00172a:	b940      	cbnz	r0, 1a00173e <vTaskPlaceOnEventListRestricted+0x16>
1a00172c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001730:	f383 8811 	msr	BASEPRI, r3
1a001734:	f3bf 8f6f 	isb	sy
1a001738:	f3bf 8f4f 	dsb	sy
1a00173c:	e7fe      	b.n	1a00173c <vTaskPlaceOnEventListRestricted+0x14>
1a00173e:	460c      	mov	r4, r1
1a001740:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001742:	4a06      	ldr	r2, [pc, #24]	; (1a00175c <vTaskPlaceOnEventListRestricted+0x34>)
1a001744:	6811      	ldr	r1, [r2, #0]
1a001746:	3118      	adds	r1, #24
1a001748:	f7ff fb4f 	bl	1a000dea <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a00174c:	b10d      	cbz	r5, 1a001752 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a00174e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001752:	4629      	mov	r1, r5
1a001754:	4620      	mov	r0, r4
1a001756:	f7ff fcdd 	bl	1a001114 <prvAddCurrentTaskToDelayedList>
	}
1a00175a:	bd38      	pop	{r3, r4, r5, pc}
1a00175c:	10002890 	.word	0x10002890

1a001760 <xTaskRemoveFromEventList>:
{
1a001760:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001762:	68c3      	ldr	r3, [r0, #12]
1a001764:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001766:	b944      	cbnz	r4, 1a00177a <xTaskRemoveFromEventList+0x1a>
1a001768:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00176c:	f383 8811 	msr	BASEPRI, r3
1a001770:	f3bf 8f6f 	isb	sy
1a001774:	f3bf 8f4f 	dsb	sy
1a001778:	e7fe      	b.n	1a001778 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a00177a:	f104 0518 	add.w	r5, r4, #24
1a00177e:	4628      	mov	r0, r5
1a001780:	f7ff fb59 	bl	1a000e36 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001784:	4b13      	ldr	r3, [pc, #76]	; (1a0017d4 <xTaskRemoveFromEventList+0x74>)
1a001786:	681b      	ldr	r3, [r3, #0]
1a001788:	b9e3      	cbnz	r3, 1a0017c4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a00178a:	1d25      	adds	r5, r4, #4
1a00178c:	4628      	mov	r0, r5
1a00178e:	f7ff fb52 	bl	1a000e36 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001792:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001794:	2201      	movs	r2, #1
1a001796:	409a      	lsls	r2, r3
1a001798:	490f      	ldr	r1, [pc, #60]	; (1a0017d8 <xTaskRemoveFromEventList+0x78>)
1a00179a:	6808      	ldr	r0, [r1, #0]
1a00179c:	4302      	orrs	r2, r0
1a00179e:	600a      	str	r2, [r1, #0]
1a0017a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0017a4:	009a      	lsls	r2, r3, #2
1a0017a6:	4629      	mov	r1, r5
1a0017a8:	480c      	ldr	r0, [pc, #48]	; (1a0017dc <xTaskRemoveFromEventList+0x7c>)
1a0017aa:	4410      	add	r0, r2
1a0017ac:	f7ff fb1d 	bl	1a000dea <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a0017b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0017b2:	4b0b      	ldr	r3, [pc, #44]	; (1a0017e0 <xTaskRemoveFromEventList+0x80>)
1a0017b4:	681b      	ldr	r3, [r3, #0]
1a0017b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0017b8:	429a      	cmp	r2, r3
1a0017ba:	d908      	bls.n	1a0017ce <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a0017bc:	2001      	movs	r0, #1
1a0017be:	4b09      	ldr	r3, [pc, #36]	; (1a0017e4 <xTaskRemoveFromEventList+0x84>)
1a0017c0:	6018      	str	r0, [r3, #0]
}
1a0017c2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a0017c4:	4629      	mov	r1, r5
1a0017c6:	4808      	ldr	r0, [pc, #32]	; (1a0017e8 <xTaskRemoveFromEventList+0x88>)
1a0017c8:	f7ff fb0f 	bl	1a000dea <vListInsertEnd>
1a0017cc:	e7f0      	b.n	1a0017b0 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a0017ce:	2000      	movs	r0, #0
	return xReturn;
1a0017d0:	e7f7      	b.n	1a0017c2 <xTaskRemoveFromEventList+0x62>
1a0017d2:	bf00      	nop
1a0017d4:	10002934 	.word	0x10002934
1a0017d8:	1000293c 	.word	0x1000293c
1a0017dc:	1000289c 	.word	0x1000289c
1a0017e0:	10002890 	.word	0x10002890
1a0017e4:	100029b4 	.word	0x100029b4
1a0017e8:	10002970 	.word	0x10002970

1a0017ec <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a0017ec:	4b03      	ldr	r3, [pc, #12]	; (1a0017fc <vTaskInternalSetTimeOutState+0x10>)
1a0017ee:	681b      	ldr	r3, [r3, #0]
1a0017f0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a0017f2:	4b03      	ldr	r3, [pc, #12]	; (1a001800 <vTaskInternalSetTimeOutState+0x14>)
1a0017f4:	681b      	ldr	r3, [r3, #0]
1a0017f6:	6043      	str	r3, [r0, #4]
}
1a0017f8:	4770      	bx	lr
1a0017fa:	bf00      	nop
1a0017fc:	1000296c 	.word	0x1000296c
1a001800:	100029b0 	.word	0x100029b0

1a001804 <xTaskCheckForTimeOut>:
{
1a001804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a001806:	b150      	cbz	r0, 1a00181e <xTaskCheckForTimeOut+0x1a>
1a001808:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a00180a:	b989      	cbnz	r1, 1a001830 <xTaskCheckForTimeOut+0x2c>
1a00180c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001810:	f383 8811 	msr	BASEPRI, r3
1a001814:	f3bf 8f6f 	isb	sy
1a001818:	f3bf 8f4f 	dsb	sy
1a00181c:	e7fe      	b.n	1a00181c <xTaskCheckForTimeOut+0x18>
1a00181e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001822:	f383 8811 	msr	BASEPRI, r3
1a001826:	f3bf 8f6f 	isb	sy
1a00182a:	f3bf 8f4f 	dsb	sy
1a00182e:	e7fe      	b.n	1a00182e <xTaskCheckForTimeOut+0x2a>
1a001830:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a001832:	f000 fb5f 	bl	1a001ef4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a001836:	4b11      	ldr	r3, [pc, #68]	; (1a00187c <xTaskCheckForTimeOut+0x78>)
1a001838:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a00183a:	6868      	ldr	r0, [r5, #4]
1a00183c:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a00183e:	6823      	ldr	r3, [r4, #0]
1a001840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001844:	d016      	beq.n	1a001874 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001846:	682f      	ldr	r7, [r5, #0]
1a001848:	4e0d      	ldr	r6, [pc, #52]	; (1a001880 <xTaskCheckForTimeOut+0x7c>)
1a00184a:	6836      	ldr	r6, [r6, #0]
1a00184c:	42b7      	cmp	r7, r6
1a00184e:	d001      	beq.n	1a001854 <xTaskCheckForTimeOut+0x50>
1a001850:	4288      	cmp	r0, r1
1a001852:	d911      	bls.n	1a001878 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001854:	4293      	cmp	r3, r2
1a001856:	d803      	bhi.n	1a001860 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001858:	2300      	movs	r3, #0
1a00185a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a00185c:	2401      	movs	r4, #1
1a00185e:	e005      	b.n	1a00186c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a001860:	1a9b      	subs	r3, r3, r2
1a001862:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001864:	4628      	mov	r0, r5
1a001866:	f7ff ffc1 	bl	1a0017ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a00186a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00186c:	f000 fb64 	bl	1a001f38 <vPortExitCritical>
}
1a001870:	4620      	mov	r0, r4
1a001872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a001874:	2400      	movs	r4, #0
1a001876:	e7f9      	b.n	1a00186c <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a001878:	2401      	movs	r4, #1
1a00187a:	e7f7      	b.n	1a00186c <xTaskCheckForTimeOut+0x68>
1a00187c:	100029b0 	.word	0x100029b0
1a001880:	1000296c 	.word	0x1000296c

1a001884 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001884:	4b01      	ldr	r3, [pc, #4]	; (1a00188c <vTaskMissedYield+0x8>)
1a001886:	2201      	movs	r2, #1
1a001888:	601a      	str	r2, [r3, #0]
}
1a00188a:	4770      	bx	lr
1a00188c:	100029b4 	.word	0x100029b4

1a001890 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001890:	4b05      	ldr	r3, [pc, #20]	; (1a0018a8 <xTaskGetSchedulerState+0x18>)
1a001892:	681b      	ldr	r3, [r3, #0]
1a001894:	b133      	cbz	r3, 1a0018a4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001896:	4b05      	ldr	r3, [pc, #20]	; (1a0018ac <xTaskGetSchedulerState+0x1c>)
1a001898:	681b      	ldr	r3, [r3, #0]
1a00189a:	b10b      	cbz	r3, 1a0018a0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a00189c:	2000      	movs	r0, #0
	}
1a00189e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a0018a0:	2002      	movs	r0, #2
1a0018a2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a0018a4:	2001      	movs	r0, #1
1a0018a6:	4770      	bx	lr
1a0018a8:	10002984 	.word	0x10002984
1a0018ac:	10002934 	.word	0x10002934

1a0018b0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a0018b0:	2800      	cmp	r0, #0
1a0018b2:	d049      	beq.n	1a001948 <xTaskPriorityDisinherit+0x98>
	{
1a0018b4:	b538      	push	{r3, r4, r5, lr}
1a0018b6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a0018b8:	4a26      	ldr	r2, [pc, #152]	; (1a001954 <xTaskPriorityDisinherit+0xa4>)
1a0018ba:	6812      	ldr	r2, [r2, #0]
1a0018bc:	4282      	cmp	r2, r0
1a0018be:	d008      	beq.n	1a0018d2 <xTaskPriorityDisinherit+0x22>
1a0018c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018c4:	f383 8811 	msr	BASEPRI, r3
1a0018c8:	f3bf 8f6f 	isb	sy
1a0018cc:	f3bf 8f4f 	dsb	sy
1a0018d0:	e7fe      	b.n	1a0018d0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a0018d2:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a0018d4:	b942      	cbnz	r2, 1a0018e8 <xTaskPriorityDisinherit+0x38>
1a0018d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018da:	f383 8811 	msr	BASEPRI, r3
1a0018de:	f3bf 8f6f 	isb	sy
1a0018e2:	f3bf 8f4f 	dsb	sy
1a0018e6:	e7fe      	b.n	1a0018e6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a0018e8:	3a01      	subs	r2, #1
1a0018ea:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a0018ec:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a0018ee:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a0018f0:	4288      	cmp	r0, r1
1a0018f2:	d02b      	beq.n	1a00194c <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a0018f4:	bb62      	cbnz	r2, 1a001950 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0018f6:	1d25      	adds	r5, r4, #4
1a0018f8:	4628      	mov	r0, r5
1a0018fa:	f7ff fa9c 	bl	1a000e36 <uxListRemove>
1a0018fe:	b970      	cbnz	r0, 1a00191e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001900:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001902:	2314      	movs	r3, #20
1a001904:	fb03 f302 	mul.w	r3, r3, r2
1a001908:	4913      	ldr	r1, [pc, #76]	; (1a001958 <xTaskPriorityDisinherit+0xa8>)
1a00190a:	58cb      	ldr	r3, [r1, r3]
1a00190c:	b93b      	cbnz	r3, 1a00191e <xTaskPriorityDisinherit+0x6e>
1a00190e:	2301      	movs	r3, #1
1a001910:	fa03 f202 	lsl.w	r2, r3, r2
1a001914:	4911      	ldr	r1, [pc, #68]	; (1a00195c <xTaskPriorityDisinherit+0xac>)
1a001916:	680b      	ldr	r3, [r1, #0]
1a001918:	ea23 0302 	bic.w	r3, r3, r2
1a00191c:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a00191e:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001920:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001922:	f1c3 0207 	rsb	r2, r3, #7
1a001926:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001928:	2401      	movs	r4, #1
1a00192a:	fa04 f203 	lsl.w	r2, r4, r3
1a00192e:	490b      	ldr	r1, [pc, #44]	; (1a00195c <xTaskPriorityDisinherit+0xac>)
1a001930:	6808      	ldr	r0, [r1, #0]
1a001932:	4302      	orrs	r2, r0
1a001934:	600a      	str	r2, [r1, #0]
1a001936:	4629      	mov	r1, r5
1a001938:	4a07      	ldr	r2, [pc, #28]	; (1a001958 <xTaskPriorityDisinherit+0xa8>)
1a00193a:	2014      	movs	r0, #20
1a00193c:	fb00 2003 	mla	r0, r0, r3, r2
1a001940:	f7ff fa53 	bl	1a000dea <vListInsertEnd>
					xReturn = pdTRUE;
1a001944:	4620      	mov	r0, r4
	}
1a001946:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a001948:	2000      	movs	r0, #0
	}
1a00194a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a00194c:	2000      	movs	r0, #0
1a00194e:	e7fa      	b.n	1a001946 <xTaskPriorityDisinherit+0x96>
1a001950:	2000      	movs	r0, #0
		return xReturn;
1a001952:	e7f8      	b.n	1a001946 <xTaskPriorityDisinherit+0x96>
1a001954:	10002890 	.word	0x10002890
1a001958:	1000289c 	.word	0x1000289c
1a00195c:	1000293c 	.word	0x1000293c

1a001960 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001960:	4b06      	ldr	r3, [pc, #24]	; (1a00197c <prvGetNextExpireTime+0x1c>)
1a001962:	681a      	ldr	r2, [r3, #0]
1a001964:	6813      	ldr	r3, [r2, #0]
1a001966:	fab3 f383 	clz	r3, r3
1a00196a:	095b      	lsrs	r3, r3, #5
1a00196c:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a00196e:	b913      	cbnz	r3, 1a001976 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001970:	68d3      	ldr	r3, [r2, #12]
1a001972:	6818      	ldr	r0, [r3, #0]
1a001974:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001976:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001978:	4770      	bx	lr
1a00197a:	bf00      	nop
1a00197c:	100029b8 	.word	0x100029b8

1a001980 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001980:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001982:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001984:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001986:	4291      	cmp	r1, r2
1a001988:	d80c      	bhi.n	1a0019a4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00198a:	1ad2      	subs	r2, r2, r3
1a00198c:	6983      	ldr	r3, [r0, #24]
1a00198e:	429a      	cmp	r2, r3
1a001990:	d301      	bcc.n	1a001996 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001992:	2001      	movs	r0, #1
1a001994:	e010      	b.n	1a0019b8 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001996:	1d01      	adds	r1, r0, #4
1a001998:	4b09      	ldr	r3, [pc, #36]	; (1a0019c0 <prvInsertTimerInActiveList+0x40>)
1a00199a:	6818      	ldr	r0, [r3, #0]
1a00199c:	f7ff fa31 	bl	1a000e02 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a0019a0:	2000      	movs	r0, #0
1a0019a2:	e009      	b.n	1a0019b8 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a0019a4:	429a      	cmp	r2, r3
1a0019a6:	d201      	bcs.n	1a0019ac <prvInsertTimerInActiveList+0x2c>
1a0019a8:	4299      	cmp	r1, r3
1a0019aa:	d206      	bcs.n	1a0019ba <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a0019ac:	1d01      	adds	r1, r0, #4
1a0019ae:	4b05      	ldr	r3, [pc, #20]	; (1a0019c4 <prvInsertTimerInActiveList+0x44>)
1a0019b0:	6818      	ldr	r0, [r3, #0]
1a0019b2:	f7ff fa26 	bl	1a000e02 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a0019b6:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a0019b8:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a0019ba:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a0019bc:	e7fc      	b.n	1a0019b8 <prvInsertTimerInActiveList+0x38>
1a0019be:	bf00      	nop
1a0019c0:	100029bc 	.word	0x100029bc
1a0019c4:	100029b8 	.word	0x100029b8

1a0019c8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a0019c8:	b530      	push	{r4, r5, lr}
1a0019ca:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a0019cc:	f000 fa92 	bl	1a001ef4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a0019d0:	4b11      	ldr	r3, [pc, #68]	; (1a001a18 <prvCheckForValidListAndQueue+0x50>)
1a0019d2:	681b      	ldr	r3, [r3, #0]
1a0019d4:	b11b      	cbz	r3, 1a0019de <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a0019d6:	f000 faaf 	bl	1a001f38 <vPortExitCritical>
}
1a0019da:	b003      	add	sp, #12
1a0019dc:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a0019de:	4d0f      	ldr	r5, [pc, #60]	; (1a001a1c <prvCheckForValidListAndQueue+0x54>)
1a0019e0:	4628      	mov	r0, r5
1a0019e2:	f7ff f9f4 	bl	1a000dce <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a0019e6:	4c0e      	ldr	r4, [pc, #56]	; (1a001a20 <prvCheckForValidListAndQueue+0x58>)
1a0019e8:	4620      	mov	r0, r4
1a0019ea:	f7ff f9f0 	bl	1a000dce <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a0019ee:	4b0d      	ldr	r3, [pc, #52]	; (1a001a24 <prvCheckForValidListAndQueue+0x5c>)
1a0019f0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a0019f2:	4b0d      	ldr	r3, [pc, #52]	; (1a001a28 <prvCheckForValidListAndQueue+0x60>)
1a0019f4:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a0019f6:	2300      	movs	r3, #0
1a0019f8:	9300      	str	r3, [sp, #0]
1a0019fa:	4b0c      	ldr	r3, [pc, #48]	; (1a001a2c <prvCheckForValidListAndQueue+0x64>)
1a0019fc:	4a0c      	ldr	r2, [pc, #48]	; (1a001a30 <prvCheckForValidListAndQueue+0x68>)
1a0019fe:	2110      	movs	r1, #16
1a001a00:	200a      	movs	r0, #10
1a001a02:	f7fe ff8e 	bl	1a000922 <xQueueGenericCreateStatic>
1a001a06:	4b04      	ldr	r3, [pc, #16]	; (1a001a18 <prvCheckForValidListAndQueue+0x50>)
1a001a08:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a001a0a:	2800      	cmp	r0, #0
1a001a0c:	d0e3      	beq.n	1a0019d6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001a0e:	4909      	ldr	r1, [pc, #36]	; (1a001a34 <prvCheckForValidListAndQueue+0x6c>)
1a001a10:	f7ff f9a0 	bl	1a000d54 <vQueueAddToRegistry>
1a001a14:	e7df      	b.n	1a0019d6 <prvCheckForValidListAndQueue+0xe>
1a001a16:	bf00      	nop
1a001a18:	10002adc 	.word	0x10002adc
1a001a1c:	10002a60 	.word	0x10002a60
1a001a20:	10002a74 	.word	0x10002a74
1a001a24:	100029b8 	.word	0x100029b8
1a001a28:	100029bc 	.word	0x100029bc
1a001a2c:	10002a8c 	.word	0x10002a8c
1a001a30:	100029c0 	.word	0x100029c0
1a001a34:	1a003ff0 	.word	0x1a003ff0

1a001a38 <prvInitialiseNewTimer>:
{
1a001a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001a3c:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a001a3e:	b941      	cbnz	r1, 1a001a52 <prvInitialiseNewTimer+0x1a>
1a001a40:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a44:	f383 8811 	msr	BASEPRI, r3
1a001a48:	f3bf 8f6f 	isb	sy
1a001a4c:	f3bf 8f4f 	dsb	sy
1a001a50:	e7fe      	b.n	1a001a50 <prvInitialiseNewTimer+0x18>
1a001a52:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a001a54:	b174      	cbz	r4, 1a001a74 <prvInitialiseNewTimer+0x3c>
1a001a56:	461d      	mov	r5, r3
1a001a58:	4616      	mov	r6, r2
1a001a5a:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a001a5c:	f7ff ffb4 	bl	1a0019c8 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a001a60:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a001a64:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a001a66:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a001a68:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a001a6a:	9b06      	ldr	r3, [sp, #24]
1a001a6c:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a001a6e:	1d20      	adds	r0, r4, #4
1a001a70:	f7ff f9b8 	bl	1a000de4 <vListInitialiseItem>
}
1a001a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a001a78 <xTimerCreateTimerTask>:
{
1a001a78:	b510      	push	{r4, lr}
1a001a7a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a001a7c:	f7ff ffa4 	bl	1a0019c8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001a80:	4b12      	ldr	r3, [pc, #72]	; (1a001acc <xTimerCreateTimerTask+0x54>)
1a001a82:	681b      	ldr	r3, [r3, #0]
1a001a84:	b1cb      	cbz	r3, 1a001aba <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a001a86:	2400      	movs	r4, #0
1a001a88:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001a8a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001a8c:	aa07      	add	r2, sp, #28
1a001a8e:	a906      	add	r1, sp, #24
1a001a90:	a805      	add	r0, sp, #20
1a001a92:	f7ff f9f1 	bl	1a000e78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a001a96:	9b05      	ldr	r3, [sp, #20]
1a001a98:	9302      	str	r3, [sp, #8]
1a001a9a:	9b06      	ldr	r3, [sp, #24]
1a001a9c:	9301      	str	r3, [sp, #4]
1a001a9e:	2304      	movs	r3, #4
1a001aa0:	9300      	str	r3, [sp, #0]
1a001aa2:	4623      	mov	r3, r4
1a001aa4:	9a07      	ldr	r2, [sp, #28]
1a001aa6:	490a      	ldr	r1, [pc, #40]	; (1a001ad0 <xTimerCreateTimerTask+0x58>)
1a001aa8:	480a      	ldr	r0, [pc, #40]	; (1a001ad4 <xTimerCreateTimerTask+0x5c>)
1a001aaa:	f7ff fb7f 	bl	1a0011ac <xTaskCreateStatic>
1a001aae:	4b0a      	ldr	r3, [pc, #40]	; (1a001ad8 <xTimerCreateTimerTask+0x60>)
1a001ab0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a001ab2:	b110      	cbz	r0, 1a001aba <xTimerCreateTimerTask+0x42>
}
1a001ab4:	2001      	movs	r0, #1
1a001ab6:	b008      	add	sp, #32
1a001ab8:	bd10      	pop	{r4, pc}
1a001aba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001abe:	f383 8811 	msr	BASEPRI, r3
1a001ac2:	f3bf 8f6f 	isb	sy
1a001ac6:	f3bf 8f4f 	dsb	sy
1a001aca:	e7fe      	b.n	1a001aca <xTimerCreateTimerTask+0x52>
1a001acc:	10002adc 	.word	0x10002adc
1a001ad0:	1a003ff8 	.word	0x1a003ff8
1a001ad4:	1a001e09 	.word	0x1a001e09
1a001ad8:	10002ae0 	.word	0x10002ae0

1a001adc <xTimerCreateStatic>:
	{
1a001adc:	b530      	push	{r4, r5, lr}
1a001ade:	b085      	sub	sp, #20
1a001ae0:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
1a001ae2:	2530      	movs	r5, #48	; 0x30
1a001ae4:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a001ae6:	9d03      	ldr	r5, [sp, #12]
1a001ae8:	2d30      	cmp	r5, #48	; 0x30
1a001aea:	d008      	beq.n	1a001afe <xTimerCreateStatic+0x22>
1a001aec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001af0:	f383 8811 	msr	BASEPRI, r3
1a001af4:	f3bf 8f6f 	isb	sy
1a001af8:	f3bf 8f4f 	dsb	sy
1a001afc:	e7fe      	b.n	1a001afc <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
1a001afe:	b944      	cbnz	r4, 1a001b12 <xTimerCreateStatic+0x36>
1a001b00:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b04:	f383 8811 	msr	BASEPRI, r3
1a001b08:	f3bf 8f6f 	isb	sy
1a001b0c:	f3bf 8f4f 	dsb	sy
1a001b10:	e7fe      	b.n	1a001b10 <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a001b12:	9401      	str	r4, [sp, #4]
1a001b14:	9d08      	ldr	r5, [sp, #32]
1a001b16:	9500      	str	r5, [sp, #0]
1a001b18:	f7ff ff8e 	bl	1a001a38 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a001b1c:	2301      	movs	r3, #1
1a001b1e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a001b22:	4620      	mov	r0, r4
1a001b24:	b005      	add	sp, #20
1a001b26:	bd30      	pop	{r4, r5, pc}

1a001b28 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a001b28:	b1c8      	cbz	r0, 1a001b5e <xTimerGenericCommand+0x36>
{
1a001b2a:	b530      	push	{r4, r5, lr}
1a001b2c:	b085      	sub	sp, #20
1a001b2e:	4615      	mov	r5, r2
1a001b30:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a001b32:	4a17      	ldr	r2, [pc, #92]	; (1a001b90 <xTimerGenericCommand+0x68>)
1a001b34:	6810      	ldr	r0, [r2, #0]
1a001b36:	b340      	cbz	r0, 1a001b8a <xTimerGenericCommand+0x62>
1a001b38:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a001b3a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a001b3c:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a001b3e:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a001b40:	2905      	cmp	r1, #5
1a001b42:	dc1d      	bgt.n	1a001b80 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a001b44:	f7ff fea4 	bl	1a001890 <xTaskGetSchedulerState>
1a001b48:	2802      	cmp	r0, #2
1a001b4a:	d011      	beq.n	1a001b70 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a001b4c:	2300      	movs	r3, #0
1a001b4e:	461a      	mov	r2, r3
1a001b50:	4669      	mov	r1, sp
1a001b52:	480f      	ldr	r0, [pc, #60]	; (1a001b90 <xTimerGenericCommand+0x68>)
1a001b54:	6800      	ldr	r0, [r0, #0]
1a001b56:	f7fe ff2d 	bl	1a0009b4 <xQueueGenericSend>
}
1a001b5a:	b005      	add	sp, #20
1a001b5c:	bd30      	pop	{r4, r5, pc}
1a001b5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b62:	f383 8811 	msr	BASEPRI, r3
1a001b66:	f3bf 8f6f 	isb	sy
1a001b6a:	f3bf 8f4f 	dsb	sy
1a001b6e:	e7fe      	b.n	1a001b6e <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a001b70:	2300      	movs	r3, #0
1a001b72:	9a08      	ldr	r2, [sp, #32]
1a001b74:	4669      	mov	r1, sp
1a001b76:	4806      	ldr	r0, [pc, #24]	; (1a001b90 <xTimerGenericCommand+0x68>)
1a001b78:	6800      	ldr	r0, [r0, #0]
1a001b7a:	f7fe ff1b 	bl	1a0009b4 <xQueueGenericSend>
1a001b7e:	e7ec      	b.n	1a001b5a <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a001b80:	2300      	movs	r3, #0
1a001b82:	4669      	mov	r1, sp
1a001b84:	f7fe ffd4 	bl	1a000b30 <xQueueGenericSendFromISR>
1a001b88:	e7e7      	b.n	1a001b5a <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a001b8a:	2000      	movs	r0, #0
	return xReturn;
1a001b8c:	e7e5      	b.n	1a001b5a <xTimerGenericCommand+0x32>
1a001b8e:	bf00      	nop
1a001b90:	10002adc 	.word	0x10002adc

1a001b94 <prvSwitchTimerLists>:
{
1a001b94:	b570      	push	{r4, r5, r6, lr}
1a001b96:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a001b98:	4b1a      	ldr	r3, [pc, #104]	; (1a001c04 <prvSwitchTimerLists+0x70>)
1a001b9a:	681b      	ldr	r3, [r3, #0]
1a001b9c:	681a      	ldr	r2, [r3, #0]
1a001b9e:	b352      	cbz	r2, 1a001bf6 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001ba0:	68db      	ldr	r3, [r3, #12]
1a001ba2:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001ba4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001ba6:	1d25      	adds	r5, r4, #4
1a001ba8:	4628      	mov	r0, r5
1a001baa:	f7ff f944 	bl	1a000e36 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001bb0:	4620      	mov	r0, r4
1a001bb2:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001bb4:	69e3      	ldr	r3, [r4, #28]
1a001bb6:	2b01      	cmp	r3, #1
1a001bb8:	d1ee      	bne.n	1a001b98 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a001bba:	69a3      	ldr	r3, [r4, #24]
1a001bbc:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a001bbe:	429e      	cmp	r6, r3
1a001bc0:	d207      	bcs.n	1a001bd2 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a001bc2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001bc4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001bc6:	4629      	mov	r1, r5
1a001bc8:	4b0e      	ldr	r3, [pc, #56]	; (1a001c04 <prvSwitchTimerLists+0x70>)
1a001bca:	6818      	ldr	r0, [r3, #0]
1a001bcc:	f7ff f919 	bl	1a000e02 <vListInsert>
1a001bd0:	e7e2      	b.n	1a001b98 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001bd2:	2100      	movs	r1, #0
1a001bd4:	9100      	str	r1, [sp, #0]
1a001bd6:	460b      	mov	r3, r1
1a001bd8:	4632      	mov	r2, r6
1a001bda:	4620      	mov	r0, r4
1a001bdc:	f7ff ffa4 	bl	1a001b28 <xTimerGenericCommand>
				configASSERT( xResult );
1a001be0:	2800      	cmp	r0, #0
1a001be2:	d1d9      	bne.n	1a001b98 <prvSwitchTimerLists+0x4>
1a001be4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001be8:	f383 8811 	msr	BASEPRI, r3
1a001bec:	f3bf 8f6f 	isb	sy
1a001bf0:	f3bf 8f4f 	dsb	sy
1a001bf4:	e7fe      	b.n	1a001bf4 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a001bf6:	4a04      	ldr	r2, [pc, #16]	; (1a001c08 <prvSwitchTimerLists+0x74>)
1a001bf8:	6810      	ldr	r0, [r2, #0]
1a001bfa:	4902      	ldr	r1, [pc, #8]	; (1a001c04 <prvSwitchTimerLists+0x70>)
1a001bfc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a001bfe:	6013      	str	r3, [r2, #0]
}
1a001c00:	b002      	add	sp, #8
1a001c02:	bd70      	pop	{r4, r5, r6, pc}
1a001c04:	100029b8 	.word	0x100029b8
1a001c08:	100029bc 	.word	0x100029bc

1a001c0c <prvSampleTimeNow>:
{
1a001c0c:	b538      	push	{r3, r4, r5, lr}
1a001c0e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a001c10:	f7ff fb8a 	bl	1a001328 <xTaskGetTickCount>
1a001c14:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a001c16:	4b07      	ldr	r3, [pc, #28]	; (1a001c34 <prvSampleTimeNow+0x28>)
1a001c18:	681b      	ldr	r3, [r3, #0]
1a001c1a:	4283      	cmp	r3, r0
1a001c1c:	d805      	bhi.n	1a001c2a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a001c1e:	2300      	movs	r3, #0
1a001c20:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a001c22:	4b04      	ldr	r3, [pc, #16]	; (1a001c34 <prvSampleTimeNow+0x28>)
1a001c24:	601c      	str	r4, [r3, #0]
}
1a001c26:	4620      	mov	r0, r4
1a001c28:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a001c2a:	f7ff ffb3 	bl	1a001b94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a001c2e:	2301      	movs	r3, #1
1a001c30:	602b      	str	r3, [r5, #0]
1a001c32:	e7f6      	b.n	1a001c22 <prvSampleTimeNow+0x16>
1a001c34:	10002a88 	.word	0x10002a88

1a001c38 <prvProcessExpiredTimer>:
{
1a001c38:	b570      	push	{r4, r5, r6, lr}
1a001c3a:	b082      	sub	sp, #8
1a001c3c:	4605      	mov	r5, r0
1a001c3e:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001c40:	4b14      	ldr	r3, [pc, #80]	; (1a001c94 <prvProcessExpiredTimer+0x5c>)
1a001c42:	681b      	ldr	r3, [r3, #0]
1a001c44:	68db      	ldr	r3, [r3, #12]
1a001c46:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001c48:	1d20      	adds	r0, r4, #4
1a001c4a:	f7ff f8f4 	bl	1a000e36 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001c4e:	69e3      	ldr	r3, [r4, #28]
1a001c50:	2b01      	cmp	r3, #1
1a001c52:	d004      	beq.n	1a001c5e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001c54:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001c56:	4620      	mov	r0, r4
1a001c58:	4798      	blx	r3
}
1a001c5a:	b002      	add	sp, #8
1a001c5c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a001c5e:	69a1      	ldr	r1, [r4, #24]
1a001c60:	462b      	mov	r3, r5
1a001c62:	4632      	mov	r2, r6
1a001c64:	4429      	add	r1, r5
1a001c66:	4620      	mov	r0, r4
1a001c68:	f7ff fe8a 	bl	1a001980 <prvInsertTimerInActiveList>
1a001c6c:	2800      	cmp	r0, #0
1a001c6e:	d0f1      	beq.n	1a001c54 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001c70:	2100      	movs	r1, #0
1a001c72:	9100      	str	r1, [sp, #0]
1a001c74:	460b      	mov	r3, r1
1a001c76:	462a      	mov	r2, r5
1a001c78:	4620      	mov	r0, r4
1a001c7a:	f7ff ff55 	bl	1a001b28 <xTimerGenericCommand>
			configASSERT( xResult );
1a001c7e:	2800      	cmp	r0, #0
1a001c80:	d1e8      	bne.n	1a001c54 <prvProcessExpiredTimer+0x1c>
1a001c82:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c86:	f383 8811 	msr	BASEPRI, r3
1a001c8a:	f3bf 8f6f 	isb	sy
1a001c8e:	f3bf 8f4f 	dsb	sy
1a001c92:	e7fe      	b.n	1a001c92 <prvProcessExpiredTimer+0x5a>
1a001c94:	100029b8 	.word	0x100029b8

1a001c98 <prvProcessTimerOrBlockTask>:
{
1a001c98:	b570      	push	{r4, r5, r6, lr}
1a001c9a:	b082      	sub	sp, #8
1a001c9c:	4606      	mov	r6, r0
1a001c9e:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a001ca0:	f7ff fb3a 	bl	1a001318 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001ca4:	a801      	add	r0, sp, #4
1a001ca6:	f7ff ffb1 	bl	1a001c0c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a001caa:	9b01      	ldr	r3, [sp, #4]
1a001cac:	bb1b      	cbnz	r3, 1a001cf6 <prvProcessTimerOrBlockTask+0x5e>
1a001cae:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a001cb0:	b90c      	cbnz	r4, 1a001cb6 <prvProcessTimerOrBlockTask+0x1e>
1a001cb2:	42b0      	cmp	r0, r6
1a001cb4:	d218      	bcs.n	1a001ce8 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a001cb6:	b12c      	cbz	r4, 1a001cc4 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a001cb8:	4b11      	ldr	r3, [pc, #68]	; (1a001d00 <prvProcessTimerOrBlockTask+0x68>)
1a001cba:	681b      	ldr	r3, [r3, #0]
1a001cbc:	681c      	ldr	r4, [r3, #0]
1a001cbe:	fab4 f484 	clz	r4, r4
1a001cc2:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a001cc4:	4622      	mov	r2, r4
1a001cc6:	1b71      	subs	r1, r6, r5
1a001cc8:	4b0e      	ldr	r3, [pc, #56]	; (1a001d04 <prvProcessTimerOrBlockTask+0x6c>)
1a001cca:	6818      	ldr	r0, [r3, #0]
1a001ccc:	f7ff f856 	bl	1a000d7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a001cd0:	f7ff fbbc 	bl	1a00144c <xTaskResumeAll>
1a001cd4:	b988      	cbnz	r0, 1a001cfa <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a001cd6:	4b0c      	ldr	r3, [pc, #48]	; (1a001d08 <prvProcessTimerOrBlockTask+0x70>)
1a001cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001cdc:	601a      	str	r2, [r3, #0]
1a001cde:	f3bf 8f4f 	dsb	sy
1a001ce2:	f3bf 8f6f 	isb	sy
1a001ce6:	e008      	b.n	1a001cfa <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a001ce8:	f7ff fbb0 	bl	1a00144c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a001cec:	4629      	mov	r1, r5
1a001cee:	4630      	mov	r0, r6
1a001cf0:	f7ff ffa2 	bl	1a001c38 <prvProcessExpiredTimer>
1a001cf4:	e001      	b.n	1a001cfa <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a001cf6:	f7ff fba9 	bl	1a00144c <xTaskResumeAll>
}
1a001cfa:	b002      	add	sp, #8
1a001cfc:	bd70      	pop	{r4, r5, r6, pc}
1a001cfe:	bf00      	nop
1a001d00:	100029bc 	.word	0x100029bc
1a001d04:	10002adc 	.word	0x10002adc
1a001d08:	e000ed04 	.word	0xe000ed04

1a001d0c <prvProcessReceivedCommands>:
{
1a001d0c:	b530      	push	{r4, r5, lr}
1a001d0e:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001d10:	e002      	b.n	1a001d18 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a001d12:	9b04      	ldr	r3, [sp, #16]
1a001d14:	2b00      	cmp	r3, #0
1a001d16:	da0f      	bge.n	1a001d38 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a001d18:	2200      	movs	r2, #0
1a001d1a:	a904      	add	r1, sp, #16
1a001d1c:	4b39      	ldr	r3, [pc, #228]	; (1a001e04 <prvProcessReceivedCommands+0xf8>)
1a001d1e:	6818      	ldr	r0, [r3, #0]
1a001d20:	f7fe ff6c 	bl	1a000bfc <xQueueReceive>
1a001d24:	2800      	cmp	r0, #0
1a001d26:	d06a      	beq.n	1a001dfe <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a001d28:	9b04      	ldr	r3, [sp, #16]
1a001d2a:	2b00      	cmp	r3, #0
1a001d2c:	daf1      	bge.n	1a001d12 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a001d2e:	9907      	ldr	r1, [sp, #28]
1a001d30:	9806      	ldr	r0, [sp, #24]
1a001d32:	9b05      	ldr	r3, [sp, #20]
1a001d34:	4798      	blx	r3
1a001d36:	e7ec      	b.n	1a001d12 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a001d38:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a001d3a:	6963      	ldr	r3, [r4, #20]
1a001d3c:	b113      	cbz	r3, 1a001d44 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001d3e:	1d20      	adds	r0, r4, #4
1a001d40:	f7ff f879 	bl	1a000e36 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001d44:	a803      	add	r0, sp, #12
1a001d46:	f7ff ff61 	bl	1a001c0c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a001d4a:	9b04      	ldr	r3, [sp, #16]
1a001d4c:	2b09      	cmp	r3, #9
1a001d4e:	d8e3      	bhi.n	1a001d18 <prvProcessReceivedCommands+0xc>
1a001d50:	a201      	add	r2, pc, #4	; (adr r2, 1a001d58 <prvProcessReceivedCommands+0x4c>)
1a001d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a001d56:	bf00      	nop
1a001d58:	1a001d81 	.word	0x1a001d81
1a001d5c:	1a001d81 	.word	0x1a001d81
1a001d60:	1a001d81 	.word	0x1a001d81
1a001d64:	1a001d19 	.word	0x1a001d19
1a001d68:	1a001dc9 	.word	0x1a001dc9
1a001d6c:	1a001def 	.word	0x1a001def
1a001d70:	1a001d81 	.word	0x1a001d81
1a001d74:	1a001d81 	.word	0x1a001d81
1a001d78:	1a001d19 	.word	0x1a001d19
1a001d7c:	1a001dc9 	.word	0x1a001dc9
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a001d80:	9905      	ldr	r1, [sp, #20]
1a001d82:	69a5      	ldr	r5, [r4, #24]
1a001d84:	460b      	mov	r3, r1
1a001d86:	4602      	mov	r2, r0
1a001d88:	4429      	add	r1, r5
1a001d8a:	4620      	mov	r0, r4
1a001d8c:	f7ff fdf8 	bl	1a001980 <prvInsertTimerInActiveList>
1a001d90:	2800      	cmp	r0, #0
1a001d92:	d0c1      	beq.n	1a001d18 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001d96:	4620      	mov	r0, r4
1a001d98:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001d9a:	69e3      	ldr	r3, [r4, #28]
1a001d9c:	2b01      	cmp	r3, #1
1a001d9e:	d1bb      	bne.n	1a001d18 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a001da0:	69a2      	ldr	r2, [r4, #24]
1a001da2:	2100      	movs	r1, #0
1a001da4:	9100      	str	r1, [sp, #0]
1a001da6:	460b      	mov	r3, r1
1a001da8:	9805      	ldr	r0, [sp, #20]
1a001daa:	4402      	add	r2, r0
1a001dac:	4620      	mov	r0, r4
1a001dae:	f7ff febb 	bl	1a001b28 <xTimerGenericCommand>
							configASSERT( xResult );
1a001db2:	2800      	cmp	r0, #0
1a001db4:	d1b0      	bne.n	1a001d18 <prvProcessReceivedCommands+0xc>
1a001db6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dba:	f383 8811 	msr	BASEPRI, r3
1a001dbe:	f3bf 8f6f 	isb	sy
1a001dc2:	f3bf 8f4f 	dsb	sy
1a001dc6:	e7fe      	b.n	1a001dc6 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a001dc8:	9905      	ldr	r1, [sp, #20]
1a001dca:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a001dcc:	b131      	cbz	r1, 1a001ddc <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a001dce:	4603      	mov	r3, r0
1a001dd0:	4602      	mov	r2, r0
1a001dd2:	4401      	add	r1, r0
1a001dd4:	4620      	mov	r0, r4
1a001dd6:	f7ff fdd3 	bl	1a001980 <prvInsertTimerInActiveList>
					break;
1a001dda:	e79d      	b.n	1a001d18 <prvProcessReceivedCommands+0xc>
1a001ddc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001de0:	f383 8811 	msr	BASEPRI, r3
1a001de4:	f3bf 8f6f 	isb	sy
1a001de8:	f3bf 8f4f 	dsb	sy
1a001dec:	e7fe      	b.n	1a001dec <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a001dee:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a001df2:	2b00      	cmp	r3, #0
1a001df4:	d190      	bne.n	1a001d18 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a001df6:	4620      	mov	r0, r4
1a001df8:	f7fe fc68 	bl	1a0006cc <vPortFree>
1a001dfc:	e78c      	b.n	1a001d18 <prvProcessReceivedCommands+0xc>
}
1a001dfe:	b009      	add	sp, #36	; 0x24
1a001e00:	bd30      	pop	{r4, r5, pc}
1a001e02:	bf00      	nop
1a001e04:	10002adc 	.word	0x10002adc

1a001e08 <prvTimerTask>:
{
1a001e08:	b500      	push	{lr}
1a001e0a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a001e0c:	a801      	add	r0, sp, #4
1a001e0e:	f7ff fda7 	bl	1a001960 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a001e12:	9901      	ldr	r1, [sp, #4]
1a001e14:	f7ff ff40 	bl	1a001c98 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a001e18:	f7ff ff78 	bl	1a001d0c <prvProcessReceivedCommands>
1a001e1c:	e7f6      	b.n	1a001e0c <prvTimerTask+0x4>
1a001e1e:	Address 0x000000001a001e1e is out of bounds.


1a001e20 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a001e20:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a001e22:	2300      	movs	r3, #0
1a001e24:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a001e26:	4b0d      	ldr	r3, [pc, #52]	; (1a001e5c <prvTaskExitError+0x3c>)
1a001e28:	681b      	ldr	r3, [r3, #0]
1a001e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001e2e:	d008      	beq.n	1a001e42 <prvTaskExitError+0x22>
1a001e30:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e34:	f383 8811 	msr	BASEPRI, r3
1a001e38:	f3bf 8f6f 	isb	sy
1a001e3c:	f3bf 8f4f 	dsb	sy
1a001e40:	e7fe      	b.n	1a001e40 <prvTaskExitError+0x20>
1a001e42:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e46:	f383 8811 	msr	BASEPRI, r3
1a001e4a:	f3bf 8f6f 	isb	sy
1a001e4e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a001e52:	9b01      	ldr	r3, [sp, #4]
1a001e54:	2b00      	cmp	r3, #0
1a001e56:	d0fc      	beq.n	1a001e52 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a001e58:	b002      	add	sp, #8
1a001e5a:	4770      	bx	lr
1a001e5c:	10000000 	.word	0x10000000

1a001e60 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a001e60:	4808      	ldr	r0, [pc, #32]	; (1a001e84 <prvPortStartFirstTask+0x24>)
1a001e62:	6800      	ldr	r0, [r0, #0]
1a001e64:	6800      	ldr	r0, [r0, #0]
1a001e66:	f380 8808 	msr	MSP, r0
1a001e6a:	f04f 0000 	mov.w	r0, #0
1a001e6e:	f380 8814 	msr	CONTROL, r0
1a001e72:	b662      	cpsie	i
1a001e74:	b661      	cpsie	f
1a001e76:	f3bf 8f4f 	dsb	sy
1a001e7a:	f3bf 8f6f 	isb	sy
1a001e7e:	df00      	svc	0
1a001e80:	bf00      	nop
1a001e82:	0000      	.short	0x0000
1a001e84:	e000ed08 	.word	0xe000ed08

1a001e88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a001e88:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a001e98 <vPortEnableVFP+0x10>
1a001e8c:	6801      	ldr	r1, [r0, #0]
1a001e8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001e92:	6001      	str	r1, [r0, #0]
1a001e94:	4770      	bx	lr
1a001e96:	0000      	.short	0x0000
1a001e98:	e000ed88 	.word	0xe000ed88

1a001e9c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a001e9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a001ea0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a001ea4:	f021 0101 	bic.w	r1, r1, #1
1a001ea8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a001eac:	4b05      	ldr	r3, [pc, #20]	; (1a001ec4 <pxPortInitialiseStack+0x28>)
1a001eae:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a001eb2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a001eb6:	f06f 0302 	mvn.w	r3, #2
1a001eba:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a001ebe:	3844      	subs	r0, #68	; 0x44
1a001ec0:	4770      	bx	lr
1a001ec2:	bf00      	nop
1a001ec4:	1a001e21 	.word	0x1a001e21
1a001ec8:	ffffffff 	.word	0xffffffff
1a001ecc:	ffffffff 	.word	0xffffffff

1a001ed0 <SVC_Handler>:
	__asm volatile (
1a001ed0:	4b07      	ldr	r3, [pc, #28]	; (1a001ef0 <pxCurrentTCBConst2>)
1a001ed2:	6819      	ldr	r1, [r3, #0]
1a001ed4:	6808      	ldr	r0, [r1, #0]
1a001ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001eda:	f380 8809 	msr	PSP, r0
1a001ede:	f3bf 8f6f 	isb	sy
1a001ee2:	f04f 0000 	mov.w	r0, #0
1a001ee6:	f380 8811 	msr	BASEPRI, r0
1a001eea:	4770      	bx	lr
1a001eec:	f3af 8000 	nop.w

1a001ef0 <pxCurrentTCBConst2>:
1a001ef0:	10002890 	.word	0x10002890

1a001ef4 <vPortEnterCritical>:
1a001ef4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ef8:	f383 8811 	msr	BASEPRI, r3
1a001efc:	f3bf 8f6f 	isb	sy
1a001f00:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a001f04:	4a0a      	ldr	r2, [pc, #40]	; (1a001f30 <vPortEnterCritical+0x3c>)
1a001f06:	6813      	ldr	r3, [r2, #0]
1a001f08:	3301      	adds	r3, #1
1a001f0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a001f0c:	2b01      	cmp	r3, #1
1a001f0e:	d000      	beq.n	1a001f12 <vPortEnterCritical+0x1e>
}
1a001f10:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a001f12:	4b08      	ldr	r3, [pc, #32]	; (1a001f34 <vPortEnterCritical+0x40>)
1a001f14:	681b      	ldr	r3, [r3, #0]
1a001f16:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001f1a:	d0f9      	beq.n	1a001f10 <vPortEnterCritical+0x1c>
1a001f1c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f20:	f383 8811 	msr	BASEPRI, r3
1a001f24:	f3bf 8f6f 	isb	sy
1a001f28:	f3bf 8f4f 	dsb	sy
1a001f2c:	e7fe      	b.n	1a001f2c <vPortEnterCritical+0x38>
1a001f2e:	bf00      	nop
1a001f30:	10000000 	.word	0x10000000
1a001f34:	e000ed04 	.word	0xe000ed04

1a001f38 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a001f38:	4b09      	ldr	r3, [pc, #36]	; (1a001f60 <vPortExitCritical+0x28>)
1a001f3a:	681b      	ldr	r3, [r3, #0]
1a001f3c:	b943      	cbnz	r3, 1a001f50 <vPortExitCritical+0x18>
1a001f3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f42:	f383 8811 	msr	BASEPRI, r3
1a001f46:	f3bf 8f6f 	isb	sy
1a001f4a:	f3bf 8f4f 	dsb	sy
1a001f4e:	e7fe      	b.n	1a001f4e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a001f50:	3b01      	subs	r3, #1
1a001f52:	4a03      	ldr	r2, [pc, #12]	; (1a001f60 <vPortExitCritical+0x28>)
1a001f54:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a001f56:	b90b      	cbnz	r3, 1a001f5c <vPortExitCritical+0x24>
	__asm volatile
1a001f58:	f383 8811 	msr	BASEPRI, r3
}
1a001f5c:	4770      	bx	lr
1a001f5e:	bf00      	nop
1a001f60:	10000000 	.word	0x10000000
1a001f64:	ffffffff 	.word	0xffffffff
1a001f68:	ffffffff 	.word	0xffffffff
1a001f6c:	ffffffff 	.word	0xffffffff

1a001f70 <PendSV_Handler>:
	__asm volatile
1a001f70:	f3ef 8009 	mrs	r0, PSP
1a001f74:	f3bf 8f6f 	isb	sy
1a001f78:	4b15      	ldr	r3, [pc, #84]	; (1a001fd0 <pxCurrentTCBConst>)
1a001f7a:	681a      	ldr	r2, [r3, #0]
1a001f7c:	f01e 0f10 	tst.w	lr, #16
1a001f80:	bf08      	it	eq
1a001f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a001f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001f8a:	6010      	str	r0, [r2, #0]
1a001f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a001f90:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a001f94:	f380 8811 	msr	BASEPRI, r0
1a001f98:	f3bf 8f4f 	dsb	sy
1a001f9c:	f3bf 8f6f 	isb	sy
1a001fa0:	f7ff fb46 	bl	1a001630 <vTaskSwitchContext>
1a001fa4:	f04f 0000 	mov.w	r0, #0
1a001fa8:	f380 8811 	msr	BASEPRI, r0
1a001fac:	bc09      	pop	{r0, r3}
1a001fae:	6819      	ldr	r1, [r3, #0]
1a001fb0:	6808      	ldr	r0, [r1, #0]
1a001fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001fb6:	f01e 0f10 	tst.w	lr, #16
1a001fba:	bf08      	it	eq
1a001fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a001fc0:	f380 8809 	msr	PSP, r0
1a001fc4:	f3bf 8f6f 	isb	sy
1a001fc8:	4770      	bx	lr
1a001fca:	bf00      	nop
1a001fcc:	f3af 8000 	nop.w

1a001fd0 <pxCurrentTCBConst>:
1a001fd0:	10002890 	.word	0x10002890

1a001fd4 <SysTick_Handler>:
{
1a001fd4:	b508      	push	{r3, lr}
	__asm volatile
1a001fd6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fda:	f383 8811 	msr	BASEPRI, r3
1a001fde:	f3bf 8f6f 	isb	sy
1a001fe2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a001fe6:	f7ff f9a5 	bl	1a001334 <xTaskIncrementTick>
1a001fea:	b118      	cbz	r0, 1a001ff4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a001fec:	4b03      	ldr	r3, [pc, #12]	; (1a001ffc <SysTick_Handler+0x28>)
1a001fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ff2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a001ff4:	2300      	movs	r3, #0
1a001ff6:	f383 8811 	msr	BASEPRI, r3
}
1a001ffa:	bd08      	pop	{r3, pc}
1a001ffc:	e000ed04 	.word	0xe000ed04

1a002000 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002000:	4a08      	ldr	r2, [pc, #32]	; (1a002024 <vPortSetupTimerInterrupt+0x24>)
1a002002:	2300      	movs	r3, #0
1a002004:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002006:	4908      	ldr	r1, [pc, #32]	; (1a002028 <vPortSetupTimerInterrupt+0x28>)
1a002008:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00200a:	4b08      	ldr	r3, [pc, #32]	; (1a00202c <vPortSetupTimerInterrupt+0x2c>)
1a00200c:	681b      	ldr	r3, [r3, #0]
1a00200e:	4908      	ldr	r1, [pc, #32]	; (1a002030 <vPortSetupTimerInterrupt+0x30>)
1a002010:	fba1 1303 	umull	r1, r3, r1, r3
1a002014:	099b      	lsrs	r3, r3, #6
1a002016:	3b01      	subs	r3, #1
1a002018:	4906      	ldr	r1, [pc, #24]	; (1a002034 <vPortSetupTimerInterrupt+0x34>)
1a00201a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00201c:	2307      	movs	r3, #7
1a00201e:	6013      	str	r3, [r2, #0]
}
1a002020:	4770      	bx	lr
1a002022:	bf00      	nop
1a002024:	e000e010 	.word	0xe000e010
1a002028:	e000e018 	.word	0xe000e018
1a00202c:	10002b80 	.word	0x10002b80
1a002030:	10624dd3 	.word	0x10624dd3
1a002034:	e000e014 	.word	0xe000e014

1a002038 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002038:	4b3a      	ldr	r3, [pc, #232]	; (1a002124 <xPortStartScheduler+0xec>)
1a00203a:	681a      	ldr	r2, [r3, #0]
1a00203c:	4b3a      	ldr	r3, [pc, #232]	; (1a002128 <xPortStartScheduler+0xf0>)
1a00203e:	429a      	cmp	r2, r3
1a002040:	d00d      	beq.n	1a00205e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002042:	4b38      	ldr	r3, [pc, #224]	; (1a002124 <xPortStartScheduler+0xec>)
1a002044:	681a      	ldr	r2, [r3, #0]
1a002046:	4b39      	ldr	r3, [pc, #228]	; (1a00212c <xPortStartScheduler+0xf4>)
1a002048:	429a      	cmp	r2, r3
1a00204a:	d111      	bne.n	1a002070 <xPortStartScheduler+0x38>
	__asm volatile
1a00204c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002050:	f383 8811 	msr	BASEPRI, r3
1a002054:	f3bf 8f6f 	isb	sy
1a002058:	f3bf 8f4f 	dsb	sy
1a00205c:	e7fe      	b.n	1a00205c <xPortStartScheduler+0x24>
1a00205e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002062:	f383 8811 	msr	BASEPRI, r3
1a002066:	f3bf 8f6f 	isb	sy
1a00206a:	f3bf 8f4f 	dsb	sy
1a00206e:	e7fe      	b.n	1a00206e <xPortStartScheduler+0x36>
{
1a002070:	b510      	push	{r4, lr}
1a002072:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002074:	4b2e      	ldr	r3, [pc, #184]	; (1a002130 <xPortStartScheduler+0xf8>)
1a002076:	781a      	ldrb	r2, [r3, #0]
1a002078:	b2d2      	uxtb	r2, r2
1a00207a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a00207c:	22ff      	movs	r2, #255	; 0xff
1a00207e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002080:	781b      	ldrb	r3, [r3, #0]
1a002082:	b2db      	uxtb	r3, r3
1a002084:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002088:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00208c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002090:	4a28      	ldr	r2, [pc, #160]	; (1a002134 <xPortStartScheduler+0xfc>)
1a002092:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002094:	4b28      	ldr	r3, [pc, #160]	; (1a002138 <xPortStartScheduler+0x100>)
1a002096:	2207      	movs	r2, #7
1a002098:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00209a:	e009      	b.n	1a0020b0 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a00209c:	4a26      	ldr	r2, [pc, #152]	; (1a002138 <xPortStartScheduler+0x100>)
1a00209e:	6813      	ldr	r3, [r2, #0]
1a0020a0:	3b01      	subs	r3, #1
1a0020a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a0020a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0020a8:	005b      	lsls	r3, r3, #1
1a0020aa:	b2db      	uxtb	r3, r3
1a0020ac:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0020b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0020b4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0020b8:	d1f0      	bne.n	1a00209c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a0020ba:	4b1f      	ldr	r3, [pc, #124]	; (1a002138 <xPortStartScheduler+0x100>)
1a0020bc:	681b      	ldr	r3, [r3, #0]
1a0020be:	2b04      	cmp	r3, #4
1a0020c0:	d008      	beq.n	1a0020d4 <xPortStartScheduler+0x9c>
1a0020c2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020c6:	f383 8811 	msr	BASEPRI, r3
1a0020ca:	f3bf 8f6f 	isb	sy
1a0020ce:	f3bf 8f4f 	dsb	sy
1a0020d2:	e7fe      	b.n	1a0020d2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a0020d4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a0020d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0020da:	4a17      	ldr	r2, [pc, #92]	; (1a002138 <xPortStartScheduler+0x100>)
1a0020dc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a0020de:	9b01      	ldr	r3, [sp, #4]
1a0020e0:	b2db      	uxtb	r3, r3
1a0020e2:	4a13      	ldr	r2, [pc, #76]	; (1a002130 <xPortStartScheduler+0xf8>)
1a0020e4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a0020e6:	4b15      	ldr	r3, [pc, #84]	; (1a00213c <xPortStartScheduler+0x104>)
1a0020e8:	681a      	ldr	r2, [r3, #0]
1a0020ea:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a0020ee:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a0020f0:	681a      	ldr	r2, [r3, #0]
1a0020f2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a0020f6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a0020f8:	f7ff ff82 	bl	1a002000 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a0020fc:	2400      	movs	r4, #0
1a0020fe:	4b10      	ldr	r3, [pc, #64]	; (1a002140 <xPortStartScheduler+0x108>)
1a002100:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002102:	f7ff fec1 	bl	1a001e88 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002106:	4a0f      	ldr	r2, [pc, #60]	; (1a002144 <xPortStartScheduler+0x10c>)
1a002108:	6813      	ldr	r3, [r2, #0]
1a00210a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a00210e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002110:	f7ff fea6 	bl	1a001e60 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002114:	f7ff fa8c 	bl	1a001630 <vTaskSwitchContext>
	prvTaskExitError();
1a002118:	f7ff fe82 	bl	1a001e20 <prvTaskExitError>
}
1a00211c:	4620      	mov	r0, r4
1a00211e:	b002      	add	sp, #8
1a002120:	bd10      	pop	{r4, pc}
1a002122:	bf00      	nop
1a002124:	e000ed00 	.word	0xe000ed00
1a002128:	410fc271 	.word	0x410fc271
1a00212c:	410fc270 	.word	0x410fc270
1a002130:	e000e400 	.word	0xe000e400
1a002134:	10002ae4 	.word	0x10002ae4
1a002138:	10002ae8 	.word	0x10002ae8
1a00213c:	e000ed20 	.word	0xe000ed20
1a002140:	10000000 	.word	0x10000000
1a002144:	e000ef34 	.word	0xe000ef34

1a002148 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002148:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00214c:	2b0f      	cmp	r3, #15
1a00214e:	d90f      	bls.n	1a002170 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002150:	4a10      	ldr	r2, [pc, #64]	; (1a002194 <vPortValidateInterruptPriority+0x4c>)
1a002152:	5c9b      	ldrb	r3, [r3, r2]
1a002154:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002156:	4a10      	ldr	r2, [pc, #64]	; (1a002198 <vPortValidateInterruptPriority+0x50>)
1a002158:	7812      	ldrb	r2, [r2, #0]
1a00215a:	429a      	cmp	r2, r3
1a00215c:	d908      	bls.n	1a002170 <vPortValidateInterruptPriority+0x28>
1a00215e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002162:	f383 8811 	msr	BASEPRI, r3
1a002166:	f3bf 8f6f 	isb	sy
1a00216a:	f3bf 8f4f 	dsb	sy
1a00216e:	e7fe      	b.n	1a00216e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002170:	4b0a      	ldr	r3, [pc, #40]	; (1a00219c <vPortValidateInterruptPriority+0x54>)
1a002172:	681b      	ldr	r3, [r3, #0]
1a002174:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002178:	4a09      	ldr	r2, [pc, #36]	; (1a0021a0 <vPortValidateInterruptPriority+0x58>)
1a00217a:	6812      	ldr	r2, [r2, #0]
1a00217c:	4293      	cmp	r3, r2
1a00217e:	d908      	bls.n	1a002192 <vPortValidateInterruptPriority+0x4a>
1a002180:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002184:	f383 8811 	msr	BASEPRI, r3
1a002188:	f3bf 8f6f 	isb	sy
1a00218c:	f3bf 8f4f 	dsb	sy
1a002190:	e7fe      	b.n	1a002190 <vPortValidateInterruptPriority+0x48>
	}
1a002192:	4770      	bx	lr
1a002194:	e000e3f0 	.word	0xe000e3f0
1a002198:	10002ae4 	.word	0x10002ae4
1a00219c:	e000ed0c 	.word	0xe000ed0c
1a0021a0:	10002ae8 	.word	0x10002ae8

1a0021a4 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0021a4:	2200      	movs	r2, #0
1a0021a6:	2a05      	cmp	r2, #5
1a0021a8:	d819      	bhi.n	1a0021de <Board_LED_Init+0x3a>
{
1a0021aa:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0021ac:	490c      	ldr	r1, [pc, #48]	; (1a0021e0 <Board_LED_Init+0x3c>)
1a0021ae:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0021b2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0021b6:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0021b8:	4b0a      	ldr	r3, [pc, #40]	; (1a0021e4 <Board_LED_Init+0x40>)
1a0021ba:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0021be:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0021c2:	2001      	movs	r0, #1
1a0021c4:	40a0      	lsls	r0, r4
1a0021c6:	4301      	orrs	r1, r0
1a0021c8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0021cc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0021d0:	2100      	movs	r1, #0
1a0021d2:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0021d4:	3201      	adds	r2, #1
1a0021d6:	2a05      	cmp	r2, #5
1a0021d8:	d9e8      	bls.n	1a0021ac <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a0021da:	bc70      	pop	{r4, r5, r6}
1a0021dc:	4770      	bx	lr
1a0021de:	4770      	bx	lr
1a0021e0:	1a00400c 	.word	0x1a00400c
1a0021e4:	400f4000 	.word	0x400f4000

1a0021e8 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0021e8:	2300      	movs	r3, #0
1a0021ea:	2b03      	cmp	r3, #3
1a0021ec:	d816      	bhi.n	1a00221c <Board_TEC_Init+0x34>
{
1a0021ee:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0021f0:	490b      	ldr	r1, [pc, #44]	; (1a002220 <Board_TEC_Init+0x38>)
1a0021f2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0021f6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0021fa:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0021fc:	4c09      	ldr	r4, [pc, #36]	; (1a002224 <Board_TEC_Init+0x3c>)
1a0021fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002202:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002206:	2001      	movs	r0, #1
1a002208:	40a8      	lsls	r0, r5
1a00220a:	ea21 0100 	bic.w	r1, r1, r0
1a00220e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002212:	3301      	adds	r3, #1
1a002214:	2b03      	cmp	r3, #3
1a002216:	d9eb      	bls.n	1a0021f0 <Board_TEC_Init+0x8>
    }
}
1a002218:	bc30      	pop	{r4, r5}
1a00221a:	4770      	bx	lr
1a00221c:	4770      	bx	lr
1a00221e:	bf00      	nop
1a002220:	1a004004 	.word	0x1a004004
1a002224:	400f4000 	.word	0x400f4000

1a002228 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002228:	2300      	movs	r3, #0
1a00222a:	2b08      	cmp	r3, #8
1a00222c:	d816      	bhi.n	1a00225c <Board_GPIO_Init+0x34>
{
1a00222e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002230:	490b      	ldr	r1, [pc, #44]	; (1a002260 <Board_GPIO_Init+0x38>)
1a002232:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002236:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00223a:	784d      	ldrb	r5, [r1, #1]
1a00223c:	4c09      	ldr	r4, [pc, #36]	; (1a002264 <Board_GPIO_Init+0x3c>)
1a00223e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002242:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002246:	2001      	movs	r0, #1
1a002248:	40a8      	lsls	r0, r5
1a00224a:	ea21 0100 	bic.w	r1, r1, r0
1a00224e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002252:	3301      	adds	r3, #1
1a002254:	2b08      	cmp	r3, #8
1a002256:	d9eb      	bls.n	1a002230 <Board_GPIO_Init+0x8>
    }
}
1a002258:	bc30      	pop	{r4, r5}
1a00225a:	4770      	bx	lr
1a00225c:	4770      	bx	lr
1a00225e:	bf00      	nop
1a002260:	1a004018 	.word	0x1a004018
1a002264:	400f4000 	.word	0x400f4000

1a002268 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002268:	b510      	push	{r4, lr}
1a00226a:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a00226c:	4c08      	ldr	r4, [pc, #32]	; (1a002290 <Board_ADC_Init+0x28>)
1a00226e:	4669      	mov	r1, sp
1a002270:	4620      	mov	r0, r4
1a002272:	f000 f9dd 	bl	1a002630 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002276:	4a07      	ldr	r2, [pc, #28]	; (1a002294 <Board_ADC_Init+0x2c>)
1a002278:	4669      	mov	r1, sp
1a00227a:	4620      	mov	r0, r4
1a00227c:	f000 f9f8 	bl	1a002670 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002280:	2200      	movs	r2, #0
1a002282:	4669      	mov	r1, sp
1a002284:	4620      	mov	r0, r4
1a002286:	f000 fa0c 	bl	1a0026a2 <Chip_ADC_SetResolution>
}
1a00228a:	b002      	add	sp, #8
1a00228c:	bd10      	pop	{r4, pc}
1a00228e:	bf00      	nop
1a002290:	400e3000 	.word	0x400e3000
1a002294:	00061a80 	.word	0x00061a80

1a002298 <Board_SPI_Init>:
{
1a002298:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a00229a:	4c0b      	ldr	r4, [pc, #44]	; (1a0022c8 <Board_SPI_Init+0x30>)
1a00229c:	4620      	mov	r0, r4
1a00229e:	f000 fe01 	bl	1a002ea4 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0022a2:	6863      	ldr	r3, [r4, #4]
1a0022a4:	f023 0304 	bic.w	r3, r3, #4
1a0022a8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0022aa:	6823      	ldr	r3, [r4, #0]
1a0022ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0022b0:	f043 0307 	orr.w	r3, r3, #7
1a0022b4:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0022b6:	4905      	ldr	r1, [pc, #20]	; (1a0022cc <Board_SPI_Init+0x34>)
1a0022b8:	4620      	mov	r0, r4
1a0022ba:	f000 fdd4 	bl	1a002e66 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0022be:	6863      	ldr	r3, [r4, #4]
1a0022c0:	f043 0302 	orr.w	r3, r3, #2
1a0022c4:	6063      	str	r3, [r4, #4]
}
1a0022c6:	bd10      	pop	{r4, pc}
1a0022c8:	400c5000 	.word	0x400c5000
1a0022cc:	000186a0 	.word	0x000186a0

1a0022d0 <Board_I2C_Init>:
{
1a0022d0:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a0022d2:	2000      	movs	r0, #0
1a0022d4:	f000 fd7a 	bl	1a002dcc <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0022d8:	4b04      	ldr	r3, [pc, #16]	; (1a0022ec <Board_I2C_Init+0x1c>)
1a0022da:	f640 0208 	movw	r2, #2056	; 0x808
1a0022de:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0022e2:	4903      	ldr	r1, [pc, #12]	; (1a0022f0 <Board_I2C_Init+0x20>)
1a0022e4:	2000      	movs	r0, #0
1a0022e6:	f000 fd83 	bl	1a002df0 <Chip_I2C_SetClockRate>
}
1a0022ea:	bd08      	pop	{r3, pc}
1a0022ec:	40086000 	.word	0x40086000
1a0022f0:	000f4240 	.word	0x000f4240

1a0022f4 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0022f4:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a0022f6:	4c07      	ldr	r4, [pc, #28]	; (1a002314 <Board_Debug_Init+0x20>)
1a0022f8:	4620      	mov	r0, r4
1a0022fa:	f000 f8b7 	bl	1a00246c <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0022fe:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002302:	4620      	mov	r0, r4
1a002304:	f000 f8fc 	bl	1a002500 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002308:	2303      	movs	r3, #3
1a00230a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00230c:	2301      	movs	r3, #1
1a00230e:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a002310:	bd10      	pop	{r4, pc}
1a002312:	bf00      	nop
1a002314:	400c1000 	.word	0x400c1000

1a002318 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002318:	4b03      	ldr	r3, [pc, #12]	; (1a002328 <Board_UARTPutChar+0x10>)
1a00231a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a00231c:	f013 0f20 	tst.w	r3, #32
1a002320:	d0fa      	beq.n	1a002318 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002322:	4b01      	ldr	r3, [pc, #4]	; (1a002328 <Board_UARTPutChar+0x10>)
1a002324:	6018      	str	r0, [r3, #0]
    Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002326:	4770      	bx	lr
1a002328:	400c1000 	.word	0x400c1000

1a00232c <Board_UARTGetChar>:
	return pUART->LSR;
1a00232c:	4b05      	ldr	r3, [pc, #20]	; (1a002344 <Board_UARTGetChar+0x18>)
1a00232e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
    if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002330:	f013 0f01 	tst.w	r3, #1
1a002334:	d003      	beq.n	1a00233e <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002336:	4b03      	ldr	r3, [pc, #12]	; (1a002344 <Board_UARTGetChar+0x18>)
1a002338:	6818      	ldr	r0, [r3, #0]
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00233a:	b2c0      	uxtb	r0, r0
1a00233c:	4770      	bx	lr
    }
    return EOF;
1a00233e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002342:	4770      	bx	lr
1a002344:	400c1000 	.word	0x400c1000

1a002348 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002348:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00234a:	f7ff ffd3 	bl	1a0022f4 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00234e:	4808      	ldr	r0, [pc, #32]	; (1a002370 <Board_Init+0x28>)
1a002350:	f000 fd2a 	bl	1a002da8 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a002354:	f7ff ff68 	bl	1a002228 <Board_GPIO_Init>
   Board_ADC_Init();
1a002358:	f7ff ff86 	bl	1a002268 <Board_ADC_Init>
   Board_SPI_Init();
1a00235c:	f7ff ff9c 	bl	1a002298 <Board_SPI_Init>
   Board_I2C_Init();
1a002360:	f7ff ffb6 	bl	1a0022d0 <Board_I2C_Init>

   Board_LED_Init();
1a002364:	f7ff ff1e 	bl	1a0021a4 <Board_LED_Init>
   Board_TEC_Init();
1a002368:	f7ff ff3e 	bl	1a0021e8 <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a00236c:	bd08      	pop	{r3, pc}
1a00236e:	bf00      	nop
1a002370:	400f4000 	.word	0x400f4000

1a002374 <__stdio_putchar>:
    Chip_ADC_EnableChannel(LPC_ADC0, curADCChannel, DISABLE);
    curADCChannel = 0xFF;
    return data;
}

void __stdio_putchar(int c) {
1a002374:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a002376:	b2c0      	uxtb	r0, r0
1a002378:	f7ff ffce 	bl	1a002318 <Board_UARTPutChar>
}
1a00237c:	bd08      	pop	{r3, pc}

1a00237e <__stdio_getchar>:

int __stdio_getchar() {
1a00237e:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002380:	f7ff ffd4 	bl	1a00232c <Board_UARTGetChar>
}
1a002384:	bd08      	pop	{r3, pc}

1a002386 <__stdio_init>:

void __stdio_init() {
1a002386:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a002388:	f7ff ffb4 	bl	1a0022f4 <Board_Debug_Init>
1a00238c:	bd08      	pop	{r3, pc}
1a00238e:	Address 0x000000001a00238e is out of bounds.


1a002390 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002390:	2300      	movs	r3, #0
1a002392:	2b1c      	cmp	r3, #28
1a002394:	d812      	bhi.n	1a0023bc <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002396:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002398:	4a09      	ldr	r2, [pc, #36]	; (1a0023c0 <Board_SetupMuxing+0x30>)
1a00239a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00239e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0023a2:	784a      	ldrb	r2, [r1, #1]
1a0023a4:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0023a6:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0023aa:	4906      	ldr	r1, [pc, #24]	; (1a0023c4 <Board_SetupMuxing+0x34>)
1a0023ac:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0023b0:	3301      	adds	r3, #1
1a0023b2:	2b1c      	cmp	r3, #28
1a0023b4:	d9f0      	bls.n	1a002398 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0023b6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0023ba:	4770      	bx	lr
1a0023bc:	4770      	bx	lr
1a0023be:	bf00      	nop
1a0023c0:	1a004034 	.word	0x1a004034
1a0023c4:	40086000 	.word	0x40086000

1a0023c8 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0023c8:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0023ca:	4a17      	ldr	r2, [pc, #92]	; (1a002428 <Board_SetupClocking+0x60>)
1a0023cc:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0023d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0023d4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0023d8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0023dc:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0023e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0023e4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0023e8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0023ec:	2201      	movs	r2, #1
1a0023ee:	490f      	ldr	r1, [pc, #60]	; (1a00242c <Board_SetupClocking+0x64>)
1a0023f0:	2006      	movs	r0, #6
1a0023f2:	f000 fc2f 	bl	1a002c54 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0023f6:	2400      	movs	r4, #0
1a0023f8:	b14c      	cbz	r4, 1a00240e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0023fa:	4b0b      	ldr	r3, [pc, #44]	; (1a002428 <Board_SetupClocking+0x60>)
1a0023fc:	685a      	ldr	r2, [r3, #4]
1a0023fe:	f022 020c 	bic.w	r2, r2, #12
1a002402:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002404:	685a      	ldr	r2, [r3, #4]
1a002406:	f042 0203 	orr.w	r2, r2, #3
1a00240a:	605a      	str	r2, [r3, #4]
}
1a00240c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00240e:	4808      	ldr	r0, [pc, #32]	; (1a002430 <Board_SetupClocking+0x68>)
1a002410:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002414:	2301      	movs	r3, #1
1a002416:	788a      	ldrb	r2, [r1, #2]
1a002418:	7849      	ldrb	r1, [r1, #1]
1a00241a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00241e:	f000 fb6b 	bl	1a002af8 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002422:	3401      	adds	r4, #1
1a002424:	e7e8      	b.n	1a0023f8 <Board_SetupClocking+0x30>
1a002426:	bf00      	nop
1a002428:	40043000 	.word	0x40043000
1a00242c:	0c28cb00 	.word	0x0c28cb00
1a002430:	1a004030 	.word	0x1a004030

1a002434 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002434:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002436:	f7ff ffab 	bl	1a002390 <Board_SetupMuxing>
    Board_SetupClocking();
1a00243a:	f7ff ffc5 	bl	1a0023c8 <Board_SetupClocking>
}
1a00243e:	bd08      	pop	{r3, pc}

1a002440 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002440:	4b09      	ldr	r3, [pc, #36]	; (1a002468 <Chip_UART_GetIndex+0x28>)
1a002442:	4298      	cmp	r0, r3
1a002444:	d009      	beq.n	1a00245a <Chip_UART_GetIndex+0x1a>
1a002446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00244a:	4298      	cmp	r0, r3
1a00244c:	d007      	beq.n	1a00245e <Chip_UART_GetIndex+0x1e>
1a00244e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002452:	4298      	cmp	r0, r3
1a002454:	d005      	beq.n	1a002462 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002456:	2000      	movs	r0, #0
1a002458:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00245a:	2002      	movs	r0, #2
1a00245c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00245e:	2003      	movs	r0, #3
1a002460:	4770      	bx	lr
			return 1;
1a002462:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002464:	4770      	bx	lr
1a002466:	bf00      	nop
1a002468:	400c1000 	.word	0x400c1000

1a00246c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00246c:	b530      	push	{r4, r5, lr}
1a00246e:	b083      	sub	sp, #12
1a002470:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002472:	f7ff ffe5 	bl	1a002440 <Chip_UART_GetIndex>
1a002476:	2301      	movs	r3, #1
1a002478:	461a      	mov	r2, r3
1a00247a:	4619      	mov	r1, r3
1a00247c:	4d0e      	ldr	r5, [pc, #56]	; (1a0024b8 <Chip_UART_Init+0x4c>)
1a00247e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002482:	f000 fb7f 	bl	1a002b84 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002486:	2307      	movs	r3, #7
1a002488:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00248a:	2300      	movs	r3, #0
1a00248c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00248e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002490:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002492:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002494:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002496:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002498:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00249a:	4b08      	ldr	r3, [pc, #32]	; (1a0024bc <Chip_UART_Init+0x50>)
1a00249c:	429c      	cmp	r4, r3
1a00249e:	d006      	beq.n	1a0024ae <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0024a0:	2303      	movs	r3, #3
1a0024a2:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0024a4:	2310      	movs	r3, #16
1a0024a6:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0024a8:	9b01      	ldr	r3, [sp, #4]
}
1a0024aa:	b003      	add	sp, #12
1a0024ac:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0024ae:	2300      	movs	r3, #0
1a0024b0:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0024b2:	69a3      	ldr	r3, [r4, #24]
1a0024b4:	9301      	str	r3, [sp, #4]
1a0024b6:	e7f3      	b.n	1a0024a0 <Chip_UART_Init+0x34>
1a0024b8:	1a0040b0 	.word	0x1a0040b0
1a0024bc:	40082000 	.word	0x40082000

1a0024c0 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0024c0:	b538      	push	{r3, r4, r5, lr}
1a0024c2:	4605      	mov	r5, r0
1a0024c4:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0024c6:	f7ff ffbb 	bl	1a002440 <Chip_UART_GetIndex>
1a0024ca:	4b0c      	ldr	r3, [pc, #48]	; (1a0024fc <Chip_UART_SetBaud+0x3c>)
1a0024cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0024d0:	f000 fb90 	bl	1a002bf4 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0024d4:	0123      	lsls	r3, r4, #4
1a0024d6:	fbb0 f3f3 	udiv	r3, r0, r3
1a0024da:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0024dc:	68ea      	ldr	r2, [r5, #12]
1a0024de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0024e2:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a0024e4:	6029      	str	r1, [r5, #0]
1a0024e6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0024ea:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0024ec:	68ea      	ldr	r2, [r5, #12]
1a0024ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0024f2:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0024f4:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0024f8:	0900      	lsrs	r0, r0, #4
1a0024fa:	bd38      	pop	{r3, r4, r5, pc}
1a0024fc:	1a0040a8 	.word	0x1a0040a8

1a002500 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002504:	b083      	sub	sp, #12
1a002506:	4683      	mov	fp, r0
1a002508:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00250a:	f7ff ff99 	bl	1a002440 <Chip_UART_GetIndex>
1a00250e:	4b35      	ldr	r3, [pc, #212]	; (1a0025e4 <Chip_UART_SetBaudFDR+0xe4>)
1a002510:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002514:	f000 fb6e 	bl	1a002bf4 <Chip_Clock_GetRate>
1a002518:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00251a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00251e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002520:	2300      	movs	r3, #0
1a002522:	9301      	str	r3, [sp, #4]
1a002524:	46a2      	mov	sl, r4
1a002526:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002528:	e02a      	b.n	1a002580 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00252a:	4242      	negs	r2, r0
				div ++;
1a00252c:	1c4b      	adds	r3, r1, #1
1a00252e:	e017      	b.n	1a002560 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002530:	b30a      	cbz	r2, 1a002576 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002532:	4617      	mov	r7, r2
			sd = d;
1a002534:	9501      	str	r5, [sp, #4]
			sm = m;
1a002536:	46a2      	mov	sl, r4
			sdiv = div;
1a002538:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00253a:	3501      	adds	r5, #1
1a00253c:	42ac      	cmp	r4, r5
1a00253e:	d91e      	bls.n	1a00257e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002540:	0933      	lsrs	r3, r6, #4
1a002542:	0730      	lsls	r0, r6, #28
1a002544:	fba4 0100 	umull	r0, r1, r4, r0
1a002548:	fb04 1103 	mla	r1, r4, r3, r1
1a00254c:	1962      	adds	r2, r4, r5
1a00254e:	fb08 f202 	mul.w	r2, r8, r2
1a002552:	2300      	movs	r3, #0
1a002554:	f000 ff7a 	bl	1a00344c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002558:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00255a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00255c:	2800      	cmp	r0, #0
1a00255e:	dbe4      	blt.n	1a00252a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002560:	4297      	cmp	r7, r2
1a002562:	d3ea      	bcc.n	1a00253a <Chip_UART_SetBaudFDR+0x3a>
1a002564:	2b00      	cmp	r3, #0
1a002566:	d0e8      	beq.n	1a00253a <Chip_UART_SetBaudFDR+0x3a>
1a002568:	0c19      	lsrs	r1, r3, #16
1a00256a:	d1e6      	bne.n	1a00253a <Chip_UART_SetBaudFDR+0x3a>
1a00256c:	2b02      	cmp	r3, #2
1a00256e:	d8df      	bhi.n	1a002530 <Chip_UART_SetBaudFDR+0x30>
1a002570:	2d00      	cmp	r5, #0
1a002572:	d0dd      	beq.n	1a002530 <Chip_UART_SetBaudFDR+0x30>
1a002574:	e7e1      	b.n	1a00253a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002576:	4617      	mov	r7, r2
			sd = d;
1a002578:	9501      	str	r5, [sp, #4]
			sm = m;
1a00257a:	46a2      	mov	sl, r4
			sdiv = div;
1a00257c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00257e:	3401      	adds	r4, #1
1a002580:	b11f      	cbz	r7, 1a00258a <Chip_UART_SetBaudFDR+0x8a>
1a002582:	2c0f      	cmp	r4, #15
1a002584:	d801      	bhi.n	1a00258a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002586:	2500      	movs	r5, #0
1a002588:	e7d8      	b.n	1a00253c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00258a:	f1b9 0f00 	cmp.w	r9, #0
1a00258e:	d024      	beq.n	1a0025da <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002590:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002598:	f8cb 300c 	str.w	r3, [fp, #12]
1a00259c:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a0025a0:	f8cb 3000 	str.w	r3, [fp]
1a0025a4:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0025a8:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0025ac:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0025b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0025b4:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0025b8:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0025bc:	b2db      	uxtb	r3, r3
1a0025be:	9901      	ldr	r1, [sp, #4]
1a0025c0:	f001 020f 	and.w	r2, r1, #15
1a0025c4:	4313      	orrs	r3, r2
1a0025c6:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0025ca:	0933      	lsrs	r3, r6, #4
1a0025cc:	fb0a f303 	mul.w	r3, sl, r3
1a0025d0:	448a      	add	sl, r1
1a0025d2:	fb09 f90a 	mul.w	r9, r9, sl
1a0025d6:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0025da:	4648      	mov	r0, r9
1a0025dc:	b003      	add	sp, #12
1a0025de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0025e2:	bf00      	nop
1a0025e4:	1a0040a8 	.word	0x1a0040a8

1a0025e8 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0025e8:	4b03      	ldr	r3, [pc, #12]	; (1a0025f8 <Chip_ADC_GetClockIndex+0x10>)
1a0025ea:	4298      	cmp	r0, r3
1a0025ec:	d001      	beq.n	1a0025f2 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0025ee:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0025f0:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0025f2:	2004      	movs	r0, #4
1a0025f4:	4770      	bx	lr
1a0025f6:	bf00      	nop
1a0025f8:	400e4000 	.word	0x400e4000

1a0025fc <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0025fc:	b570      	push	{r4, r5, r6, lr}
1a0025fe:	460d      	mov	r5, r1
1a002600:	4614      	mov	r4, r2
1a002602:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002604:	f7ff fff0 	bl	1a0025e8 <Chip_ADC_GetClockIndex>
1a002608:	f000 faf4 	bl	1a002bf4 <Chip_Clock_GetRate>
	if (burstMode) {
1a00260c:	b965      	cbnz	r5, 1a002628 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a00260e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002612:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002616:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00261a:	0064      	lsls	r4, r4, #1
1a00261c:	fbb0 f0f4 	udiv	r0, r0, r4
1a002620:	b2c0      	uxtb	r0, r0
1a002622:	3801      	subs	r0, #1
	return div;
}
1a002624:	b2c0      	uxtb	r0, r0
1a002626:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a002628:	fb04 f406 	mul.w	r4, r4, r6
1a00262c:	e7f3      	b.n	1a002616 <getClkDiv+0x1a>
1a00262e:	Address 0x000000001a00262e is out of bounds.


1a002630 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002630:	b538      	push	{r3, r4, r5, lr}
1a002632:	4605      	mov	r5, r0
1a002634:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002636:	f7ff ffd7 	bl	1a0025e8 <Chip_ADC_GetClockIndex>
1a00263a:	2301      	movs	r3, #1
1a00263c:	461a      	mov	r2, r3
1a00263e:	4619      	mov	r1, r3
1a002640:	f000 faa0 	bl	1a002b84 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002644:	2100      	movs	r1, #0
1a002646:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002648:	4a08      	ldr	r2, [pc, #32]	; (1a00266c <Chip_ADC_Init+0x3c>)
1a00264a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a00264c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00264e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002650:	230b      	movs	r3, #11
1a002652:	4628      	mov	r0, r5
1a002654:	f7ff ffd2 	bl	1a0025fc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002658:	0200      	lsls	r0, r0, #8
1a00265a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00265e:	7920      	ldrb	r0, [r4, #4]
1a002660:	0440      	lsls	r0, r0, #17
1a002662:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002666:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002668:	6028      	str	r0, [r5, #0]
}
1a00266a:	bd38      	pop	{r3, r4, r5, pc}
1a00266c:	00061a80 	.word	0x00061a80

1a002670 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002670:	b570      	push	{r4, r5, r6, lr}
1a002672:	4605      	mov	r5, r0
1a002674:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002676:	6804      	ldr	r4, [r0, #0]
1a002678:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a00267c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002680:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002682:	790b      	ldrb	r3, [r1, #4]
1a002684:	f1c3 030b 	rsb	r3, r3, #11
1a002688:	b2db      	uxtb	r3, r3
1a00268a:	7949      	ldrb	r1, [r1, #5]
1a00268c:	f7ff ffb6 	bl	1a0025fc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002690:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002694:	7930      	ldrb	r0, [r6, #4]
1a002696:	0440      	lsls	r0, r0, #17
1a002698:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00269c:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a00269e:	6028      	str	r0, [r5, #0]
}
1a0026a0:	bd70      	pop	{r4, r5, r6, pc}

1a0026a2 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0026a2:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0026a4:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0026a6:	680a      	ldr	r2, [r1, #0]
1a0026a8:	f7ff ffe2 	bl	1a002670 <Chip_ADC_SetSampleRate>
}
1a0026ac:	bd08      	pop	{r3, pc}
1a0026ae:	Address 0x000000001a0026ae is out of bounds.


1a0026b0 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0026b0:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0026b2:	680b      	ldr	r3, [r1, #0]
1a0026b4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0026b8:	d002      	beq.n	1a0026c0 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0026ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0026be:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0026c0:	4607      	mov	r7, r0
1a0026c2:	2501      	movs	r5, #1
1a0026c4:	e03b      	b.n	1a00273e <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0026c6:	694b      	ldr	r3, [r1, #20]
1a0026c8:	fb03 f302 	mul.w	r3, r3, r2
1a0026cc:	fbb3 f3f5 	udiv	r3, r3, r5
1a0026d0:	e014      	b.n	1a0026fc <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0026d2:	461c      	mov	r4, r3
1a0026d4:	e020      	b.n	1a002718 <pll_calc_divs+0x68>
		return -val;
1a0026d6:	f1cc 0c00 	rsb	ip, ip, #0
1a0026da:	e020      	b.n	1a00271e <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a0026dc:	3201      	adds	r2, #1
1a0026de:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0026e2:	dc26      	bgt.n	1a002732 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a0026e4:	680c      	ldr	r4, [r1, #0]
1a0026e6:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0026ea:	d0ec      	beq.n	1a0026c6 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0026ec:	1c73      	adds	r3, r6, #1
1a0026ee:	fa02 fc03 	lsl.w	ip, r2, r3
1a0026f2:	694b      	ldr	r3, [r1, #20]
1a0026f4:	fb03 f30c 	mul.w	r3, r3, ip
1a0026f8:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0026fc:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a00274c <pll_calc_divs+0x9c>
1a002700:	4563      	cmp	r3, ip
1a002702:	d9eb      	bls.n	1a0026dc <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002704:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a002750 <pll_calc_divs+0xa0>
1a002708:	4563      	cmp	r3, ip
1a00270a:	d812      	bhi.n	1a002732 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a00270c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002710:	d1df      	bne.n	1a0026d2 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a002712:	1c74      	adds	r4, r6, #1
1a002714:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a002718:	ebb0 0c04 	subs.w	ip, r0, r4
1a00271c:	d4db      	bmi.n	1a0026d6 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a00271e:	4567      	cmp	r7, ip
1a002720:	d9dc      	bls.n	1a0026dc <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a002722:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002724:	1c77      	adds	r7, r6, #1
1a002726:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a002728:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00272a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a00272c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a00272e:	4667      	mov	r7, ip
1a002730:	e7d4      	b.n	1a0026dc <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a002732:	3601      	adds	r6, #1
1a002734:	2e03      	cmp	r6, #3
1a002736:	dc01      	bgt.n	1a00273c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a002738:	2201      	movs	r2, #1
1a00273a:	e7d0      	b.n	1a0026de <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a00273c:	3501      	adds	r5, #1
1a00273e:	2d04      	cmp	r5, #4
1a002740:	dc01      	bgt.n	1a002746 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a002742:	2600      	movs	r6, #0
1a002744:	e7f6      	b.n	1a002734 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a002746:	bcf0      	pop	{r4, r5, r6, r7}
1a002748:	4770      	bx	lr
1a00274a:	bf00      	nop
1a00274c:	094c5eff 	.word	0x094c5eff
1a002750:	1312d000 	.word	0x1312d000

1a002754 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002754:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002756:	b099      	sub	sp, #100	; 0x64
1a002758:	4605      	mov	r5, r0
1a00275a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a00275c:	225c      	movs	r2, #92	; 0x5c
1a00275e:	2100      	movs	r1, #0
1a002760:	a801      	add	r0, sp, #4
1a002762:	f001 f822 	bl	1a0037aa <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002766:	2380      	movs	r3, #128	; 0x80
1a002768:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00276a:	6963      	ldr	r3, [r4, #20]
1a00276c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00276e:	7923      	ldrb	r3, [r4, #4]
1a002770:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002774:	4669      	mov	r1, sp
1a002776:	4628      	mov	r0, r5
1a002778:	f7ff ff9a 	bl	1a0026b0 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a00277c:	9b06      	ldr	r3, [sp, #24]
1a00277e:	42ab      	cmp	r3, r5
1a002780:	d027      	beq.n	1a0027d2 <pll_get_frac+0x7e>
	if (val < 0)
1a002782:	1aeb      	subs	r3, r5, r3
1a002784:	d42e      	bmi.n	1a0027e4 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002786:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002788:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00278a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00278e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002790:	6963      	ldr	r3, [r4, #20]
1a002792:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002794:	7923      	ldrb	r3, [r4, #4]
1a002796:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00279a:	a910      	add	r1, sp, #64	; 0x40
1a00279c:	4628      	mov	r0, r5
1a00279e:	f7ff ff87 	bl	1a0026b0 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0027a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0027a4:	42ab      	cmp	r3, r5
1a0027a6:	d01f      	beq.n	1a0027e8 <pll_get_frac+0x94>
	if (val < 0)
1a0027a8:	1aeb      	subs	r3, r5, r3
1a0027aa:	d425      	bmi.n	1a0027f8 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0027ac:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0027ae:	4b2b      	ldr	r3, [pc, #172]	; (1a00285c <pll_get_frac+0x108>)
1a0027b0:	429d      	cmp	r5, r3
1a0027b2:	d923      	bls.n	1a0027fc <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0027b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0027b6:	1aed      	subs	r5, r5, r3
1a0027b8:	d433      	bmi.n	1a002822 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0027ba:	42ae      	cmp	r6, r5
1a0027bc:	dc3b      	bgt.n	1a002836 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0027be:	42be      	cmp	r6, r7
1a0027c0:	dc31      	bgt.n	1a002826 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0027c2:	466d      	mov	r5, sp
1a0027c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0027c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0027c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0027cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0027d0:	e006      	b.n	1a0027e0 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0027d2:	466d      	mov	r5, sp
1a0027d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0027d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0027d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0027dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0027e0:	b019      	add	sp, #100	; 0x64
1a0027e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0027e4:	425b      	negs	r3, r3
1a0027e6:	e7ce      	b.n	1a002786 <pll_get_frac+0x32>
		*ppll = pll[2];
1a0027e8:	ad10      	add	r5, sp, #64	; 0x40
1a0027ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0027ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0027ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0027f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0027f6:	e7f3      	b.n	1a0027e0 <pll_get_frac+0x8c>
		return -val;
1a0027f8:	425b      	negs	r3, r3
1a0027fa:	e7d7      	b.n	1a0027ac <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0027fc:	2340      	movs	r3, #64	; 0x40
1a0027fe:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002800:	6963      	ldr	r3, [r4, #20]
1a002802:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002804:	a908      	add	r1, sp, #32
1a002806:	4628      	mov	r0, r5
1a002808:	f7ff ff52 	bl	1a0026b0 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a00280c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00280e:	42ab      	cmp	r3, r5
1a002810:	d1d0      	bne.n	1a0027b4 <pll_get_frac+0x60>
			*ppll = pll[1];
1a002812:	ad08      	add	r5, sp, #32
1a002814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002818:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00281c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002820:	e7de      	b.n	1a0027e0 <pll_get_frac+0x8c>
		return -val;
1a002822:	426d      	negs	r5, r5
1a002824:	e7c9      	b.n	1a0027ba <pll_get_frac+0x66>
			*ppll = pll[2];
1a002826:	ad10      	add	r5, sp, #64	; 0x40
1a002828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00282a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00282c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002830:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002834:	e7d4      	b.n	1a0027e0 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a002836:	42af      	cmp	r7, r5
1a002838:	db07      	blt.n	1a00284a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00283a:	ad08      	add	r5, sp, #32
1a00283c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00283e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002840:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002848:	e7ca      	b.n	1a0027e0 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00284a:	ad10      	add	r5, sp, #64	; 0x40
1a00284c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00284e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002850:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002854:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002858:	e7c2      	b.n	1a0027e0 <pll_get_frac+0x8c>
1a00285a:	bf00      	nop
1a00285c:	068e7780 	.word	0x068e7780

1a002860 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002860:	b430      	push	{r4, r5}
1a002862:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002864:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002866:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002868:	e000      	b.n	1a00286c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00286a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00286c:	281c      	cmp	r0, #28
1a00286e:	d118      	bne.n	1a0028a2 <Chip_Clock_FindBaseClock+0x42>
1a002870:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002874:	0051      	lsls	r1, r2, #1
1a002876:	4a0c      	ldr	r2, [pc, #48]	; (1a0028a8 <Chip_Clock_FindBaseClock+0x48>)
1a002878:	440a      	add	r2, r1
1a00287a:	7914      	ldrb	r4, [r2, #4]
1a00287c:	4284      	cmp	r4, r0
1a00287e:	d010      	beq.n	1a0028a2 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002880:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002884:	004a      	lsls	r2, r1, #1
1a002886:	4908      	ldr	r1, [pc, #32]	; (1a0028a8 <Chip_Clock_FindBaseClock+0x48>)
1a002888:	5a8a      	ldrh	r2, [r1, r2]
1a00288a:	42aa      	cmp	r2, r5
1a00288c:	d8ed      	bhi.n	1a00286a <Chip_Clock_FindBaseClock+0xa>
1a00288e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002892:	0051      	lsls	r1, r2, #1
1a002894:	4a04      	ldr	r2, [pc, #16]	; (1a0028a8 <Chip_Clock_FindBaseClock+0x48>)
1a002896:	440a      	add	r2, r1
1a002898:	8852      	ldrh	r2, [r2, #2]
1a00289a:	42aa      	cmp	r2, r5
1a00289c:	d3e5      	bcc.n	1a00286a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00289e:	4620      	mov	r0, r4
1a0028a0:	e7e4      	b.n	1a00286c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0028a2:	bc30      	pop	{r4, r5}
1a0028a4:	4770      	bx	lr
1a0028a6:	bf00      	nop
1a0028a8:	1a0040c4 	.word	0x1a0040c4

1a0028ac <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0028ac:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0028ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0028b2:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0028b4:	4a0d      	ldr	r2, [pc, #52]	; (1a0028ec <Chip_Clock_EnableCrystal+0x40>)
1a0028b6:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0028b8:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0028bc:	6992      	ldr	r2, [r2, #24]
1a0028be:	428a      	cmp	r2, r1
1a0028c0:	d001      	beq.n	1a0028c6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0028c2:	4a0a      	ldr	r2, [pc, #40]	; (1a0028ec <Chip_Clock_EnableCrystal+0x40>)
1a0028c4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0028c6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0028ca:	4a09      	ldr	r2, [pc, #36]	; (1a0028f0 <Chip_Clock_EnableCrystal+0x44>)
1a0028cc:	6811      	ldr	r1, [r2, #0]
1a0028ce:	4a09      	ldr	r2, [pc, #36]	; (1a0028f4 <Chip_Clock_EnableCrystal+0x48>)
1a0028d0:	4291      	cmp	r1, r2
1a0028d2:	d901      	bls.n	1a0028d8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0028d4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0028d8:	4a04      	ldr	r2, [pc, #16]	; (1a0028ec <Chip_Clock_EnableCrystal+0x40>)
1a0028da:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0028dc:	9b01      	ldr	r3, [sp, #4]
1a0028de:	1e5a      	subs	r2, r3, #1
1a0028e0:	9201      	str	r2, [sp, #4]
1a0028e2:	2b00      	cmp	r3, #0
1a0028e4:	d1fa      	bne.n	1a0028dc <Chip_Clock_EnableCrystal+0x30>
}
1a0028e6:	b002      	add	sp, #8
1a0028e8:	4770      	bx	lr
1a0028ea:	bf00      	nop
1a0028ec:	40050000 	.word	0x40050000
1a0028f0:	1a00402c 	.word	0x1a00402c
1a0028f4:	01312cff 	.word	0x01312cff

1a0028f8 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0028f8:	3012      	adds	r0, #18
1a0028fa:	4b05      	ldr	r3, [pc, #20]	; (1a002910 <Chip_Clock_GetDividerSource+0x18>)
1a0028fc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002900:	f010 0f01 	tst.w	r0, #1
1a002904:	d102      	bne.n	1a00290c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002906:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00290a:	4770      	bx	lr
		return CLKINPUT_PD;
1a00290c:	2011      	movs	r0, #17
}
1a00290e:	4770      	bx	lr
1a002910:	40050000 	.word	0x40050000

1a002914 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002914:	f100 0212 	add.w	r2, r0, #18
1a002918:	4b03      	ldr	r3, [pc, #12]	; (1a002928 <Chip_Clock_GetDividerDivisor+0x14>)
1a00291a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00291e:	4b03      	ldr	r3, [pc, #12]	; (1a00292c <Chip_Clock_GetDividerDivisor+0x18>)
1a002920:	5c18      	ldrb	r0, [r3, r0]
}
1a002922:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002926:	4770      	bx	lr
1a002928:	40050000 	.word	0x40050000
1a00292c:	1a0040bc 	.word	0x1a0040bc

1a002930 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002930:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002932:	2810      	cmp	r0, #16
1a002934:	d80a      	bhi.n	1a00294c <Chip_Clock_GetClockInputHz+0x1c>
1a002936:	e8df f000 	tbb	[pc, r0]
1a00293a:	0b42      	.short	0x0b42
1a00293c:	091f160d 	.word	0x091f160d
1a002940:	2b282522 	.word	0x2b282522
1a002944:	322e0909 	.word	0x322e0909
1a002948:	3a36      	.short	0x3a36
1a00294a:	3e          	.byte	0x3e
1a00294b:	00          	.byte	0x00
	uint32_t rate = 0;
1a00294c:	2000      	movs	r0, #0
1a00294e:	e038      	b.n	1a0029c2 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002950:	481e      	ldr	r0, [pc, #120]	; (1a0029cc <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002952:	e036      	b.n	1a0029c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002954:	4b1e      	ldr	r3, [pc, #120]	; (1a0029d0 <Chip_Clock_GetClockInputHz+0xa0>)
1a002956:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00295a:	f003 0307 	and.w	r3, r3, #7
1a00295e:	2b04      	cmp	r3, #4
1a002960:	d130      	bne.n	1a0029c4 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a002962:	2000      	movs	r0, #0
1a002964:	e02d      	b.n	1a0029c2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002966:	4b1a      	ldr	r3, [pc, #104]	; (1a0029d0 <Chip_Clock_GetClockInputHz+0xa0>)
1a002968:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00296c:	f003 0307 	and.w	r3, r3, #7
1a002970:	2b04      	cmp	r3, #4
1a002972:	d029      	beq.n	1a0029c8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002974:	4817      	ldr	r0, [pc, #92]	; (1a0029d4 <Chip_Clock_GetClockInputHz+0xa4>)
1a002976:	e024      	b.n	1a0029c2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002978:	4b17      	ldr	r3, [pc, #92]	; (1a0029d8 <Chip_Clock_GetClockInputHz+0xa8>)
1a00297a:	6818      	ldr	r0, [r3, #0]
		break;
1a00297c:	e021      	b.n	1a0029c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00297e:	4b17      	ldr	r3, [pc, #92]	; (1a0029dc <Chip_Clock_GetClockInputHz+0xac>)
1a002980:	6818      	ldr	r0, [r3, #0]
		break;
1a002982:	e01e      	b.n	1a0029c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002984:	4b16      	ldr	r3, [pc, #88]	; (1a0029e0 <Chip_Clock_GetClockInputHz+0xb0>)
1a002986:	6818      	ldr	r0, [r3, #0]
		break;
1a002988:	e01b      	b.n	1a0029c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00298a:	4b15      	ldr	r3, [pc, #84]	; (1a0029e0 <Chip_Clock_GetClockInputHz+0xb0>)
1a00298c:	6858      	ldr	r0, [r3, #4]
		break;
1a00298e:	e018      	b.n	1a0029c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002990:	f000 f86a 	bl	1a002a68 <Chip_Clock_GetMainPLLHz>
		break;
1a002994:	e015      	b.n	1a0029c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002996:	2100      	movs	r1, #0
1a002998:	f000 f89c 	bl	1a002ad4 <Chip_Clock_GetDivRate>
		break;
1a00299c:	e011      	b.n	1a0029c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00299e:	2101      	movs	r1, #1
1a0029a0:	f000 f898 	bl	1a002ad4 <Chip_Clock_GetDivRate>
		break;
1a0029a4:	e00d      	b.n	1a0029c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0029a6:	2102      	movs	r1, #2
1a0029a8:	f000 f894 	bl	1a002ad4 <Chip_Clock_GetDivRate>
		break;
1a0029ac:	e009      	b.n	1a0029c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0029ae:	2103      	movs	r1, #3
1a0029b0:	f000 f890 	bl	1a002ad4 <Chip_Clock_GetDivRate>
		break;
1a0029b4:	e005      	b.n	1a0029c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0029b6:	2104      	movs	r1, #4
1a0029b8:	f000 f88c 	bl	1a002ad4 <Chip_Clock_GetDivRate>
		break;
1a0029bc:	e001      	b.n	1a0029c2 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a0029be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0029c2:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a0029c4:	4803      	ldr	r0, [pc, #12]	; (1a0029d4 <Chip_Clock_GetClockInputHz+0xa4>)
1a0029c6:	e7fc      	b.n	1a0029c2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a0029c8:	4806      	ldr	r0, [pc, #24]	; (1a0029e4 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0029ca:	e7fa      	b.n	1a0029c2 <Chip_Clock_GetClockInputHz+0x92>
1a0029cc:	00b71b00 	.word	0x00b71b00
1a0029d0:	40043000 	.word	0x40043000
1a0029d4:	017d7840 	.word	0x017d7840
1a0029d8:	1a004000 	.word	0x1a004000
1a0029dc:	1a00402c 	.word	0x1a00402c
1a0029e0:	10002aec 	.word	0x10002aec
1a0029e4:	02faf080 	.word	0x02faf080

1a0029e8 <Chip_Clock_CalcMainPLLValue>:
{
1a0029e8:	b538      	push	{r3, r4, r5, lr}
1a0029ea:	4605      	mov	r5, r0
1a0029ec:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0029ee:	7908      	ldrb	r0, [r1, #4]
1a0029f0:	f7ff ff9e 	bl	1a002930 <Chip_Clock_GetClockInputHz>
1a0029f4:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0029f6:	4b19      	ldr	r3, [pc, #100]	; (1a002a5c <Chip_Clock_CalcMainPLLValue+0x74>)
1a0029f8:	442b      	add	r3, r5
1a0029fa:	4a19      	ldr	r2, [pc, #100]	; (1a002a60 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0029fc:	4293      	cmp	r3, r2
1a0029fe:	d821      	bhi.n	1a002a44 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002a00:	b318      	cbz	r0, 1a002a4a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002a02:	2380      	movs	r3, #128	; 0x80
1a002a04:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002a06:	2300      	movs	r3, #0
1a002a08:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002a0a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002a0c:	fbb5 f3f0 	udiv	r3, r5, r0
1a002a10:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002a12:	4a14      	ldr	r2, [pc, #80]	; (1a002a64 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002a14:	4295      	cmp	r5, r2
1a002a16:	d903      	bls.n	1a002a20 <Chip_Clock_CalcMainPLLValue+0x38>
1a002a18:	fb03 f000 	mul.w	r0, r3, r0
1a002a1c:	42a8      	cmp	r0, r5
1a002a1e:	d007      	beq.n	1a002a30 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002a20:	4621      	mov	r1, r4
1a002a22:	4628      	mov	r0, r5
1a002a24:	f7ff fe96 	bl	1a002754 <pll_get_frac>
		if (!ppll->nsel) {
1a002a28:	68a3      	ldr	r3, [r4, #8]
1a002a2a:	b18b      	cbz	r3, 1a002a50 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002a2c:	3b01      	subs	r3, #1
1a002a2e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002a30:	6923      	ldr	r3, [r4, #16]
1a002a32:	b183      	cbz	r3, 1a002a56 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002a34:	68e2      	ldr	r2, [r4, #12]
1a002a36:	b10a      	cbz	r2, 1a002a3c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002a38:	3a01      	subs	r2, #1
1a002a3a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002a3c:	3b01      	subs	r3, #1
1a002a3e:	6123      	str	r3, [r4, #16]
	return 0;
1a002a40:	2000      	movs	r0, #0
}
1a002a42:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002a48:	e7fb      	b.n	1a002a42 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002a4e:	e7f8      	b.n	1a002a42 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a002a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002a54:	e7f5      	b.n	1a002a42 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a002a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002a5a:	e7f2      	b.n	1a002a42 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002a5c:	ff6b3a10 	.word	0xff6b3a10
1a002a60:	0b940510 	.word	0x0b940510
1a002a64:	094c5eff 	.word	0x094c5eff

1a002a68 <Chip_Clock_GetMainPLLHz>:
{
1a002a68:	b530      	push	{r4, r5, lr}
1a002a6a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002a6c:	4d17      	ldr	r5, [pc, #92]	; (1a002acc <Chip_Clock_GetMainPLLHz+0x64>)
1a002a6e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002a70:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002a74:	f7ff ff5c 	bl	1a002930 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002a78:	4b15      	ldr	r3, [pc, #84]	; (1a002ad0 <Chip_Clock_GetMainPLLHz+0x68>)
1a002a7a:	681b      	ldr	r3, [r3, #0]
1a002a7c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002a7e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a002a80:	f013 0f01 	tst.w	r3, #1
1a002a84:	d01f      	beq.n	1a002ac6 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a002a86:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002a8a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002a8e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002a92:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a002a96:	3301      	adds	r3, #1
	n = nsel + 1;
1a002a98:	3201      	adds	r2, #1
	p = ptab[psel];
1a002a9a:	f10d 0c08 	add.w	ip, sp, #8
1a002a9e:	4461      	add	r1, ip
1a002aa0:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002aa4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002aa8:	d108      	bne.n	1a002abc <Chip_Clock_GetMainPLLHz+0x54>
1a002aaa:	b93d      	cbnz	r5, 1a002abc <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002aac:	0049      	lsls	r1, r1, #1
1a002aae:	fbb3 f3f1 	udiv	r3, r3, r1
1a002ab2:	fbb0 f0f2 	udiv	r0, r0, r2
1a002ab6:	fb00 f003 	mul.w	r0, r0, r3
1a002aba:	e005      	b.n	1a002ac8 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a002abc:	fbb0 f0f2 	udiv	r0, r0, r2
1a002ac0:	fb03 f000 	mul.w	r0, r3, r0
1a002ac4:	e000      	b.n	1a002ac8 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a002ac6:	2000      	movs	r0, #0
}
1a002ac8:	b003      	add	sp, #12
1a002aca:	bd30      	pop	{r4, r5, pc}
1a002acc:	40050000 	.word	0x40050000
1a002ad0:	1a0040b8 	.word	0x1a0040b8

1a002ad4 <Chip_Clock_GetDivRate>:
{
1a002ad4:	b538      	push	{r3, r4, r5, lr}
1a002ad6:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002ad8:	4608      	mov	r0, r1
1a002ada:	f7ff ff0d 	bl	1a0028f8 <Chip_Clock_GetDividerSource>
1a002ade:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002ae0:	4620      	mov	r0, r4
1a002ae2:	f7ff ff17 	bl	1a002914 <Chip_Clock_GetDividerDivisor>
1a002ae6:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002ae8:	4628      	mov	r0, r5
1a002aea:	f7ff ff21 	bl	1a002930 <Chip_Clock_GetClockInputHz>
1a002aee:	3401      	adds	r4, #1
}
1a002af0:	fbb0 f0f4 	udiv	r0, r0, r4
1a002af4:	bd38      	pop	{r3, r4, r5, pc}
1a002af6:	Address 0x000000001a002af6 is out of bounds.


1a002af8 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002af8:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002afa:	f100 0416 	add.w	r4, r0, #22
1a002afe:	00a4      	lsls	r4, r4, #2
1a002b00:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002b04:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002b08:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002b0a:	281b      	cmp	r0, #27
1a002b0c:	d813      	bhi.n	1a002b36 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002b0e:	2911      	cmp	r1, #17
1a002b10:	d01a      	beq.n	1a002b48 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002b12:	4d0e      	ldr	r5, [pc, #56]	; (1a002b4c <Chip_Clock_SetBaseClock+0x54>)
1a002b14:	4025      	ands	r5, r4

			if (autoblocken) {
1a002b16:	b10a      	cbz	r2, 1a002b1c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002b18:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a002b1c:	b10b      	cbz	r3, 1a002b22 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002b1e:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002b22:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002b26:	3016      	adds	r0, #22
1a002b28:	0080      	lsls	r0, r0, #2
1a002b2a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002b2e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002b32:	6045      	str	r5, [r0, #4]
1a002b34:	e008      	b.n	1a002b48 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002b36:	f044 0401 	orr.w	r4, r4, #1
1a002b3a:	3016      	adds	r0, #22
1a002b3c:	0080      	lsls	r0, r0, #2
1a002b3e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002b42:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002b46:	6044      	str	r4, [r0, #4]
	}
}
1a002b48:	bc30      	pop	{r4, r5}
1a002b4a:	4770      	bx	lr
1a002b4c:	e0fff7fe 	.word	0xe0fff7fe

1a002b50 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002b50:	281b      	cmp	r0, #27
1a002b52:	d80c      	bhi.n	1a002b6e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002b54:	3016      	adds	r0, #22
1a002b56:	0080      	lsls	r0, r0, #2
1a002b58:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002b5c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002b60:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a002b62:	f010 0f01 	tst.w	r0, #1
1a002b66:	d104      	bne.n	1a002b72 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002b68:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002b6c:	4770      	bx	lr
		return CLKINPUT_PD;
1a002b6e:	2011      	movs	r0, #17
1a002b70:	4770      	bx	lr
		return CLKINPUT_PD;
1a002b72:	2011      	movs	r0, #17
}
1a002b74:	4770      	bx	lr

1a002b76 <Chip_Clock_GetBaseClocktHz>:
{
1a002b76:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002b78:	f7ff ffea 	bl	1a002b50 <Chip_Clock_GetBaseClock>
1a002b7c:	f7ff fed8 	bl	1a002930 <Chip_Clock_GetClockInputHz>
}
1a002b80:	bd08      	pop	{r3, pc}
1a002b82:	Address 0x000000001a002b82 is out of bounds.


1a002b84 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002b84:	b969      	cbnz	r1, 1a002ba2 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a002b86:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a002b88:	b10a      	cbz	r2, 1a002b8e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a002b8a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002b8e:	2b02      	cmp	r3, #2
1a002b90:	d009      	beq.n	1a002ba6 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002b92:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002b96:	d209      	bcs.n	1a002bac <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002b98:	3020      	adds	r0, #32
1a002b9a:	4b07      	ldr	r3, [pc, #28]	; (1a002bb8 <Chip_Clock_EnableOpts+0x34>)
1a002b9c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a002ba0:	4770      	bx	lr
		reg |= (1 << 1);
1a002ba2:	2103      	movs	r1, #3
1a002ba4:	e7f0      	b.n	1a002b88 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a002ba6:	f041 0120 	orr.w	r1, r1, #32
1a002baa:	e7f2      	b.n	1a002b92 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002bac:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002bb0:	4b02      	ldr	r3, [pc, #8]	; (1a002bbc <Chip_Clock_EnableOpts+0x38>)
1a002bb2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002bb6:	4770      	bx	lr
1a002bb8:	40051000 	.word	0x40051000
1a002bbc:	40052000 	.word	0x40052000

1a002bc0 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002bc0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002bc4:	d208      	bcs.n	1a002bd8 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002bc6:	4a09      	ldr	r2, [pc, #36]	; (1a002bec <Chip_Clock_Enable+0x2c>)
1a002bc8:	3020      	adds	r0, #32
1a002bca:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002bce:	f043 0301 	orr.w	r3, r3, #1
1a002bd2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a002bd6:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002bd8:	4a05      	ldr	r2, [pc, #20]	; (1a002bf0 <Chip_Clock_Enable+0x30>)
1a002bda:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002bde:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002be2:	f043 0301 	orr.w	r3, r3, #1
1a002be6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002bea:	4770      	bx	lr
1a002bec:	40051000 	.word	0x40051000
1a002bf0:	40052000 	.word	0x40052000

1a002bf4 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002bf4:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a002bf6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002bfa:	d309      	bcc.n	1a002c10 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002bfc:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002c00:	4a0d      	ldr	r2, [pc, #52]	; (1a002c38 <Chip_Clock_GetRate+0x44>)
1a002c02:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002c06:	f014 0f01 	tst.w	r4, #1
1a002c0a:	d107      	bne.n	1a002c1c <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a002c0c:	2000      	movs	r0, #0
	}

	return rate;
}
1a002c0e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002c10:	f100 0320 	add.w	r3, r0, #32
1a002c14:	4a09      	ldr	r2, [pc, #36]	; (1a002c3c <Chip_Clock_GetRate+0x48>)
1a002c16:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a002c1a:	e7f4      	b.n	1a002c06 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a002c1c:	f7ff fe20 	bl	1a002860 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002c20:	f7ff ffa9 	bl	1a002b76 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a002c24:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a002c28:	d103      	bne.n	1a002c32 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a002c2a:	2301      	movs	r3, #1
		rate = rate / div;
1a002c2c:	fbb0 f0f3 	udiv	r0, r0, r3
1a002c30:	e7ed      	b.n	1a002c0e <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a002c32:	2302      	movs	r3, #2
1a002c34:	e7fa      	b.n	1a002c2c <Chip_Clock_GetRate+0x38>
1a002c36:	bf00      	nop
1a002c38:	40052000 	.word	0x40052000
1a002c3c:	40051000 	.word	0x40051000

1a002c40 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002c40:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002c42:	2069      	movs	r0, #105	; 0x69
1a002c44:	f7ff ffd6 	bl	1a002bf4 <Chip_Clock_GetRate>
1a002c48:	4b01      	ldr	r3, [pc, #4]	; (1a002c50 <SystemCoreClockUpdate+0x10>)
1a002c4a:	6018      	str	r0, [r3, #0]
}
1a002c4c:	bd08      	pop	{r3, pc}
1a002c4e:	bf00      	nop
1a002c50:	10002b80 	.word	0x10002b80

1a002c54 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a002c54:	b570      	push	{r4, r5, r6, lr}
1a002c56:	b08a      	sub	sp, #40	; 0x28
1a002c58:	4605      	mov	r5, r0
1a002c5a:	460e      	mov	r6, r1
1a002c5c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a002c5e:	f242 7310 	movw	r3, #10000	; 0x2710
1a002c62:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a002c64:	2806      	cmp	r0, #6
1a002c66:	d018      	beq.n	1a002c9a <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a002c68:	2300      	movs	r3, #0
1a002c6a:	2201      	movs	r2, #1
1a002c6c:	4629      	mov	r1, r5
1a002c6e:	2004      	movs	r0, #4
1a002c70:	f7ff ff42 	bl	1a002af8 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a002c74:	4a49      	ldr	r2, [pc, #292]	; (1a002d9c <Chip_SetupCoreClock+0x148>)
1a002c76:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002c78:	f043 0301 	orr.w	r3, r3, #1
1a002c7c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a002c7e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a002c82:	a901      	add	r1, sp, #4
1a002c84:	4630      	mov	r0, r6
1a002c86:	f7ff feaf 	bl	1a0029e8 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a002c8a:	4b45      	ldr	r3, [pc, #276]	; (1a002da0 <Chip_SetupCoreClock+0x14c>)
1a002c8c:	429e      	cmp	r6, r3
1a002c8e:	d916      	bls.n	1a002cbe <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a002c90:	9b01      	ldr	r3, [sp, #4]
1a002c92:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002c96:	d003      	beq.n	1a002ca0 <Chip_SetupCoreClock+0x4c>
1a002c98:	e7fe      	b.n	1a002c98 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a002c9a:	f7ff fe07 	bl	1a0028ac <Chip_Clock_EnableCrystal>
1a002c9e:	e7e3      	b.n	1a002c68 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a002ca0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002ca4:	d005      	beq.n	1a002cb2 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a002ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002caa:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a002cac:	2500      	movs	r5, #0
			direct = 1;
1a002cae:	2601      	movs	r6, #1
1a002cb0:	e007      	b.n	1a002cc2 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a002cb2:	9b04      	ldr	r3, [sp, #16]
1a002cb4:	3301      	adds	r3, #1
1a002cb6:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a002cb8:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a002cba:	2600      	movs	r6, #0
1a002cbc:	e001      	b.n	1a002cc2 <Chip_SetupCoreClock+0x6e>
1a002cbe:	2500      	movs	r5, #0
1a002cc0:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002cc2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002cc6:	9b01      	ldr	r3, [sp, #4]
1a002cc8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002ccc:	9a05      	ldr	r2, [sp, #20]
1a002cce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002cd2:	9a03      	ldr	r2, [sp, #12]
1a002cd4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002cd8:	9a04      	ldr	r2, [sp, #16]
1a002cda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002cde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002ce2:	4a2e      	ldr	r2, [pc, #184]	; (1a002d9c <Chip_SetupCoreClock+0x148>)
1a002ce4:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a002ce6:	4b2d      	ldr	r3, [pc, #180]	; (1a002d9c <Chip_SetupCoreClock+0x148>)
1a002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a002cea:	f013 0f01 	tst.w	r3, #1
1a002cee:	d0fa      	beq.n	1a002ce6 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a002cf0:	2300      	movs	r3, #0
1a002cf2:	2201      	movs	r2, #1
1a002cf4:	2109      	movs	r1, #9
1a002cf6:	2004      	movs	r0, #4
1a002cf8:	f7ff fefe 	bl	1a002af8 <Chip_Clock_SetBaseClock>

	if (direct) {
1a002cfc:	b1fe      	cbz	r6, 1a002d3e <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002cfe:	f242 7310 	movw	r3, #10000	; 0x2710
1a002d02:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a002d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002d06:	1e5a      	subs	r2, r3, #1
1a002d08:	9209      	str	r2, [sp, #36]	; 0x24
1a002d0a:	2b00      	cmp	r3, #0
1a002d0c:	d1fa      	bne.n	1a002d04 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a002d0e:	9b01      	ldr	r3, [sp, #4]
1a002d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002d14:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002d16:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002d1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002d1e:	9a05      	ldr	r2, [sp, #20]
1a002d20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002d24:	9a03      	ldr	r2, [sp, #12]
1a002d26:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002d2a:	9a04      	ldr	r2, [sp, #16]
1a002d2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002d30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002d34:	4a19      	ldr	r2, [pc, #100]	; (1a002d9c <Chip_SetupCoreClock+0x148>)
1a002d36:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a002d38:	b36c      	cbz	r4, 1a002d96 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002d3a:	2400      	movs	r4, #0
1a002d3c:	e029      	b.n	1a002d92 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a002d3e:	2d00      	cmp	r5, #0
1a002d40:	d0fa      	beq.n	1a002d38 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002d42:	f242 7310 	movw	r3, #10000	; 0x2710
1a002d46:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a002d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002d4a:	1e5a      	subs	r2, r3, #1
1a002d4c:	9209      	str	r2, [sp, #36]	; 0x24
1a002d4e:	2b00      	cmp	r3, #0
1a002d50:	d1fa      	bne.n	1a002d48 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a002d52:	9b04      	ldr	r3, [sp, #16]
1a002d54:	1e5a      	subs	r2, r3, #1
1a002d56:	9204      	str	r2, [sp, #16]
1a002d58:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a002d5c:	9b01      	ldr	r3, [sp, #4]
1a002d5e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a002d62:	9905      	ldr	r1, [sp, #20]
1a002d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002d68:	9903      	ldr	r1, [sp, #12]
1a002d6a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a002d6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002d72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002d76:	4a09      	ldr	r2, [pc, #36]	; (1a002d9c <Chip_SetupCoreClock+0x148>)
1a002d78:	6453      	str	r3, [r2, #68]	; 0x44
1a002d7a:	e7dd      	b.n	1a002d38 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a002d7c:	4809      	ldr	r0, [pc, #36]	; (1a002da4 <Chip_SetupCoreClock+0x150>)
1a002d7e:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002d82:	78cb      	ldrb	r3, [r1, #3]
1a002d84:	788a      	ldrb	r2, [r1, #2]
1a002d86:	7849      	ldrb	r1, [r1, #1]
1a002d88:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002d8c:	f7ff feb4 	bl	1a002af8 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002d90:	3401      	adds	r4, #1
1a002d92:	2c11      	cmp	r4, #17
1a002d94:	d9f2      	bls.n	1a002d7c <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a002d96:	b00a      	add	sp, #40	; 0x28
1a002d98:	bd70      	pop	{r4, r5, r6, pc}
1a002d9a:	bf00      	nop
1a002d9c:	40050000 	.word	0x40050000
1a002da0:	068e7780 	.word	0x068e7780
1a002da4:	1a004130 	.word	0x1a004130

1a002da8 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a002da8:	4770      	bx	lr
1a002daa:	Address 0x000000001a002daa is out of bounds.


1a002dac <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002dac:	2901      	cmp	r1, #1
1a002dae:	d000      	beq.n	1a002db2 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a002db0:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a002db2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002db6:	0082      	lsls	r2, r0, #2
1a002db8:	4b03      	ldr	r3, [pc, #12]	; (1a002dc8 <Chip_I2C_EventHandler+0x1c>)
1a002dba:	4413      	add	r3, r2
1a002dbc:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a002dbe:	7d13      	ldrb	r3, [r2, #20]
1a002dc0:	b2db      	uxtb	r3, r3
1a002dc2:	2b04      	cmp	r3, #4
1a002dc4:	d0fb      	beq.n	1a002dbe <Chip_I2C_EventHandler+0x12>
1a002dc6:	e7f3      	b.n	1a002db0 <Chip_I2C_EventHandler+0x4>
1a002dc8:	10000004 	.word	0x10000004

1a002dcc <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002dcc:	b570      	push	{r4, r5, r6, lr}
1a002dce:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002dd0:	4e06      	ldr	r6, [pc, #24]	; (1a002dec <Chip_I2C_Init+0x20>)
1a002dd2:	00c4      	lsls	r4, r0, #3
1a002dd4:	1a22      	subs	r2, r4, r0
1a002dd6:	0093      	lsls	r3, r2, #2
1a002dd8:	4433      	add	r3, r6
1a002dda:	8898      	ldrh	r0, [r3, #4]
1a002ddc:	f7ff fef0 	bl	1a002bc0 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002de0:	1b64      	subs	r4, r4, r5
1a002de2:	00a3      	lsls	r3, r4, #2
1a002de4:	58f3      	ldr	r3, [r6, r3]
1a002de6:	226c      	movs	r2, #108	; 0x6c
1a002de8:	619a      	str	r2, [r3, #24]
}
1a002dea:	bd70      	pop	{r4, r5, r6, pc}
1a002dec:	10000004 	.word	0x10000004

1a002df0 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002df4:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a002df6:	4e0b      	ldr	r6, [pc, #44]	; (1a002e24 <Chip_I2C_SetClockRate+0x34>)
1a002df8:	00c5      	lsls	r5, r0, #3
1a002dfa:	1a2b      	subs	r3, r5, r0
1a002dfc:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a002e00:	eb06 0308 	add.w	r3, r6, r8
1a002e04:	8898      	ldrh	r0, [r3, #4]
1a002e06:	f7ff fef5 	bl	1a002bf4 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a002e0a:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a002e0e:	f856 3008 	ldr.w	r3, [r6, r8]
1a002e12:	0842      	lsrs	r2, r0, #1
1a002e14:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a002e16:	f856 3008 	ldr.w	r3, [r6, r8]
1a002e1a:	691a      	ldr	r2, [r3, #16]
1a002e1c:	1a80      	subs	r0, r0, r2
1a002e1e:	6158      	str	r0, [r3, #20]
}
1a002e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002e24:	10000004 	.word	0x10000004

1a002e28 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002e28:	4b03      	ldr	r3, [pc, #12]	; (1a002e38 <Chip_SSP_GetClockIndex+0x10>)
1a002e2a:	4298      	cmp	r0, r3
1a002e2c:	d001      	beq.n	1a002e32 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a002e2e:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a002e30:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a002e32:	20a5      	movs	r0, #165	; 0xa5
1a002e34:	4770      	bx	lr
1a002e36:	bf00      	nop
1a002e38:	400c5000 	.word	0x400c5000

1a002e3c <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002e3c:	4b04      	ldr	r3, [pc, #16]	; (1a002e50 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a002e3e:	4298      	cmp	r0, r3
1a002e40:	d002      	beq.n	1a002e48 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a002e42:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a002e46:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a002e48:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a002e4c:	4770      	bx	lr
1a002e4e:	bf00      	nop
1a002e50:	400c5000 	.word	0x400c5000

1a002e54 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a002e54:	6803      	ldr	r3, [r0, #0]
1a002e56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a002e5a:	0209      	lsls	r1, r1, #8
1a002e5c:	b289      	uxth	r1, r1
1a002e5e:	4319      	orrs	r1, r3
1a002e60:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a002e62:	6102      	str	r2, [r0, #16]
}
1a002e64:	4770      	bx	lr

1a002e66 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a002e66:	b570      	push	{r4, r5, r6, lr}
1a002e68:	4606      	mov	r6, r0
1a002e6a:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002e6c:	f7ff ffe6 	bl	1a002e3c <Chip_SSP_GetPeriphClockIndex>
1a002e70:	f7ff fec0 	bl	1a002bf4 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a002e74:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a002e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a002e7a:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a002e7c:	e000      	b.n	1a002e80 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a002e7e:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a002e80:	42ab      	cmp	r3, r5
1a002e82:	d90b      	bls.n	1a002e9c <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a002e84:	1c4c      	adds	r4, r1, #1
1a002e86:	fb02 f304 	mul.w	r3, r2, r4
1a002e8a:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a002e8e:	429d      	cmp	r5, r3
1a002e90:	d2f6      	bcs.n	1a002e80 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a002e92:	2cff      	cmp	r4, #255	; 0xff
1a002e94:	d9f3      	bls.n	1a002e7e <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a002e96:	3202      	adds	r2, #2
				cr0_div = 0;
1a002e98:	2100      	movs	r1, #0
1a002e9a:	e7f1      	b.n	1a002e80 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a002e9c:	4630      	mov	r0, r6
1a002e9e:	f7ff ffd9 	bl	1a002e54 <Chip_SSP_SetClockRate>
}
1a002ea2:	bd70      	pop	{r4, r5, r6, pc}

1a002ea4 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a002ea4:	b510      	push	{r4, lr}
1a002ea6:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a002ea8:	f7ff ffbe 	bl	1a002e28 <Chip_SSP_GetClockIndex>
1a002eac:	f7ff fe88 	bl	1a002bc0 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002eb0:	4620      	mov	r0, r4
1a002eb2:	f7ff ffc3 	bl	1a002e3c <Chip_SSP_GetPeriphClockIndex>
1a002eb6:	f7ff fe83 	bl	1a002bc0 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002eba:	6863      	ldr	r3, [r4, #4]
1a002ebc:	f023 0304 	bic.w	r3, r3, #4
1a002ec0:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002ec2:	6823      	ldr	r3, [r4, #0]
1a002ec4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002ec8:	f043 0307 	orr.w	r3, r3, #7
1a002ecc:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a002ece:	4902      	ldr	r1, [pc, #8]	; (1a002ed8 <Chip_SSP_Init+0x34>)
1a002ed0:	4620      	mov	r0, r4
1a002ed2:	f7ff ffc8 	bl	1a002e66 <Chip_SSP_SetBitRate>
}
1a002ed6:	bd10      	pop	{r4, pc}
1a002ed8:	000186a0 	.word	0x000186a0

1a002edc <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a002edc:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a002ede:	4a0b      	ldr	r2, [pc, #44]	; (1a002f0c <SystemInit+0x30>)
1a002ee0:	4b0b      	ldr	r3, [pc, #44]	; (1a002f10 <SystemInit+0x34>)
1a002ee2:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a002ee4:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a002ee8:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a002eea:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a002eee:	2b20      	cmp	r3, #32
1a002ef0:	d004      	beq.n	1a002efc <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a002ef2:	f7ff fa9f 	bl	1a002434 <Board_SystemInit>
   Board_Init();
1a002ef6:	f7ff fa27 	bl	1a002348 <Board_Init>
}
1a002efa:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a002efc:	4a04      	ldr	r2, [pc, #16]	; (1a002f10 <SystemInit+0x34>)
1a002efe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a002f02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a002f06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a002f0a:	e7f2      	b.n	1a002ef2 <SystemInit+0x16>
1a002f0c:	1a000000 	.word	0x1a000000
1a002f10:	e000ed00 	.word	0xe000ed00

1a002f14 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a002f14:	4b04      	ldr	r3, [pc, #16]	; (1a002f28 <cyclesCounterInit+0x14>)
1a002f16:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a002f18:	4a04      	ldr	r2, [pc, #16]	; (1a002f2c <cyclesCounterInit+0x18>)
1a002f1a:	6813      	ldr	r3, [r2, #0]
1a002f1c:	f043 0301 	orr.w	r3, r3, #1
1a002f20:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a002f22:	2001      	movs	r0, #1
1a002f24:	4770      	bx	lr
1a002f26:	bf00      	nop
1a002f28:	1000003c 	.word	0x1000003c
1a002f2c:	e0001000 	.word	0xe0001000

1a002f30 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a002f30:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002f34:	0083      	lsls	r3, r0, #2
1a002f36:	4a03      	ldr	r2, [pc, #12]	; (1a002f44 <uartTxReady+0x14>)
1a002f38:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a002f3a:	6958      	ldr	r0, [r3, #20]
}
1a002f3c:	f000 0020 	and.w	r0, r0, #32
1a002f40:	4770      	bx	lr
1a002f42:	bf00      	nop
1a002f44:	1a004178 	.word	0x1a004178

1a002f48 <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a002f48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002f4c:	0083      	lsls	r3, r0, #2
1a002f4e:	4a02      	ldr	r2, [pc, #8]	; (1a002f58 <uartTxWrite+0x10>)
1a002f50:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a002f52:	6019      	str	r1, [r3, #0]
}
1a002f54:	4770      	bx	lr
1a002f56:	bf00      	nop
1a002f58:	1a004178 	.word	0x1a004178

1a002f5c <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a002f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002f60:	4680      	mov	r8, r0
1a002f62:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a002f64:	4c19      	ldr	r4, [pc, #100]	; (1a002fcc <uartInit+0x70>)
1a002f66:	0045      	lsls	r5, r0, #1
1a002f68:	182a      	adds	r2, r5, r0
1a002f6a:	0093      	lsls	r3, r2, #2
1a002f6c:	18e6      	adds	r6, r4, r3
1a002f6e:	58e7      	ldr	r7, [r4, r3]
1a002f70:	4638      	mov	r0, r7
1a002f72:	f7ff fa7b 	bl	1a00246c <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a002f76:	4649      	mov	r1, r9
1a002f78:	4638      	mov	r0, r7
1a002f7a:	f7ff faa1 	bl	1a0024c0 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a002f7e:	2307      	movs	r3, #7
1a002f80:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002f82:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a002f84:	2301      	movs	r3, #1
1a002f86:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a002f88:	7930      	ldrb	r0, [r6, #4]
1a002f8a:	7973      	ldrb	r3, [r6, #5]
1a002f8c:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002f8e:	f042 0218 	orr.w	r2, r2, #24
1a002f92:	490f      	ldr	r1, [pc, #60]	; (1a002fd0 <uartInit+0x74>)
1a002f94:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a002f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a002f9c:	79f0      	ldrb	r0, [r6, #7]
1a002f9e:	7a33      	ldrb	r3, [r6, #8]
1a002fa0:	7a72      	ldrb	r2, [r6, #9]
1a002fa2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a002fa6:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a002faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a002fae:	f1b8 0f01 	cmp.w	r8, #1
1a002fb2:	d001      	beq.n	1a002fb8 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a002fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a002fb8:	4a06      	ldr	r2, [pc, #24]	; (1a002fd4 <uartInit+0x78>)
1a002fba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a002fbc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a002fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
1a002fc2:	221a      	movs	r2, #26
1a002fc4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a002fc8:	e7f4      	b.n	1a002fb4 <uartInit+0x58>
1a002fca:	bf00      	nop
1a002fcc:	1a004178 	.word	0x1a004178
1a002fd0:	40086000 	.word	0x40086000
1a002fd4:	40081000 	.word	0x40081000

1a002fd8 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a002fd8:	b538      	push	{r3, r4, r5, lr}
1a002fda:	4604      	mov	r4, r0
1a002fdc:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a002fde:	4620      	mov	r0, r4
1a002fe0:	f7ff ffa6 	bl	1a002f30 <uartTxReady>
1a002fe4:	2800      	cmp	r0, #0
1a002fe6:	d0fa      	beq.n	1a002fde <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a002fe8:	4629      	mov	r1, r5
1a002fea:	4620      	mov	r0, r4
1a002fec:	f7ff ffac 	bl	1a002f48 <uartTxWrite>
}
1a002ff0:	bd38      	pop	{r3, r4, r5, pc}

1a002ff2 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a002ff2:	b538      	push	{r3, r4, r5, lr}
1a002ff4:	4605      	mov	r5, r0
1a002ff6:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a002ff8:	e003      	b.n	1a003002 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a002ffa:	4628      	mov	r0, r5
1a002ffc:	f7ff ffec 	bl	1a002fd8 <uartWriteByte>
      str++;
1a003000:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a003002:	7821      	ldrb	r1, [r4, #0]
1a003004:	2900      	cmp	r1, #0
1a003006:	d1f8      	bne.n	1a002ffa <uartWriteString+0x8>
   }
}
1a003008:	bd38      	pop	{r3, r4, r5, pc}
1a00300a:	Address 0x000000001a00300a is out of bounds.


1a00300c <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a00300c:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a003010:	4908      	ldr	r1, [pc, #32]	; (1a003034 <tickerCallback+0x28>)
1a003012:	e9d1 2300 	ldrd	r2, r3, [r1]
1a003016:	f112 0b01 	adds.w	fp, r2, #1
1a00301a:	f143 0c00 	adc.w	ip, r3, #0
1a00301e:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a003022:	4b05      	ldr	r3, [pc, #20]	; (1a003038 <tickerCallback+0x2c>)
1a003024:	681b      	ldr	r3, [r3, #0]
1a003026:	b113      	cbz	r3, 1a00302e <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a003028:	4a04      	ldr	r2, [pc, #16]	; (1a00303c <tickerCallback+0x30>)
1a00302a:	6810      	ldr	r0, [r2, #0]
1a00302c:	4798      	blx	r3
   }
}
1a00302e:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a003032:	bf00      	nop
1a003034:	10002af8 	.word	0x10002af8
1a003038:	10002b00 	.word	0x10002b00
1a00303c:	10002af4 	.word	0x10002af4

1a003040 <tickInit>:
{
1a003040:	b510      	push	{r4, lr}
1a003042:	b082      	sub	sp, #8
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a003044:	4b0e      	ldr	r3, [pc, #56]	; (1a003080 <tickInit+0x40>)
1a003046:	9301      	str	r3, [sp, #4]
1a003048:	4b0e      	ldr	r3, [pc, #56]	; (1a003084 <tickInit+0x44>)
1a00304a:	9300      	str	r3, [sp, #0]
1a00304c:	2300      	movs	r3, #0
1a00304e:	2201      	movs	r2, #1
1a003050:	4601      	mov	r1, r0
1a003052:	480d      	ldr	r0, [pc, #52]	; (1a003088 <tickInit+0x48>)
1a003054:	f7fe fd42 	bl	1a001adc <xTimerCreateStatic>
         if (h == NULL)
1a003058:	b178      	cbz	r0, 1a00307a <tickInit+0x3a>
1a00305a:	4604      	mov	r4, r0
         return xTimerStart(h, 0) == pdPASS;
1a00305c:	f7fe f964 	bl	1a001328 <xTaskGetTickCount>
1a003060:	2300      	movs	r3, #0
1a003062:	9300      	str	r3, [sp, #0]
1a003064:	4602      	mov	r2, r0
1a003066:	2101      	movs	r1, #1
1a003068:	4620      	mov	r0, r4
1a00306a:	f7fe fd5d 	bl	1a001b28 <xTimerGenericCommand>
1a00306e:	2801      	cmp	r0, #1
1a003070:	bf14      	ite	ne
1a003072:	2000      	movne	r0, #0
1a003074:	2001      	moveq	r0, #1
}
1a003076:	b002      	add	sp, #8
1a003078:	bd10      	pop	{r4, pc}
            return 0;
1a00307a:	2000      	movs	r0, #0
1a00307c:	e7fb      	b.n	1a003076 <tickInit+0x36>
1a00307e:	bf00      	nop
1a003080:	10002b04 	.word	0x10002b04
1a003084:	1a00300d 	.word	0x1a00300d
1a003088:	1a0041c0 	.word	0x1a0041c0

1a00308c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00308c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00308e:	4d0b      	ldr	r5, [pc, #44]	; (1a0030bc <gpioObtainPinInit+0x30>)
1a003090:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a003094:	182c      	adds	r4, r5, r0
1a003096:	5628      	ldrsb	r0, [r5, r0]
1a003098:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00309a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00309e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0030a0:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0030a4:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0030a6:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0030aa:	9b02      	ldr	r3, [sp, #8]
1a0030ac:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0030ae:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0030b2:	9b03      	ldr	r3, [sp, #12]
1a0030b4:	701a      	strb	r2, [r3, #0]
}
1a0030b6:	bc30      	pop	{r4, r5}
1a0030b8:	4770      	bx	lr
1a0030ba:	bf00      	nop
1a0030bc:	1a0041cc 	.word	0x1a0041cc

1a0030c0 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a0030c0:	b570      	push	{r4, r5, r6, lr}
1a0030c2:	b084      	sub	sp, #16
1a0030c4:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0030c6:	2300      	movs	r3, #0
1a0030c8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0030cc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0030d0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0030d4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0030d8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0030dc:	f10d 030b 	add.w	r3, sp, #11
1a0030e0:	9301      	str	r3, [sp, #4]
1a0030e2:	ab03      	add	r3, sp, #12
1a0030e4:	9300      	str	r3, [sp, #0]
1a0030e6:	f10d 030d 	add.w	r3, sp, #13
1a0030ea:	f10d 020e 	add.w	r2, sp, #14
1a0030ee:	f10d 010f 	add.w	r1, sp, #15
1a0030f2:	f7ff ffcb 	bl	1a00308c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0030f6:	2c05      	cmp	r4, #5
1a0030f8:	f200 80a5 	bhi.w	1a003246 <gpioInit+0x186>
1a0030fc:	e8df f004 	tbb	[pc, r4]
1a003100:	45278109 	.word	0x45278109
1a003104:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a003106:	4851      	ldr	r0, [pc, #324]	; (1a00324c <gpioInit+0x18c>)
1a003108:	f7ff fe4e 	bl	1a002da8 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a00310c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00310e:	b004      	add	sp, #16
1a003110:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a003112:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003116:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00311a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00311e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003122:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003126:	494a      	ldr	r1, [pc, #296]	; (1a003250 <gpioInit+0x190>)
1a003128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00312c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003130:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003134:	2001      	movs	r0, #1
1a003136:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a00313a:	4c44      	ldr	r4, [pc, #272]	; (1a00324c <gpioInit+0x18c>)
1a00313c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003140:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003144:	ea22 0201 	bic.w	r2, r2, r1
1a003148:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00314c:	e7df      	b.n	1a00310e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00314e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003152:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003156:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00315a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00315e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003162:	493b      	ldr	r1, [pc, #236]	; (1a003250 <gpioInit+0x190>)
1a003164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003168:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00316c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003170:	2001      	movs	r0, #1
1a003172:	fa00 f102 	lsl.w	r1, r0, r2
1a003176:	4c35      	ldr	r4, [pc, #212]	; (1a00324c <gpioInit+0x18c>)
1a003178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00317c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003180:	ea22 0201 	bic.w	r2, r2, r1
1a003184:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003188:	e7c1      	b.n	1a00310e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00318a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00318e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003192:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003196:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00319a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00319e:	492c      	ldr	r1, [pc, #176]	; (1a003250 <gpioInit+0x190>)
1a0031a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0031a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0031a8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0031ac:	2001      	movs	r0, #1
1a0031ae:	fa00 f102 	lsl.w	r1, r0, r2
1a0031b2:	4c26      	ldr	r4, [pc, #152]	; (1a00324c <gpioInit+0x18c>)
1a0031b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0031b8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0031bc:	ea22 0201 	bic.w	r2, r2, r1
1a0031c0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0031c4:	e7a3      	b.n	1a00310e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a0031c6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0031ca:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0031ce:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0031d2:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0031d6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0031da:	491d      	ldr	r1, [pc, #116]	; (1a003250 <gpioInit+0x190>)
1a0031dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0031e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0031e4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0031e8:	2001      	movs	r0, #1
1a0031ea:	fa00 f102 	lsl.w	r1, r0, r2
1a0031ee:	4c17      	ldr	r4, [pc, #92]	; (1a00324c <gpioInit+0x18c>)
1a0031f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0031f4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0031f8:	ea22 0201 	bic.w	r2, r2, r1
1a0031fc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003200:	e785      	b.n	1a00310e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003202:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003206:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00320a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00320e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003212:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003216:	490e      	ldr	r1, [pc, #56]	; (1a003250 <gpioInit+0x190>)
1a003218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a00321c:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a003220:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003224:	2001      	movs	r0, #1
1a003226:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a00322a:	4b08      	ldr	r3, [pc, #32]	; (1a00324c <gpioInit+0x18c>)
1a00322c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a003230:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a003234:	4331      	orrs	r1, r6
1a003236:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00323a:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a00323c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a003240:	2100      	movs	r1, #0
1a003242:	5499      	strb	r1, [r3, r2]
1a003244:	e763      	b.n	1a00310e <gpioInit+0x4e>
      ret_val = 0;
1a003246:	2000      	movs	r0, #0
1a003248:	e761      	b.n	1a00310e <gpioInit+0x4e>
1a00324a:	bf00      	nop
1a00324c:	400f4000 	.word	0x400f4000
1a003250:	40086000 	.word	0x40086000

1a003254 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a003254:	b510      	push	{r4, lr}
1a003256:	b084      	sub	sp, #16
1a003258:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00325a:	2300      	movs	r3, #0
1a00325c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003260:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003264:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003268:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00326c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003270:	f10d 030b 	add.w	r3, sp, #11
1a003274:	9301      	str	r3, [sp, #4]
1a003276:	ab03      	add	r3, sp, #12
1a003278:	9300      	str	r3, [sp, #0]
1a00327a:	f10d 030d 	add.w	r3, sp, #13
1a00327e:	f10d 020e 	add.w	r2, sp, #14
1a003282:	f10d 010f 	add.w	r1, sp, #15
1a003286:	f7ff ff01 	bl	1a00308c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00328a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00328e:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a003292:	3400      	adds	r4, #0
1a003294:	bf18      	it	ne
1a003296:	2401      	movne	r4, #1
1a003298:	015b      	lsls	r3, r3, #5
1a00329a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00329e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0032a2:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a0032a4:	2001      	movs	r0, #1
1a0032a6:	b004      	add	sp, #16
1a0032a8:	bd10      	pop	{r4, pc}

1a0032aa <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a0032aa:	b500      	push	{lr}
1a0032ac:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0032ae:	2300      	movs	r3, #0
1a0032b0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0032b4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0032b8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0032bc:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0032c0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0032c4:	f10d 030b 	add.w	r3, sp, #11
1a0032c8:	9301      	str	r3, [sp, #4]
1a0032ca:	ab03      	add	r3, sp, #12
1a0032cc:	9300      	str	r3, [sp, #0]
1a0032ce:	f10d 030d 	add.w	r3, sp, #13
1a0032d2:	f10d 020e 	add.w	r2, sp, #14
1a0032d6:	f10d 010f 	add.w	r1, sp, #15
1a0032da:	f7ff fed7 	bl	1a00308c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0032de:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0032e2:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0032e6:	015b      	lsls	r3, r3, #5
1a0032e8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0032ec:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0032f0:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a0032f2:	3000      	adds	r0, #0
1a0032f4:	bf18      	it	ne
1a0032f6:	2001      	movne	r0, #1
1a0032f8:	b005      	add	sp, #20
1a0032fa:	f85d fb04 	ldr.w	pc, [sp], #4

1a0032fe <gpioToggle>:
{
1a0032fe:	b510      	push	{r4, lr}
1a003300:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a003302:	f7ff ffd2 	bl	1a0032aa <gpioRead>
1a003306:	fab0 f180 	clz	r1, r0
1a00330a:	0949      	lsrs	r1, r1, #5
1a00330c:	4620      	mov	r0, r4
1a00330e:	f7ff ffa1 	bl	1a003254 <gpioWrite>
}
1a003312:	bd10      	pop	{r4, pc}

1a003314 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003314:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003316:	4b04      	ldr	r3, [pc, #16]	; (1a003328 <USB0_IRQHandler+0x14>)
1a003318:	681b      	ldr	r3, [r3, #0]
1a00331a:	681b      	ldr	r3, [r3, #0]
1a00331c:	68db      	ldr	r3, [r3, #12]
1a00331e:	4a03      	ldr	r2, [pc, #12]	; (1a00332c <USB0_IRQHandler+0x18>)
1a003320:	6810      	ldr	r0, [r2, #0]
1a003322:	4798      	blx	r3
}
1a003324:	bd08      	pop	{r3, pc}
1a003326:	bf00      	nop
1a003328:	10002b84 	.word	0x10002b84
1a00332c:	10002b34 	.word	0x10002b34

1a003330 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a003330:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a003332:	f7ff fc85 	bl	1a002c40 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a003336:	4b3a      	ldr	r3, [pc, #232]	; (1a003420 <boardInit+0xf0>)
1a003338:	6818      	ldr	r0, [r3, #0]
1a00333a:	f7ff fdeb 	bl	1a002f14 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a00333e:	2001      	movs	r0, #1
1a003340:	2100      	movs	r1, #0
1a003342:	f7ff fe7d 	bl	1a003040 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a003346:	2105      	movs	r1, #5
1a003348:	2000      	movs	r0, #0
1a00334a:	f7ff feb9 	bl	1a0030c0 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a00334e:	2100      	movs	r1, #0
1a003350:	2026      	movs	r0, #38	; 0x26
1a003352:	f7ff feb5 	bl	1a0030c0 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a003356:	2100      	movs	r1, #0
1a003358:	2027      	movs	r0, #39	; 0x27
1a00335a:	f7ff feb1 	bl	1a0030c0 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a00335e:	2100      	movs	r1, #0
1a003360:	2028      	movs	r0, #40	; 0x28
1a003362:	f7ff fead 	bl	1a0030c0 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a003366:	2100      	movs	r1, #0
1a003368:	2029      	movs	r0, #41	; 0x29
1a00336a:	f7ff fea9 	bl	1a0030c0 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a00336e:	2101      	movs	r1, #1
1a003370:	202a      	movs	r0, #42	; 0x2a
1a003372:	f7ff fea5 	bl	1a0030c0 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a003376:	2101      	movs	r1, #1
1a003378:	202b      	movs	r0, #43	; 0x2b
1a00337a:	f7ff fea1 	bl	1a0030c0 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a00337e:	2101      	movs	r1, #1
1a003380:	202c      	movs	r0, #44	; 0x2c
1a003382:	f7ff fe9d 	bl	1a0030c0 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a003386:	2101      	movs	r1, #1
1a003388:	202d      	movs	r0, #45	; 0x2d
1a00338a:	f7ff fe99 	bl	1a0030c0 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a00338e:	2101      	movs	r1, #1
1a003390:	202e      	movs	r0, #46	; 0x2e
1a003392:	f7ff fe95 	bl	1a0030c0 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a003396:	2101      	movs	r1, #1
1a003398:	202f      	movs	r0, #47	; 0x2f
1a00339a:	f7ff fe91 	bl	1a0030c0 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a00339e:	2100      	movs	r1, #0
1a0033a0:	2030      	movs	r0, #48	; 0x30
1a0033a2:	f7ff fe8d 	bl	1a0030c0 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a0033a6:	2100      	movs	r1, #0
1a0033a8:	2031      	movs	r0, #49	; 0x31
1a0033aa:	f7ff fe89 	bl	1a0030c0 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a0033ae:	2100      	movs	r1, #0
1a0033b0:	2032      	movs	r0, #50	; 0x32
1a0033b2:	f7ff fe85 	bl	1a0030c0 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a0033b6:	2100      	movs	r1, #0
1a0033b8:	2033      	movs	r0, #51	; 0x33
1a0033ba:	f7ff fe81 	bl	1a0030c0 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a0033be:	2100      	movs	r1, #0
1a0033c0:	2034      	movs	r0, #52	; 0x34
1a0033c2:	f7ff fe7d 	bl	1a0030c0 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a0033c6:	2100      	movs	r1, #0
1a0033c8:	2035      	movs	r0, #53	; 0x35
1a0033ca:	f7ff fe79 	bl	1a0030c0 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a0033ce:	2100      	movs	r1, #0
1a0033d0:	2036      	movs	r0, #54	; 0x36
1a0033d2:	f7ff fe75 	bl	1a0030c0 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a0033d6:	2100      	movs	r1, #0
1a0033d8:	2037      	movs	r0, #55	; 0x37
1a0033da:	f7ff fe71 	bl	1a0030c0 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a0033de:	2101      	movs	r1, #1
1a0033e0:	2038      	movs	r0, #56	; 0x38
1a0033e2:	f7ff fe6d 	bl	1a0030c0 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a0033e6:	2101      	movs	r1, #1
1a0033e8:	2039      	movs	r0, #57	; 0x39
1a0033ea:	f7ff fe69 	bl	1a0030c0 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a0033ee:	2101      	movs	r1, #1
1a0033f0:	203a      	movs	r0, #58	; 0x3a
1a0033f2:	f7ff fe65 	bl	1a0030c0 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a0033f6:	2101      	movs	r1, #1
1a0033f8:	203b      	movs	r0, #59	; 0x3b
1a0033fa:	f7ff fe61 	bl	1a0030c0 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a0033fe:	2101      	movs	r1, #1
1a003400:	203c      	movs	r0, #60	; 0x3c
1a003402:	f7ff fe5d 	bl	1a0030c0 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a003406:	2101      	movs	r1, #1
1a003408:	203d      	movs	r0, #61	; 0x3d
1a00340a:	f7ff fe59 	bl	1a0030c0 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a00340e:	2101      	movs	r1, #1
1a003410:	203e      	movs	r0, #62	; 0x3e
1a003412:	f7ff fe55 	bl	1a0030c0 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a003416:	2101      	movs	r1, #1
1a003418:	203f      	movs	r0, #63	; 0x3f
1a00341a:	f7ff fe51 	bl	1a0030c0 <gpioInit>

}
1a00341e:	bd08      	pop	{r3, pc}
1a003420:	10002b80 	.word	0x10002b80

1a003424 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a003424:	b508      	push	{r3, lr}
1a003426:	460b      	mov	r3, r1
   *printer = uart;
1a003428:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a00342a:	4611      	mov	r1, r2
1a00342c:	4618      	mov	r0, r3
1a00342e:	f7ff fd95 	bl	1a002f5c <uartInit>
}
1a003432:	bd08      	pop	{r3, pc}

1a003434 <printString>:


// Print String

void printString( print_t printer, const char* string )
{
1a003434:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a003436:	f7ff fddc 	bl	1a002ff2 <uartWriteString>
}
1a00343a:	bd08      	pop	{r3, pc}

1a00343c <printEnter>:

void printEnter( print_t printer )
{
1a00343c:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a00343e:	4902      	ldr	r1, [pc, #8]	; (1a003448 <printEnter+0xc>)
1a003440:	f7ff fdd7 	bl	1a002ff2 <uartWriteString>
}
1a003444:	bd08      	pop	{r3, pc}
1a003446:	bf00      	nop
1a003448:	1a00430c 	.word	0x1a00430c

1a00344c <__aeabi_uldivmod>:
1a00344c:	b953      	cbnz	r3, 1a003464 <__aeabi_uldivmod+0x18>
1a00344e:	b94a      	cbnz	r2, 1a003464 <__aeabi_uldivmod+0x18>
1a003450:	2900      	cmp	r1, #0
1a003452:	bf08      	it	eq
1a003454:	2800      	cmpeq	r0, #0
1a003456:	bf1c      	itt	ne
1a003458:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a00345c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003460:	f000 b972 	b.w	1a003748 <__aeabi_idiv0>
1a003464:	f1ad 0c08 	sub.w	ip, sp, #8
1a003468:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a00346c:	f000 f806 	bl	1a00347c <__udivmoddi4>
1a003470:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003474:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003478:	b004      	add	sp, #16
1a00347a:	4770      	bx	lr

1a00347c <__udivmoddi4>:
1a00347c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003480:	9e08      	ldr	r6, [sp, #32]
1a003482:	4604      	mov	r4, r0
1a003484:	4688      	mov	r8, r1
1a003486:	2b00      	cmp	r3, #0
1a003488:	d14b      	bne.n	1a003522 <__udivmoddi4+0xa6>
1a00348a:	428a      	cmp	r2, r1
1a00348c:	4615      	mov	r5, r2
1a00348e:	d967      	bls.n	1a003560 <__udivmoddi4+0xe4>
1a003490:	fab2 f282 	clz	r2, r2
1a003494:	b14a      	cbz	r2, 1a0034aa <__udivmoddi4+0x2e>
1a003496:	f1c2 0720 	rsb	r7, r2, #32
1a00349a:	fa01 f302 	lsl.w	r3, r1, r2
1a00349e:	fa20 f707 	lsr.w	r7, r0, r7
1a0034a2:	4095      	lsls	r5, r2
1a0034a4:	ea47 0803 	orr.w	r8, r7, r3
1a0034a8:	4094      	lsls	r4, r2
1a0034aa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0034ae:	0c23      	lsrs	r3, r4, #16
1a0034b0:	fbb8 f7fe 	udiv	r7, r8, lr
1a0034b4:	fa1f fc85 	uxth.w	ip, r5
1a0034b8:	fb0e 8817 	mls	r8, lr, r7, r8
1a0034bc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0034c0:	fb07 f10c 	mul.w	r1, r7, ip
1a0034c4:	4299      	cmp	r1, r3
1a0034c6:	d909      	bls.n	1a0034dc <__udivmoddi4+0x60>
1a0034c8:	18eb      	adds	r3, r5, r3
1a0034ca:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0034ce:	f080 811b 	bcs.w	1a003708 <__udivmoddi4+0x28c>
1a0034d2:	4299      	cmp	r1, r3
1a0034d4:	f240 8118 	bls.w	1a003708 <__udivmoddi4+0x28c>
1a0034d8:	3f02      	subs	r7, #2
1a0034da:	442b      	add	r3, r5
1a0034dc:	1a5b      	subs	r3, r3, r1
1a0034de:	b2a4      	uxth	r4, r4
1a0034e0:	fbb3 f0fe 	udiv	r0, r3, lr
1a0034e4:	fb0e 3310 	mls	r3, lr, r0, r3
1a0034e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0034ec:	fb00 fc0c 	mul.w	ip, r0, ip
1a0034f0:	45a4      	cmp	ip, r4
1a0034f2:	d909      	bls.n	1a003508 <__udivmoddi4+0x8c>
1a0034f4:	192c      	adds	r4, r5, r4
1a0034f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0034fa:	f080 8107 	bcs.w	1a00370c <__udivmoddi4+0x290>
1a0034fe:	45a4      	cmp	ip, r4
1a003500:	f240 8104 	bls.w	1a00370c <__udivmoddi4+0x290>
1a003504:	3802      	subs	r0, #2
1a003506:	442c      	add	r4, r5
1a003508:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00350c:	eba4 040c 	sub.w	r4, r4, ip
1a003510:	2700      	movs	r7, #0
1a003512:	b11e      	cbz	r6, 1a00351c <__udivmoddi4+0xa0>
1a003514:	40d4      	lsrs	r4, r2
1a003516:	2300      	movs	r3, #0
1a003518:	e9c6 4300 	strd	r4, r3, [r6]
1a00351c:	4639      	mov	r1, r7
1a00351e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003522:	428b      	cmp	r3, r1
1a003524:	d909      	bls.n	1a00353a <__udivmoddi4+0xbe>
1a003526:	2e00      	cmp	r6, #0
1a003528:	f000 80eb 	beq.w	1a003702 <__udivmoddi4+0x286>
1a00352c:	2700      	movs	r7, #0
1a00352e:	e9c6 0100 	strd	r0, r1, [r6]
1a003532:	4638      	mov	r0, r7
1a003534:	4639      	mov	r1, r7
1a003536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00353a:	fab3 f783 	clz	r7, r3
1a00353e:	2f00      	cmp	r7, #0
1a003540:	d147      	bne.n	1a0035d2 <__udivmoddi4+0x156>
1a003542:	428b      	cmp	r3, r1
1a003544:	d302      	bcc.n	1a00354c <__udivmoddi4+0xd0>
1a003546:	4282      	cmp	r2, r0
1a003548:	f200 80fa 	bhi.w	1a003740 <__udivmoddi4+0x2c4>
1a00354c:	1a84      	subs	r4, r0, r2
1a00354e:	eb61 0303 	sbc.w	r3, r1, r3
1a003552:	2001      	movs	r0, #1
1a003554:	4698      	mov	r8, r3
1a003556:	2e00      	cmp	r6, #0
1a003558:	d0e0      	beq.n	1a00351c <__udivmoddi4+0xa0>
1a00355a:	e9c6 4800 	strd	r4, r8, [r6]
1a00355e:	e7dd      	b.n	1a00351c <__udivmoddi4+0xa0>
1a003560:	b902      	cbnz	r2, 1a003564 <__udivmoddi4+0xe8>
1a003562:	deff      	udf	#255	; 0xff
1a003564:	fab2 f282 	clz	r2, r2
1a003568:	2a00      	cmp	r2, #0
1a00356a:	f040 808f 	bne.w	1a00368c <__udivmoddi4+0x210>
1a00356e:	1b49      	subs	r1, r1, r5
1a003570:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003574:	fa1f f885 	uxth.w	r8, r5
1a003578:	2701      	movs	r7, #1
1a00357a:	fbb1 fcfe 	udiv	ip, r1, lr
1a00357e:	0c23      	lsrs	r3, r4, #16
1a003580:	fb0e 111c 	mls	r1, lr, ip, r1
1a003584:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003588:	fb08 f10c 	mul.w	r1, r8, ip
1a00358c:	4299      	cmp	r1, r3
1a00358e:	d907      	bls.n	1a0035a0 <__udivmoddi4+0x124>
1a003590:	18eb      	adds	r3, r5, r3
1a003592:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a003596:	d202      	bcs.n	1a00359e <__udivmoddi4+0x122>
1a003598:	4299      	cmp	r1, r3
1a00359a:	f200 80cd 	bhi.w	1a003738 <__udivmoddi4+0x2bc>
1a00359e:	4684      	mov	ip, r0
1a0035a0:	1a59      	subs	r1, r3, r1
1a0035a2:	b2a3      	uxth	r3, r4
1a0035a4:	fbb1 f0fe 	udiv	r0, r1, lr
1a0035a8:	fb0e 1410 	mls	r4, lr, r0, r1
1a0035ac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0035b0:	fb08 f800 	mul.w	r8, r8, r0
1a0035b4:	45a0      	cmp	r8, r4
1a0035b6:	d907      	bls.n	1a0035c8 <__udivmoddi4+0x14c>
1a0035b8:	192c      	adds	r4, r5, r4
1a0035ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0035be:	d202      	bcs.n	1a0035c6 <__udivmoddi4+0x14a>
1a0035c0:	45a0      	cmp	r8, r4
1a0035c2:	f200 80b6 	bhi.w	1a003732 <__udivmoddi4+0x2b6>
1a0035c6:	4618      	mov	r0, r3
1a0035c8:	eba4 0408 	sub.w	r4, r4, r8
1a0035cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0035d0:	e79f      	b.n	1a003512 <__udivmoddi4+0x96>
1a0035d2:	f1c7 0c20 	rsb	ip, r7, #32
1a0035d6:	40bb      	lsls	r3, r7
1a0035d8:	fa22 fe0c 	lsr.w	lr, r2, ip
1a0035dc:	ea4e 0e03 	orr.w	lr, lr, r3
1a0035e0:	fa01 f407 	lsl.w	r4, r1, r7
1a0035e4:	fa20 f50c 	lsr.w	r5, r0, ip
1a0035e8:	fa21 f30c 	lsr.w	r3, r1, ip
1a0035ec:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a0035f0:	4325      	orrs	r5, r4
1a0035f2:	fbb3 f9f8 	udiv	r9, r3, r8
1a0035f6:	0c2c      	lsrs	r4, r5, #16
1a0035f8:	fb08 3319 	mls	r3, r8, r9, r3
1a0035fc:	fa1f fa8e 	uxth.w	sl, lr
1a003600:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a003604:	fb09 f40a 	mul.w	r4, r9, sl
1a003608:	429c      	cmp	r4, r3
1a00360a:	fa02 f207 	lsl.w	r2, r2, r7
1a00360e:	fa00 f107 	lsl.w	r1, r0, r7
1a003612:	d90b      	bls.n	1a00362c <__udivmoddi4+0x1b0>
1a003614:	eb1e 0303 	adds.w	r3, lr, r3
1a003618:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a00361c:	f080 8087 	bcs.w	1a00372e <__udivmoddi4+0x2b2>
1a003620:	429c      	cmp	r4, r3
1a003622:	f240 8084 	bls.w	1a00372e <__udivmoddi4+0x2b2>
1a003626:	f1a9 0902 	sub.w	r9, r9, #2
1a00362a:	4473      	add	r3, lr
1a00362c:	1b1b      	subs	r3, r3, r4
1a00362e:	b2ad      	uxth	r5, r5
1a003630:	fbb3 f0f8 	udiv	r0, r3, r8
1a003634:	fb08 3310 	mls	r3, r8, r0, r3
1a003638:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a00363c:	fb00 fa0a 	mul.w	sl, r0, sl
1a003640:	45a2      	cmp	sl, r4
1a003642:	d908      	bls.n	1a003656 <__udivmoddi4+0x1da>
1a003644:	eb1e 0404 	adds.w	r4, lr, r4
1a003648:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00364c:	d26b      	bcs.n	1a003726 <__udivmoddi4+0x2aa>
1a00364e:	45a2      	cmp	sl, r4
1a003650:	d969      	bls.n	1a003726 <__udivmoddi4+0x2aa>
1a003652:	3802      	subs	r0, #2
1a003654:	4474      	add	r4, lr
1a003656:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00365a:	fba0 8902 	umull	r8, r9, r0, r2
1a00365e:	eba4 040a 	sub.w	r4, r4, sl
1a003662:	454c      	cmp	r4, r9
1a003664:	46c2      	mov	sl, r8
1a003666:	464b      	mov	r3, r9
1a003668:	d354      	bcc.n	1a003714 <__udivmoddi4+0x298>
1a00366a:	d051      	beq.n	1a003710 <__udivmoddi4+0x294>
1a00366c:	2e00      	cmp	r6, #0
1a00366e:	d069      	beq.n	1a003744 <__udivmoddi4+0x2c8>
1a003670:	ebb1 050a 	subs.w	r5, r1, sl
1a003674:	eb64 0403 	sbc.w	r4, r4, r3
1a003678:	fa04 fc0c 	lsl.w	ip, r4, ip
1a00367c:	40fd      	lsrs	r5, r7
1a00367e:	40fc      	lsrs	r4, r7
1a003680:	ea4c 0505 	orr.w	r5, ip, r5
1a003684:	e9c6 5400 	strd	r5, r4, [r6]
1a003688:	2700      	movs	r7, #0
1a00368a:	e747      	b.n	1a00351c <__udivmoddi4+0xa0>
1a00368c:	f1c2 0320 	rsb	r3, r2, #32
1a003690:	fa20 f703 	lsr.w	r7, r0, r3
1a003694:	4095      	lsls	r5, r2
1a003696:	fa01 f002 	lsl.w	r0, r1, r2
1a00369a:	fa21 f303 	lsr.w	r3, r1, r3
1a00369e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0036a2:	4338      	orrs	r0, r7
1a0036a4:	0c01      	lsrs	r1, r0, #16
1a0036a6:	fbb3 f7fe 	udiv	r7, r3, lr
1a0036aa:	fa1f f885 	uxth.w	r8, r5
1a0036ae:	fb0e 3317 	mls	r3, lr, r7, r3
1a0036b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0036b6:	fb07 f308 	mul.w	r3, r7, r8
1a0036ba:	428b      	cmp	r3, r1
1a0036bc:	fa04 f402 	lsl.w	r4, r4, r2
1a0036c0:	d907      	bls.n	1a0036d2 <__udivmoddi4+0x256>
1a0036c2:	1869      	adds	r1, r5, r1
1a0036c4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0036c8:	d22f      	bcs.n	1a00372a <__udivmoddi4+0x2ae>
1a0036ca:	428b      	cmp	r3, r1
1a0036cc:	d92d      	bls.n	1a00372a <__udivmoddi4+0x2ae>
1a0036ce:	3f02      	subs	r7, #2
1a0036d0:	4429      	add	r1, r5
1a0036d2:	1acb      	subs	r3, r1, r3
1a0036d4:	b281      	uxth	r1, r0
1a0036d6:	fbb3 f0fe 	udiv	r0, r3, lr
1a0036da:	fb0e 3310 	mls	r3, lr, r0, r3
1a0036de:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0036e2:	fb00 f308 	mul.w	r3, r0, r8
1a0036e6:	428b      	cmp	r3, r1
1a0036e8:	d907      	bls.n	1a0036fa <__udivmoddi4+0x27e>
1a0036ea:	1869      	adds	r1, r5, r1
1a0036ec:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0036f0:	d217      	bcs.n	1a003722 <__udivmoddi4+0x2a6>
1a0036f2:	428b      	cmp	r3, r1
1a0036f4:	d915      	bls.n	1a003722 <__udivmoddi4+0x2a6>
1a0036f6:	3802      	subs	r0, #2
1a0036f8:	4429      	add	r1, r5
1a0036fa:	1ac9      	subs	r1, r1, r3
1a0036fc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a003700:	e73b      	b.n	1a00357a <__udivmoddi4+0xfe>
1a003702:	4637      	mov	r7, r6
1a003704:	4630      	mov	r0, r6
1a003706:	e709      	b.n	1a00351c <__udivmoddi4+0xa0>
1a003708:	4607      	mov	r7, r0
1a00370a:	e6e7      	b.n	1a0034dc <__udivmoddi4+0x60>
1a00370c:	4618      	mov	r0, r3
1a00370e:	e6fb      	b.n	1a003508 <__udivmoddi4+0x8c>
1a003710:	4541      	cmp	r1, r8
1a003712:	d2ab      	bcs.n	1a00366c <__udivmoddi4+0x1f0>
1a003714:	ebb8 0a02 	subs.w	sl, r8, r2
1a003718:	eb69 020e 	sbc.w	r2, r9, lr
1a00371c:	3801      	subs	r0, #1
1a00371e:	4613      	mov	r3, r2
1a003720:	e7a4      	b.n	1a00366c <__udivmoddi4+0x1f0>
1a003722:	4660      	mov	r0, ip
1a003724:	e7e9      	b.n	1a0036fa <__udivmoddi4+0x27e>
1a003726:	4618      	mov	r0, r3
1a003728:	e795      	b.n	1a003656 <__udivmoddi4+0x1da>
1a00372a:	4667      	mov	r7, ip
1a00372c:	e7d1      	b.n	1a0036d2 <__udivmoddi4+0x256>
1a00372e:	4681      	mov	r9, r0
1a003730:	e77c      	b.n	1a00362c <__udivmoddi4+0x1b0>
1a003732:	3802      	subs	r0, #2
1a003734:	442c      	add	r4, r5
1a003736:	e747      	b.n	1a0035c8 <__udivmoddi4+0x14c>
1a003738:	f1ac 0c02 	sub.w	ip, ip, #2
1a00373c:	442b      	add	r3, r5
1a00373e:	e72f      	b.n	1a0035a0 <__udivmoddi4+0x124>
1a003740:	4638      	mov	r0, r7
1a003742:	e708      	b.n	1a003556 <__udivmoddi4+0xda>
1a003744:	4637      	mov	r7, r6
1a003746:	e6e9      	b.n	1a00351c <__udivmoddi4+0xa0>

1a003748 <__aeabi_idiv0>:
1a003748:	4770      	bx	lr
1a00374a:	bf00      	nop

1a00374c <__libc_init_array>:
1a00374c:	b570      	push	{r4, r5, r6, lr}
1a00374e:	4e0d      	ldr	r6, [pc, #52]	; (1a003784 <__libc_init_array+0x38>)
1a003750:	4c0d      	ldr	r4, [pc, #52]	; (1a003788 <__libc_init_array+0x3c>)
1a003752:	1ba4      	subs	r4, r4, r6
1a003754:	10a4      	asrs	r4, r4, #2
1a003756:	2500      	movs	r5, #0
1a003758:	42a5      	cmp	r5, r4
1a00375a:	d109      	bne.n	1a003770 <__libc_init_array+0x24>
1a00375c:	4e0b      	ldr	r6, [pc, #44]	; (1a00378c <__libc_init_array+0x40>)
1a00375e:	4c0c      	ldr	r4, [pc, #48]	; (1a003790 <__libc_init_array+0x44>)
1a003760:	f7fc fe63 	bl	1a00042a <_init>
1a003764:	1ba4      	subs	r4, r4, r6
1a003766:	10a4      	asrs	r4, r4, #2
1a003768:	2500      	movs	r5, #0
1a00376a:	42a5      	cmp	r5, r4
1a00376c:	d105      	bne.n	1a00377a <__libc_init_array+0x2e>
1a00376e:	bd70      	pop	{r4, r5, r6, pc}
1a003770:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003774:	4798      	blx	r3
1a003776:	3501      	adds	r5, #1
1a003778:	e7ee      	b.n	1a003758 <__libc_init_array+0xc>
1a00377a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a00377e:	4798      	blx	r3
1a003780:	3501      	adds	r5, #1
1a003782:	e7f2      	b.n	1a00376a <__libc_init_array+0x1e>
1a003784:	1a004374 	.word	0x1a004374
1a003788:	1a004374 	.word	0x1a004374
1a00378c:	1a004374 	.word	0x1a004374
1a003790:	1a004378 	.word	0x1a004378

1a003794 <memcpy>:
1a003794:	b510      	push	{r4, lr}
1a003796:	1e43      	subs	r3, r0, #1
1a003798:	440a      	add	r2, r1
1a00379a:	4291      	cmp	r1, r2
1a00379c:	d100      	bne.n	1a0037a0 <memcpy+0xc>
1a00379e:	bd10      	pop	{r4, pc}
1a0037a0:	f811 4b01 	ldrb.w	r4, [r1], #1
1a0037a4:	f803 4f01 	strb.w	r4, [r3, #1]!
1a0037a8:	e7f7      	b.n	1a00379a <memcpy+0x6>

1a0037aa <memset>:
1a0037aa:	4402      	add	r2, r0
1a0037ac:	4603      	mov	r3, r0
1a0037ae:	4293      	cmp	r3, r2
1a0037b0:	d100      	bne.n	1a0037b4 <memset+0xa>
1a0037b2:	4770      	bx	lr
1a0037b4:	f803 1b01 	strb.w	r1, [r3], #1
1a0037b8:	e7f9      	b.n	1a0037ae <memset+0x4>
1a0037ba:	Address 0x000000001a0037ba is out of bounds.


1a0037bc <_puts_r>:
1a0037bc:	b570      	push	{r4, r5, r6, lr}
1a0037be:	460e      	mov	r6, r1
1a0037c0:	4605      	mov	r5, r0
1a0037c2:	b118      	cbz	r0, 1a0037cc <_puts_r+0x10>
1a0037c4:	6983      	ldr	r3, [r0, #24]
1a0037c6:	b90b      	cbnz	r3, 1a0037cc <_puts_r+0x10>
1a0037c8:	f000 fa0c 	bl	1a003be4 <__sinit>
1a0037cc:	69ab      	ldr	r3, [r5, #24]
1a0037ce:	68ac      	ldr	r4, [r5, #8]
1a0037d0:	b913      	cbnz	r3, 1a0037d8 <_puts_r+0x1c>
1a0037d2:	4628      	mov	r0, r5
1a0037d4:	f000 fa06 	bl	1a003be4 <__sinit>
1a0037d8:	4b23      	ldr	r3, [pc, #140]	; (1a003868 <_puts_r+0xac>)
1a0037da:	429c      	cmp	r4, r3
1a0037dc:	d117      	bne.n	1a00380e <_puts_r+0x52>
1a0037de:	686c      	ldr	r4, [r5, #4]
1a0037e0:	89a3      	ldrh	r3, [r4, #12]
1a0037e2:	071b      	lsls	r3, r3, #28
1a0037e4:	d51d      	bpl.n	1a003822 <_puts_r+0x66>
1a0037e6:	6923      	ldr	r3, [r4, #16]
1a0037e8:	b1db      	cbz	r3, 1a003822 <_puts_r+0x66>
1a0037ea:	3e01      	subs	r6, #1
1a0037ec:	68a3      	ldr	r3, [r4, #8]
1a0037ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a0037f2:	3b01      	subs	r3, #1
1a0037f4:	60a3      	str	r3, [r4, #8]
1a0037f6:	b9e9      	cbnz	r1, 1a003834 <_puts_r+0x78>
1a0037f8:	2b00      	cmp	r3, #0
1a0037fa:	da2e      	bge.n	1a00385a <_puts_r+0x9e>
1a0037fc:	4622      	mov	r2, r4
1a0037fe:	210a      	movs	r1, #10
1a003800:	4628      	mov	r0, r5
1a003802:	f000 f83f 	bl	1a003884 <__swbuf_r>
1a003806:	3001      	adds	r0, #1
1a003808:	d011      	beq.n	1a00382e <_puts_r+0x72>
1a00380a:	200a      	movs	r0, #10
1a00380c:	e011      	b.n	1a003832 <_puts_r+0x76>
1a00380e:	4b17      	ldr	r3, [pc, #92]	; (1a00386c <_puts_r+0xb0>)
1a003810:	429c      	cmp	r4, r3
1a003812:	d101      	bne.n	1a003818 <_puts_r+0x5c>
1a003814:	68ac      	ldr	r4, [r5, #8]
1a003816:	e7e3      	b.n	1a0037e0 <_puts_r+0x24>
1a003818:	4b15      	ldr	r3, [pc, #84]	; (1a003870 <_puts_r+0xb4>)
1a00381a:	429c      	cmp	r4, r3
1a00381c:	bf08      	it	eq
1a00381e:	68ec      	ldreq	r4, [r5, #12]
1a003820:	e7de      	b.n	1a0037e0 <_puts_r+0x24>
1a003822:	4621      	mov	r1, r4
1a003824:	4628      	mov	r0, r5
1a003826:	f000 f87f 	bl	1a003928 <__swsetup_r>
1a00382a:	2800      	cmp	r0, #0
1a00382c:	d0dd      	beq.n	1a0037ea <_puts_r+0x2e>
1a00382e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003832:	bd70      	pop	{r4, r5, r6, pc}
1a003834:	2b00      	cmp	r3, #0
1a003836:	da04      	bge.n	1a003842 <_puts_r+0x86>
1a003838:	69a2      	ldr	r2, [r4, #24]
1a00383a:	429a      	cmp	r2, r3
1a00383c:	dc06      	bgt.n	1a00384c <_puts_r+0x90>
1a00383e:	290a      	cmp	r1, #10
1a003840:	d004      	beq.n	1a00384c <_puts_r+0x90>
1a003842:	6823      	ldr	r3, [r4, #0]
1a003844:	1c5a      	adds	r2, r3, #1
1a003846:	6022      	str	r2, [r4, #0]
1a003848:	7019      	strb	r1, [r3, #0]
1a00384a:	e7cf      	b.n	1a0037ec <_puts_r+0x30>
1a00384c:	4622      	mov	r2, r4
1a00384e:	4628      	mov	r0, r5
1a003850:	f000 f818 	bl	1a003884 <__swbuf_r>
1a003854:	3001      	adds	r0, #1
1a003856:	d1c9      	bne.n	1a0037ec <_puts_r+0x30>
1a003858:	e7e9      	b.n	1a00382e <_puts_r+0x72>
1a00385a:	6823      	ldr	r3, [r4, #0]
1a00385c:	200a      	movs	r0, #10
1a00385e:	1c5a      	adds	r2, r3, #1
1a003860:	6022      	str	r2, [r4, #0]
1a003862:	7018      	strb	r0, [r3, #0]
1a003864:	e7e5      	b.n	1a003832 <_puts_r+0x76>
1a003866:	bf00      	nop
1a003868:	1a004330 	.word	0x1a004330
1a00386c:	1a004350 	.word	0x1a004350
1a003870:	1a004310 	.word	0x1a004310

1a003874 <puts>:
1a003874:	4b02      	ldr	r3, [pc, #8]	; (1a003880 <puts+0xc>)
1a003876:	4601      	mov	r1, r0
1a003878:	6818      	ldr	r0, [r3, #0]
1a00387a:	f7ff bf9f 	b.w	1a0037bc <_puts_r>
1a00387e:	bf00      	nop
1a003880:	10000040 	.word	0x10000040

1a003884 <__swbuf_r>:
1a003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003886:	460e      	mov	r6, r1
1a003888:	4614      	mov	r4, r2
1a00388a:	4605      	mov	r5, r0
1a00388c:	b118      	cbz	r0, 1a003896 <__swbuf_r+0x12>
1a00388e:	6983      	ldr	r3, [r0, #24]
1a003890:	b90b      	cbnz	r3, 1a003896 <__swbuf_r+0x12>
1a003892:	f000 f9a7 	bl	1a003be4 <__sinit>
1a003896:	4b21      	ldr	r3, [pc, #132]	; (1a00391c <__swbuf_r+0x98>)
1a003898:	429c      	cmp	r4, r3
1a00389a:	d12a      	bne.n	1a0038f2 <__swbuf_r+0x6e>
1a00389c:	686c      	ldr	r4, [r5, #4]
1a00389e:	69a3      	ldr	r3, [r4, #24]
1a0038a0:	60a3      	str	r3, [r4, #8]
1a0038a2:	89a3      	ldrh	r3, [r4, #12]
1a0038a4:	071a      	lsls	r2, r3, #28
1a0038a6:	d52e      	bpl.n	1a003906 <__swbuf_r+0x82>
1a0038a8:	6923      	ldr	r3, [r4, #16]
1a0038aa:	b363      	cbz	r3, 1a003906 <__swbuf_r+0x82>
1a0038ac:	6923      	ldr	r3, [r4, #16]
1a0038ae:	6820      	ldr	r0, [r4, #0]
1a0038b0:	1ac0      	subs	r0, r0, r3
1a0038b2:	6963      	ldr	r3, [r4, #20]
1a0038b4:	b2f6      	uxtb	r6, r6
1a0038b6:	4283      	cmp	r3, r0
1a0038b8:	4637      	mov	r7, r6
1a0038ba:	dc04      	bgt.n	1a0038c6 <__swbuf_r+0x42>
1a0038bc:	4621      	mov	r1, r4
1a0038be:	4628      	mov	r0, r5
1a0038c0:	f000 f926 	bl	1a003b10 <_fflush_r>
1a0038c4:	bb28      	cbnz	r0, 1a003912 <__swbuf_r+0x8e>
1a0038c6:	68a3      	ldr	r3, [r4, #8]
1a0038c8:	3b01      	subs	r3, #1
1a0038ca:	60a3      	str	r3, [r4, #8]
1a0038cc:	6823      	ldr	r3, [r4, #0]
1a0038ce:	1c5a      	adds	r2, r3, #1
1a0038d0:	6022      	str	r2, [r4, #0]
1a0038d2:	701e      	strb	r6, [r3, #0]
1a0038d4:	6963      	ldr	r3, [r4, #20]
1a0038d6:	3001      	adds	r0, #1
1a0038d8:	4283      	cmp	r3, r0
1a0038da:	d004      	beq.n	1a0038e6 <__swbuf_r+0x62>
1a0038dc:	89a3      	ldrh	r3, [r4, #12]
1a0038de:	07db      	lsls	r3, r3, #31
1a0038e0:	d519      	bpl.n	1a003916 <__swbuf_r+0x92>
1a0038e2:	2e0a      	cmp	r6, #10
1a0038e4:	d117      	bne.n	1a003916 <__swbuf_r+0x92>
1a0038e6:	4621      	mov	r1, r4
1a0038e8:	4628      	mov	r0, r5
1a0038ea:	f000 f911 	bl	1a003b10 <_fflush_r>
1a0038ee:	b190      	cbz	r0, 1a003916 <__swbuf_r+0x92>
1a0038f0:	e00f      	b.n	1a003912 <__swbuf_r+0x8e>
1a0038f2:	4b0b      	ldr	r3, [pc, #44]	; (1a003920 <__swbuf_r+0x9c>)
1a0038f4:	429c      	cmp	r4, r3
1a0038f6:	d101      	bne.n	1a0038fc <__swbuf_r+0x78>
1a0038f8:	68ac      	ldr	r4, [r5, #8]
1a0038fa:	e7d0      	b.n	1a00389e <__swbuf_r+0x1a>
1a0038fc:	4b09      	ldr	r3, [pc, #36]	; (1a003924 <__swbuf_r+0xa0>)
1a0038fe:	429c      	cmp	r4, r3
1a003900:	bf08      	it	eq
1a003902:	68ec      	ldreq	r4, [r5, #12]
1a003904:	e7cb      	b.n	1a00389e <__swbuf_r+0x1a>
1a003906:	4621      	mov	r1, r4
1a003908:	4628      	mov	r0, r5
1a00390a:	f000 f80d 	bl	1a003928 <__swsetup_r>
1a00390e:	2800      	cmp	r0, #0
1a003910:	d0cc      	beq.n	1a0038ac <__swbuf_r+0x28>
1a003912:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a003916:	4638      	mov	r0, r7
1a003918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00391a:	bf00      	nop
1a00391c:	1a004330 	.word	0x1a004330
1a003920:	1a004350 	.word	0x1a004350
1a003924:	1a004310 	.word	0x1a004310

1a003928 <__swsetup_r>:
1a003928:	4b32      	ldr	r3, [pc, #200]	; (1a0039f4 <__swsetup_r+0xcc>)
1a00392a:	b570      	push	{r4, r5, r6, lr}
1a00392c:	681d      	ldr	r5, [r3, #0]
1a00392e:	4606      	mov	r6, r0
1a003930:	460c      	mov	r4, r1
1a003932:	b125      	cbz	r5, 1a00393e <__swsetup_r+0x16>
1a003934:	69ab      	ldr	r3, [r5, #24]
1a003936:	b913      	cbnz	r3, 1a00393e <__swsetup_r+0x16>
1a003938:	4628      	mov	r0, r5
1a00393a:	f000 f953 	bl	1a003be4 <__sinit>
1a00393e:	4b2e      	ldr	r3, [pc, #184]	; (1a0039f8 <__swsetup_r+0xd0>)
1a003940:	429c      	cmp	r4, r3
1a003942:	d10f      	bne.n	1a003964 <__swsetup_r+0x3c>
1a003944:	686c      	ldr	r4, [r5, #4]
1a003946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00394a:	b29a      	uxth	r2, r3
1a00394c:	0715      	lsls	r5, r2, #28
1a00394e:	d42c      	bmi.n	1a0039aa <__swsetup_r+0x82>
1a003950:	06d0      	lsls	r0, r2, #27
1a003952:	d411      	bmi.n	1a003978 <__swsetup_r+0x50>
1a003954:	2209      	movs	r2, #9
1a003956:	6032      	str	r2, [r6, #0]
1a003958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00395c:	81a3      	strh	r3, [r4, #12]
1a00395e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003962:	e03e      	b.n	1a0039e2 <__swsetup_r+0xba>
1a003964:	4b25      	ldr	r3, [pc, #148]	; (1a0039fc <__swsetup_r+0xd4>)
1a003966:	429c      	cmp	r4, r3
1a003968:	d101      	bne.n	1a00396e <__swsetup_r+0x46>
1a00396a:	68ac      	ldr	r4, [r5, #8]
1a00396c:	e7eb      	b.n	1a003946 <__swsetup_r+0x1e>
1a00396e:	4b24      	ldr	r3, [pc, #144]	; (1a003a00 <__swsetup_r+0xd8>)
1a003970:	429c      	cmp	r4, r3
1a003972:	bf08      	it	eq
1a003974:	68ec      	ldreq	r4, [r5, #12]
1a003976:	e7e6      	b.n	1a003946 <__swsetup_r+0x1e>
1a003978:	0751      	lsls	r1, r2, #29
1a00397a:	d512      	bpl.n	1a0039a2 <__swsetup_r+0x7a>
1a00397c:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a00397e:	b141      	cbz	r1, 1a003992 <__swsetup_r+0x6a>
1a003980:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003984:	4299      	cmp	r1, r3
1a003986:	d002      	beq.n	1a00398e <__swsetup_r+0x66>
1a003988:	4630      	mov	r0, r6
1a00398a:	f000 fa19 	bl	1a003dc0 <_free_r>
1a00398e:	2300      	movs	r3, #0
1a003990:	6363      	str	r3, [r4, #52]	; 0x34
1a003992:	89a3      	ldrh	r3, [r4, #12]
1a003994:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a003998:	81a3      	strh	r3, [r4, #12]
1a00399a:	2300      	movs	r3, #0
1a00399c:	6063      	str	r3, [r4, #4]
1a00399e:	6923      	ldr	r3, [r4, #16]
1a0039a0:	6023      	str	r3, [r4, #0]
1a0039a2:	89a3      	ldrh	r3, [r4, #12]
1a0039a4:	f043 0308 	orr.w	r3, r3, #8
1a0039a8:	81a3      	strh	r3, [r4, #12]
1a0039aa:	6923      	ldr	r3, [r4, #16]
1a0039ac:	b94b      	cbnz	r3, 1a0039c2 <__swsetup_r+0x9a>
1a0039ae:	89a3      	ldrh	r3, [r4, #12]
1a0039b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a0039b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0039b8:	d003      	beq.n	1a0039c2 <__swsetup_r+0x9a>
1a0039ba:	4621      	mov	r1, r4
1a0039bc:	4630      	mov	r0, r6
1a0039be:	f000 f9bf 	bl	1a003d40 <__smakebuf_r>
1a0039c2:	89a2      	ldrh	r2, [r4, #12]
1a0039c4:	f012 0301 	ands.w	r3, r2, #1
1a0039c8:	d00c      	beq.n	1a0039e4 <__swsetup_r+0xbc>
1a0039ca:	2300      	movs	r3, #0
1a0039cc:	60a3      	str	r3, [r4, #8]
1a0039ce:	6963      	ldr	r3, [r4, #20]
1a0039d0:	425b      	negs	r3, r3
1a0039d2:	61a3      	str	r3, [r4, #24]
1a0039d4:	6923      	ldr	r3, [r4, #16]
1a0039d6:	b953      	cbnz	r3, 1a0039ee <__swsetup_r+0xc6>
1a0039d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0039dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a0039e0:	d1ba      	bne.n	1a003958 <__swsetup_r+0x30>
1a0039e2:	bd70      	pop	{r4, r5, r6, pc}
1a0039e4:	0792      	lsls	r2, r2, #30
1a0039e6:	bf58      	it	pl
1a0039e8:	6963      	ldrpl	r3, [r4, #20]
1a0039ea:	60a3      	str	r3, [r4, #8]
1a0039ec:	e7f2      	b.n	1a0039d4 <__swsetup_r+0xac>
1a0039ee:	2000      	movs	r0, #0
1a0039f0:	e7f7      	b.n	1a0039e2 <__swsetup_r+0xba>
1a0039f2:	bf00      	nop
1a0039f4:	10000040 	.word	0x10000040
1a0039f8:	1a004330 	.word	0x1a004330
1a0039fc:	1a004350 	.word	0x1a004350
1a003a00:	1a004310 	.word	0x1a004310

1a003a04 <__sflush_r>:
1a003a04:	898a      	ldrh	r2, [r1, #12]
1a003a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003a0a:	4605      	mov	r5, r0
1a003a0c:	0710      	lsls	r0, r2, #28
1a003a0e:	460c      	mov	r4, r1
1a003a10:	d458      	bmi.n	1a003ac4 <__sflush_r+0xc0>
1a003a12:	684b      	ldr	r3, [r1, #4]
1a003a14:	2b00      	cmp	r3, #0
1a003a16:	dc05      	bgt.n	1a003a24 <__sflush_r+0x20>
1a003a18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a003a1a:	2b00      	cmp	r3, #0
1a003a1c:	dc02      	bgt.n	1a003a24 <__sflush_r+0x20>
1a003a1e:	2000      	movs	r0, #0
1a003a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003a26:	2e00      	cmp	r6, #0
1a003a28:	d0f9      	beq.n	1a003a1e <__sflush_r+0x1a>
1a003a2a:	2300      	movs	r3, #0
1a003a2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a003a30:	682f      	ldr	r7, [r5, #0]
1a003a32:	6a21      	ldr	r1, [r4, #32]
1a003a34:	602b      	str	r3, [r5, #0]
1a003a36:	d032      	beq.n	1a003a9e <__sflush_r+0x9a>
1a003a38:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a003a3a:	89a3      	ldrh	r3, [r4, #12]
1a003a3c:	075a      	lsls	r2, r3, #29
1a003a3e:	d505      	bpl.n	1a003a4c <__sflush_r+0x48>
1a003a40:	6863      	ldr	r3, [r4, #4]
1a003a42:	1ac0      	subs	r0, r0, r3
1a003a44:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a003a46:	b10b      	cbz	r3, 1a003a4c <__sflush_r+0x48>
1a003a48:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a003a4a:	1ac0      	subs	r0, r0, r3
1a003a4c:	2300      	movs	r3, #0
1a003a4e:	4602      	mov	r2, r0
1a003a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003a52:	6a21      	ldr	r1, [r4, #32]
1a003a54:	4628      	mov	r0, r5
1a003a56:	47b0      	blx	r6
1a003a58:	1c43      	adds	r3, r0, #1
1a003a5a:	89a3      	ldrh	r3, [r4, #12]
1a003a5c:	d106      	bne.n	1a003a6c <__sflush_r+0x68>
1a003a5e:	6829      	ldr	r1, [r5, #0]
1a003a60:	291d      	cmp	r1, #29
1a003a62:	d848      	bhi.n	1a003af6 <__sflush_r+0xf2>
1a003a64:	4a29      	ldr	r2, [pc, #164]	; (1a003b0c <__sflush_r+0x108>)
1a003a66:	40ca      	lsrs	r2, r1
1a003a68:	07d6      	lsls	r6, r2, #31
1a003a6a:	d544      	bpl.n	1a003af6 <__sflush_r+0xf2>
1a003a6c:	2200      	movs	r2, #0
1a003a6e:	6062      	str	r2, [r4, #4]
1a003a70:	04d9      	lsls	r1, r3, #19
1a003a72:	6922      	ldr	r2, [r4, #16]
1a003a74:	6022      	str	r2, [r4, #0]
1a003a76:	d504      	bpl.n	1a003a82 <__sflush_r+0x7e>
1a003a78:	1c42      	adds	r2, r0, #1
1a003a7a:	d101      	bne.n	1a003a80 <__sflush_r+0x7c>
1a003a7c:	682b      	ldr	r3, [r5, #0]
1a003a7e:	b903      	cbnz	r3, 1a003a82 <__sflush_r+0x7e>
1a003a80:	6560      	str	r0, [r4, #84]	; 0x54
1a003a82:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a003a84:	602f      	str	r7, [r5, #0]
1a003a86:	2900      	cmp	r1, #0
1a003a88:	d0c9      	beq.n	1a003a1e <__sflush_r+0x1a>
1a003a8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003a8e:	4299      	cmp	r1, r3
1a003a90:	d002      	beq.n	1a003a98 <__sflush_r+0x94>
1a003a92:	4628      	mov	r0, r5
1a003a94:	f000 f994 	bl	1a003dc0 <_free_r>
1a003a98:	2000      	movs	r0, #0
1a003a9a:	6360      	str	r0, [r4, #52]	; 0x34
1a003a9c:	e7c0      	b.n	1a003a20 <__sflush_r+0x1c>
1a003a9e:	2301      	movs	r3, #1
1a003aa0:	4628      	mov	r0, r5
1a003aa2:	47b0      	blx	r6
1a003aa4:	1c41      	adds	r1, r0, #1
1a003aa6:	d1c8      	bne.n	1a003a3a <__sflush_r+0x36>
1a003aa8:	682b      	ldr	r3, [r5, #0]
1a003aaa:	2b00      	cmp	r3, #0
1a003aac:	d0c5      	beq.n	1a003a3a <__sflush_r+0x36>
1a003aae:	2b1d      	cmp	r3, #29
1a003ab0:	d001      	beq.n	1a003ab6 <__sflush_r+0xb2>
1a003ab2:	2b16      	cmp	r3, #22
1a003ab4:	d101      	bne.n	1a003aba <__sflush_r+0xb6>
1a003ab6:	602f      	str	r7, [r5, #0]
1a003ab8:	e7b1      	b.n	1a003a1e <__sflush_r+0x1a>
1a003aba:	89a3      	ldrh	r3, [r4, #12]
1a003abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003ac0:	81a3      	strh	r3, [r4, #12]
1a003ac2:	e7ad      	b.n	1a003a20 <__sflush_r+0x1c>
1a003ac4:	690f      	ldr	r7, [r1, #16]
1a003ac6:	2f00      	cmp	r7, #0
1a003ac8:	d0a9      	beq.n	1a003a1e <__sflush_r+0x1a>
1a003aca:	0793      	lsls	r3, r2, #30
1a003acc:	680e      	ldr	r6, [r1, #0]
1a003ace:	bf08      	it	eq
1a003ad0:	694b      	ldreq	r3, [r1, #20]
1a003ad2:	600f      	str	r7, [r1, #0]
1a003ad4:	bf18      	it	ne
1a003ad6:	2300      	movne	r3, #0
1a003ad8:	eba6 0807 	sub.w	r8, r6, r7
1a003adc:	608b      	str	r3, [r1, #8]
1a003ade:	f1b8 0f00 	cmp.w	r8, #0
1a003ae2:	dd9c      	ble.n	1a003a1e <__sflush_r+0x1a>
1a003ae4:	4643      	mov	r3, r8
1a003ae6:	463a      	mov	r2, r7
1a003ae8:	6a21      	ldr	r1, [r4, #32]
1a003aea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a003aec:	4628      	mov	r0, r5
1a003aee:	47b0      	blx	r6
1a003af0:	2800      	cmp	r0, #0
1a003af2:	dc06      	bgt.n	1a003b02 <__sflush_r+0xfe>
1a003af4:	89a3      	ldrh	r3, [r4, #12]
1a003af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003afa:	81a3      	strh	r3, [r4, #12]
1a003afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003b00:	e78e      	b.n	1a003a20 <__sflush_r+0x1c>
1a003b02:	4407      	add	r7, r0
1a003b04:	eba8 0800 	sub.w	r8, r8, r0
1a003b08:	e7e9      	b.n	1a003ade <__sflush_r+0xda>
1a003b0a:	bf00      	nop
1a003b0c:	20400001 	.word	0x20400001

1a003b10 <_fflush_r>:
1a003b10:	b538      	push	{r3, r4, r5, lr}
1a003b12:	690b      	ldr	r3, [r1, #16]
1a003b14:	4605      	mov	r5, r0
1a003b16:	460c      	mov	r4, r1
1a003b18:	b1db      	cbz	r3, 1a003b52 <_fflush_r+0x42>
1a003b1a:	b118      	cbz	r0, 1a003b24 <_fflush_r+0x14>
1a003b1c:	6983      	ldr	r3, [r0, #24]
1a003b1e:	b90b      	cbnz	r3, 1a003b24 <_fflush_r+0x14>
1a003b20:	f000 f860 	bl	1a003be4 <__sinit>
1a003b24:	4b0c      	ldr	r3, [pc, #48]	; (1a003b58 <_fflush_r+0x48>)
1a003b26:	429c      	cmp	r4, r3
1a003b28:	d109      	bne.n	1a003b3e <_fflush_r+0x2e>
1a003b2a:	686c      	ldr	r4, [r5, #4]
1a003b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003b30:	b17b      	cbz	r3, 1a003b52 <_fflush_r+0x42>
1a003b32:	4621      	mov	r1, r4
1a003b34:	4628      	mov	r0, r5
1a003b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a003b3a:	f7ff bf63 	b.w	1a003a04 <__sflush_r>
1a003b3e:	4b07      	ldr	r3, [pc, #28]	; (1a003b5c <_fflush_r+0x4c>)
1a003b40:	429c      	cmp	r4, r3
1a003b42:	d101      	bne.n	1a003b48 <_fflush_r+0x38>
1a003b44:	68ac      	ldr	r4, [r5, #8]
1a003b46:	e7f1      	b.n	1a003b2c <_fflush_r+0x1c>
1a003b48:	4b05      	ldr	r3, [pc, #20]	; (1a003b60 <_fflush_r+0x50>)
1a003b4a:	429c      	cmp	r4, r3
1a003b4c:	bf08      	it	eq
1a003b4e:	68ec      	ldreq	r4, [r5, #12]
1a003b50:	e7ec      	b.n	1a003b2c <_fflush_r+0x1c>
1a003b52:	2000      	movs	r0, #0
1a003b54:	bd38      	pop	{r3, r4, r5, pc}
1a003b56:	bf00      	nop
1a003b58:	1a004330 	.word	0x1a004330
1a003b5c:	1a004350 	.word	0x1a004350
1a003b60:	1a004310 	.word	0x1a004310

1a003b64 <std>:
1a003b64:	2300      	movs	r3, #0
1a003b66:	b510      	push	{r4, lr}
1a003b68:	4604      	mov	r4, r0
1a003b6a:	e9c0 3300 	strd	r3, r3, [r0]
1a003b6e:	6083      	str	r3, [r0, #8]
1a003b70:	8181      	strh	r1, [r0, #12]
1a003b72:	6643      	str	r3, [r0, #100]	; 0x64
1a003b74:	81c2      	strh	r2, [r0, #14]
1a003b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a003b7a:	6183      	str	r3, [r0, #24]
1a003b7c:	4619      	mov	r1, r3
1a003b7e:	2208      	movs	r2, #8
1a003b80:	305c      	adds	r0, #92	; 0x5c
1a003b82:	f7ff fe12 	bl	1a0037aa <memset>
1a003b86:	4b05      	ldr	r3, [pc, #20]	; (1a003b9c <std+0x38>)
1a003b88:	6263      	str	r3, [r4, #36]	; 0x24
1a003b8a:	4b05      	ldr	r3, [pc, #20]	; (1a003ba0 <std+0x3c>)
1a003b8c:	62a3      	str	r3, [r4, #40]	; 0x28
1a003b8e:	4b05      	ldr	r3, [pc, #20]	; (1a003ba4 <std+0x40>)
1a003b90:	62e3      	str	r3, [r4, #44]	; 0x2c
1a003b92:	4b05      	ldr	r3, [pc, #20]	; (1a003ba8 <std+0x44>)
1a003b94:	6224      	str	r4, [r4, #32]
1a003b96:	6323      	str	r3, [r4, #48]	; 0x30
1a003b98:	bd10      	pop	{r4, pc}
1a003b9a:	bf00      	nop
1a003b9c:	1a003f11 	.word	0x1a003f11
1a003ba0:	1a003f33 	.word	0x1a003f33
1a003ba4:	1a003f6b 	.word	0x1a003f6b
1a003ba8:	1a003f8f 	.word	0x1a003f8f

1a003bac <_cleanup_r>:
1a003bac:	4901      	ldr	r1, [pc, #4]	; (1a003bb4 <_cleanup_r+0x8>)
1a003bae:	f000 b885 	b.w	1a003cbc <_fwalk_reent>
1a003bb2:	bf00      	nop
1a003bb4:	1a003b11 	.word	0x1a003b11

1a003bb8 <__sfmoreglue>:
1a003bb8:	b570      	push	{r4, r5, r6, lr}
1a003bba:	1e4a      	subs	r2, r1, #1
1a003bbc:	2568      	movs	r5, #104	; 0x68
1a003bbe:	4355      	muls	r5, r2
1a003bc0:	460e      	mov	r6, r1
1a003bc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a003bc6:	f000 f949 	bl	1a003e5c <_malloc_r>
1a003bca:	4604      	mov	r4, r0
1a003bcc:	b140      	cbz	r0, 1a003be0 <__sfmoreglue+0x28>
1a003bce:	2100      	movs	r1, #0
1a003bd0:	e9c0 1600 	strd	r1, r6, [r0]
1a003bd4:	300c      	adds	r0, #12
1a003bd6:	60a0      	str	r0, [r4, #8]
1a003bd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a003bdc:	f7ff fde5 	bl	1a0037aa <memset>
1a003be0:	4620      	mov	r0, r4
1a003be2:	bd70      	pop	{r4, r5, r6, pc}

1a003be4 <__sinit>:
1a003be4:	6983      	ldr	r3, [r0, #24]
1a003be6:	b510      	push	{r4, lr}
1a003be8:	4604      	mov	r4, r0
1a003bea:	bb33      	cbnz	r3, 1a003c3a <__sinit+0x56>
1a003bec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a003bf0:	6503      	str	r3, [r0, #80]	; 0x50
1a003bf2:	4b12      	ldr	r3, [pc, #72]	; (1a003c3c <__sinit+0x58>)
1a003bf4:	4a12      	ldr	r2, [pc, #72]	; (1a003c40 <__sinit+0x5c>)
1a003bf6:	681b      	ldr	r3, [r3, #0]
1a003bf8:	6282      	str	r2, [r0, #40]	; 0x28
1a003bfa:	4298      	cmp	r0, r3
1a003bfc:	bf04      	itt	eq
1a003bfe:	2301      	moveq	r3, #1
1a003c00:	6183      	streq	r3, [r0, #24]
1a003c02:	f000 f81f 	bl	1a003c44 <__sfp>
1a003c06:	6060      	str	r0, [r4, #4]
1a003c08:	4620      	mov	r0, r4
1a003c0a:	f000 f81b 	bl	1a003c44 <__sfp>
1a003c0e:	60a0      	str	r0, [r4, #8]
1a003c10:	4620      	mov	r0, r4
1a003c12:	f000 f817 	bl	1a003c44 <__sfp>
1a003c16:	2200      	movs	r2, #0
1a003c18:	60e0      	str	r0, [r4, #12]
1a003c1a:	2104      	movs	r1, #4
1a003c1c:	6860      	ldr	r0, [r4, #4]
1a003c1e:	f7ff ffa1 	bl	1a003b64 <std>
1a003c22:	2201      	movs	r2, #1
1a003c24:	2109      	movs	r1, #9
1a003c26:	68a0      	ldr	r0, [r4, #8]
1a003c28:	f7ff ff9c 	bl	1a003b64 <std>
1a003c2c:	2202      	movs	r2, #2
1a003c2e:	2112      	movs	r1, #18
1a003c30:	68e0      	ldr	r0, [r4, #12]
1a003c32:	f7ff ff97 	bl	1a003b64 <std>
1a003c36:	2301      	movs	r3, #1
1a003c38:	61a3      	str	r3, [r4, #24]
1a003c3a:	bd10      	pop	{r4, pc}
1a003c3c:	1a004370 	.word	0x1a004370
1a003c40:	1a003bad 	.word	0x1a003bad

1a003c44 <__sfp>:
1a003c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003c46:	4b1b      	ldr	r3, [pc, #108]	; (1a003cb4 <__sfp+0x70>)
1a003c48:	681e      	ldr	r6, [r3, #0]
1a003c4a:	69b3      	ldr	r3, [r6, #24]
1a003c4c:	4607      	mov	r7, r0
1a003c4e:	b913      	cbnz	r3, 1a003c56 <__sfp+0x12>
1a003c50:	4630      	mov	r0, r6
1a003c52:	f7ff ffc7 	bl	1a003be4 <__sinit>
1a003c56:	3648      	adds	r6, #72	; 0x48
1a003c58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a003c5c:	3b01      	subs	r3, #1
1a003c5e:	d503      	bpl.n	1a003c68 <__sfp+0x24>
1a003c60:	6833      	ldr	r3, [r6, #0]
1a003c62:	b133      	cbz	r3, 1a003c72 <__sfp+0x2e>
1a003c64:	6836      	ldr	r6, [r6, #0]
1a003c66:	e7f7      	b.n	1a003c58 <__sfp+0x14>
1a003c68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a003c6c:	b16d      	cbz	r5, 1a003c8a <__sfp+0x46>
1a003c6e:	3468      	adds	r4, #104	; 0x68
1a003c70:	e7f4      	b.n	1a003c5c <__sfp+0x18>
1a003c72:	2104      	movs	r1, #4
1a003c74:	4638      	mov	r0, r7
1a003c76:	f7ff ff9f 	bl	1a003bb8 <__sfmoreglue>
1a003c7a:	6030      	str	r0, [r6, #0]
1a003c7c:	2800      	cmp	r0, #0
1a003c7e:	d1f1      	bne.n	1a003c64 <__sfp+0x20>
1a003c80:	230c      	movs	r3, #12
1a003c82:	603b      	str	r3, [r7, #0]
1a003c84:	4604      	mov	r4, r0
1a003c86:	4620      	mov	r0, r4
1a003c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003c8a:	4b0b      	ldr	r3, [pc, #44]	; (1a003cb8 <__sfp+0x74>)
1a003c8c:	6665      	str	r5, [r4, #100]	; 0x64
1a003c8e:	e9c4 5500 	strd	r5, r5, [r4]
1a003c92:	60a5      	str	r5, [r4, #8]
1a003c94:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a003c98:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a003c9c:	2208      	movs	r2, #8
1a003c9e:	4629      	mov	r1, r5
1a003ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a003ca4:	f7ff fd81 	bl	1a0037aa <memset>
1a003ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a003cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a003cb0:	e7e9      	b.n	1a003c86 <__sfp+0x42>
1a003cb2:	bf00      	nop
1a003cb4:	1a004370 	.word	0x1a004370
1a003cb8:	ffff0001 	.word	0xffff0001

1a003cbc <_fwalk_reent>:
1a003cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003cc0:	4680      	mov	r8, r0
1a003cc2:	4689      	mov	r9, r1
1a003cc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a003cc8:	2600      	movs	r6, #0
1a003cca:	b914      	cbnz	r4, 1a003cd2 <_fwalk_reent+0x16>
1a003ccc:	4630      	mov	r0, r6
1a003cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003cd2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a003cd6:	3f01      	subs	r7, #1
1a003cd8:	d501      	bpl.n	1a003cde <_fwalk_reent+0x22>
1a003cda:	6824      	ldr	r4, [r4, #0]
1a003cdc:	e7f5      	b.n	1a003cca <_fwalk_reent+0xe>
1a003cde:	89ab      	ldrh	r3, [r5, #12]
1a003ce0:	2b01      	cmp	r3, #1
1a003ce2:	d907      	bls.n	1a003cf4 <_fwalk_reent+0x38>
1a003ce4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a003ce8:	3301      	adds	r3, #1
1a003cea:	d003      	beq.n	1a003cf4 <_fwalk_reent+0x38>
1a003cec:	4629      	mov	r1, r5
1a003cee:	4640      	mov	r0, r8
1a003cf0:	47c8      	blx	r9
1a003cf2:	4306      	orrs	r6, r0
1a003cf4:	3568      	adds	r5, #104	; 0x68
1a003cf6:	e7ee      	b.n	1a003cd6 <_fwalk_reent+0x1a>

1a003cf8 <__swhatbuf_r>:
1a003cf8:	b570      	push	{r4, r5, r6, lr}
1a003cfa:	460e      	mov	r6, r1
1a003cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003d00:	2900      	cmp	r1, #0
1a003d02:	b096      	sub	sp, #88	; 0x58
1a003d04:	4614      	mov	r4, r2
1a003d06:	461d      	mov	r5, r3
1a003d08:	da07      	bge.n	1a003d1a <__swhatbuf_r+0x22>
1a003d0a:	2300      	movs	r3, #0
1a003d0c:	602b      	str	r3, [r5, #0]
1a003d0e:	89b3      	ldrh	r3, [r6, #12]
1a003d10:	061a      	lsls	r2, r3, #24
1a003d12:	d410      	bmi.n	1a003d36 <__swhatbuf_r+0x3e>
1a003d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a003d18:	e00e      	b.n	1a003d38 <__swhatbuf_r+0x40>
1a003d1a:	466a      	mov	r2, sp
1a003d1c:	f7fc fb8b 	bl	1a000436 <_fstat_r>
1a003d20:	2800      	cmp	r0, #0
1a003d22:	dbf2      	blt.n	1a003d0a <__swhatbuf_r+0x12>
1a003d24:	9a01      	ldr	r2, [sp, #4]
1a003d26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a003d2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a003d2e:	425a      	negs	r2, r3
1a003d30:	415a      	adcs	r2, r3
1a003d32:	602a      	str	r2, [r5, #0]
1a003d34:	e7ee      	b.n	1a003d14 <__swhatbuf_r+0x1c>
1a003d36:	2340      	movs	r3, #64	; 0x40
1a003d38:	2000      	movs	r0, #0
1a003d3a:	6023      	str	r3, [r4, #0]
1a003d3c:	b016      	add	sp, #88	; 0x58
1a003d3e:	bd70      	pop	{r4, r5, r6, pc}

1a003d40 <__smakebuf_r>:
1a003d40:	898b      	ldrh	r3, [r1, #12]
1a003d42:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a003d44:	079d      	lsls	r5, r3, #30
1a003d46:	4606      	mov	r6, r0
1a003d48:	460c      	mov	r4, r1
1a003d4a:	d507      	bpl.n	1a003d5c <__smakebuf_r+0x1c>
1a003d4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a003d50:	6023      	str	r3, [r4, #0]
1a003d52:	6123      	str	r3, [r4, #16]
1a003d54:	2301      	movs	r3, #1
1a003d56:	6163      	str	r3, [r4, #20]
1a003d58:	b002      	add	sp, #8
1a003d5a:	bd70      	pop	{r4, r5, r6, pc}
1a003d5c:	ab01      	add	r3, sp, #4
1a003d5e:	466a      	mov	r2, sp
1a003d60:	f7ff ffca 	bl	1a003cf8 <__swhatbuf_r>
1a003d64:	9900      	ldr	r1, [sp, #0]
1a003d66:	4605      	mov	r5, r0
1a003d68:	4630      	mov	r0, r6
1a003d6a:	f000 f877 	bl	1a003e5c <_malloc_r>
1a003d6e:	b948      	cbnz	r0, 1a003d84 <__smakebuf_r+0x44>
1a003d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003d74:	059a      	lsls	r2, r3, #22
1a003d76:	d4ef      	bmi.n	1a003d58 <__smakebuf_r+0x18>
1a003d78:	f023 0303 	bic.w	r3, r3, #3
1a003d7c:	f043 0302 	orr.w	r3, r3, #2
1a003d80:	81a3      	strh	r3, [r4, #12]
1a003d82:	e7e3      	b.n	1a003d4c <__smakebuf_r+0xc>
1a003d84:	4b0d      	ldr	r3, [pc, #52]	; (1a003dbc <__smakebuf_r+0x7c>)
1a003d86:	62b3      	str	r3, [r6, #40]	; 0x28
1a003d88:	89a3      	ldrh	r3, [r4, #12]
1a003d8a:	6020      	str	r0, [r4, #0]
1a003d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003d90:	81a3      	strh	r3, [r4, #12]
1a003d92:	9b00      	ldr	r3, [sp, #0]
1a003d94:	6163      	str	r3, [r4, #20]
1a003d96:	9b01      	ldr	r3, [sp, #4]
1a003d98:	6120      	str	r0, [r4, #16]
1a003d9a:	b15b      	cbz	r3, 1a003db4 <__smakebuf_r+0x74>
1a003d9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a003da0:	4630      	mov	r0, r6
1a003da2:	f7fc fb4d 	bl	1a000440 <_isatty_r>
1a003da6:	b128      	cbz	r0, 1a003db4 <__smakebuf_r+0x74>
1a003da8:	89a3      	ldrh	r3, [r4, #12]
1a003daa:	f023 0303 	bic.w	r3, r3, #3
1a003dae:	f043 0301 	orr.w	r3, r3, #1
1a003db2:	81a3      	strh	r3, [r4, #12]
1a003db4:	89a3      	ldrh	r3, [r4, #12]
1a003db6:	431d      	orrs	r5, r3
1a003db8:	81a5      	strh	r5, [r4, #12]
1a003dba:	e7cd      	b.n	1a003d58 <__smakebuf_r+0x18>
1a003dbc:	1a003bad 	.word	0x1a003bad

1a003dc0 <_free_r>:
1a003dc0:	b538      	push	{r3, r4, r5, lr}
1a003dc2:	4605      	mov	r5, r0
1a003dc4:	2900      	cmp	r1, #0
1a003dc6:	d045      	beq.n	1a003e54 <_free_r+0x94>
1a003dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a003dcc:	1f0c      	subs	r4, r1, #4
1a003dce:	2b00      	cmp	r3, #0
1a003dd0:	bfb8      	it	lt
1a003dd2:	18e4      	addlt	r4, r4, r3
1a003dd4:	f000 f8df 	bl	1a003f96 <__malloc_lock>
1a003dd8:	4a1f      	ldr	r2, [pc, #124]	; (1a003e58 <_free_r+0x98>)
1a003dda:	6813      	ldr	r3, [r2, #0]
1a003ddc:	4610      	mov	r0, r2
1a003dde:	b933      	cbnz	r3, 1a003dee <_free_r+0x2e>
1a003de0:	6063      	str	r3, [r4, #4]
1a003de2:	6014      	str	r4, [r2, #0]
1a003de4:	4628      	mov	r0, r5
1a003de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a003dea:	f000 b8d5 	b.w	1a003f98 <__malloc_unlock>
1a003dee:	42a3      	cmp	r3, r4
1a003df0:	d90c      	bls.n	1a003e0c <_free_r+0x4c>
1a003df2:	6821      	ldr	r1, [r4, #0]
1a003df4:	1862      	adds	r2, r4, r1
1a003df6:	4293      	cmp	r3, r2
1a003df8:	bf04      	itt	eq
1a003dfa:	681a      	ldreq	r2, [r3, #0]
1a003dfc:	685b      	ldreq	r3, [r3, #4]
1a003dfe:	6063      	str	r3, [r4, #4]
1a003e00:	bf04      	itt	eq
1a003e02:	1852      	addeq	r2, r2, r1
1a003e04:	6022      	streq	r2, [r4, #0]
1a003e06:	6004      	str	r4, [r0, #0]
1a003e08:	e7ec      	b.n	1a003de4 <_free_r+0x24>
1a003e0a:	4613      	mov	r3, r2
1a003e0c:	685a      	ldr	r2, [r3, #4]
1a003e0e:	b10a      	cbz	r2, 1a003e14 <_free_r+0x54>
1a003e10:	42a2      	cmp	r2, r4
1a003e12:	d9fa      	bls.n	1a003e0a <_free_r+0x4a>
1a003e14:	6819      	ldr	r1, [r3, #0]
1a003e16:	1858      	adds	r0, r3, r1
1a003e18:	42a0      	cmp	r0, r4
1a003e1a:	d10b      	bne.n	1a003e34 <_free_r+0x74>
1a003e1c:	6820      	ldr	r0, [r4, #0]
1a003e1e:	4401      	add	r1, r0
1a003e20:	1858      	adds	r0, r3, r1
1a003e22:	4282      	cmp	r2, r0
1a003e24:	6019      	str	r1, [r3, #0]
1a003e26:	d1dd      	bne.n	1a003de4 <_free_r+0x24>
1a003e28:	6810      	ldr	r0, [r2, #0]
1a003e2a:	6852      	ldr	r2, [r2, #4]
1a003e2c:	605a      	str	r2, [r3, #4]
1a003e2e:	4401      	add	r1, r0
1a003e30:	6019      	str	r1, [r3, #0]
1a003e32:	e7d7      	b.n	1a003de4 <_free_r+0x24>
1a003e34:	d902      	bls.n	1a003e3c <_free_r+0x7c>
1a003e36:	230c      	movs	r3, #12
1a003e38:	602b      	str	r3, [r5, #0]
1a003e3a:	e7d3      	b.n	1a003de4 <_free_r+0x24>
1a003e3c:	6820      	ldr	r0, [r4, #0]
1a003e3e:	1821      	adds	r1, r4, r0
1a003e40:	428a      	cmp	r2, r1
1a003e42:	bf04      	itt	eq
1a003e44:	6811      	ldreq	r1, [r2, #0]
1a003e46:	6852      	ldreq	r2, [r2, #4]
1a003e48:	6062      	str	r2, [r4, #4]
1a003e4a:	bf04      	itt	eq
1a003e4c:	1809      	addeq	r1, r1, r0
1a003e4e:	6021      	streq	r1, [r4, #0]
1a003e50:	605c      	str	r4, [r3, #4]
1a003e52:	e7c7      	b.n	1a003de4 <_free_r+0x24>
1a003e54:	bd38      	pop	{r3, r4, r5, pc}
1a003e56:	bf00      	nop
1a003e58:	10002b38 	.word	0x10002b38

1a003e5c <_malloc_r>:
1a003e5c:	b570      	push	{r4, r5, r6, lr}
1a003e5e:	1ccd      	adds	r5, r1, #3
1a003e60:	f025 0503 	bic.w	r5, r5, #3
1a003e64:	3508      	adds	r5, #8
1a003e66:	2d0c      	cmp	r5, #12
1a003e68:	bf38      	it	cc
1a003e6a:	250c      	movcc	r5, #12
1a003e6c:	2d00      	cmp	r5, #0
1a003e6e:	4606      	mov	r6, r0
1a003e70:	db01      	blt.n	1a003e76 <_malloc_r+0x1a>
1a003e72:	42a9      	cmp	r1, r5
1a003e74:	d903      	bls.n	1a003e7e <_malloc_r+0x22>
1a003e76:	230c      	movs	r3, #12
1a003e78:	6033      	str	r3, [r6, #0]
1a003e7a:	2000      	movs	r0, #0
1a003e7c:	bd70      	pop	{r4, r5, r6, pc}
1a003e7e:	f000 f88a 	bl	1a003f96 <__malloc_lock>
1a003e82:	4a21      	ldr	r2, [pc, #132]	; (1a003f08 <_malloc_r+0xac>)
1a003e84:	6814      	ldr	r4, [r2, #0]
1a003e86:	4621      	mov	r1, r4
1a003e88:	b991      	cbnz	r1, 1a003eb0 <_malloc_r+0x54>
1a003e8a:	4c20      	ldr	r4, [pc, #128]	; (1a003f0c <_malloc_r+0xb0>)
1a003e8c:	6823      	ldr	r3, [r4, #0]
1a003e8e:	b91b      	cbnz	r3, 1a003e98 <_malloc_r+0x3c>
1a003e90:	4630      	mov	r0, r6
1a003e92:	f7fc fb1f 	bl	1a0004d4 <_sbrk_r>
1a003e96:	6020      	str	r0, [r4, #0]
1a003e98:	4629      	mov	r1, r5
1a003e9a:	4630      	mov	r0, r6
1a003e9c:	f7fc fb1a 	bl	1a0004d4 <_sbrk_r>
1a003ea0:	1c43      	adds	r3, r0, #1
1a003ea2:	d124      	bne.n	1a003eee <_malloc_r+0x92>
1a003ea4:	230c      	movs	r3, #12
1a003ea6:	6033      	str	r3, [r6, #0]
1a003ea8:	4630      	mov	r0, r6
1a003eaa:	f000 f875 	bl	1a003f98 <__malloc_unlock>
1a003eae:	e7e4      	b.n	1a003e7a <_malloc_r+0x1e>
1a003eb0:	680b      	ldr	r3, [r1, #0]
1a003eb2:	1b5b      	subs	r3, r3, r5
1a003eb4:	d418      	bmi.n	1a003ee8 <_malloc_r+0x8c>
1a003eb6:	2b0b      	cmp	r3, #11
1a003eb8:	d90f      	bls.n	1a003eda <_malloc_r+0x7e>
1a003eba:	600b      	str	r3, [r1, #0]
1a003ebc:	50cd      	str	r5, [r1, r3]
1a003ebe:	18cc      	adds	r4, r1, r3
1a003ec0:	4630      	mov	r0, r6
1a003ec2:	f000 f869 	bl	1a003f98 <__malloc_unlock>
1a003ec6:	f104 000b 	add.w	r0, r4, #11
1a003eca:	1d23      	adds	r3, r4, #4
1a003ecc:	f020 0007 	bic.w	r0, r0, #7
1a003ed0:	1ac3      	subs	r3, r0, r3
1a003ed2:	d0d3      	beq.n	1a003e7c <_malloc_r+0x20>
1a003ed4:	425a      	negs	r2, r3
1a003ed6:	50e2      	str	r2, [r4, r3]
1a003ed8:	e7d0      	b.n	1a003e7c <_malloc_r+0x20>
1a003eda:	428c      	cmp	r4, r1
1a003edc:	684b      	ldr	r3, [r1, #4]
1a003ede:	bf16      	itet	ne
1a003ee0:	6063      	strne	r3, [r4, #4]
1a003ee2:	6013      	streq	r3, [r2, #0]
1a003ee4:	460c      	movne	r4, r1
1a003ee6:	e7eb      	b.n	1a003ec0 <_malloc_r+0x64>
1a003ee8:	460c      	mov	r4, r1
1a003eea:	6849      	ldr	r1, [r1, #4]
1a003eec:	e7cc      	b.n	1a003e88 <_malloc_r+0x2c>
1a003eee:	1cc4      	adds	r4, r0, #3
1a003ef0:	f024 0403 	bic.w	r4, r4, #3
1a003ef4:	42a0      	cmp	r0, r4
1a003ef6:	d005      	beq.n	1a003f04 <_malloc_r+0xa8>
1a003ef8:	1a21      	subs	r1, r4, r0
1a003efa:	4630      	mov	r0, r6
1a003efc:	f7fc faea 	bl	1a0004d4 <_sbrk_r>
1a003f00:	3001      	adds	r0, #1
1a003f02:	d0cf      	beq.n	1a003ea4 <_malloc_r+0x48>
1a003f04:	6025      	str	r5, [r4, #0]
1a003f06:	e7db      	b.n	1a003ec0 <_malloc_r+0x64>
1a003f08:	10002b38 	.word	0x10002b38
1a003f0c:	10002b3c 	.word	0x10002b3c

1a003f10 <__sread>:
1a003f10:	b510      	push	{r4, lr}
1a003f12:	460c      	mov	r4, r1
1a003f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003f18:	f7fc faa0 	bl	1a00045c <_read_r>
1a003f1c:	2800      	cmp	r0, #0
1a003f1e:	bfab      	itete	ge
1a003f20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a003f22:	89a3      	ldrhlt	r3, [r4, #12]
1a003f24:	181b      	addge	r3, r3, r0
1a003f26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a003f2a:	bfac      	ite	ge
1a003f2c:	6563      	strge	r3, [r4, #84]	; 0x54
1a003f2e:	81a3      	strhlt	r3, [r4, #12]
1a003f30:	bd10      	pop	{r4, pc}

1a003f32 <__swrite>:
1a003f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003f36:	461f      	mov	r7, r3
1a003f38:	898b      	ldrh	r3, [r1, #12]
1a003f3a:	05db      	lsls	r3, r3, #23
1a003f3c:	4605      	mov	r5, r0
1a003f3e:	460c      	mov	r4, r1
1a003f40:	4616      	mov	r6, r2
1a003f42:	d505      	bpl.n	1a003f50 <__swrite+0x1e>
1a003f44:	2302      	movs	r3, #2
1a003f46:	2200      	movs	r2, #0
1a003f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003f4c:	f7fc fa81 	bl	1a000452 <_lseek_r>
1a003f50:	89a3      	ldrh	r3, [r4, #12]
1a003f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a003f56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a003f5a:	81a3      	strh	r3, [r4, #12]
1a003f5c:	4632      	mov	r2, r6
1a003f5e:	463b      	mov	r3, r7
1a003f60:	4628      	mov	r0, r5
1a003f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a003f66:	f7fc baa0 	b.w	1a0004aa <_write_r>

1a003f6a <__sseek>:
1a003f6a:	b510      	push	{r4, lr}
1a003f6c:	460c      	mov	r4, r1
1a003f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003f72:	f7fc fa6e 	bl	1a000452 <_lseek_r>
1a003f76:	1c43      	adds	r3, r0, #1
1a003f78:	89a3      	ldrh	r3, [r4, #12]
1a003f7a:	bf15      	itete	ne
1a003f7c:	6560      	strne	r0, [r4, #84]	; 0x54
1a003f7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a003f82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a003f86:	81a3      	strheq	r3, [r4, #12]
1a003f88:	bf18      	it	ne
1a003f8a:	81a3      	strhne	r3, [r4, #12]
1a003f8c:	bd10      	pop	{r4, pc}

1a003f8e <__sclose>:
1a003f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003f92:	f7fc ba4b 	b.w	1a00042c <_close_r>

1a003f96 <__malloc_lock>:
1a003f96:	4770      	bx	lr

1a003f98 <__malloc_unlock>:
1a003f98:	4770      	bx	lr
1a003f9a:	ffff 6c42 	vdup.8	q11, d2[7]
1a003f9e:	6e69      	.short	0x6e69
1a003fa0:	6320796b 	.word	0x6320796b
1a003fa4:	66206e6f 	.word	0x66206e6f
1a003fa8:	52656572 	.word	0x52656572
1a003fac:	20534f54 	.word	0x20534f54
1a003fb0:	41732079 	.word	0x41732079
1a003fb4:	002e4950 	.word	0x002e4950
1a003fb8:	6154796d 	.word	0x6154796d
1a003fbc:	ff006b73 	.word	0xff006b73
1a003fc0:	6e696c42 	.word	0x6e696c42
1a003fc4:	6320796b 	.word	0x6320796b
1a003fc8:	66206e6f 	.word	0x66206e6f
1a003fcc:	52656572 	.word	0x52656572
1a003fd0:	20534f54 	.word	0x20534f54
1a003fd4:	41732079 	.word	0x41732079
1a003fd8:	0d2e4950 	.word	0x0d2e4950
1a003fdc:	00000000 	.word	0x00000000
1a003fe0:	6e696c42 	.word	0x6e696c42
1a003fe4:	000d216b 	.word	0x000d216b
1a003fe8:	454c4449 	.word	0x454c4449
1a003fec:	ffffff00 	.word	0xffffff00
1a003ff0:	51726d54 	.word	0x51726d54
1a003ff4:	ffffff00 	.word	0xffffff00
1a003ff8:	20726d54 	.word	0x20726d54
1a003ffc:	00637653 	.word	0x00637653

1a004000 <ExtRateIn>:
1a004000:	00000000                                ....

1a004004 <GpioButtons>:
1a004004:	08000400 09010900                       ........

1a00400c <GpioLeds>:
1a00400c:	01050005 0e000205 0c010b01              ............

1a004018 <GpioPorts>:
1a004018:	03030003 0f050403 05031005 07030603     ................
1a004028:	ffff0802                                ....

1a00402c <OscRateIn>:
1a00402c:	00b71b00                                ....

1a004030 <InitClkStates>:
1a004030:	01010f01                                ....

1a004034 <pinmuxing>:
1a004034:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004044:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a004054:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a004064:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a004074:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a004084:	00d50301 00d50401 00160107 00560207     ..............V.
1a004094:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0040a4:	00570206                                ..W.

1a0040a8 <UART_BClock>:
1a0040a8:	01a201c2 01620182                       ......b.

1a0040b0 <UART_PClock>:
1a0040b0:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0040c0:	ffff00ff                                ....

1a0040c4 <periph_to_base>:
1a0040c4:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0040d4:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0040e4:	000100e0 01000100 01200003 00060120     .......... . ...
1a0040f4:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a004104:	01820013 00120182 01a201a2 01c20011     ................
1a004114:	001001c2 01e201e2 0202000f 000e0202     ................
1a004124:	02220222 0223000d 001c0223              "."...#.#...

1a004130 <InitClkStates>:
1a004130:	00010100 00010909 0001090a 01010701     ................
1a004140:	00010902 00010906 0101090c 0001090d     ................
1a004150:	0001090e 0001090f 00010910 00010911     ................
1a004160:	00010912 00010913 00011114 00011119     ................
1a004170:	0001111a 0001111b                       ........

1a004178 <lpcUarts>:
1a004178:	40081000 06020406 00180205 40081000     ...@...........@
1a004188:	09070509 00180706 40082000 00000000     ......... .@....
1a004198:	00190000 400c1000 07060107 001a0602     .......@........
1a0041a8:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0041b8:	02020302 001b0204 636b6974 69547265     ........tikcerTi
1a0041c8:	0072656d                                mer.

1a0041cc <gpioPinsInit>:
1a0041cc:	00000001 04020204 01040205 07010200     ................
1a0041dc:	0d030005 01000501 00020408 03040202     ................
1a0041ec:	04030200 00020000 03000407 0402030c     ................
1a0041fc:	01030905 02080504 03050403 05040402     ................
1a00420c:	000c0604 0b060802 06070300 05030009     ................
1a00421c:	05040706 0004060f 04040303 04040200     ................
1a00422c:	05020005 02000604 04080406 0a040c05     ................
1a00423c:	010e0504 0a000003 00001401 0012010f     ................
1a00424c:	11010d00 010c0000 03000010 03000707     ................
1a00425c:	0001000f 00000100 06000000 0603000a     ................
1a00426c:	05040806 00050610 01060403 04000300     ................
1a00427c:	0d050409 00000401 000f010b 00010200     ................
1a00428c:	01040000 08000001 00000201 00060109     ................
1a00429c:	00020901 02000504 01050401 05040202     ................
1a0042ac:	000a0202 0b020e00 020b0100 0c01000c     ................
1a0042bc:	02000004 00010400 02040102 04020200     ................
1a0042cc:	03020003 03000307 0004070b 05070c03     ................
1a0042dc:	070d0300 0e030006 05040102 00060401     ................
1a0042ec:	05040602 04050200 04020004 05040804     ................
1a0042fc:	0409040c 0a040d05 010e0504 08010005     ................
1a00430c:	00000a0d                                ....

1a004310 <__sf_fake_stderr>:
	...

1a004330 <__sf_fake_stdin>:
	...

1a004350 <__sf_fake_stdout>:
	...

1a004370 <_global_impure_ptr>:
1a004370:	10000044                                D...
