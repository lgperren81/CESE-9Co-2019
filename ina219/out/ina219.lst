
mis_programas/ina219/out/ina219.elf:     file format elf32-littlearm
mis_programas/ina219/out/ina219.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0006e9

Program Header:
0x70000001 off    0x00017ee4 vaddr 0x1a007ee4 paddr 0x1a007ee4 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000a98 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00007eec memsz 0x00007eec flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a007eec align 2**16
         filesz 0x000009f4 memsz 0x000009f4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007ee0  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000009f4  10000000  1a007eec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000209f4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000209f4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000209f4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000209f4  2**2
                  CONTENTS
  6 .bss          000000a0  100009f8  100009f8  000009f8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000209f4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000209f4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000209f4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000209f4  2**2
                  CONTENTS
 11 .init_array   00000004  1a007ee0  1a007ee0  00017ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a007ee4  1a007ee4  00017ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000209f4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000209f4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000209f4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000209f4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000209f4  2**2
                  CONTENTS
 18 .noinit       00000000  10000a98  10000a98  000209f4  2**2
                  CONTENTS
 19 .debug_info   0001e1ba  00000000  00000000  000209f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004288  00000000  00000000  0003ebae  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00007510  00000000  00000000  00042e36  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000a50  00000000  00000000  0004a346  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000009e0  00000000  00000000  0004ad96  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000d16c  00000000  00000000  0004b776  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0000dead  00000000  00000000  000588e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    000285ad  00000000  00000000  0006678f  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  0008ed3c  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  0008edbb  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000029cc  00000000  00000000  0008edf4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100009f8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a007ee0 l    d  .init_array	00000000 .init_array
1a007ee4 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000a98 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 example_ina219.c
00000000 l    df *ABS*	00000000 ina219.c
1a0003c0 l     F .text	000000fc ina219SetConfigAndCalibRegister
1a0004bc l     F .text	00000104 ina219GetRegisters
100009f8 l     O .bss	00000018 control
10000a10 l     O .bss	00000002 ina219_bus_volt
10000a12 l     O .bss	00000002 ina219_current
10000a14 l     O .bss	00000002 ina219_power
10000a16 l     O .bss	00000002 ina219_shunt_volt
00000000 l    df *ABS*	00000000 system.c
10000a18 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 board.c
1a00083c l     F .text	00000044 Board_LED_Init
1a000880 l     F .text	00000040 Board_TEC_Init
1a0008c0 l     F .text	00000040 Board_GPIO_Init
1a000900 l     F .text	00000030 Board_ADC_Init
1a000930 l     F .text	00000038 Board_SPI_Init
1a000968 l     F .text	00000024 Board_I2C_Init
1a0079b8 l     O .text	00000008 GpioButtons
1a0079c0 l     O .text	0000000c GpioLeds
1a0079cc l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0079e4 l     O .text	00000004 InitClkStates
1a0079e8 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000adc l     F .text	0000002c Chip_UART_GetIndex
1a007a5c l     O .text	00000008 UART_BClock
1a007a64 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000c84 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000c98 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000d4c l     F .text	000000a4 pll_calc_divs
1a000df0 l     F .text	0000010c pll_get_frac
1a000efc l     F .text	0000004c Chip_Clock_FindBaseClock
1a001170 l     F .text	00000022 Chip_Clock_GetDivRate
10000a1c l     O .bss	00000008 audio_usb_pll_freq
1a007a78 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a007ae4 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0017c0 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0017d4 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a007b2c l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10000a24 l     O .bss	00000004 callBackFuncParams
10000a28 l     O .bss	00000008 tickCounter
10000a30 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a001a18 l     F .text	00000030 i2cHardwareInit
1a001a48 l     F .text	0000003c i2cHardwareRead
1a001a84 l     F .text	0000003c i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001b10 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000a34 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
1a00485c l     F .text	00000084 __sbprintf
1a007ca0 l     O .text	00000010 blanks.8605
1a007cb0 l     O .text	00000010 zeroes.8606
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1a0049ac l     F .text	00000124 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a005aa0 l     F .text	00000050 std
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
1a007dc0 l     O .text	0000000c p05.7367
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a0073f4 l     F .text	00000076 __sprint_r.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
10000050 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a007ee4 l       .init_array	00000000 __init_array_end
1a007ee0 l       .bss_RAM5	00000000 __preinit_array_end
1a007ee0 l       .init_array	00000000 __init_array_start
1a007ee0 l       .bss_RAM5	00000000 __preinit_array_start
1a007820 g     F .text	0000002c .hidden __aeabi_dcmpun
1a000f94 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000788 g     F .text	00000012 _isatty_r
1a001540 g     F .text	0000000e Chip_I2CM_Xfer
1a002628 g     F .text	00000012 .hidden __aeabi_dcmple
1a002c3c g     F .text	0000009c _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a002564 g     F .text	0000007a .hidden __cmpdf2
1a001ac0 g     F .text	0000000e i2cInit
1a00079a g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a002564 g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0020d4 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a002c14 g     F .text	00000028 printf
1a000a22 g     F .text	00000008 __stdio_init
10000a74 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a0077b4 g     F .text	00000050 _wcrtomb_r
1a007368 g     F .text	00000020 __sseek
1a005afc g     F .text	00000058 __sinit
1a007704 g     F .text	000000b0 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001594 g     F .text	00000120 handleMasterXferState
1a000000 g       *ABS*	00000000 __vectors_start__
1a000d3e g     F .text	0000000c Chip_ADC_SetResolution
1a006924 g     F .text	0000000c __malloc_unlock
1a0019e4 g     F .text	00000034 SysTick_Handler
1a000b5c g     F .text	00000040 Chip_UART_SetBaud
10000a78 g     O .bss	00000001 __lock___arc4random_mutex
1a0006e4  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0009c4 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a006850 g     F .text	000000c6 memmove
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a006930 g     F .text	0000004c _Balloc
1a007eec g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a002554 g     F .text	0000008a .hidden __gtdf2
1a0005c0 g     F .text	00000020 ina219Init
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a001ace g     F .text	00000028 i2cRead
1a00077e g     F .text	0000000a _fstat_r
53ff71a6 g       *ABS*	00000000 __valid_user_code_checksum
1a007eec g       .ARM.exidx	00000000 _etext
1a0005e0 g     F .text	000000d4 ina219Read
1a0025f0 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a001212 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002a4c g     F .text	00000134 memcpy
1a0025e0 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a005af0 g     F .text	0000000c _cleanup_r
1a00205c g     F .text	00000022 .hidden __floatsidf
1a001740 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a00255c g     F .text	00000082 .hidden __ltdf2
1a002704 g     F .text	00000000 .hidden __aeabi_uldivmod
10000a98 g       .noinit	00000000 _noinit
1a002cd8 g     F .text	00000010 puts
10000a6c g     O .bss	00000004 SystemCoreClock
1a000b08 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a007cf8 g     O .text	000000c8 __mprec_tens
1a000180  w    F .text	00000002 UsageFault_Handler
1a001290 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
10000a68 g     O .bss	00000004 __malloc_top_pad
1a000a64 g     F .text	0000006c Board_SetupClocking
1a0006cc g     F .text	0000000c ina219ShowPower
20008000 g       *ABS*	00000000 __top_RamAHB32
1a00203c g     F .text	0000001e .hidden __aeabi_ui2d
1a006144 g     F .text	0000001c _localeconv_r
1a006ab0 g     F .text	00000012 __i2b
1a005df4 g     F .text	000002fc __sfvwrite_r
1a001710 g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a002734 g     F .text	000002cc .hidden __udivmoddi4
1a001db8 g     F .text	00000000 .hidden __aeabi_drsub
1a00081c g     F .text	00000020 _sbrk_r
1a0006b4 g     F .text	0000000c ina219ShowShuntVoltage
1a0079b4 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0007a4 g     F .text	0000004e _read_r
1a002614 g     F .text	00000012 .hidden __aeabi_dcmplt
1a0074e8 g     F .text	000000d0 _fclose_r
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
10000a60 g     O .bss	00000004 __malloc_max_sbrked_mem
1a002080 g     F .text	00000042 .hidden __extendsfdf2
1a002384 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a001dc4 g     F .text	00000276 .hidden __adddf3
1a007ee4 g       .ARM.exidx	00000000 __exidx_start
10000a7c g     O .bss	00000001 __lock___env_recursive_mutex
1a002130 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
10000a80 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a006f44 g     F .text	0000035c _realloc_r
1a002a04 g     F .text	00000048 __libc_init_array
1a007658 g     F .text	00000064 _fputwc_r
1a007cd0 g     O .text	00000028 __mprec_bigtens
1a00203c g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a006d5c g     F .text	00000036 __mcmp
1a0009e0 g     F .text	00000030 Board_Init
1a000772  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a002664 g     F .text	0000009e .hidden __aeabi_d2f
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000a98 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a0006e8 g     F .text	00000088 Reset_Handler
1a001968 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a00154e g     F .text	00000024 Chip_I2CM_XferBlocking
1a006a10 g     F .text	0000003e __hi0bits
1a0016d8 g     F .text	00000038 Chip_I2C_SetClockRate
1a00784c g     F .text	0000004e .hidden __fixdfsi
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000f48 g     F .text	0000004c Chip_Clock_EnableCrystal
10000a84 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001dc4 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a00255c g     F .text	00000082 .hidden __ledf2
1a006c10 g     F .text	000000a0 __pow5mult
1a0020c4 g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a0016b4 g     F .text	00000024 Chip_I2C_Init
1a00616c g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a001104 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a007b74 g     O .text	000000e6 gpioPinsInit
1a0017ec g     F .text	00000012 Chip_SSP_SetClockRate
1a002650 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a005b54 g     F .text	0000000c __sfp_lock_acquire
1a0067b0 g     F .text	00000000 memchr
1a005c0c g     F .text	000001e8 _free_r
1a0011ec g     F .text	00000026 Chip_Clock_GetBaseClock
1a0076bc g     F .text	0000001c __locale_mb_cur_max
1a00263c g     F .text	00000012 .hidden __aeabi_dcmpge
100009f8 g       .bss	00000000 _bss
1a000d0c g     F .text	00000032 Chip_ADC_SetSampleRate
1a001dc0 g     F .text	0000027a .hidden __aeabi_dsub
10000880 g     O .data	00000004 __malloc_sbrk_base
1a0020c4 g     F .text	0000006a .hidden __floatundidf
1a006cb0 g     F .text	000000ac __lshift
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0017fe g     F .text	0000003e Chip_SSP_SetBitRate
1a001572 g     F .text	00000002 Chip_GPIO_Init
1a0079e0 g     O .text	00000004 OscRateIn
1a0018c8 g     F .text	0000007c uartInit
1a0006d8 g     F .text	0000000c ina219ShowCurrent
1a006ac4 g     F .text	0000014a __multiply
10000a98 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a007390 g     F .text	00000064 strncpy
10000a38 g     O .bss	00000028 __malloc_current_mallinfo
1a006e80 g     F .text	000000c2 __d2b
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000774 g     F .text	0000000a _close_r
1a00205c g     F .text	00000022 .hidden __aeabi_i2d
1a001b44 g     F .text	000001ac gpioInit
1a0006c0 g     F .text	0000000c ina219ShowBusVoltage
1a006164 g     F .text	00000002 __retarget_lock_close_recursive
1a0048e0 g     F .text	000000cc __swsetup_r
1a002a00  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002384 g     F .text	000001d0 .hidden __divdf3
10000478 g     O .data	00000408 __malloc_av_
1a002130 g     F .text	00000254 .hidden __muldf3
1a007308 g     F .text	00000022 __sread
1a001cf0 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
10000000 g     O .data	00000001 addr
1a006918 g     F .text	0000000c __malloc_lock
1a0009b0 g     F .text	00000014 Board_UARTPutChar
1a001770 g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a005a44 g     F .text	0000005a _fflush_r
1a007480 g     F .text	00000068 _calloc_r
1a000fb0 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a006168 g     F .text	00000002 __retarget_lock_acquire_recursive
1a002b80 g     F .text	00000094 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	000000c0 main
10000a64 g     O .bss	00000004 __malloc_max_total_mem
1a006160 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a007388 g     F .text	00000008 __sclose
1a002664 g     F .text	0000009e .hidden __truncdfsf2
1a004ad0 g     F .text	00000e20 _dtoa_r
1a006260 g     F .text	00000548 _malloc_r
1a007804 g     F .text	0000001a __ascii_wctomb
1a0020d4 g     F .text	0000005a .hidden __aeabi_l2d
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a001220 g     F .text	0000003c Chip_Clock_EnableOpts
1a000a1a g     F .text	00000008 __stdio_getchar
1a005b6c g     F .text	000000a0 _malloc_trim_r
1a000fcc g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001084 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001874 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a001d80 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002564 g     F .text	0000007a .hidden __nedf2
1a000770  w    F .text	00000002 _fini
1a000ccc g     F .text	00000040 Chip_ADC_Init
10000a70 g     O .bss	00000004 g_pUsbApi
1a000a2c g     F .text	00000038 Board_SetupMuxing
1a000b9c g     F .text	000000e8 Chip_UART_SetBaudFDR
1a001944 g     F .text	0000000c tickRead
1a0007f2 g     F .text	00000028 _write_r
10000040 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000048 g     O .data	00000004 _impure_ptr
1a0058f0 g     F .text	00000154 __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a001444 g     F .text	000000fc Chip_I2CM_XferHandler
1a0076d8 g     F .text	0000002a __ascii_mbtowc
10000000 g       .data	00000000 _data
10000a98 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a00183c g     F .text	00000038 Chip_SSP_Init
1a001788 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a006170 g     F .text	0000005c __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a001af6 g     F .text	00000018 i2cWrite
1a00098c g     F .text	00000024 Board_Debug_Init
1a002600 g     F .text	00000012 .hidden __aeabi_dcmpeq
1a000a10 g     F .text	0000000a __stdio_putchar
100009f4 g       .data	00000000 _edata
1a001574 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a0075b8 g     F .text	0000009e __fputwc
10000a88 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a0012f0 g     F .text	00000154 Chip_SetupCoreClock
1a00732c g     F .text	0000003c __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
10000884 g     O .data	00000004 __malloc_trim_threshold
1a000000 g     O .text	00000040 g_pfnVectors
1a0060f0 g     F .text	00000052 _fwalk_reent
1a0012dc g     F .text	00000014 SystemCoreClockUpdate
1a006d94 g     F .text	000000ec __mdiff
1a00784c g     F .text	0000004e .hidden __aeabi_d2iz
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a005b60 g     F .text	0000000c __sfp_lock_release
1a007ddc g     O .text	00000101 _ctype_
1a002a00  w    F .text	00000002 .hidden __aeabi_idiv0
1a007820 g     F .text	0000002c .hidden __unorddf2
1a00017e  w    F .text	00000002 BusFault_Handler
10000a8c g     O .bss	00000001 __lock___dd_hash_mutex
1a0061cc g     F .text	00000094 __smakebuf_r
10000a90 g     O .bss	00000001 __lock___tz_mutex
1a002d00 g     F .text	000000dc strlen
1a00125c g     F .text	00000034 Chip_Clock_Enable
1a0025f0 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a002554 g     F .text	0000008a .hidden __gedf2
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a00746c g     F .text	00000014 __sprint_r
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a002080 g     F .text	00000042 .hidden __aeabi_f2d
1a001d0c g     F .text	00000074 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a001dc0 g     F .text	0000027a .hidden __subdf3
1a002de0 g     F .text	00001a7c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a006a50 g     F .text	0000005e __lo0bits
1a001950 g     F .text	00000018 tickPowerSet
1a0072a0 g     F .text	00000068 frexp
10000888 g     O .data	0000016c __global_locale
1a001194 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0018ac g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10000a94 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a000ad0 g     F .text	0000000c Board_SystemInit
1a006990 g     F .text	00000080 __multadd
1a00697c g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 e9 06 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a a6 71 ff 53     }............q.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	e5 19 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	f1 1c 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a007eec 	.word	0x1a007eec
1a000118:	10000000 	.word	0x10000000
1a00011c:	000009f4 	.word	0x000009f4
1a000120:	1a007eec 	.word	0x1a007eec
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a007eec 	.word	0x1a007eec
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a007eec 	.word	0x1a007eec
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a007eec 	.word	0x1a007eec
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100009f8 	.word	0x100009f8
1a000154:	000000a0 	.word	0x000000a0
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE RESET. */
int main(void){
1a000300:	b508      	push	{r3, lr}
   /* ------------- INICIALIZACIONES ------------- */

   boardConfig();
1a000302:	f001 fd03 	bl	1a001d0c <boardInit>
   uartConfig( UART_USB, 115200 ); // Inicializar periferico UART_USB
1a000306:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00030a:	2003      	movs	r0, #3
1a00030c:	f001 fadc 	bl	1a0018c8 <uartInit>

   // Inicializar INA219
   printf("Inicializando INA219...\r\n" );
1a000310:	4822      	ldr	r0, [pc, #136]	; (1a00039c <main+0x9c>)
1a000312:	f002 fce1 	bl	1a002cd8 <puts>
   bool_t status;
   status = ina219Init( addr );
1a000316:	4b22      	ldr	r3, [pc, #136]	; (1a0003a0 <main+0xa0>)
1a000318:	7818      	ldrb	r0, [r3, #0]
1a00031a:	f000 f951 	bl	1a0005c0 <ina219Init>

   if( status == FALSE ){
1a00031e:	b930      	cbnz	r0, 1a00032e <main+0x2e>
      printf( "INA219 no inicializado, verifique las conexiones:\r\n\r\n" );
1a000320:	4820      	ldr	r0, [pc, #128]	; (1a0003a4 <main+0xa4>)
1a000322:	f002 fcd9 	bl	1a002cd8 <puts>
      printf( "Se detiene el programa.\r\n" );
1a000326:	4820      	ldr	r0, [pc, #128]	; (1a0003a8 <main+0xa8>)
1a000328:	f002 fcd6 	bl	1a002cd8 <puts>
1a00032c:	e7fe      	b.n	1a00032c <main+0x2c>
      while(1);
   }
   printf("INA219 inicializado correctamente.\r\n\r\n" );
1a00032e:	481f      	ldr	r0, [pc, #124]	; (1a0003ac <main+0xac>)
1a000330:	f002 fcd2 	bl	1a002cd8 <puts>

   /* ------------- REPETIR POR SIEMPRE ------------- */
   while(TRUE){

      //Leer registros del INA219
	  ina219Read();
1a000334:	f000 f954 	bl	1a0005e0 <ina219Read>

	  // Imprimir los resultados
	  printf( "INA219 shunt voltage: %1.2f [mV]\r\n", ina219ShowShuntVoltage() );
1a000338:	f000 f9bc 	bl	1a0006b4 <ina219ShowShuntVoltage>
1a00033c:	ee10 0a10 	vmov	r0, s0
1a000340:	f001 fe9e 	bl	1a002080 <__aeabi_f2d>
1a000344:	4602      	mov	r2, r0
1a000346:	460b      	mov	r3, r1
1a000348:	4819      	ldr	r0, [pc, #100]	; (1a0003b0 <main+0xb0>)
1a00034a:	f002 fc63 	bl	1a002c14 <printf>
	  printf( "INA219 bus voltage: %.3f [V]\r\n", ina219ShowBusVoltage() );
1a00034e:	f000 f9b7 	bl	1a0006c0 <ina219ShowBusVoltage>
1a000352:	ee10 0a10 	vmov	r0, s0
1a000356:	f001 fe93 	bl	1a002080 <__aeabi_f2d>
1a00035a:	4602      	mov	r2, r0
1a00035c:	460b      	mov	r3, r1
1a00035e:	4815      	ldr	r0, [pc, #84]	; (1a0003b4 <main+0xb4>)
1a000360:	f002 fc58 	bl	1a002c14 <printf>
	  printf( "INA219 power: %.2f [mW]\r\n", ina219ShowPower() );
1a000364:	f000 f9b2 	bl	1a0006cc <ina219ShowPower>
1a000368:	ee10 0a10 	vmov	r0, s0
1a00036c:	f001 fe88 	bl	1a002080 <__aeabi_f2d>
1a000370:	4602      	mov	r2, r0
1a000372:	460b      	mov	r3, r1
1a000374:	4810      	ldr	r0, [pc, #64]	; (1a0003b8 <main+0xb8>)
1a000376:	f002 fc4d 	bl	1a002c14 <printf>
	  printf( "INA219 current: %.2f [mA]\r\n\r\n", ina219ShowCurrent () );
1a00037a:	f000 f9ad 	bl	1a0006d8 <ina219ShowCurrent>
1a00037e:	ee10 0a10 	vmov	r0, s0
1a000382:	f001 fe7d 	bl	1a002080 <__aeabi_f2d>
1a000386:	4602      	mov	r2, r0
1a000388:	460b      	mov	r3, r1
1a00038a:	480c      	ldr	r0, [pc, #48]	; (1a0003bc <main+0xbc>)
1a00038c:	f002 fc42 	bl	1a002c14 <printf>

	  delay(500);
1a000390:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000394:	2100      	movs	r1, #0
1a000396:	f001 fcf3 	bl	1a001d80 <delay>
1a00039a:	e7cb      	b.n	1a000334 <main+0x34>
1a00039c:	1a00789c 	.word	0x1a00789c
1a0003a0:	10000000 	.word	0x10000000
1a0003a4:	1a0078b8 	.word	0x1a0078b8
1a0003a8:	1a0078f0 	.word	0x1a0078f0
1a0003ac:	1a00790c 	.word	0x1a00790c
1a0003b0:	1a007934 	.word	0x1a007934
1a0003b4:	1a007958 	.word	0x1a007958
1a0003b8:	1a007978 	.word	0x1a007978
1a0003bc:	1a007994 	.word	0x1a007994

1a0003c0 <ina219SetConfigAndCalibRegister>:
/*==================[internal functions definition]==========================*/

// Función que carga los valores en el "Configuration Register" y "Calibration Register" y
// verifica que hallan sido correctamente escritos
static bool_t ina219SetConfigAndCalibRegister( void )
{
1a0003c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0003c4:	b088      	sub	sp, #32
	uint16_t calibRegister = 0x2000;								// Calibration Register (este valor debe ser calculado)
	uint8_t readDataBuffer;											// Register pointer address to read
	bool_t configRegisterOK;										// Bit para verificar escritura
	bool_t calibRegisterOK;											// Bit para verificar escritura

	control.BRNG_bit = INA219_CONFIG_BRNG_16V;						// Setting bus voltage range
1a0003c6:	4c3c      	ldr	r4, [pc, #240]	; (1a0004b8 <ina219SetConfigAndCalibRegister+0xf8>)
1a0003c8:	2500      	movs	r5, #0
1a0003ca:	7065      	strb	r5, [r4, #1]
	control.PG_bits = INA219_CONFIG_GAIN_40MV;						// Setting gain and range
1a0003cc:	70a5      	strb	r5, [r4, #2]
	control.BADC_bits = INA219_CONFIG_BADC_12BIT_1S;				// Setting bus ADC resolution/averaging
1a0003ce:	2303      	movs	r3, #3
1a0003d0:	70e3      	strb	r3, [r4, #3]
	control.SADC_bits = INA219_CONFIG_SADC_12BIT_1S;				// Setting shunt ADC resolution/averaging
1a0003d2:	7123      	strb	r3, [r4, #4]
	control.MODE_bits = INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;	// Setting operating mode
1a0003d4:	2207      	movs	r2, #7
1a0003d6:	7162      	strb	r2, [r4, #5]
	configRegister |= ( control.PG_bits & 0x03 ) << 11;				// Set bit PG1 and PG0 (12-11)
	configRegister |= ( control.BADC_bits & 0x0F ) << 7;			// Set bit BADC4/3/2/1 (10-9-8-7)
	configRegister |= ( control.SADC_bits & 0x0F ) << 3;			// Set bit SADC4/3/2/1 (6-5-4-3)
	configRegister |= ( control.MODE_bits & 0x07 );					// Set bit MODE3/2/1 (2-1-0)

	transmitDataBuffer[0] = INA219_CONFIGURATION;					// Configuration Register pointer address
1a0003d8:	f88d 501c 	strb.w	r5, [sp, #28]
	transmitDataBuffer[1] = (configRegister >> 8) & 0xFF;			// MSB 1st
1a0003dc:	2601      	movs	r6, #1
1a0003de:	f88d 601d 	strb.w	r6, [sp, #29]
	transmitDataBuffer[2] = configRegister & 0xFF;					// LSB 2nd
1a0003e2:	229f      	movs	r2, #159	; 0x9f
1a0003e4:	f88d 201e 	strb.w	r2, [sp, #30]
	i2cWrite(I2C0, control.address, transmitDataBuffer, 3, TRUE);	// Write Configuration Register
1a0003e8:	7821      	ldrb	r1, [r4, #0]
1a0003ea:	9600      	str	r6, [sp, #0]
1a0003ec:	aa07      	add	r2, sp, #28
1a0003ee:	4628      	mov	r0, r5
1a0003f0:	f001 fb81 	bl	1a001af6 <i2cWrite>

	delay(10);														// Wait
1a0003f4:	200a      	movs	r0, #10
1a0003f6:	2100      	movs	r1, #0
1a0003f8:	f001 fcc2 	bl	1a001d80 <delay>

	// Luego de escribir el registro lo leo, y comparo los valores
	readDataBuffer = INA219_CONFIGURATION;							// Register pointer address to read
1a0003fc:	aa08      	add	r2, sp, #32
1a0003fe:	f802 5d09 	strb.w	r5, [r2, #-9]!
    i2cRead( I2C0, control.address, &readDataBuffer, 1, TRUE, receiveDataBuffer, 2, TRUE );
1a000402:	7821      	ldrb	r1, [r4, #0]
1a000404:	9603      	str	r6, [sp, #12]
1a000406:	2302      	movs	r3, #2
1a000408:	9302      	str	r3, [sp, #8]
1a00040a:	ab06      	add	r3, sp, #24
1a00040c:	9301      	str	r3, [sp, #4]
1a00040e:	9600      	str	r6, [sp, #0]
1a000410:	4633      	mov	r3, r6
1a000412:	4628      	mov	r0, r5
1a000414:	f001 fb5b 	bl	1a001ace <i2cRead>
		if( ( transmitDataBuffer[1] == receiveDataBuffer[0] ) &&
1a000418:	f89d 201d 	ldrb.w	r2, [sp, #29]
1a00041c:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000420:	429a      	cmp	r2, r3
1a000422:	d033      	beq.n	1a00048c <ina219SetConfigAndCalibRegister+0xcc>
			( transmitDataBuffer[2] == receiveDataBuffer[1]) ) {
			configRegisterOK = TRUE;
		}
		else {
			configRegisterOK = FALSE;
1a000424:	f04f 0800 	mov.w	r8, #0
		}

	// Write Calibration Register
	transmitDataBuffer[0] = INA219_CALIBRATION;						// Calibration Register pointer address
1a000428:	2705      	movs	r7, #5
1a00042a:	f88d 701c 	strb.w	r7, [sp, #28]
	transmitDataBuffer[1] = (calibRegister >> 8) & 0xFF;			// MSB 1st
1a00042e:	2320      	movs	r3, #32
1a000430:	f88d 301d 	strb.w	r3, [sp, #29]
	transmitDataBuffer[2] = calibRegister & 0xFF;					// LSB 2nd
1a000434:	2500      	movs	r5, #0
1a000436:	f88d 501e 	strb.w	r5, [sp, #30]
	i2cWrite(I2C0, control.address, transmitDataBuffer, 3, TRUE);	// Write Calibration Register
1a00043a:	4e1f      	ldr	r6, [pc, #124]	; (1a0004b8 <ina219SetConfigAndCalibRegister+0xf8>)
1a00043c:	7831      	ldrb	r1, [r6, #0]
1a00043e:	2401      	movs	r4, #1
1a000440:	9400      	str	r4, [sp, #0]
1a000442:	2303      	movs	r3, #3
1a000444:	aa07      	add	r2, sp, #28
1a000446:	4628      	mov	r0, r5
1a000448:	f001 fb55 	bl	1a001af6 <i2cWrite>

	delay(10);														// Wait
1a00044c:	200a      	movs	r0, #10
1a00044e:	2100      	movs	r1, #0
1a000450:	f001 fc96 	bl	1a001d80 <delay>

	// Luego de escribir el registro lo leo, y comparo los valores
	readDataBuffer = INA219_CALIBRATION;							// Register pointer address to read
1a000454:	aa08      	add	r2, sp, #32
1a000456:	f802 7d09 	strb.w	r7, [r2, #-9]!
	i2cRead( I2C0, control.address, &readDataBuffer, 1, TRUE, receiveDataBuffer, 2, TRUE );
1a00045a:	7831      	ldrb	r1, [r6, #0]
1a00045c:	9403      	str	r4, [sp, #12]
1a00045e:	2302      	movs	r3, #2
1a000460:	9302      	str	r3, [sp, #8]
1a000462:	ab06      	add	r3, sp, #24
1a000464:	9301      	str	r3, [sp, #4]
1a000466:	9400      	str	r4, [sp, #0]
1a000468:	4623      	mov	r3, r4
1a00046a:	4628      	mov	r0, r5
1a00046c:	f001 fb2f 	bl	1a001ace <i2cRead>
		if( ( transmitDataBuffer[1] == receiveDataBuffer[0] ) &&
1a000470:	f89d 201d 	ldrb.w	r2, [sp, #29]
1a000474:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000478:	429a      	cmp	r2, r3
1a00047a:	d012      	beq.n	1a0004a2 <ina219SetConfigAndCalibRegister+0xe2>
			( transmitDataBuffer[2] == receiveDataBuffer[1]) ) {
				calibRegisterOK = TRUE;
			}
			else {
				calibRegisterOK = FALSE;
1a00047c:	2000      	movs	r0, #0
			}

		if( ( configRegisterOK == TRUE ) && ( calibRegisterOK == TRUE) ) {
1a00047e:	f1b8 0f00 	cmp.w	r8, #0
1a000482:	d100      	bne.n	1a000486 <ina219SetConfigAndCalibRegister+0xc6>
			return TRUE;
		}
		else {
			return FALSE;
1a000484:	2000      	movs	r0, #0
		}
}
1a000486:	b008      	add	sp, #32
1a000488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			( transmitDataBuffer[2] == receiveDataBuffer[1]) ) {
1a00048c:	f89d 201e 	ldrb.w	r2, [sp, #30]
1a000490:	f89d 3019 	ldrb.w	r3, [sp, #25]
		if( ( transmitDataBuffer[1] == receiveDataBuffer[0] ) &&
1a000494:	429a      	cmp	r2, r3
1a000496:	d001      	beq.n	1a00049c <ina219SetConfigAndCalibRegister+0xdc>
			configRegisterOK = FALSE;
1a000498:	46a8      	mov	r8, r5
1a00049a:	e7c5      	b.n	1a000428 <ina219SetConfigAndCalibRegister+0x68>
			configRegisterOK = TRUE;
1a00049c:	f04f 0801 	mov.w	r8, #1
1a0004a0:	e7c2      	b.n	1a000428 <ina219SetConfigAndCalibRegister+0x68>
			( transmitDataBuffer[2] == receiveDataBuffer[1]) ) {
1a0004a2:	f89d 201e 	ldrb.w	r2, [sp, #30]
1a0004a6:	f89d 3019 	ldrb.w	r3, [sp, #25]
		if( ( transmitDataBuffer[1] == receiveDataBuffer[0] ) &&
1a0004aa:	429a      	cmp	r2, r3
1a0004ac:	d001      	beq.n	1a0004b2 <ina219SetConfigAndCalibRegister+0xf2>
				calibRegisterOK = FALSE;
1a0004ae:	4628      	mov	r0, r5
1a0004b0:	e7e5      	b.n	1a00047e <ina219SetConfigAndCalibRegister+0xbe>
				calibRegisterOK = TRUE;
1a0004b2:	2001      	movs	r0, #1
1a0004b4:	e7e3      	b.n	1a00047e <ina219SetConfigAndCalibRegister+0xbe>
1a0004b6:	bf00      	nop
1a0004b8:	100009f8 	.word	0x100009f8

1a0004bc <ina219GetRegisters>:

// Función que realiza la lectura de los registros "Shunt Voltage", "Bus Voltage", "Power Register" y
// "Current Register"
static bool_t ina219GetRegisters( int16_t *shunt_volt, int16_t *bus_volt, int16_t *power, int16_t *current )
{
1a0004bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0004c0:	b089      	sub	sp, #36	; 0x24
1a0004c2:	4683      	mov	fp, r0
1a0004c4:	468a      	mov	sl, r1
1a0004c6:	4691      	mov	r9, r2
1a0004c8:	9305      	str	r3, [sp, #20]
	uint8_t receiveDataBuffer[2];									// Array donde almaceno lo leído
	uint8_t dataToReadBuffer;										// Register pointer address to read
	uint8_t ready;													// Conversion Ready

	dataToReadBuffer = INA219_BUS_VOLTAGE_OUT;			 			// Bus voltage measurement data
1a0004ca:	2002      	movs	r0, #2
1a0004cc:	aa08      	add	r2, sp, #32
1a0004ce:	f802 0d05 	strb.w	r0, [r2, #-5]!
	i2cRead( I2C0, control.address, &dataToReadBuffer, 1, TRUE, receiveDataBuffer, 2, TRUE);
1a0004d2:	4b3a      	ldr	r3, [pc, #232]	; (1a0005bc <ina219GetRegisters+0x100>)
1a0004d4:	7819      	ldrb	r1, [r3, #0]
1a0004d6:	2301      	movs	r3, #1
1a0004d8:	9303      	str	r3, [sp, #12]
1a0004da:	9002      	str	r0, [sp, #8]
1a0004dc:	a807      	add	r0, sp, #28
1a0004de:	9001      	str	r0, [sp, #4]
1a0004e0:	9300      	str	r3, [sp, #0]
1a0004e2:	2000      	movs	r0, #0
1a0004e4:	f001 faf3 	bl	1a001ace <i2cRead>
	ready = receiveDataBuffer[1] & 0x2;								// Consulto el bit CNVR
1a0004e8:	f89d 301d 	ldrb.w	r3, [sp, #29]
	if ( ready == 0x2 ) {											// Si CNVR = 1 comienzo lectura
1a0004ec:	f013 0f02 	tst.w	r3, #2
1a0004f0:	d103      	bne.n	1a0004fa <ina219GetRegisters+0x3e>
		*current = ( *current << 8 ) | receiveDataBuffer[1];		 // LSB 2nd

		return( TRUE );			// Si se realizaron todas las lecturas devuelve TRUE
	}
	else {
		return( FALSE );		// Si CNVR = 0, devuelvo FALSE
1a0004f2:	2000      	movs	r0, #0
	}
}
1a0004f4:	b009      	add	sp, #36	; 0x24
1a0004f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dataToReadBuffer = INA219_SHUNT_VOLTAGE_OUT;		 		// Shunt voltage measurement data
1a0004fa:	2401      	movs	r4, #1
1a0004fc:	ad08      	add	r5, sp, #32
1a0004fe:	f805 4d05 	strb.w	r4, [r5, #-5]!
		i2cRead( I2C0, control.address, &dataToReadBuffer, 1, TRUE, receiveDataBuffer, 2, TRUE );
1a000502:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1a0005bc <ina219GetRegisters+0x100>
1a000506:	f898 1000 	ldrb.w	r1, [r8]
1a00050a:	9403      	str	r4, [sp, #12]
1a00050c:	2602      	movs	r6, #2
1a00050e:	9602      	str	r6, [sp, #8]
1a000510:	af07      	add	r7, sp, #28
1a000512:	9701      	str	r7, [sp, #4]
1a000514:	9400      	str	r4, [sp, #0]
1a000516:	4623      	mov	r3, r4
1a000518:	462a      	mov	r2, r5
1a00051a:	2000      	movs	r0, #0
1a00051c:	f001 fad7 	bl	1a001ace <i2cRead>
		*shunt_volt = receiveDataBuffer[0];                         // MSB 1st
1a000520:	f89d 201c 	ldrb.w	r2, [sp, #28]
		*shunt_volt = ( *shunt_volt << 8 ) | receiveDataBuffer[1];  // LSB 2nd
1a000524:	f89d 301d 	ldrb.w	r3, [sp, #29]
1a000528:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00052c:	f8ab 3000 	strh.w	r3, [fp]
		dataToReadBuffer = INA219_BUS_VOLTAGE_OUT;			 		 // Bus voltage measurement data
1a000530:	f88d 601b 	strb.w	r6, [sp, #27]
		i2cRead( I2C0, control.address, &dataToReadBuffer, 1, TRUE, receiveDataBuffer, 2, TRUE);
1a000534:	f898 1000 	ldrb.w	r1, [r8]
1a000538:	9403      	str	r4, [sp, #12]
1a00053a:	9602      	str	r6, [sp, #8]
1a00053c:	9701      	str	r7, [sp, #4]
1a00053e:	9400      	str	r4, [sp, #0]
1a000540:	4623      	mov	r3, r4
1a000542:	462a      	mov	r2, r5
1a000544:	2000      	movs	r0, #0
1a000546:	f001 fac2 	bl	1a001ace <i2cRead>
		*bus_volt = receiveDataBuffer[0];				 			 // MSB 1st
1a00054a:	f89d 201c 	ldrb.w	r2, [sp, #28]
		*bus_volt = ( *bus_volt << 8 ) | receiveDataBuffer[1];	     // LSB 2nd
1a00054e:	f89d 301d 	ldrb.w	r3, [sp, #29]
1a000552:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		*bus_volt = ( *bus_volt >> 3 );								 // No se utilizan los 3 bits menos significativos
1a000556:	f343 03cc 	sbfx	r3, r3, #3, #13
1a00055a:	f8aa 3000 	strh.w	r3, [sl]
		dataToReadBuffer = INA219_POWER_OUT;				 		 // Power measurement data
1a00055e:	2303      	movs	r3, #3
1a000560:	f88d 301b 	strb.w	r3, [sp, #27]
		i2cRead( I2C0, control.address, &dataToReadBuffer, 1, TRUE, receiveDataBuffer, 2, TRUE);
1a000564:	f898 1000 	ldrb.w	r1, [r8]
1a000568:	9403      	str	r4, [sp, #12]
1a00056a:	9602      	str	r6, [sp, #8]
1a00056c:	9701      	str	r7, [sp, #4]
1a00056e:	9400      	str	r4, [sp, #0]
1a000570:	4623      	mov	r3, r4
1a000572:	462a      	mov	r2, r5
1a000574:	2000      	movs	r0, #0
1a000576:	f001 faaa 	bl	1a001ace <i2cRead>
		*power = receiveDataBuffer[0];					 			 // MSB 1st
1a00057a:	f89d 201c 	ldrb.w	r2, [sp, #28]
		*power = ( *power << 8 ) | receiveDataBuffer[1];             // LSB 2nd
1a00057e:	f89d 301d 	ldrb.w	r3, [sp, #29]
1a000582:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000586:	f8a9 3000 	strh.w	r3, [r9]
		dataToReadBuffer = INA219_CURRENT_OUT;				 		 // Value of the current flowing through the shunt resistor
1a00058a:	2304      	movs	r3, #4
1a00058c:	f88d 301b 	strb.w	r3, [sp, #27]
		i2cRead( I2C0, control.address, &dataToReadBuffer, 1, TRUE, receiveDataBuffer, 2, TRUE);
1a000590:	f898 1000 	ldrb.w	r1, [r8]
1a000594:	9403      	str	r4, [sp, #12]
1a000596:	9602      	str	r6, [sp, #8]
1a000598:	9701      	str	r7, [sp, #4]
1a00059a:	9400      	str	r4, [sp, #0]
1a00059c:	4623      	mov	r3, r4
1a00059e:	462a      	mov	r2, r5
1a0005a0:	2000      	movs	r0, #0
1a0005a2:	f001 fa94 	bl	1a001ace <i2cRead>
		*current = receiveDataBuffer[0];					 		 // MSB 1st
1a0005a6:	f89d 201c 	ldrb.w	r2, [sp, #28]
		*current = ( *current << 8 ) | receiveDataBuffer[1];		 // LSB 2nd
1a0005aa:	f89d 301d 	ldrb.w	r3, [sp, #29]
1a0005ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0005b2:	9a05      	ldr	r2, [sp, #20]
1a0005b4:	8013      	strh	r3, [r2, #0]
		return( TRUE );			// Si se realizaron todas las lecturas devuelve TRUE
1a0005b6:	4620      	mov	r0, r4
1a0005b8:	e79c      	b.n	1a0004f4 <ina219GetRegisters+0x38>
1a0005ba:	bf00      	nop
1a0005bc:	100009f8 	.word	0x100009f8

1a0005c0 <ina219Init>:
/*=======================[external functions definition]=========================*/

// Función que inicializa al INA219, escribiendo el Registro de Configuración y el
// Registro de Calibración
bool_t ina219Init( INA219_address_t address )
{
1a0005c0:	b510      	push	{r4, lr}
1a0005c2:	4604      	mov	r4, r0
	bool_t writeOK;

	i2cInit(I2C0, INA219_I2C_RATE);                      // Starting I2C bus
1a0005c4:	4904      	ldr	r1, [pc, #16]	; (1a0005d8 <ina219Init+0x18>)
1a0005c6:	2000      	movs	r0, #0
1a0005c8:	f001 fa7a 	bl	1a001ac0 <i2cInit>
	control.address = address;                           // Set slave address
1a0005cc:	4b03      	ldr	r3, [pc, #12]	; (1a0005dc <ina219Init+0x1c>)
1a0005ce:	701c      	strb	r4, [r3, #0]

	writeOK = ina219SetConfigAndCalibRegister();		 // Set configuration and calibration registers for INA219
1a0005d0:	f7ff fef6 	bl	1a0003c0 <ina219SetConfigAndCalibRegister>

	return writeOK;										 // Successful init, return TRUE
}
1a0005d4:	bd10      	pop	{r4, pc}
1a0005d6:	bf00      	nop
1a0005d8:	00061a80 	.word	0x00061a80
1a0005dc:	100009f8 	.word	0x100009f8

1a0005e0 <ina219Read>:

// Función que realiza el casteo a float de los registros leídos
bool_t ina219Read()
{
1a0005e0:	b538      	push	{r3, r4, r5, lr}
	readOK = ina219GetRegisters( &ina219_shunt_volt, &ina219_bus_volt, &ina219_power, &ina219_current );
1a0005e2:	4b2f      	ldr	r3, [pc, #188]	; (1a0006a0 <ina219Read+0xc0>)
1a0005e4:	4a2f      	ldr	r2, [pc, #188]	; (1a0006a4 <ina219Read+0xc4>)
1a0005e6:	4930      	ldr	r1, [pc, #192]	; (1a0006a8 <ina219Read+0xc8>)
1a0005e8:	4830      	ldr	r0, [pc, #192]	; (1a0006ac <ina219Read+0xcc>)
1a0005ea:	f7ff ff67 	bl	1a0004bc <ina219GetRegisters>
			 if (readOK == TRUE) {
1a0005ee:	2801      	cmp	r0, #1
1a0005f0:	d002      	beq.n	1a0005f8 <ina219Read+0x18>
				control.power = (float)ina219_power;
				control.current = (float)ina219_current * 0.05;
				return TRUE;
			 }
			 else {
				return FALSE;
1a0005f2:	2400      	movs	r4, #0
			 }
}
1a0005f4:	4620      	mov	r0, r4
1a0005f6:	bd38      	pop	{r3, r4, r5, pc}
1a0005f8:	4604      	mov	r4, r0
				control.shunt_volt = (float)ina219_shunt_volt * 0.01;
1a0005fa:	4b2c      	ldr	r3, [pc, #176]	; (1a0006ac <ina219Read+0xcc>)
1a0005fc:	f9b3 0000 	ldrsh.w	r0, [r3]
1a000600:	ee07 0a90 	vmov	s15, r0
1a000604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000608:	ee17 0a90 	vmov	r0, s15
1a00060c:	f001 fd38 	bl	1a002080 <__aeabi_f2d>
1a000610:	a31d      	add	r3, pc, #116	; (adr r3, 1a000688 <ina219Read+0xa8>)
1a000612:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000616:	f001 fd8b 	bl	1a002130 <__aeabi_dmul>
1a00061a:	f002 f823 	bl	1a002664 <__aeabi_d2f>
1a00061e:	4d24      	ldr	r5, [pc, #144]	; (1a0006b0 <ina219Read+0xd0>)
1a000620:	60a8      	str	r0, [r5, #8]
				control.bus_volt = (float)ina219_bus_volt * 0.004;
1a000622:	4b21      	ldr	r3, [pc, #132]	; (1a0006a8 <ina219Read+0xc8>)
1a000624:	f9b3 0000 	ldrsh.w	r0, [r3]
1a000628:	ee07 0a90 	vmov	s15, r0
1a00062c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000630:	ee17 0a90 	vmov	r0, s15
1a000634:	f001 fd24 	bl	1a002080 <__aeabi_f2d>
1a000638:	a315      	add	r3, pc, #84	; (adr r3, 1a000690 <ina219Read+0xb0>)
1a00063a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00063e:	f001 fd77 	bl	1a002130 <__aeabi_dmul>
1a000642:	f002 f80f 	bl	1a002664 <__aeabi_d2f>
1a000646:	60e8      	str	r0, [r5, #12]
				control.power = (float)ina219_power;
1a000648:	4b16      	ldr	r3, [pc, #88]	; (1a0006a4 <ina219Read+0xc4>)
1a00064a:	f9b3 3000 	ldrsh.w	r3, [r3]
1a00064e:	ee07 3a90 	vmov	s15, r3
1a000652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000656:	edc5 7a04 	vstr	s15, [r5, #16]
				control.current = (float)ina219_current * 0.05;
1a00065a:	4b11      	ldr	r3, [pc, #68]	; (1a0006a0 <ina219Read+0xc0>)
1a00065c:	f9b3 0000 	ldrsh.w	r0, [r3]
1a000660:	ee07 0a90 	vmov	s15, r0
1a000664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000668:	ee17 0a90 	vmov	r0, s15
1a00066c:	f001 fd08 	bl	1a002080 <__aeabi_f2d>
1a000670:	a309      	add	r3, pc, #36	; (adr r3, 1a000698 <ina219Read+0xb8>)
1a000672:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000676:	f001 fd5b 	bl	1a002130 <__aeabi_dmul>
1a00067a:	f001 fff3 	bl	1a002664 <__aeabi_d2f>
1a00067e:	6168      	str	r0, [r5, #20]
				return TRUE;
1a000680:	e7b8      	b.n	1a0005f4 <ina219Read+0x14>
1a000682:	bf00      	nop
1a000684:	f3af 8000 	nop.w
1a000688:	47ae147b 	.word	0x47ae147b
1a00068c:	3f847ae1 	.word	0x3f847ae1
1a000690:	d2f1a9fc 	.word	0xd2f1a9fc
1a000694:	3f70624d 	.word	0x3f70624d
1a000698:	9999999a 	.word	0x9999999a
1a00069c:	3fa99999 	.word	0x3fa99999
1a0006a0:	10000a12 	.word	0x10000a12
1a0006a4:	10000a14 	.word	0x10000a14
1a0006a8:	10000a10 	.word	0x10000a10
1a0006ac:	10000a16 	.word	0x10000a16
1a0006b0:	100009f8 	.word	0x100009f8

1a0006b4 <ina219ShowShuntVoltage>:

float ina219ShowShuntVoltage( void )
{
	return control.shunt_volt;
}
1a0006b4:	4b01      	ldr	r3, [pc, #4]	; (1a0006bc <ina219ShowShuntVoltage+0x8>)
1a0006b6:	ed93 0a02 	vldr	s0, [r3, #8]
1a0006ba:	4770      	bx	lr
1a0006bc:	100009f8 	.word	0x100009f8

1a0006c0 <ina219ShowBusVoltage>:

float ina219ShowBusVoltage( void )
{
	return control.bus_volt;
}
1a0006c0:	4b01      	ldr	r3, [pc, #4]	; (1a0006c8 <ina219ShowBusVoltage+0x8>)
1a0006c2:	ed93 0a03 	vldr	s0, [r3, #12]
1a0006c6:	4770      	bx	lr
1a0006c8:	100009f8 	.word	0x100009f8

1a0006cc <ina219ShowPower>:

float ina219ShowPower( void )
{
	return control.power;
}
1a0006cc:	4b01      	ldr	r3, [pc, #4]	; (1a0006d4 <ina219ShowPower+0x8>)
1a0006ce:	ed93 0a04 	vldr	s0, [r3, #16]
1a0006d2:	4770      	bx	lr
1a0006d4:	100009f8 	.word	0x100009f8

1a0006d8 <ina219ShowCurrent>:

float ina219ShowCurrent( void )
{
	return control.current;
}
1a0006d8:	4b01      	ldr	r3, [pc, #4]	; (1a0006e0 <ina219ShowCurrent+0x8>)
1a0006da:	ed93 0a05 	vldr	s0, [r3, #20]
1a0006de:	4770      	bx	lr
1a0006e0:	100009f8 	.word	0x100009f8

1a0006e4 <initialise_monitor_handles>:
}
1a0006e4:	4770      	bx	lr
1a0006e6:	Address 0x000000001a0006e6 is out of bounds.


1a0006e8 <Reset_Handler>:
void Reset_Handler(void) {
1a0006e8:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0006ea:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0006ec:	4b19      	ldr	r3, [pc, #100]	; (1a000754 <Reset_Handler+0x6c>)
1a0006ee:	4a1a      	ldr	r2, [pc, #104]	; (1a000758 <Reset_Handler+0x70>)
1a0006f0:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0006f2:	3304      	adds	r3, #4
1a0006f4:	4a19      	ldr	r2, [pc, #100]	; (1a00075c <Reset_Handler+0x74>)
1a0006f6:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0006f8:	2300      	movs	r3, #0
1a0006fa:	e005      	b.n	1a000708 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0006fc:	4a18      	ldr	r2, [pc, #96]	; (1a000760 <Reset_Handler+0x78>)
1a0006fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000702:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000706:	3301      	adds	r3, #1
1a000708:	2b07      	cmp	r3, #7
1a00070a:	d9f7      	bls.n	1a0006fc <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a00070c:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00070e:	4b15      	ldr	r3, [pc, #84]	; (1a000764 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000710:	e007      	b.n	1a000722 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000712:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000716:	689a      	ldr	r2, [r3, #8]
1a000718:	6859      	ldr	r1, [r3, #4]
1a00071a:	6818      	ldr	r0, [r3, #0]
1a00071c:	f7ff fd35 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000720:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000722:	4a11      	ldr	r2, [pc, #68]	; (1a000768 <Reset_Handler+0x80>)
1a000724:	4293      	cmp	r3, r2
1a000726:	d3f4      	bcc.n	1a000712 <Reset_Handler+0x2a>
1a000728:	e006      	b.n	1a000738 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00072a:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a00072c:	6859      	ldr	r1, [r3, #4]
1a00072e:	f854 0b08 	ldr.w	r0, [r4], #8
1a000732:	f7ff fd39 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000736:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000738:	4a0c      	ldr	r2, [pc, #48]	; (1a00076c <Reset_Handler+0x84>)
1a00073a:	4293      	cmp	r3, r2
1a00073c:	d3f5      	bcc.n	1a00072a <Reset_Handler+0x42>
    SystemInit();
1a00073e:	f001 f899 	bl	1a001874 <SystemInit>
    __libc_init_array();
1a000742:	f002 f95f 	bl	1a002a04 <__libc_init_array>
    initialise_monitor_handles();
1a000746:	f7ff ffcd 	bl	1a0006e4 <initialise_monitor_handles>
    main();
1a00074a:	f7ff fdd9 	bl	1a000300 <main>
        __asm__ volatile("wfi");
1a00074e:	bf30      	wfi
1a000750:	e7fd      	b.n	1a00074e <Reset_Handler+0x66>
1a000752:	bf00      	nop
1a000754:	40053100 	.word	0x40053100
1a000758:	10df1000 	.word	0x10df1000
1a00075c:	01dff7ff 	.word	0x01dff7ff
1a000760:	e000e280 	.word	0xe000e280
1a000764:	1a000114 	.word	0x1a000114
1a000768:	1a000150 	.word	0x1a000150
1a00076c:	1a000178 	.word	0x1a000178

1a000770 <_fini>:
void _fini(void) {}
1a000770:	4770      	bx	lr

1a000772 <_init>:
void _init(void) {}
1a000772:	4770      	bx	lr

1a000774 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000774:	2309      	movs	r3, #9
1a000776:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00077c:	4770      	bx	lr

1a00077e <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a00077e:	2358      	movs	r3, #88	; 0x58
1a000780:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000786:	4770      	bx	lr

1a000788 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000788:	2902      	cmp	r1, #2
1a00078a:	d801      	bhi.n	1a000790 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a00078c:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a00078e:	4770      	bx	lr
       SET_ERR(EBADF);
1a000790:	2309      	movs	r3, #9
1a000792:	6003      	str	r3, [r0, #0]
       return -1;
1a000794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000798:	4770      	bx	lr

1a00079a <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00079a:	2358      	movs	r3, #88	; 0x58
1a00079c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00079e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0007a2:	4770      	bx	lr

1a0007a4 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a0007a4:	2902      	cmp	r1, #2
1a0007a6:	d81f      	bhi.n	1a0007e8 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0007a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0007ac:	461d      	mov	r5, r3
1a0007ae:	4617      	mov	r7, r2
1a0007b0:	4606      	mov	r6, r0
  size_t i = 0;
1a0007b2:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0007b4:	42ac      	cmp	r4, r5
1a0007b6:	d211      	bcs.n	1a0007dc <_read_r+0x38>
         int c = __stdio_getchar();
1a0007b8:	f000 f92f 	bl	1a000a1a <__stdio_getchar>
         if( c != -1 ){
1a0007bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0007c0:	d0f8      	beq.n	1a0007b4 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a0007c2:	f104 0801 	add.w	r8, r4, #1
1a0007c6:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a0007c8:	280d      	cmp	r0, #13
1a0007ca:	d003      	beq.n	1a0007d4 <_read_r+0x30>
1a0007cc:	280a      	cmp	r0, #10
1a0007ce:	d001      	beq.n	1a0007d4 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0007d0:	4644      	mov	r4, r8
1a0007d2:	e7ef      	b.n	1a0007b4 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0007d4:	f000 f921 	bl	1a000a1a <__stdio_getchar>
               return i;
1a0007d8:	4640      	mov	r0, r8
1a0007da:	e003      	b.n	1a0007e4 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a0007dc:	2313      	movs	r3, #19
1a0007de:	6033      	str	r3, [r6, #0]
      return -1;
1a0007e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a0007e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a0007e8:	2313      	movs	r3, #19
1a0007ea:	6003      	str	r3, [r0, #0]
      return -1;
1a0007ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0007f0:	4770      	bx	lr

1a0007f2 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a0007f2:	2902      	cmp	r1, #2
1a0007f4:	d80c      	bhi.n	1a000810 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a0007f6:	b570      	push	{r4, r5, r6, lr}
1a0007f8:	461d      	mov	r5, r3
1a0007fa:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0007fc:	2400      	movs	r4, #0
1a0007fe:	e003      	b.n	1a000808 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a000800:	5d30      	ldrb	r0, [r6, r4]
1a000802:	f000 f905 	bl	1a000a10 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000806:	3401      	adds	r4, #1
1a000808:	42ac      	cmp	r4, r5
1a00080a:	d3f9      	bcc.n	1a000800 <_write_r+0xe>
       return n;
1a00080c:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a00080e:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000810:	2313      	movs	r3, #19
1a000812:	6003      	str	r3, [r0, #0]
       return -1;
1a000814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000818:	4770      	bx	lr
1a00081a:	Address 0x000000001a00081a is out of bounds.


1a00081c <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a00081c:	4b05      	ldr	r3, [pc, #20]	; (1a000834 <_sbrk_r+0x18>)
1a00081e:	681b      	ldr	r3, [r3, #0]
1a000820:	b123      	cbz	r3, 1a00082c <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000822:	4b04      	ldr	r3, [pc, #16]	; (1a000834 <_sbrk_r+0x18>)
1a000824:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000826:	4401      	add	r1, r0
1a000828:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a00082a:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a00082c:	4b01      	ldr	r3, [pc, #4]	; (1a000834 <_sbrk_r+0x18>)
1a00082e:	4a02      	ldr	r2, [pc, #8]	; (1a000838 <_sbrk_r+0x1c>)
1a000830:	601a      	str	r2, [r3, #0]
1a000832:	e7f6      	b.n	1a000822 <_sbrk_r+0x6>
1a000834:	10000a18 	.word	0x10000a18
1a000838:	10000a98 	.word	0x10000a98

1a00083c <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00083c:	2200      	movs	r2, #0
1a00083e:	2a05      	cmp	r2, #5
1a000840:	d819      	bhi.n	1a000876 <Board_LED_Init+0x3a>
{
1a000842:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000844:	490c      	ldr	r1, [pc, #48]	; (1a000878 <Board_LED_Init+0x3c>)
1a000846:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00084a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00084e:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000850:	4b0a      	ldr	r3, [pc, #40]	; (1a00087c <Board_LED_Init+0x40>)
1a000852:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000856:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00085a:	2001      	movs	r0, #1
1a00085c:	40a0      	lsls	r0, r4
1a00085e:	4301      	orrs	r1, r0
1a000860:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000864:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000868:	2100      	movs	r1, #0
1a00086a:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00086c:	3201      	adds	r2, #1
1a00086e:	2a05      	cmp	r2, #5
1a000870:	d9e8      	bls.n	1a000844 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a000872:	bc70      	pop	{r4, r5, r6}
1a000874:	4770      	bx	lr
1a000876:	4770      	bx	lr
1a000878:	1a0079c0 	.word	0x1a0079c0
1a00087c:	400f4000 	.word	0x400f4000

1a000880 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000880:	2300      	movs	r3, #0
1a000882:	2b03      	cmp	r3, #3
1a000884:	d816      	bhi.n	1a0008b4 <Board_TEC_Init+0x34>
{
1a000886:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000888:	490b      	ldr	r1, [pc, #44]	; (1a0008b8 <Board_TEC_Init+0x38>)
1a00088a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00088e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000892:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000894:	4c09      	ldr	r4, [pc, #36]	; (1a0008bc <Board_TEC_Init+0x3c>)
1a000896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00089a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00089e:	2001      	movs	r0, #1
1a0008a0:	40a8      	lsls	r0, r5
1a0008a2:	ea21 0100 	bic.w	r1, r1, r0
1a0008a6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0008aa:	3301      	adds	r3, #1
1a0008ac:	2b03      	cmp	r3, #3
1a0008ae:	d9eb      	bls.n	1a000888 <Board_TEC_Init+0x8>
   }
}
1a0008b0:	bc30      	pop	{r4, r5}
1a0008b2:	4770      	bx	lr
1a0008b4:	4770      	bx	lr
1a0008b6:	bf00      	nop
1a0008b8:	1a0079b8 	.word	0x1a0079b8
1a0008bc:	400f4000 	.word	0x400f4000

1a0008c0 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0008c0:	2300      	movs	r3, #0
1a0008c2:	2b08      	cmp	r3, #8
1a0008c4:	d816      	bhi.n	1a0008f4 <Board_GPIO_Init+0x34>
{
1a0008c6:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0008c8:	490b      	ldr	r1, [pc, #44]	; (1a0008f8 <Board_GPIO_Init+0x38>)
1a0008ca:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0008ce:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0008d2:	784d      	ldrb	r5, [r1, #1]
1a0008d4:	4c09      	ldr	r4, [pc, #36]	; (1a0008fc <Board_GPIO_Init+0x3c>)
1a0008d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0008da:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0008de:	2001      	movs	r0, #1
1a0008e0:	40a8      	lsls	r0, r5
1a0008e2:	ea21 0100 	bic.w	r1, r1, r0
1a0008e6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0008ea:	3301      	adds	r3, #1
1a0008ec:	2b08      	cmp	r3, #8
1a0008ee:	d9eb      	bls.n	1a0008c8 <Board_GPIO_Init+0x8>
   }
}
1a0008f0:	bc30      	pop	{r4, r5}
1a0008f2:	4770      	bx	lr
1a0008f4:	4770      	bx	lr
1a0008f6:	bf00      	nop
1a0008f8:	1a0079cc 	.word	0x1a0079cc
1a0008fc:	400f4000 	.word	0x400f4000

1a000900 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000900:	b510      	push	{r4, lr}
1a000902:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000904:	4c08      	ldr	r4, [pc, #32]	; (1a000928 <Board_ADC_Init+0x28>)
1a000906:	4669      	mov	r1, sp
1a000908:	4620      	mov	r0, r4
1a00090a:	f000 f9df 	bl	1a000ccc <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00090e:	4a07      	ldr	r2, [pc, #28]	; (1a00092c <Board_ADC_Init+0x2c>)
1a000910:	4669      	mov	r1, sp
1a000912:	4620      	mov	r0, r4
1a000914:	f000 f9fa 	bl	1a000d0c <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000918:	2200      	movs	r2, #0
1a00091a:	4669      	mov	r1, sp
1a00091c:	4620      	mov	r0, r4
1a00091e:	f000 fa0e 	bl	1a000d3e <Chip_ADC_SetResolution>
}
1a000922:	b002      	add	sp, #8
1a000924:	bd10      	pop	{r4, pc}
1a000926:	bf00      	nop
1a000928:	400e3000 	.word	0x400e3000
1a00092c:	00061a80 	.word	0x00061a80

1a000930 <Board_SPI_Init>:
{
1a000930:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000932:	4c0b      	ldr	r4, [pc, #44]	; (1a000960 <Board_SPI_Init+0x30>)
1a000934:	4620      	mov	r0, r4
1a000936:	f000 ff81 	bl	1a00183c <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00093a:	6863      	ldr	r3, [r4, #4]
1a00093c:	f023 0304 	bic.w	r3, r3, #4
1a000940:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000942:	6823      	ldr	r3, [r4, #0]
1a000944:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000948:	f043 0307 	orr.w	r3, r3, #7
1a00094c:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00094e:	4905      	ldr	r1, [pc, #20]	; (1a000964 <Board_SPI_Init+0x34>)
1a000950:	4620      	mov	r0, r4
1a000952:	f000 ff54 	bl	1a0017fe <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000956:	6863      	ldr	r3, [r4, #4]
1a000958:	f043 0302 	orr.w	r3, r3, #2
1a00095c:	6063      	str	r3, [r4, #4]
}
1a00095e:	bd10      	pop	{r4, pc}
1a000960:	400c5000 	.word	0x400c5000
1a000964:	000186a0 	.word	0x000186a0

1a000968 <Board_I2C_Init>:
{
1a000968:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a00096a:	2000      	movs	r0, #0
1a00096c:	f000 fea2 	bl	1a0016b4 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000970:	4b04      	ldr	r3, [pc, #16]	; (1a000984 <Board_I2C_Init+0x1c>)
1a000972:	f640 0208 	movw	r2, #2056	; 0x808
1a000976:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a00097a:	4903      	ldr	r1, [pc, #12]	; (1a000988 <Board_I2C_Init+0x20>)
1a00097c:	2000      	movs	r0, #0
1a00097e:	f000 feab 	bl	1a0016d8 <Chip_I2C_SetClockRate>
}
1a000982:	bd08      	pop	{r3, pc}
1a000984:	40086000 	.word	0x40086000
1a000988:	000f4240 	.word	0x000f4240

1a00098c <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a00098c:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a00098e:	4c07      	ldr	r4, [pc, #28]	; (1a0009ac <Board_Debug_Init+0x20>)
1a000990:	4620      	mov	r0, r4
1a000992:	f000 f8b9 	bl	1a000b08 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000996:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00099a:	4620      	mov	r0, r4
1a00099c:	f000 f8fe 	bl	1a000b9c <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0009a0:	2303      	movs	r3, #3
1a0009a2:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0009a4:	2301      	movs	r3, #1
1a0009a6:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0009a8:	bd10      	pop	{r4, pc}
1a0009aa:	bf00      	nop
1a0009ac:	400c1000 	.word	0x400c1000

1a0009b0 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0009b0:	4b03      	ldr	r3, [pc, #12]	; (1a0009c0 <Board_UARTPutChar+0x10>)
1a0009b2:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0009b4:	f013 0f20 	tst.w	r3, #32
1a0009b8:	d0fa      	beq.n	1a0009b0 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0009ba:	4b01      	ldr	r3, [pc, #4]	; (1a0009c0 <Board_UARTPutChar+0x10>)
1a0009bc:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0009be:	4770      	bx	lr
1a0009c0:	400c1000 	.word	0x400c1000

1a0009c4 <Board_UARTGetChar>:
	return pUART->LSR;
1a0009c4:	4b05      	ldr	r3, [pc, #20]	; (1a0009dc <Board_UARTGetChar+0x18>)
1a0009c6:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0009c8:	f013 0f01 	tst.w	r3, #1
1a0009cc:	d003      	beq.n	1a0009d6 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0009ce:	4b03      	ldr	r3, [pc, #12]	; (1a0009dc <Board_UARTGetChar+0x18>)
1a0009d0:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a0009d2:	b2c0      	uxtb	r0, r0
1a0009d4:	4770      	bx	lr
   }
   return EOF;
1a0009d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0009da:	4770      	bx	lr
1a0009dc:	400c1000 	.word	0x400c1000

1a0009e0 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0009e0:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0009e2:	f7ff ffd3 	bl	1a00098c <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0009e6:	4809      	ldr	r0, [pc, #36]	; (1a000a0c <Board_Init+0x2c>)
1a0009e8:	f000 fdc3 	bl	1a001572 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a0009ec:	f7ff ff68 	bl	1a0008c0 <Board_GPIO_Init>
   Board_ADC_Init();
1a0009f0:	f7ff ff86 	bl	1a000900 <Board_ADC_Init>
   Board_SPI_Init();
1a0009f4:	f7ff ff9c 	bl	1a000930 <Board_SPI_Init>
   Board_I2C_Init();
1a0009f8:	f7ff ffb6 	bl	1a000968 <Board_I2C_Init>

   Board_LED_Init();
1a0009fc:	f7ff ff1e 	bl	1a00083c <Board_LED_Init>
   Board_TEC_Init();
1a000a00:	f7ff ff3e 	bl	1a000880 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000a04:	f000 fc6a 	bl	1a0012dc <SystemCoreClockUpdate>
}
1a000a08:	bd08      	pop	{r3, pc}
1a000a0a:	bf00      	nop
1a000a0c:	400f4000 	.word	0x400f4000

1a000a10 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a000a10:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a000a12:	b2c0      	uxtb	r0, r0
1a000a14:	f7ff ffcc 	bl	1a0009b0 <Board_UARTPutChar>
}
1a000a18:	bd08      	pop	{r3, pc}

1a000a1a <__stdio_getchar>:

int __stdio_getchar()
{
1a000a1a:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a000a1c:	f7ff ffd2 	bl	1a0009c4 <Board_UARTGetChar>
}
1a000a20:	bd08      	pop	{r3, pc}

1a000a22 <__stdio_init>:

void __stdio_init()
{
1a000a22:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000a24:	f7ff ffb2 	bl	1a00098c <Board_Debug_Init>
1a000a28:	bd08      	pop	{r3, pc}
1a000a2a:	Address 0x000000001a000a2a is out of bounds.


1a000a2c <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000a2c:	2300      	movs	r3, #0
1a000a2e:	2b1c      	cmp	r3, #28
1a000a30:	d812      	bhi.n	1a000a58 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000a32:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000a34:	4a09      	ldr	r2, [pc, #36]	; (1a000a5c <Board_SetupMuxing+0x30>)
1a000a36:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000a3a:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000a3e:	784a      	ldrb	r2, [r1, #1]
1a000a40:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000a42:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000a46:	4906      	ldr	r1, [pc, #24]	; (1a000a60 <Board_SetupMuxing+0x34>)
1a000a48:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000a4c:	3301      	adds	r3, #1
1a000a4e:	2b1c      	cmp	r3, #28
1a000a50:	d9f0      	bls.n	1a000a34 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000a52:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000a56:	4770      	bx	lr
1a000a58:	4770      	bx	lr
1a000a5a:	bf00      	nop
1a000a5c:	1a0079e8 	.word	0x1a0079e8
1a000a60:	40086000 	.word	0x40086000

1a000a64 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000a64:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000a66:	4a17      	ldr	r2, [pc, #92]	; (1a000ac4 <Board_SetupClocking+0x60>)
1a000a68:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000a6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000a70:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000a74:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000a78:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000a7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000a80:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000a84:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000a88:	2201      	movs	r2, #1
1a000a8a:	490f      	ldr	r1, [pc, #60]	; (1a000ac8 <Board_SetupClocking+0x64>)
1a000a8c:	2006      	movs	r0, #6
1a000a8e:	f000 fc2f 	bl	1a0012f0 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000a92:	2400      	movs	r4, #0
1a000a94:	b14c      	cbz	r4, 1a000aaa <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000a96:	4b0b      	ldr	r3, [pc, #44]	; (1a000ac4 <Board_SetupClocking+0x60>)
1a000a98:	685a      	ldr	r2, [r3, #4]
1a000a9a:	f022 020c 	bic.w	r2, r2, #12
1a000a9e:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000aa0:	685a      	ldr	r2, [r3, #4]
1a000aa2:	f042 0203 	orr.w	r2, r2, #3
1a000aa6:	605a      	str	r2, [r3, #4]
}
1a000aa8:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000aaa:	4808      	ldr	r0, [pc, #32]	; (1a000acc <Board_SetupClocking+0x68>)
1a000aac:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000ab0:	2301      	movs	r3, #1
1a000ab2:	788a      	ldrb	r2, [r1, #2]
1a000ab4:	7849      	ldrb	r1, [r1, #1]
1a000ab6:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000aba:	f000 fb6b 	bl	1a001194 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000abe:	3401      	adds	r4, #1
1a000ac0:	e7e8      	b.n	1a000a94 <Board_SetupClocking+0x30>
1a000ac2:	bf00      	nop
1a000ac4:	40043000 	.word	0x40043000
1a000ac8:	0c28cb00 	.word	0x0c28cb00
1a000acc:	1a0079e4 	.word	0x1a0079e4

1a000ad0 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000ad0:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000ad2:	f7ff ffab 	bl	1a000a2c <Board_SetupMuxing>
    Board_SetupClocking();
1a000ad6:	f7ff ffc5 	bl	1a000a64 <Board_SetupClocking>
}
1a000ada:	bd08      	pop	{r3, pc}

1a000adc <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000adc:	4b09      	ldr	r3, [pc, #36]	; (1a000b04 <Chip_UART_GetIndex+0x28>)
1a000ade:	4298      	cmp	r0, r3
1a000ae0:	d009      	beq.n	1a000af6 <Chip_UART_GetIndex+0x1a>
1a000ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000ae6:	4298      	cmp	r0, r3
1a000ae8:	d007      	beq.n	1a000afa <Chip_UART_GetIndex+0x1e>
1a000aea:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000aee:	4298      	cmp	r0, r3
1a000af0:	d005      	beq.n	1a000afe <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a000af2:	2000      	movs	r0, #0
1a000af4:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000af6:	2002      	movs	r0, #2
1a000af8:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000afa:	2003      	movs	r0, #3
1a000afc:	4770      	bx	lr
			return 1;
1a000afe:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000b00:	4770      	bx	lr
1a000b02:	bf00      	nop
1a000b04:	400c1000 	.word	0x400c1000

1a000b08 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000b08:	b530      	push	{r4, r5, lr}
1a000b0a:	b083      	sub	sp, #12
1a000b0c:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000b0e:	f7ff ffe5 	bl	1a000adc <Chip_UART_GetIndex>
1a000b12:	2301      	movs	r3, #1
1a000b14:	461a      	mov	r2, r3
1a000b16:	4619      	mov	r1, r3
1a000b18:	4d0e      	ldr	r5, [pc, #56]	; (1a000b54 <Chip_UART_Init+0x4c>)
1a000b1a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000b1e:	f000 fb7f 	bl	1a001220 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a000b22:	2307      	movs	r3, #7
1a000b24:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000b26:	2300      	movs	r3, #0
1a000b28:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000b2a:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000b2c:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000b2e:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000b30:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000b32:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000b34:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000b36:	4b08      	ldr	r3, [pc, #32]	; (1a000b58 <Chip_UART_Init+0x50>)
1a000b38:	429c      	cmp	r4, r3
1a000b3a:	d006      	beq.n	1a000b4a <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000b3c:	2303      	movs	r3, #3
1a000b3e:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000b40:	2310      	movs	r3, #16
1a000b42:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000b44:	9b01      	ldr	r3, [sp, #4]
}
1a000b46:	b003      	add	sp, #12
1a000b48:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000b4a:	2300      	movs	r3, #0
1a000b4c:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000b4e:	69a3      	ldr	r3, [r4, #24]
1a000b50:	9301      	str	r3, [sp, #4]
1a000b52:	e7f3      	b.n	1a000b3c <Chip_UART_Init+0x34>
1a000b54:	1a007a64 	.word	0x1a007a64
1a000b58:	40082000 	.word	0x40082000

1a000b5c <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a000b5c:	b538      	push	{r3, r4, r5, lr}
1a000b5e:	4605      	mov	r5, r0
1a000b60:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000b62:	f7ff ffbb 	bl	1a000adc <Chip_UART_GetIndex>
1a000b66:	4b0c      	ldr	r3, [pc, #48]	; (1a000b98 <Chip_UART_SetBaud+0x3c>)
1a000b68:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000b6c:	f000 fb90 	bl	1a001290 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a000b70:	0123      	lsls	r3, r4, #4
1a000b72:	fbb0 f3f3 	udiv	r3, r0, r3
1a000b76:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000b78:	68ea      	ldr	r2, [r5, #12]
1a000b7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a000b7e:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a000b80:	6029      	str	r1, [r5, #0]
1a000b82:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a000b86:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000b88:	68ea      	ldr	r2, [r5, #12]
1a000b8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a000b8e:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a000b90:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a000b94:	0900      	lsrs	r0, r0, #4
1a000b96:	bd38      	pop	{r3, r4, r5, pc}
1a000b98:	1a007a5c 	.word	0x1a007a5c

1a000b9c <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000ba0:	b083      	sub	sp, #12
1a000ba2:	4683      	mov	fp, r0
1a000ba4:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000ba6:	f7ff ff99 	bl	1a000adc <Chip_UART_GetIndex>
1a000baa:	4b35      	ldr	r3, [pc, #212]	; (1a000c80 <Chip_UART_SetBaudFDR+0xe4>)
1a000bac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000bb0:	f000 fb6e 	bl	1a001290 <Chip_Clock_GetRate>
1a000bb4:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a000bb6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000bba:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000bbc:	2300      	movs	r3, #0
1a000bbe:	9301      	str	r3, [sp, #4]
1a000bc0:	46a2      	mov	sl, r4
1a000bc2:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000bc4:	e02a      	b.n	1a000c1c <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a000bc6:	4242      	negs	r2, r0
				div ++;
1a000bc8:	1c4b      	adds	r3, r1, #1
1a000bca:	e017      	b.n	1a000bfc <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000bcc:	b30a      	cbz	r2, 1a000c12 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000bce:	4617      	mov	r7, r2
			sd = d;
1a000bd0:	9501      	str	r5, [sp, #4]
			sm = m;
1a000bd2:	46a2      	mov	sl, r4
			sdiv = div;
1a000bd4:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a000bd6:	3501      	adds	r5, #1
1a000bd8:	42ac      	cmp	r4, r5
1a000bda:	d91e      	bls.n	1a000c1a <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000bdc:	0933      	lsrs	r3, r6, #4
1a000bde:	0730      	lsls	r0, r6, #28
1a000be0:	fba4 0100 	umull	r0, r1, r4, r0
1a000be4:	fb04 1103 	mla	r1, r4, r3, r1
1a000be8:	1962      	adds	r2, r4, r5
1a000bea:	fb08 f202 	mul.w	r2, r8, r2
1a000bee:	2300      	movs	r3, #0
1a000bf0:	f001 fd88 	bl	1a002704 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a000bf4:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a000bf6:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000bf8:	2800      	cmp	r0, #0
1a000bfa:	dbe4      	blt.n	1a000bc6 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000bfc:	4297      	cmp	r7, r2
1a000bfe:	d3ea      	bcc.n	1a000bd6 <Chip_UART_SetBaudFDR+0x3a>
1a000c00:	2b00      	cmp	r3, #0
1a000c02:	d0e8      	beq.n	1a000bd6 <Chip_UART_SetBaudFDR+0x3a>
1a000c04:	0c19      	lsrs	r1, r3, #16
1a000c06:	d1e6      	bne.n	1a000bd6 <Chip_UART_SetBaudFDR+0x3a>
1a000c08:	2b02      	cmp	r3, #2
1a000c0a:	d8df      	bhi.n	1a000bcc <Chip_UART_SetBaudFDR+0x30>
1a000c0c:	2d00      	cmp	r5, #0
1a000c0e:	d0dd      	beq.n	1a000bcc <Chip_UART_SetBaudFDR+0x30>
1a000c10:	e7e1      	b.n	1a000bd6 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a000c12:	4617      	mov	r7, r2
			sd = d;
1a000c14:	9501      	str	r5, [sp, #4]
			sm = m;
1a000c16:	46a2      	mov	sl, r4
			sdiv = div;
1a000c18:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000c1a:	3401      	adds	r4, #1
1a000c1c:	b11f      	cbz	r7, 1a000c26 <Chip_UART_SetBaudFDR+0x8a>
1a000c1e:	2c0f      	cmp	r4, #15
1a000c20:	d801      	bhi.n	1a000c26 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a000c22:	2500      	movs	r5, #0
1a000c24:	e7d8      	b.n	1a000bd8 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000c26:	f1b9 0f00 	cmp.w	r9, #0
1a000c2a:	d024      	beq.n	1a000c76 <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000c2c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000c34:	f8cb 300c 	str.w	r3, [fp, #12]
1a000c38:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a000c3c:	f8cb 3000 	str.w	r3, [fp]
1a000c40:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a000c44:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000c48:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000c50:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000c54:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000c58:	b2db      	uxtb	r3, r3
1a000c5a:	9901      	ldr	r1, [sp, #4]
1a000c5c:	f001 020f 	and.w	r2, r1, #15
1a000c60:	4313      	orrs	r3, r2
1a000c62:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000c66:	0933      	lsrs	r3, r6, #4
1a000c68:	fb0a f303 	mul.w	r3, sl, r3
1a000c6c:	448a      	add	sl, r1
1a000c6e:	fb09 f90a 	mul.w	r9, r9, sl
1a000c72:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000c76:	4648      	mov	r0, r9
1a000c78:	b003      	add	sp, #12
1a000c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000c7e:	bf00      	nop
1a000c80:	1a007a5c 	.word	0x1a007a5c

1a000c84 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000c84:	4b03      	ldr	r3, [pc, #12]	; (1a000c94 <Chip_ADC_GetClockIndex+0x10>)
1a000c86:	4298      	cmp	r0, r3
1a000c88:	d001      	beq.n	1a000c8e <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000c8a:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000c8c:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000c8e:	2004      	movs	r0, #4
1a000c90:	4770      	bx	lr
1a000c92:	bf00      	nop
1a000c94:	400e4000 	.word	0x400e4000

1a000c98 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000c98:	b570      	push	{r4, r5, r6, lr}
1a000c9a:	460d      	mov	r5, r1
1a000c9c:	4614      	mov	r4, r2
1a000c9e:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000ca0:	f7ff fff0 	bl	1a000c84 <Chip_ADC_GetClockIndex>
1a000ca4:	f000 faf4 	bl	1a001290 <Chip_Clock_GetRate>
	if (burstMode) {
1a000ca8:	b965      	cbnz	r5, 1a000cc4 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a000caa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000cae:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000cb2:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000cb6:	0064      	lsls	r4, r4, #1
1a000cb8:	fbb0 f0f4 	udiv	r0, r0, r4
1a000cbc:	b2c0      	uxtb	r0, r0
1a000cbe:	3801      	subs	r0, #1
	return div;
}
1a000cc0:	b2c0      	uxtb	r0, r0
1a000cc2:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a000cc4:	fb04 f406 	mul.w	r4, r4, r6
1a000cc8:	e7f3      	b.n	1a000cb2 <getClkDiv+0x1a>
1a000cca:	Address 0x000000001a000cca is out of bounds.


1a000ccc <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000ccc:	b538      	push	{r3, r4, r5, lr}
1a000cce:	4605      	mov	r5, r0
1a000cd0:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000cd2:	f7ff ffd7 	bl	1a000c84 <Chip_ADC_GetClockIndex>
1a000cd6:	2301      	movs	r3, #1
1a000cd8:	461a      	mov	r2, r3
1a000cda:	4619      	mov	r1, r3
1a000cdc:	f000 faa0 	bl	1a001220 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000ce0:	2100      	movs	r1, #0
1a000ce2:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000ce4:	4a08      	ldr	r2, [pc, #32]	; (1a000d08 <Chip_ADC_Init+0x3c>)
1a000ce6:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000ce8:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000cea:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000cec:	230b      	movs	r3, #11
1a000cee:	4628      	mov	r0, r5
1a000cf0:	f7ff ffd2 	bl	1a000c98 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000cf4:	0200      	lsls	r0, r0, #8
1a000cf6:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000cfa:	7920      	ldrb	r0, [r4, #4]
1a000cfc:	0440      	lsls	r0, r0, #17
1a000cfe:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000d02:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000d04:	6028      	str	r0, [r5, #0]
}
1a000d06:	bd38      	pop	{r3, r4, r5, pc}
1a000d08:	00061a80 	.word	0x00061a80

1a000d0c <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000d0c:	b570      	push	{r4, r5, r6, lr}
1a000d0e:	4605      	mov	r5, r0
1a000d10:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000d12:	6804      	ldr	r4, [r0, #0]
1a000d14:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000d18:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000d1c:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000d1e:	790b      	ldrb	r3, [r1, #4]
1a000d20:	f1c3 030b 	rsb	r3, r3, #11
1a000d24:	b2db      	uxtb	r3, r3
1a000d26:	7949      	ldrb	r1, [r1, #5]
1a000d28:	f7ff ffb6 	bl	1a000c98 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000d2c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000d30:	7930      	ldrb	r0, [r6, #4]
1a000d32:	0440      	lsls	r0, r0, #17
1a000d34:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000d38:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a000d3a:	6028      	str	r0, [r5, #0]
}
1a000d3c:	bd70      	pop	{r4, r5, r6, pc}

1a000d3e <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000d3e:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000d40:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000d42:	680a      	ldr	r2, [r1, #0]
1a000d44:	f7ff ffe2 	bl	1a000d0c <Chip_ADC_SetSampleRate>
}
1a000d48:	bd08      	pop	{r3, pc}
1a000d4a:	Address 0x000000001a000d4a is out of bounds.


1a000d4c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000d4c:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000d4e:	680b      	ldr	r3, [r1, #0]
1a000d50:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000d54:	d002      	beq.n	1a000d5c <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000d5a:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000d5c:	4607      	mov	r7, r0
1a000d5e:	2501      	movs	r5, #1
1a000d60:	e03b      	b.n	1a000dda <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000d62:	694b      	ldr	r3, [r1, #20]
1a000d64:	fb03 f302 	mul.w	r3, r3, r2
1a000d68:	fbb3 f3f5 	udiv	r3, r3, r5
1a000d6c:	e014      	b.n	1a000d98 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000d6e:	461c      	mov	r4, r3
1a000d70:	e020      	b.n	1a000db4 <pll_calc_divs+0x68>
		return -val;
1a000d72:	f1cc 0c00 	rsb	ip, ip, #0
1a000d76:	e020      	b.n	1a000dba <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a000d78:	3201      	adds	r2, #1
1a000d7a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000d7e:	dc26      	bgt.n	1a000dce <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a000d80:	680c      	ldr	r4, [r1, #0]
1a000d82:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000d86:	d0ec      	beq.n	1a000d62 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000d88:	1c73      	adds	r3, r6, #1
1a000d8a:	fa02 fc03 	lsl.w	ip, r2, r3
1a000d8e:	694b      	ldr	r3, [r1, #20]
1a000d90:	fb03 f30c 	mul.w	r3, r3, ip
1a000d94:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000d98:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a000de8 <pll_calc_divs+0x9c>
1a000d9c:	4563      	cmp	r3, ip
1a000d9e:	d9eb      	bls.n	1a000d78 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000da0:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a000dec <pll_calc_divs+0xa0>
1a000da4:	4563      	cmp	r3, ip
1a000da6:	d812      	bhi.n	1a000dce <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a000da8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000dac:	d1df      	bne.n	1a000d6e <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a000dae:	1c74      	adds	r4, r6, #1
1a000db0:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a000db4:	ebb0 0c04 	subs.w	ip, r0, r4
1a000db8:	d4db      	bmi.n	1a000d72 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a000dba:	4567      	cmp	r7, ip
1a000dbc:	d9dc      	bls.n	1a000d78 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a000dbe:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000dc0:	1c77      	adds	r7, r6, #1
1a000dc2:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000dc4:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000dc6:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000dc8:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000dca:	4667      	mov	r7, ip
1a000dcc:	e7d4      	b.n	1a000d78 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a000dce:	3601      	adds	r6, #1
1a000dd0:	2e03      	cmp	r6, #3
1a000dd2:	dc01      	bgt.n	1a000dd8 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a000dd4:	2201      	movs	r2, #1
1a000dd6:	e7d0      	b.n	1a000d7a <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a000dd8:	3501      	adds	r5, #1
1a000dda:	2d04      	cmp	r5, #4
1a000ddc:	dc01      	bgt.n	1a000de2 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a000dde:	2600      	movs	r6, #0
1a000de0:	e7f6      	b.n	1a000dd0 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a000de2:	bcf0      	pop	{r4, r5, r6, r7}
1a000de4:	4770      	bx	lr
1a000de6:	bf00      	nop
1a000de8:	094c5eff 	.word	0x094c5eff
1a000dec:	1312d000 	.word	0x1312d000

1a000df0 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000df0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000df2:	b099      	sub	sp, #100	; 0x64
1a000df4:	4605      	mov	r5, r0
1a000df6:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000df8:	225c      	movs	r2, #92	; 0x5c
1a000dfa:	2100      	movs	r1, #0
1a000dfc:	a801      	add	r0, sp, #4
1a000dfe:	f001 febf 	bl	1a002b80 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000e02:	2380      	movs	r3, #128	; 0x80
1a000e04:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000e06:	6963      	ldr	r3, [r4, #20]
1a000e08:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000e0a:	7923      	ldrb	r3, [r4, #4]
1a000e0c:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000e10:	4669      	mov	r1, sp
1a000e12:	4628      	mov	r0, r5
1a000e14:	f7ff ff9a 	bl	1a000d4c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000e18:	9b06      	ldr	r3, [sp, #24]
1a000e1a:	42ab      	cmp	r3, r5
1a000e1c:	d027      	beq.n	1a000e6e <pll_get_frac+0x7e>
	if (val < 0)
1a000e1e:	1aeb      	subs	r3, r5, r3
1a000e20:	d42e      	bmi.n	1a000e80 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000e22:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000e24:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000e2a:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000e2c:	6963      	ldr	r3, [r4, #20]
1a000e2e:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000e30:	7923      	ldrb	r3, [r4, #4]
1a000e32:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000e36:	a910      	add	r1, sp, #64	; 0x40
1a000e38:	4628      	mov	r0, r5
1a000e3a:	f7ff ff87 	bl	1a000d4c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000e3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000e40:	42ab      	cmp	r3, r5
1a000e42:	d01f      	beq.n	1a000e84 <pll_get_frac+0x94>
	if (val < 0)
1a000e44:	1aeb      	subs	r3, r5, r3
1a000e46:	d425      	bmi.n	1a000e94 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000e48:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000e4a:	4b2b      	ldr	r3, [pc, #172]	; (1a000ef8 <pll_get_frac+0x108>)
1a000e4c:	429d      	cmp	r5, r3
1a000e4e:	d923      	bls.n	1a000e98 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000e50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000e52:	1aed      	subs	r5, r5, r3
1a000e54:	d433      	bmi.n	1a000ebe <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000e56:	42ae      	cmp	r6, r5
1a000e58:	dc3b      	bgt.n	1a000ed2 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000e5a:	42be      	cmp	r6, r7
1a000e5c:	dc31      	bgt.n	1a000ec2 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000e5e:	466d      	mov	r5, sp
1a000e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000e6c:	e006      	b.n	1a000e7c <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000e6e:	466d      	mov	r5, sp
1a000e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000e7c:	b019      	add	sp, #100	; 0x64
1a000e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000e80:	425b      	negs	r3, r3
1a000e82:	e7ce      	b.n	1a000e22 <pll_get_frac+0x32>
		*ppll = pll[2];
1a000e84:	ad10      	add	r5, sp, #64	; 0x40
1a000e86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e8a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000e92:	e7f3      	b.n	1a000e7c <pll_get_frac+0x8c>
		return -val;
1a000e94:	425b      	negs	r3, r3
1a000e96:	e7d7      	b.n	1a000e48 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000e98:	2340      	movs	r3, #64	; 0x40
1a000e9a:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000e9c:	6963      	ldr	r3, [r4, #20]
1a000e9e:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000ea0:	a908      	add	r1, sp, #32
1a000ea2:	4628      	mov	r0, r5
1a000ea4:	f7ff ff52 	bl	1a000d4c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000ea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000eaa:	42ab      	cmp	r3, r5
1a000eac:	d1d0      	bne.n	1a000e50 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000eae:	ad08      	add	r5, sp, #32
1a000eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000eb4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000eb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000ebc:	e7de      	b.n	1a000e7c <pll_get_frac+0x8c>
		return -val;
1a000ebe:	426d      	negs	r5, r5
1a000ec0:	e7c9      	b.n	1a000e56 <pll_get_frac+0x66>
			*ppll = pll[2];
1a000ec2:	ad10      	add	r5, sp, #64	; 0x40
1a000ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ec8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ecc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000ed0:	e7d4      	b.n	1a000e7c <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000ed2:	42af      	cmp	r7, r5
1a000ed4:	db07      	blt.n	1a000ee6 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000ed6:	ad08      	add	r5, sp, #32
1a000ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000edc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000ee4:	e7ca      	b.n	1a000e7c <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000ee6:	ad10      	add	r5, sp, #64	; 0x40
1a000ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000eec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ef0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000ef4:	e7c2      	b.n	1a000e7c <pll_get_frac+0x8c>
1a000ef6:	bf00      	nop
1a000ef8:	068e7780 	.word	0x068e7780

1a000efc <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000efc:	b430      	push	{r4, r5}
1a000efe:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000f00:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000f02:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000f04:	e000      	b.n	1a000f08 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000f06:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000f08:	281c      	cmp	r0, #28
1a000f0a:	d118      	bne.n	1a000f3e <Chip_Clock_FindBaseClock+0x42>
1a000f0c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000f10:	0051      	lsls	r1, r2, #1
1a000f12:	4a0c      	ldr	r2, [pc, #48]	; (1a000f44 <Chip_Clock_FindBaseClock+0x48>)
1a000f14:	440a      	add	r2, r1
1a000f16:	7914      	ldrb	r4, [r2, #4]
1a000f18:	4284      	cmp	r4, r0
1a000f1a:	d010      	beq.n	1a000f3e <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000f1c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000f20:	004a      	lsls	r2, r1, #1
1a000f22:	4908      	ldr	r1, [pc, #32]	; (1a000f44 <Chip_Clock_FindBaseClock+0x48>)
1a000f24:	5a8a      	ldrh	r2, [r1, r2]
1a000f26:	42aa      	cmp	r2, r5
1a000f28:	d8ed      	bhi.n	1a000f06 <Chip_Clock_FindBaseClock+0xa>
1a000f2a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000f2e:	0051      	lsls	r1, r2, #1
1a000f30:	4a04      	ldr	r2, [pc, #16]	; (1a000f44 <Chip_Clock_FindBaseClock+0x48>)
1a000f32:	440a      	add	r2, r1
1a000f34:	8852      	ldrh	r2, [r2, #2]
1a000f36:	42aa      	cmp	r2, r5
1a000f38:	d3e5      	bcc.n	1a000f06 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000f3a:	4620      	mov	r0, r4
1a000f3c:	e7e4      	b.n	1a000f08 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000f3e:	bc30      	pop	{r4, r5}
1a000f40:	4770      	bx	lr
1a000f42:	bf00      	nop
1a000f44:	1a007a78 	.word	0x1a007a78

1a000f48 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000f48:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000f4e:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000f50:	4a0d      	ldr	r2, [pc, #52]	; (1a000f88 <Chip_Clock_EnableCrystal+0x40>)
1a000f52:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000f54:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000f58:	6992      	ldr	r2, [r2, #24]
1a000f5a:	428a      	cmp	r2, r1
1a000f5c:	d001      	beq.n	1a000f62 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000f5e:	4a0a      	ldr	r2, [pc, #40]	; (1a000f88 <Chip_Clock_EnableCrystal+0x40>)
1a000f60:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000f62:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000f66:	4a09      	ldr	r2, [pc, #36]	; (1a000f8c <Chip_Clock_EnableCrystal+0x44>)
1a000f68:	6811      	ldr	r1, [r2, #0]
1a000f6a:	4a09      	ldr	r2, [pc, #36]	; (1a000f90 <Chip_Clock_EnableCrystal+0x48>)
1a000f6c:	4291      	cmp	r1, r2
1a000f6e:	d901      	bls.n	1a000f74 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000f70:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000f74:	4a04      	ldr	r2, [pc, #16]	; (1a000f88 <Chip_Clock_EnableCrystal+0x40>)
1a000f76:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000f78:	9b01      	ldr	r3, [sp, #4]
1a000f7a:	1e5a      	subs	r2, r3, #1
1a000f7c:	9201      	str	r2, [sp, #4]
1a000f7e:	2b00      	cmp	r3, #0
1a000f80:	d1fa      	bne.n	1a000f78 <Chip_Clock_EnableCrystal+0x30>
}
1a000f82:	b002      	add	sp, #8
1a000f84:	4770      	bx	lr
1a000f86:	bf00      	nop
1a000f88:	40050000 	.word	0x40050000
1a000f8c:	1a0079e0 	.word	0x1a0079e0
1a000f90:	01312cff 	.word	0x01312cff

1a000f94 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000f94:	3012      	adds	r0, #18
1a000f96:	4b05      	ldr	r3, [pc, #20]	; (1a000fac <Chip_Clock_GetDividerSource+0x18>)
1a000f98:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000f9c:	f010 0f01 	tst.w	r0, #1
1a000fa0:	d102      	bne.n	1a000fa8 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000fa2:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000fa6:	4770      	bx	lr
		return CLKINPUT_PD;
1a000fa8:	2011      	movs	r0, #17
}
1a000faa:	4770      	bx	lr
1a000fac:	40050000 	.word	0x40050000

1a000fb0 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000fb0:	f100 0212 	add.w	r2, r0, #18
1a000fb4:	4b03      	ldr	r3, [pc, #12]	; (1a000fc4 <Chip_Clock_GetDividerDivisor+0x14>)
1a000fb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000fba:	4b03      	ldr	r3, [pc, #12]	; (1a000fc8 <Chip_Clock_GetDividerDivisor+0x18>)
1a000fbc:	5c18      	ldrb	r0, [r3, r0]
}
1a000fbe:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000fc2:	4770      	bx	lr
1a000fc4:	40050000 	.word	0x40050000
1a000fc8:	1a007a70 	.word	0x1a007a70

1a000fcc <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000fcc:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000fce:	2810      	cmp	r0, #16
1a000fd0:	d80a      	bhi.n	1a000fe8 <Chip_Clock_GetClockInputHz+0x1c>
1a000fd2:	e8df f000 	tbb	[pc, r0]
1a000fd6:	0b42      	.short	0x0b42
1a000fd8:	091f160d 	.word	0x091f160d
1a000fdc:	2b282522 	.word	0x2b282522
1a000fe0:	322e0909 	.word	0x322e0909
1a000fe4:	3a36      	.short	0x3a36
1a000fe6:	3e          	.byte	0x3e
1a000fe7:	00          	.byte	0x00
	uint32_t rate = 0;
1a000fe8:	2000      	movs	r0, #0
1a000fea:	e038      	b.n	1a00105e <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000fec:	481e      	ldr	r0, [pc, #120]	; (1a001068 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000fee:	e036      	b.n	1a00105e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000ff0:	4b1e      	ldr	r3, [pc, #120]	; (1a00106c <Chip_Clock_GetClockInputHz+0xa0>)
1a000ff2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000ff6:	f003 0307 	and.w	r3, r3, #7
1a000ffa:	2b04      	cmp	r3, #4
1a000ffc:	d130      	bne.n	1a001060 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a000ffe:	2000      	movs	r0, #0
1a001000:	e02d      	b.n	1a00105e <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001002:	4b1a      	ldr	r3, [pc, #104]	; (1a00106c <Chip_Clock_GetClockInputHz+0xa0>)
1a001004:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001008:	f003 0307 	and.w	r3, r3, #7
1a00100c:	2b04      	cmp	r3, #4
1a00100e:	d029      	beq.n	1a001064 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001010:	4817      	ldr	r0, [pc, #92]	; (1a001070 <Chip_Clock_GetClockInputHz+0xa4>)
1a001012:	e024      	b.n	1a00105e <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001014:	4b17      	ldr	r3, [pc, #92]	; (1a001074 <Chip_Clock_GetClockInputHz+0xa8>)
1a001016:	6818      	ldr	r0, [r3, #0]
		break;
1a001018:	e021      	b.n	1a00105e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00101a:	4b17      	ldr	r3, [pc, #92]	; (1a001078 <Chip_Clock_GetClockInputHz+0xac>)
1a00101c:	6818      	ldr	r0, [r3, #0]
		break;
1a00101e:	e01e      	b.n	1a00105e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001020:	4b16      	ldr	r3, [pc, #88]	; (1a00107c <Chip_Clock_GetClockInputHz+0xb0>)
1a001022:	6818      	ldr	r0, [r3, #0]
		break;
1a001024:	e01b      	b.n	1a00105e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001026:	4b15      	ldr	r3, [pc, #84]	; (1a00107c <Chip_Clock_GetClockInputHz+0xb0>)
1a001028:	6858      	ldr	r0, [r3, #4]
		break;
1a00102a:	e018      	b.n	1a00105e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a00102c:	f000 f86a 	bl	1a001104 <Chip_Clock_GetMainPLLHz>
		break;
1a001030:	e015      	b.n	1a00105e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001032:	2100      	movs	r1, #0
1a001034:	f000 f89c 	bl	1a001170 <Chip_Clock_GetDivRate>
		break;
1a001038:	e011      	b.n	1a00105e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00103a:	2101      	movs	r1, #1
1a00103c:	f000 f898 	bl	1a001170 <Chip_Clock_GetDivRate>
		break;
1a001040:	e00d      	b.n	1a00105e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001042:	2102      	movs	r1, #2
1a001044:	f000 f894 	bl	1a001170 <Chip_Clock_GetDivRate>
		break;
1a001048:	e009      	b.n	1a00105e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00104a:	2103      	movs	r1, #3
1a00104c:	f000 f890 	bl	1a001170 <Chip_Clock_GetDivRate>
		break;
1a001050:	e005      	b.n	1a00105e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001052:	2104      	movs	r1, #4
1a001054:	f000 f88c 	bl	1a001170 <Chip_Clock_GetDivRate>
		break;
1a001058:	e001      	b.n	1a00105e <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a00105a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a00105e:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a001060:	4803      	ldr	r0, [pc, #12]	; (1a001070 <Chip_Clock_GetClockInputHz+0xa4>)
1a001062:	e7fc      	b.n	1a00105e <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a001064:	4806      	ldr	r0, [pc, #24]	; (1a001080 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a001066:	e7fa      	b.n	1a00105e <Chip_Clock_GetClockInputHz+0x92>
1a001068:	00b71b00 	.word	0x00b71b00
1a00106c:	40043000 	.word	0x40043000
1a001070:	017d7840 	.word	0x017d7840
1a001074:	1a0079b4 	.word	0x1a0079b4
1a001078:	1a0079e0 	.word	0x1a0079e0
1a00107c:	10000a1c 	.word	0x10000a1c
1a001080:	02faf080 	.word	0x02faf080

1a001084 <Chip_Clock_CalcMainPLLValue>:
{
1a001084:	b538      	push	{r3, r4, r5, lr}
1a001086:	4605      	mov	r5, r0
1a001088:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00108a:	7908      	ldrb	r0, [r1, #4]
1a00108c:	f7ff ff9e 	bl	1a000fcc <Chip_Clock_GetClockInputHz>
1a001090:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001092:	4b19      	ldr	r3, [pc, #100]	; (1a0010f8 <Chip_Clock_CalcMainPLLValue+0x74>)
1a001094:	442b      	add	r3, r5
1a001096:	4a19      	ldr	r2, [pc, #100]	; (1a0010fc <Chip_Clock_CalcMainPLLValue+0x78>)
1a001098:	4293      	cmp	r3, r2
1a00109a:	d821      	bhi.n	1a0010e0 <Chip_Clock_CalcMainPLLValue+0x5c>
1a00109c:	b318      	cbz	r0, 1a0010e6 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a00109e:	2380      	movs	r3, #128	; 0x80
1a0010a0:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0010a2:	2300      	movs	r3, #0
1a0010a4:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0010a6:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0010a8:	fbb5 f3f0 	udiv	r3, r5, r0
1a0010ac:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0010ae:	4a14      	ldr	r2, [pc, #80]	; (1a001100 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0010b0:	4295      	cmp	r5, r2
1a0010b2:	d903      	bls.n	1a0010bc <Chip_Clock_CalcMainPLLValue+0x38>
1a0010b4:	fb03 f000 	mul.w	r0, r3, r0
1a0010b8:	42a8      	cmp	r0, r5
1a0010ba:	d007      	beq.n	1a0010cc <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0010bc:	4621      	mov	r1, r4
1a0010be:	4628      	mov	r0, r5
1a0010c0:	f7ff fe96 	bl	1a000df0 <pll_get_frac>
		if (!ppll->nsel) {
1a0010c4:	68a3      	ldr	r3, [r4, #8]
1a0010c6:	b18b      	cbz	r3, 1a0010ec <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0010c8:	3b01      	subs	r3, #1
1a0010ca:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a0010cc:	6923      	ldr	r3, [r4, #16]
1a0010ce:	b183      	cbz	r3, 1a0010f2 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0010d0:	68e2      	ldr	r2, [r4, #12]
1a0010d2:	b10a      	cbz	r2, 1a0010d8 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0010d4:	3a01      	subs	r2, #1
1a0010d6:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0010d8:	3b01      	subs	r3, #1
1a0010da:	6123      	str	r3, [r4, #16]
	return 0;
1a0010dc:	2000      	movs	r0, #0
}
1a0010de:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0010e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0010e4:	e7fb      	b.n	1a0010de <Chip_Clock_CalcMainPLLValue+0x5a>
1a0010e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0010ea:	e7f8      	b.n	1a0010de <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a0010ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0010f0:	e7f5      	b.n	1a0010de <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a0010f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0010f6:	e7f2      	b.n	1a0010de <Chip_Clock_CalcMainPLLValue+0x5a>
1a0010f8:	ff6b3a10 	.word	0xff6b3a10
1a0010fc:	0b940510 	.word	0x0b940510
1a001100:	094c5eff 	.word	0x094c5eff

1a001104 <Chip_Clock_GetMainPLLHz>:
{
1a001104:	b530      	push	{r4, r5, lr}
1a001106:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001108:	4d17      	ldr	r5, [pc, #92]	; (1a001168 <Chip_Clock_GetMainPLLHz+0x64>)
1a00110a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a00110c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001110:	f7ff ff5c 	bl	1a000fcc <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001114:	4b15      	ldr	r3, [pc, #84]	; (1a00116c <Chip_Clock_GetMainPLLHz+0x68>)
1a001116:	681b      	ldr	r3, [r3, #0]
1a001118:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00111a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a00111c:	f013 0f01 	tst.w	r3, #1
1a001120:	d01f      	beq.n	1a001162 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a001122:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001126:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00112a:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a00112e:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001132:	3301      	adds	r3, #1
	n = nsel + 1;
1a001134:	3201      	adds	r2, #1
	p = ptab[psel];
1a001136:	f10d 0c08 	add.w	ip, sp, #8
1a00113a:	4461      	add	r1, ip
1a00113c:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001140:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001144:	d108      	bne.n	1a001158 <Chip_Clock_GetMainPLLHz+0x54>
1a001146:	b93d      	cbnz	r5, 1a001158 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001148:	0049      	lsls	r1, r1, #1
1a00114a:	fbb3 f3f1 	udiv	r3, r3, r1
1a00114e:	fbb0 f0f2 	udiv	r0, r0, r2
1a001152:	fb00 f003 	mul.w	r0, r0, r3
1a001156:	e005      	b.n	1a001164 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a001158:	fbb0 f0f2 	udiv	r0, r0, r2
1a00115c:	fb03 f000 	mul.w	r0, r3, r0
1a001160:	e000      	b.n	1a001164 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a001162:	2000      	movs	r0, #0
}
1a001164:	b003      	add	sp, #12
1a001166:	bd30      	pop	{r4, r5, pc}
1a001168:	40050000 	.word	0x40050000
1a00116c:	1a007a6c 	.word	0x1a007a6c

1a001170 <Chip_Clock_GetDivRate>:
{
1a001170:	b538      	push	{r3, r4, r5, lr}
1a001172:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001174:	4608      	mov	r0, r1
1a001176:	f7ff ff0d 	bl	1a000f94 <Chip_Clock_GetDividerSource>
1a00117a:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a00117c:	4620      	mov	r0, r4
1a00117e:	f7ff ff17 	bl	1a000fb0 <Chip_Clock_GetDividerDivisor>
1a001182:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001184:	4628      	mov	r0, r5
1a001186:	f7ff ff21 	bl	1a000fcc <Chip_Clock_GetClockInputHz>
1a00118a:	3401      	adds	r4, #1
}
1a00118c:	fbb0 f0f4 	udiv	r0, r0, r4
1a001190:	bd38      	pop	{r3, r4, r5, pc}
1a001192:	Address 0x000000001a001192 is out of bounds.


1a001194 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001194:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001196:	f100 0416 	add.w	r4, r0, #22
1a00119a:	00a4      	lsls	r4, r4, #2
1a00119c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0011a0:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0011a4:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0011a6:	281b      	cmp	r0, #27
1a0011a8:	d813      	bhi.n	1a0011d2 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0011aa:	2911      	cmp	r1, #17
1a0011ac:	d01a      	beq.n	1a0011e4 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0011ae:	4d0e      	ldr	r5, [pc, #56]	; (1a0011e8 <Chip_Clock_SetBaseClock+0x54>)
1a0011b0:	4025      	ands	r5, r4

			if (autoblocken) {
1a0011b2:	b10a      	cbz	r2, 1a0011b8 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0011b4:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0011b8:	b10b      	cbz	r3, 1a0011be <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0011ba:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0011be:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0011c2:	3016      	adds	r0, #22
1a0011c4:	0080      	lsls	r0, r0, #2
1a0011c6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0011ca:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0011ce:	6045      	str	r5, [r0, #4]
1a0011d0:	e008      	b.n	1a0011e4 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0011d2:	f044 0401 	orr.w	r4, r4, #1
1a0011d6:	3016      	adds	r0, #22
1a0011d8:	0080      	lsls	r0, r0, #2
1a0011da:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0011de:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0011e2:	6044      	str	r4, [r0, #4]
	}
}
1a0011e4:	bc30      	pop	{r4, r5}
1a0011e6:	4770      	bx	lr
1a0011e8:	e0fff7fe 	.word	0xe0fff7fe

1a0011ec <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0011ec:	281b      	cmp	r0, #27
1a0011ee:	d80c      	bhi.n	1a00120a <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0011f0:	3016      	adds	r0, #22
1a0011f2:	0080      	lsls	r0, r0, #2
1a0011f4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0011f8:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0011fc:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0011fe:	f010 0f01 	tst.w	r0, #1
1a001202:	d104      	bne.n	1a00120e <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001204:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001208:	4770      	bx	lr
		return CLKINPUT_PD;
1a00120a:	2011      	movs	r0, #17
1a00120c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00120e:	2011      	movs	r0, #17
}
1a001210:	4770      	bx	lr

1a001212 <Chip_Clock_GetBaseClocktHz>:
{
1a001212:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001214:	f7ff ffea 	bl	1a0011ec <Chip_Clock_GetBaseClock>
1a001218:	f7ff fed8 	bl	1a000fcc <Chip_Clock_GetClockInputHz>
}
1a00121c:	bd08      	pop	{r3, pc}
1a00121e:	Address 0x000000001a00121e is out of bounds.


1a001220 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001220:	b969      	cbnz	r1, 1a00123e <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a001222:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001224:	b10a      	cbz	r2, 1a00122a <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001226:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00122a:	2b02      	cmp	r3, #2
1a00122c:	d009      	beq.n	1a001242 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00122e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001232:	d209      	bcs.n	1a001248 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001234:	3020      	adds	r0, #32
1a001236:	4b07      	ldr	r3, [pc, #28]	; (1a001254 <Chip_Clock_EnableOpts+0x34>)
1a001238:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a00123c:	4770      	bx	lr
		reg |= (1 << 1);
1a00123e:	2103      	movs	r1, #3
1a001240:	e7f0      	b.n	1a001224 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001242:	f041 0120 	orr.w	r1, r1, #32
1a001246:	e7f2      	b.n	1a00122e <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001248:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00124c:	4b02      	ldr	r3, [pc, #8]	; (1a001258 <Chip_Clock_EnableOpts+0x38>)
1a00124e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001252:	4770      	bx	lr
1a001254:	40051000 	.word	0x40051000
1a001258:	40052000 	.word	0x40052000

1a00125c <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a00125c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001260:	d208      	bcs.n	1a001274 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001262:	4a09      	ldr	r2, [pc, #36]	; (1a001288 <Chip_Clock_Enable+0x2c>)
1a001264:	3020      	adds	r0, #32
1a001266:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00126a:	f043 0301 	orr.w	r3, r3, #1
1a00126e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001272:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001274:	4a05      	ldr	r2, [pc, #20]	; (1a00128c <Chip_Clock_Enable+0x30>)
1a001276:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00127a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00127e:	f043 0301 	orr.w	r3, r3, #1
1a001282:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001286:	4770      	bx	lr
1a001288:	40051000 	.word	0x40051000
1a00128c:	40052000 	.word	0x40052000

1a001290 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001290:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001292:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001296:	d309      	bcc.n	1a0012ac <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001298:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a00129c:	4a0d      	ldr	r2, [pc, #52]	; (1a0012d4 <Chip_Clock_GetRate+0x44>)
1a00129e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0012a2:	f014 0f01 	tst.w	r4, #1
1a0012a6:	d107      	bne.n	1a0012b8 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0012a8:	2000      	movs	r0, #0
	}

	return rate;
}
1a0012aa:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0012ac:	f100 0320 	add.w	r3, r0, #32
1a0012b0:	4a09      	ldr	r2, [pc, #36]	; (1a0012d8 <Chip_Clock_GetRate+0x48>)
1a0012b2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0012b6:	e7f4      	b.n	1a0012a2 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0012b8:	f7ff fe20 	bl	1a000efc <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0012bc:	f7ff ffa9 	bl	1a001212 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0012c0:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0012c4:	d103      	bne.n	1a0012ce <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0012c6:	2301      	movs	r3, #1
		rate = rate / div;
1a0012c8:	fbb0 f0f3 	udiv	r0, r0, r3
1a0012cc:	e7ed      	b.n	1a0012aa <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0012ce:	2302      	movs	r3, #2
1a0012d0:	e7fa      	b.n	1a0012c8 <Chip_Clock_GetRate+0x38>
1a0012d2:	bf00      	nop
1a0012d4:	40052000 	.word	0x40052000
1a0012d8:	40051000 	.word	0x40051000

1a0012dc <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0012dc:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0012de:	2069      	movs	r0, #105	; 0x69
1a0012e0:	f7ff ffd6 	bl	1a001290 <Chip_Clock_GetRate>
1a0012e4:	4b01      	ldr	r3, [pc, #4]	; (1a0012ec <SystemCoreClockUpdate+0x10>)
1a0012e6:	6018      	str	r0, [r3, #0]
}
1a0012e8:	bd08      	pop	{r3, pc}
1a0012ea:	bf00      	nop
1a0012ec:	10000a6c 	.word	0x10000a6c

1a0012f0 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0012f0:	b570      	push	{r4, r5, r6, lr}
1a0012f2:	b08a      	sub	sp, #40	; 0x28
1a0012f4:	4605      	mov	r5, r0
1a0012f6:	460e      	mov	r6, r1
1a0012f8:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0012fa:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0012fe:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001300:	2806      	cmp	r0, #6
1a001302:	d018      	beq.n	1a001336 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001304:	2300      	movs	r3, #0
1a001306:	2201      	movs	r2, #1
1a001308:	4629      	mov	r1, r5
1a00130a:	2004      	movs	r0, #4
1a00130c:	f7ff ff42 	bl	1a001194 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001310:	4a49      	ldr	r2, [pc, #292]	; (1a001438 <Chip_SetupCoreClock+0x148>)
1a001312:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001314:	f043 0301 	orr.w	r3, r3, #1
1a001318:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00131a:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00131e:	a901      	add	r1, sp, #4
1a001320:	4630      	mov	r0, r6
1a001322:	f7ff feaf 	bl	1a001084 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a001326:	4b45      	ldr	r3, [pc, #276]	; (1a00143c <Chip_SetupCoreClock+0x14c>)
1a001328:	429e      	cmp	r6, r3
1a00132a:	d916      	bls.n	1a00135a <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a00132c:	9b01      	ldr	r3, [sp, #4]
1a00132e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001332:	d003      	beq.n	1a00133c <Chip_SetupCoreClock+0x4c>
1a001334:	e7fe      	b.n	1a001334 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a001336:	f7ff fe07 	bl	1a000f48 <Chip_Clock_EnableCrystal>
1a00133a:	e7e3      	b.n	1a001304 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a00133c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001340:	d005      	beq.n	1a00134e <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a001342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001346:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001348:	2500      	movs	r5, #0
			direct = 1;
1a00134a:	2601      	movs	r6, #1
1a00134c:	e007      	b.n	1a00135e <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00134e:	9b04      	ldr	r3, [sp, #16]
1a001350:	3301      	adds	r3, #1
1a001352:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a001354:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a001356:	2600      	movs	r6, #0
1a001358:	e001      	b.n	1a00135e <Chip_SetupCoreClock+0x6e>
1a00135a:	2500      	movs	r5, #0
1a00135c:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00135e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001362:	9b01      	ldr	r3, [sp, #4]
1a001364:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001368:	9a05      	ldr	r2, [sp, #20]
1a00136a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00136e:	9a03      	ldr	r2, [sp, #12]
1a001370:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001374:	9a04      	ldr	r2, [sp, #16]
1a001376:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00137a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00137e:	4a2e      	ldr	r2, [pc, #184]	; (1a001438 <Chip_SetupCoreClock+0x148>)
1a001380:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001382:	4b2d      	ldr	r3, [pc, #180]	; (1a001438 <Chip_SetupCoreClock+0x148>)
1a001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001386:	f013 0f01 	tst.w	r3, #1
1a00138a:	d0fa      	beq.n	1a001382 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00138c:	2300      	movs	r3, #0
1a00138e:	2201      	movs	r2, #1
1a001390:	2109      	movs	r1, #9
1a001392:	2004      	movs	r0, #4
1a001394:	f7ff fefe 	bl	1a001194 <Chip_Clock_SetBaseClock>

	if (direct) {
1a001398:	b1fe      	cbz	r6, 1a0013da <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00139a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00139e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0013a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0013a2:	1e5a      	subs	r2, r3, #1
1a0013a4:	9209      	str	r2, [sp, #36]	; 0x24
1a0013a6:	2b00      	cmp	r3, #0
1a0013a8:	d1fa      	bne.n	1a0013a0 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0013aa:	9b01      	ldr	r3, [sp, #4]
1a0013ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0013b0:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0013b2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0013b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0013ba:	9a05      	ldr	r2, [sp, #20]
1a0013bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0013c0:	9a03      	ldr	r2, [sp, #12]
1a0013c2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0013c6:	9a04      	ldr	r2, [sp, #16]
1a0013c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0013cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0013d0:	4a19      	ldr	r2, [pc, #100]	; (1a001438 <Chip_SetupCoreClock+0x148>)
1a0013d2:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0013d4:	b36c      	cbz	r4, 1a001432 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0013d6:	2400      	movs	r4, #0
1a0013d8:	e029      	b.n	1a00142e <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a0013da:	2d00      	cmp	r5, #0
1a0013dc:	d0fa      	beq.n	1a0013d4 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0013de:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0013e2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0013e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0013e6:	1e5a      	subs	r2, r3, #1
1a0013e8:	9209      	str	r2, [sp, #36]	; 0x24
1a0013ea:	2b00      	cmp	r3, #0
1a0013ec:	d1fa      	bne.n	1a0013e4 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a0013ee:	9b04      	ldr	r3, [sp, #16]
1a0013f0:	1e5a      	subs	r2, r3, #1
1a0013f2:	9204      	str	r2, [sp, #16]
1a0013f4:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0013f8:	9b01      	ldr	r3, [sp, #4]
1a0013fa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0013fe:	9905      	ldr	r1, [sp, #20]
1a001400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001404:	9903      	ldr	r1, [sp, #12]
1a001406:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00140a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00140e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001412:	4a09      	ldr	r2, [pc, #36]	; (1a001438 <Chip_SetupCoreClock+0x148>)
1a001414:	6453      	str	r3, [r2, #68]	; 0x44
1a001416:	e7dd      	b.n	1a0013d4 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001418:	4809      	ldr	r0, [pc, #36]	; (1a001440 <Chip_SetupCoreClock+0x150>)
1a00141a:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00141e:	78cb      	ldrb	r3, [r1, #3]
1a001420:	788a      	ldrb	r2, [r1, #2]
1a001422:	7849      	ldrb	r1, [r1, #1]
1a001424:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001428:	f7ff feb4 	bl	1a001194 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00142c:	3401      	adds	r4, #1
1a00142e:	2c11      	cmp	r4, #17
1a001430:	d9f2      	bls.n	1a001418 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001432:	b00a      	add	sp, #40	; 0x28
1a001434:	bd70      	pop	{r4, r5, r6, pc}
1a001436:	bf00      	nop
1a001438:	40050000 	.word	0x40050000
1a00143c:	068e7780 	.word	0x068e7780
1a001440:	1a007ae4 	.word	0x1a007ae4

1a001444 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a001444:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a001446:	6843      	ldr	r3, [r0, #4]
1a001448:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a00144c:	2b30      	cmp	r3, #48	; 0x30
1a00144e:	d04a      	beq.n	1a0014e6 <Chip_I2CM_XferHandler+0xa2>
1a001450:	d90f      	bls.n	1a001472 <Chip_I2CM_XferHandler+0x2e>
1a001452:	2b48      	cmp	r3, #72	; 0x48
1a001454:	d06a      	beq.n	1a00152c <Chip_I2CM_XferHandler+0xe8>
1a001456:	d83a      	bhi.n	1a0014ce <Chip_I2CM_XferHandler+0x8a>
1a001458:	2b38      	cmp	r3, #56	; 0x38
1a00145a:	d06b      	beq.n	1a001534 <Chip_I2CM_XferHandler+0xf0>
1a00145c:	2b40      	cmp	r3, #64	; 0x40
1a00145e:	d13e      	bne.n	1a0014de <Chip_I2CM_XferHandler+0x9a>
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a001460:	88ca      	ldrh	r2, [r1, #6]
1a001462:	2a01      	cmp	r2, #1
1a001464:	d95a      	bls.n	1a00151c <Chip_I2CM_XferHandler+0xd8>
			cclr &= ~I2C_CON_AA;
1a001466:	2338      	movs	r3, #56	; 0x38
		}
		if (xfer->rxSz == 0) {
1a001468:	b9b2      	cbnz	r2, 1a001498 <Chip_I2CM_XferHandler+0x54>
			xfer->status = I2CM_STATUS_OK;
1a00146a:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a00146c:	f023 0310 	bic.w	r3, r3, #16
1a001470:	e012      	b.n	1a001498 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001472:	2b10      	cmp	r3, #16
1a001474:	d007      	beq.n	1a001486 <Chip_I2CM_XferHandler+0x42>
1a001476:	d81c      	bhi.n	1a0014b2 <Chip_I2CM_XferHandler+0x6e>
1a001478:	b91b      	cbnz	r3, 1a001482 <Chip_I2CM_XferHandler+0x3e>
	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
		break;

	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a00147a:	2303      	movs	r3, #3
1a00147c:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a00147e:	232c      	movs	r3, #44	; 0x2c
        break;
1a001480:	e00a      	b.n	1a001498 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001482:	2b08      	cmp	r3, #8
1a001484:	d12b      	bne.n	1a0014de <Chip_I2CM_XferHandler+0x9a>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a001486:	780a      	ldrb	r2, [r1, #0]
1a001488:	888b      	ldrh	r3, [r1, #4]
1a00148a:	fab3 f383 	clz	r3, r3
1a00148e:	095b      	lsrs	r3, r3, #5
1a001490:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a001494:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a001496:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a001498:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a00149c:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a00149e:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a0014a2:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a0014a4:	8848      	ldrh	r0, [r1, #2]
1a0014a6:	38ff      	subs	r0, #255	; 0xff
1a0014a8:	bf18      	it	ne
1a0014aa:	2001      	movne	r0, #1
}
1a0014ac:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0014b0:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0014b2:	2b20      	cmp	r3, #32
1a0014b4:	d017      	beq.n	1a0014e6 <Chip_I2CM_XferHandler+0xa2>
1a0014b6:	2b28      	cmp	r3, #40	; 0x28
1a0014b8:	d001      	beq.n	1a0014be <Chip_I2CM_XferHandler+0x7a>
1a0014ba:	2b18      	cmp	r3, #24
1a0014bc:	d10f      	bne.n	1a0014de <Chip_I2CM_XferHandler+0x9a>
		if (!xfer->txSz) {
1a0014be:	888b      	ldrh	r3, [r1, #4]
1a0014c0:	b9cb      	cbnz	r3, 1a0014f6 <Chip_I2CM_XferHandler+0xb2>
			if (xfer->rxSz) {
1a0014c2:	88cb      	ldrh	r3, [r1, #6]
1a0014c4:	2b00      	cmp	r3, #0
1a0014c6:	d139      	bne.n	1a00153c <Chip_I2CM_XferHandler+0xf8>
				xfer->status = I2CM_STATUS_OK;
1a0014c8:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a0014ca:	232c      	movs	r3, #44	; 0x2c
1a0014cc:	e7e4      	b.n	1a001498 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0014ce:	2b58      	cmp	r3, #88	; 0x58
1a0014d0:	d01b      	beq.n	1a00150a <Chip_I2CM_XferHandler+0xc6>
1a0014d2:	2bf8      	cmp	r3, #248	; 0xf8
1a0014d4:	d101      	bne.n	1a0014da <Chip_I2CM_XferHandler+0x96>
      return 0;
1a0014d6:	2000      	movs	r0, #0
1a0014d8:	e7e8      	b.n	1a0014ac <Chip_I2CM_XferHandler+0x68>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0014da:	2b50      	cmp	r3, #80	; 0x50
1a0014dc:	d015      	beq.n	1a00150a <Chip_I2CM_XferHandler+0xc6>
		xfer->status = I2CM_STATUS_ERROR;
1a0014de:	2301      	movs	r3, #1
1a0014e0:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a0014e2:	232c      	movs	r3, #44	; 0x2c
        break;
1a0014e4:	e7d8      	b.n	1a001498 <Chip_I2CM_XferHandler+0x54>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a0014e6:	784b      	ldrb	r3, [r1, #1]
1a0014e8:	f013 0f01 	tst.w	r3, #1
1a0014ec:	d1e7      	bne.n	1a0014be <Chip_I2CM_XferHandler+0x7a>
			xfer->status = I2CM_STATUS_NAK;
1a0014ee:	2302      	movs	r3, #2
1a0014f0:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a0014f2:	232c      	movs	r3, #44	; 0x2c
			break;
1a0014f4:	e7d0      	b.n	1a001498 <Chip_I2CM_XferHandler+0x54>
			pI2C->DAT = *xfer->txBuff++;
1a0014f6:	688b      	ldr	r3, [r1, #8]
1a0014f8:	1c5a      	adds	r2, r3, #1
1a0014fa:	608a      	str	r2, [r1, #8]
1a0014fc:	781b      	ldrb	r3, [r3, #0]
1a0014fe:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a001500:	888b      	ldrh	r3, [r1, #4]
1a001502:	3b01      	subs	r3, #1
1a001504:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a001506:	233c      	movs	r3, #60	; 0x3c
1a001508:	e7c6      	b.n	1a001498 <Chip_I2CM_XferHandler+0x54>
		*xfer->rxBuff++ = pI2C->DAT;
1a00150a:	6882      	ldr	r2, [r0, #8]
1a00150c:	68cb      	ldr	r3, [r1, #12]
1a00150e:	1c5c      	adds	r4, r3, #1
1a001510:	60cc      	str	r4, [r1, #12]
1a001512:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a001514:	88cb      	ldrh	r3, [r1, #6]
1a001516:	3b01      	subs	r3, #1
1a001518:	80cb      	strh	r3, [r1, #6]
1a00151a:	e7a1      	b.n	1a001460 <Chip_I2CM_XferHandler+0x1c>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a00151c:	784b      	ldrb	r3, [r1, #1]
1a00151e:	f013 0f02 	tst.w	r3, #2
1a001522:	d101      	bne.n	1a001528 <Chip_I2CM_XferHandler+0xe4>
	uint32_t cclr = I2C_CON_FLAGS;
1a001524:	233c      	movs	r3, #60	; 0x3c
1a001526:	e79f      	b.n	1a001468 <Chip_I2CM_XferHandler+0x24>
			cclr &= ~I2C_CON_AA;
1a001528:	2338      	movs	r3, #56	; 0x38
1a00152a:	e79d      	b.n	1a001468 <Chip_I2CM_XferHandler+0x24>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a00152c:	2304      	movs	r3, #4
1a00152e:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a001530:	232c      	movs	r3, #44	; 0x2c
		break;
1a001532:	e7b1      	b.n	1a001498 <Chip_I2CM_XferHandler+0x54>
		xfer->status = I2CM_STATUS_ARBLOST;
1a001534:	2305      	movs	r3, #5
1a001536:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a001538:	233c      	movs	r3, #60	; 0x3c
		break;
1a00153a:	e7ad      	b.n	1a001498 <Chip_I2CM_XferHandler+0x54>
				cclr &= ~I2C_CON_STA;
1a00153c:	231c      	movs	r3, #28
1a00153e:	e7ab      	b.n	1a001498 <Chip_I2CM_XferHandler+0x54>

1a001540 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a001540:	23ff      	movs	r3, #255	; 0xff
1a001542:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a001544:	232c      	movs	r3, #44	; 0x2c
1a001546:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a001548:	2360      	movs	r3, #96	; 0x60
1a00154a:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a00154c:	4770      	bx	lr

1a00154e <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a00154e:	b538      	push	{r3, r4, r5, lr}
1a001550:	4604      	mov	r4, r0
1a001552:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a001554:	f7ff fff4 	bl	1a001540 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a001558:	2000      	movs	r0, #0

	while (ret == 0) {
1a00155a:	e007      	b.n	1a00156c <Chip_I2CM_XferBlocking+0x1e>
	return pI2C->CONSET & I2C_CON_SI;
1a00155c:	6823      	ldr	r3, [r4, #0]
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a00155e:	f013 0f08 	tst.w	r3, #8
1a001562:	d0fb      	beq.n	1a00155c <Chip_I2CM_XferBlocking+0xe>
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a001564:	4629      	mov	r1, r5
1a001566:	4620      	mov	r0, r4
1a001568:	f7ff ff6c 	bl	1a001444 <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a00156c:	2800      	cmp	r0, #0
1a00156e:	d0f5      	beq.n	1a00155c <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a001570:	bd38      	pop	{r3, r4, r5, pc}

1a001572 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a001572:	4770      	bx	lr

1a001574 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a001574:	2901      	cmp	r1, #1
1a001576:	d000      	beq.n	1a00157a <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a001578:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a00157a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00157e:	0082      	lsls	r2, r0, #2
1a001580:	4b03      	ldr	r3, [pc, #12]	; (1a001590 <Chip_I2C_EventHandler+0x1c>)
1a001582:	4413      	add	r3, r2
1a001584:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a001586:	7d13      	ldrb	r3, [r2, #20]
1a001588:	b2db      	uxtb	r3, r3
1a00158a:	2b04      	cmp	r3, #4
1a00158c:	d0fb      	beq.n	1a001586 <Chip_I2C_EventHandler+0x12>
1a00158e:	e7f3      	b.n	1a001578 <Chip_I2C_EventHandler+0x4>
1a001590:	10000004 	.word	0x10000004

1a001594 <handleMasterXferState>:
{
1a001594:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a001596:	6843      	ldr	r3, [r0, #4]
1a001598:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a00159c:	2b58      	cmp	r3, #88	; 0x58
1a00159e:	d87e      	bhi.n	1a00169e <handleMasterXferState+0x10a>
1a0015a0:	e8df f003 	tbb	[pc, r3]
1a0015a4:	7d7d7d79 	.word	0x7d7d7d79
1a0015a8:	7d7d7d7d 	.word	0x7d7d7d7d
1a0015ac:	7d7d7d2f 	.word	0x7d7d7d2f
1a0015b0:	7d7d7d7d 	.word	0x7d7d7d7d
1a0015b4:	7d7d7d2f 	.word	0x7d7d7d2f
1a0015b8:	7d7d7d7d 	.word	0x7d7d7d7d
1a0015bc:	7d7d7d39 	.word	0x7d7d7d39
1a0015c0:	7d7d7d7d 	.word	0x7d7d7d7d
1a0015c4:	7d7d7d6d 	.word	0x7d7d7d6d
1a0015c8:	7d7d7d7d 	.word	0x7d7d7d7d
1a0015cc:	7d7d7d39 	.word	0x7d7d7d39
1a0015d0:	7d7d7d7d 	.word	0x7d7d7d7d
1a0015d4:	7d7d7d71 	.word	0x7d7d7d71
1a0015d8:	7d7d7d7d 	.word	0x7d7d7d7d
1a0015dc:	7d7d7d75 	.word	0x7d7d7d75
1a0015e0:	7d7d7d7d 	.word	0x7d7d7d7d
1a0015e4:	7d7d7d6b 	.word	0x7d7d7d6b
1a0015e8:	7d7d7d7d 	.word	0x7d7d7d7d
1a0015ec:	7d7d7d6d 	.word	0x7d7d7d6d
1a0015f0:	7d7d7d7d 	.word	0x7d7d7d7d
1a0015f4:	7d7d7d2d 	.word	0x7d7d7d2d
1a0015f8:	7d7d7d7d 	.word	0x7d7d7d7d
1a0015fc:	4f          	.byte	0x4f
1a0015fd:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a0015fe:	233c      	movs	r3, #60	; 0x3c
1a001600:	e020      	b.n	1a001644 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a001602:	780a      	ldrb	r2, [r1, #0]
1a001604:	688b      	ldr	r3, [r1, #8]
1a001606:	fab3 f383 	clz	r3, r3
1a00160a:	095b      	lsrs	r3, r3, #5
1a00160c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a001610:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a001612:	233c      	movs	r3, #60	; 0x3c
		break;
1a001614:	e023      	b.n	1a00165e <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a001616:	688b      	ldr	r3, [r1, #8]
1a001618:	b94b      	cbnz	r3, 1a00162e <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a00161a:	690b      	ldr	r3, [r1, #16]
1a00161c:	b123      	cbz	r3, 1a001628 <handleMasterXferState+0x94>
1a00161e:	f06f 0320 	mvn.w	r3, #32
1a001622:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a001626:	e01a      	b.n	1a00165e <handleMasterXferState+0xca>
1a001628:	f06f 0310 	mvn.w	r3, #16
1a00162c:	e7f9      	b.n	1a001622 <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a00162e:	684b      	ldr	r3, [r1, #4]
1a001630:	1c5a      	adds	r2, r3, #1
1a001632:	604a      	str	r2, [r1, #4]
1a001634:	781b      	ldrb	r3, [r3, #0]
1a001636:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a001638:	688b      	ldr	r3, [r1, #8]
1a00163a:	3b01      	subs	r3, #1
1a00163c:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a00163e:	233c      	movs	r3, #60	; 0x3c
1a001640:	e00d      	b.n	1a00165e <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a001642:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a001644:	6884      	ldr	r4, [r0, #8]
1a001646:	68ca      	ldr	r2, [r1, #12]
1a001648:	1c55      	adds	r5, r2, #1
1a00164a:	60cd      	str	r5, [r1, #12]
1a00164c:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a00164e:	690a      	ldr	r2, [r1, #16]
1a001650:	3a01      	subs	r2, #1
1a001652:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a001654:	690a      	ldr	r2, [r1, #16]
1a001656:	2a01      	cmp	r2, #1
1a001658:	dd01      	ble.n	1a00165e <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a00165a:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a00165e:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a001662:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a001664:	f023 0210 	bic.w	r2, r3, #16
1a001668:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a00166a:	f013 0f10 	tst.w	r3, #16
1a00166e:	d018      	beq.n	1a0016a2 <handleMasterXferState+0x10e>
1a001670:	7d0b      	ldrb	r3, [r1, #20]
1a001672:	2b02      	cmp	r3, #2
1a001674:	d015      	beq.n	1a0016a2 <handleMasterXferState+0x10e>
	return 1;
1a001676:	2001      	movs	r0, #1
1a001678:	e017      	b.n	1a0016aa <handleMasterXferState+0x116>
	uint32_t cclr = I2C_CON_FLAGS;
1a00167a:	233c      	movs	r3, #60	; 0x3c
1a00167c:	e7ea      	b.n	1a001654 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a00167e:	2305      	movs	r3, #5
1a001680:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a001682:	232c      	movs	r3, #44	; 0x2c
		break;
1a001684:	e7eb      	b.n	1a00165e <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a001686:	2301      	movs	r3, #1
1a001688:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a00168a:	232c      	movs	r3, #44	; 0x2c
		break;
1a00168c:	e7e7      	b.n	1a00165e <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a00168e:	2302      	movs	r3, #2
1a001690:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a001692:	233c      	movs	r3, #60	; 0x3c
		break;
1a001694:	e7e3      	b.n	1a00165e <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a001696:	2303      	movs	r3, #3
1a001698:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a00169a:	232c      	movs	r3, #44	; 0x2c
1a00169c:	e7df      	b.n	1a00165e <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a00169e:	233c      	movs	r3, #60	; 0x3c
1a0016a0:	e7dd      	b.n	1a00165e <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a0016a2:	7d0b      	ldrb	r3, [r1, #20]
1a0016a4:	2b04      	cmp	r3, #4
1a0016a6:	d002      	beq.n	1a0016ae <handleMasterXferState+0x11a>
		return 0;
1a0016a8:	2000      	movs	r0, #0
}
1a0016aa:	bc30      	pop	{r4, r5}
1a0016ac:	4770      	bx	lr
			xfer->status = I2C_STATUS_DONE;
1a0016ae:	2000      	movs	r0, #0
1a0016b0:	7508      	strb	r0, [r1, #20]
1a0016b2:	e7fa      	b.n	1a0016aa <handleMasterXferState+0x116>

1a0016b4 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0016b4:	b570      	push	{r4, r5, r6, lr}
1a0016b6:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0016b8:	4e06      	ldr	r6, [pc, #24]	; (1a0016d4 <Chip_I2C_Init+0x20>)
1a0016ba:	00c4      	lsls	r4, r0, #3
1a0016bc:	1a22      	subs	r2, r4, r0
1a0016be:	0093      	lsls	r3, r2, #2
1a0016c0:	4433      	add	r3, r6
1a0016c2:	8898      	ldrh	r0, [r3, #4]
1a0016c4:	f7ff fdca 	bl	1a00125c <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0016c8:	1b64      	subs	r4, r4, r5
1a0016ca:	00a3      	lsls	r3, r4, #2
1a0016cc:	58f3      	ldr	r3, [r6, r3]
1a0016ce:	226c      	movs	r2, #108	; 0x6c
1a0016d0:	619a      	str	r2, [r3, #24]
}
1a0016d2:	bd70      	pop	{r4, r5, r6, pc}
1a0016d4:	10000004 	.word	0x10000004

1a0016d8 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0016d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0016dc:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0016de:	4e0b      	ldr	r6, [pc, #44]	; (1a00170c <Chip_I2C_SetClockRate+0x34>)
1a0016e0:	00c5      	lsls	r5, r0, #3
1a0016e2:	1a2b      	subs	r3, r5, r0
1a0016e4:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0016e8:	eb06 0308 	add.w	r3, r6, r8
1a0016ec:	8898      	ldrh	r0, [r3, #4]
1a0016ee:	f7ff fdcf 	bl	1a001290 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0016f2:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0016f6:	f856 3008 	ldr.w	r3, [r6, r8]
1a0016fa:	0842      	lsrs	r2, r0, #1
1a0016fc:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0016fe:	f856 3008 	ldr.w	r3, [r6, r8]
1a001702:	691a      	ldr	r2, [r3, #16]
1a001704:	1a80      	subs	r0, r0, r2
1a001706:	6158      	str	r0, [r3, #20]
}
1a001708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00170c:	10000004 	.word	0x10000004

1a001710 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a001710:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a001714:	009a      	lsls	r2, r3, #2
1a001716:	4b09      	ldr	r3, [pc, #36]	; (1a00173c <Chip_I2C_SetMasterEventHandler+0x2c>)
1a001718:	4413      	add	r3, r2
1a00171a:	691b      	ldr	r3, [r3, #16]
1a00171c:	b153      	cbz	r3, 1a001734 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a00171e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001722:	0082      	lsls	r2, r0, #2
1a001724:	4b05      	ldr	r3, [pc, #20]	; (1a00173c <Chip_I2C_SetMasterEventHandler+0x2c>)
1a001726:	4413      	add	r3, r2
1a001728:	6898      	ldr	r0, [r3, #8]
}
1a00172a:	4288      	cmp	r0, r1
1a00172c:	bf14      	ite	ne
1a00172e:	2000      	movne	r0, #0
1a001730:	2001      	moveq	r0, #1
1a001732:	4770      	bx	lr
		iic->mEvent = event;
1a001734:	4b01      	ldr	r3, [pc, #4]	; (1a00173c <Chip_I2C_SetMasterEventHandler+0x2c>)
1a001736:	4413      	add	r3, r2
1a001738:	6099      	str	r1, [r3, #8]
1a00173a:	e7f0      	b.n	1a00171e <Chip_I2C_SetMasterEventHandler+0xe>
1a00173c:	10000004 	.word	0x10000004

1a001740 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a001740:	b510      	push	{r4, lr}
1a001742:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a001744:	4809      	ldr	r0, [pc, #36]	; (1a00176c <Chip_I2C_MasterStateHandler+0x2c>)
1a001746:	00e3      	lsls	r3, r4, #3
1a001748:	1b1b      	subs	r3, r3, r4
1a00174a:	009a      	lsls	r2, r3, #2
1a00174c:	1883      	adds	r3, r0, r2
1a00174e:	6919      	ldr	r1, [r3, #16]
1a001750:	5880      	ldr	r0, [r0, r2]
1a001752:	f7ff ff1f 	bl	1a001594 <handleMasterXferState>
1a001756:	b940      	cbnz	r0, 1a00176a <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a001758:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a00175c:	009a      	lsls	r2, r3, #2
1a00175e:	4b03      	ldr	r3, [pc, #12]	; (1a00176c <Chip_I2C_MasterStateHandler+0x2c>)
1a001760:	4413      	add	r3, r2
1a001762:	689b      	ldr	r3, [r3, #8]
1a001764:	2102      	movs	r1, #2
1a001766:	4620      	mov	r0, r4
1a001768:	4798      	blx	r3
	}
}
1a00176a:	bd10      	pop	{r4, pc}
1a00176c:	10000004 	.word	0x10000004

1a001770 <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a001770:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001774:	0083      	lsls	r3, r0, #2
1a001776:	4a03      	ldr	r2, [pc, #12]	; (1a001784 <Chip_I2C_IsStateChanged+0x14>)
1a001778:	58d3      	ldr	r3, [r2, r3]
1a00177a:	6818      	ldr	r0, [r3, #0]
}
1a00177c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a001780:	4770      	bx	lr
1a001782:	bf00      	nop
1a001784:	10000004 	.word	0x10000004

1a001788 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a001788:	2901      	cmp	r1, #1
1a00178a:	d000      	beq.n	1a00178e <Chip_I2C_EventHandlerPolling+0x6>
1a00178c:	4770      	bx	lr
{
1a00178e:	b538      	push	{r3, r4, r5, lr}
1a001790:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a001792:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a001796:	009a      	lsls	r2, r3, #2
1a001798:	4b08      	ldr	r3, [pc, #32]	; (1a0017bc <Chip_I2C_EventHandlerPolling+0x34>)
1a00179a:	4413      	add	r3, r2
1a00179c:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a00179e:	7d2b      	ldrb	r3, [r5, #20]
1a0017a0:	b2db      	uxtb	r3, r3
1a0017a2:	2b04      	cmp	r3, #4
1a0017a4:	d108      	bne.n	1a0017b8 <Chip_I2C_EventHandlerPolling+0x30>
		if (Chip_I2C_IsStateChanged(id)) {
1a0017a6:	4620      	mov	r0, r4
1a0017a8:	f7ff ffe2 	bl	1a001770 <Chip_I2C_IsStateChanged>
1a0017ac:	2800      	cmp	r0, #0
1a0017ae:	d0f6      	beq.n	1a00179e <Chip_I2C_EventHandlerPolling+0x16>
			Chip_I2C_MasterStateHandler(id);
1a0017b0:	4620      	mov	r0, r4
1a0017b2:	f7ff ffc5 	bl	1a001740 <Chip_I2C_MasterStateHandler>
1a0017b6:	e7f2      	b.n	1a00179e <Chip_I2C_EventHandlerPolling+0x16>
}
1a0017b8:	bd38      	pop	{r3, r4, r5, pc}
1a0017ba:	bf00      	nop
1a0017bc:	10000004 	.word	0x10000004

1a0017c0 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0017c0:	4b03      	ldr	r3, [pc, #12]	; (1a0017d0 <Chip_SSP_GetClockIndex+0x10>)
1a0017c2:	4298      	cmp	r0, r3
1a0017c4:	d001      	beq.n	1a0017ca <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0017c6:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0017c8:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0017ca:	20a5      	movs	r0, #165	; 0xa5
1a0017cc:	4770      	bx	lr
1a0017ce:	bf00      	nop
1a0017d0:	400c5000 	.word	0x400c5000

1a0017d4 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0017d4:	4b04      	ldr	r3, [pc, #16]	; (1a0017e8 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0017d6:	4298      	cmp	r0, r3
1a0017d8:	d002      	beq.n	1a0017e0 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0017da:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0017de:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0017e0:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0017e4:	4770      	bx	lr
1a0017e6:	bf00      	nop
1a0017e8:	400c5000 	.word	0x400c5000

1a0017ec <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0017ec:	6803      	ldr	r3, [r0, #0]
1a0017ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0017f2:	0209      	lsls	r1, r1, #8
1a0017f4:	b289      	uxth	r1, r1
1a0017f6:	4319      	orrs	r1, r3
1a0017f8:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0017fa:	6102      	str	r2, [r0, #16]
}
1a0017fc:	4770      	bx	lr

1a0017fe <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0017fe:	b570      	push	{r4, r5, r6, lr}
1a001800:	4606      	mov	r6, r0
1a001802:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001804:	f7ff ffe6 	bl	1a0017d4 <Chip_SSP_GetPeriphClockIndex>
1a001808:	f7ff fd42 	bl	1a001290 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00180c:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00180e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a001812:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a001814:	e000      	b.n	1a001818 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001816:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001818:	42ab      	cmp	r3, r5
1a00181a:	d90b      	bls.n	1a001834 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a00181c:	1c4c      	adds	r4, r1, #1
1a00181e:	fb02 f304 	mul.w	r3, r2, r4
1a001822:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a001826:	429d      	cmp	r5, r3
1a001828:	d2f6      	bcs.n	1a001818 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a00182a:	2cff      	cmp	r4, #255	; 0xff
1a00182c:	d9f3      	bls.n	1a001816 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00182e:	3202      	adds	r2, #2
				cr0_div = 0;
1a001830:	2100      	movs	r1, #0
1a001832:	e7f1      	b.n	1a001818 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001834:	4630      	mov	r0, r6
1a001836:	f7ff ffd9 	bl	1a0017ec <Chip_SSP_SetClockRate>
}
1a00183a:	bd70      	pop	{r4, r5, r6, pc}

1a00183c <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a00183c:	b510      	push	{r4, lr}
1a00183e:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001840:	f7ff ffbe 	bl	1a0017c0 <Chip_SSP_GetClockIndex>
1a001844:	f7ff fd0a 	bl	1a00125c <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001848:	4620      	mov	r0, r4
1a00184a:	f7ff ffc3 	bl	1a0017d4 <Chip_SSP_GetPeriphClockIndex>
1a00184e:	f7ff fd05 	bl	1a00125c <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001852:	6863      	ldr	r3, [r4, #4]
1a001854:	f023 0304 	bic.w	r3, r3, #4
1a001858:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00185a:	6823      	ldr	r3, [r4, #0]
1a00185c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001860:	f043 0307 	orr.w	r3, r3, #7
1a001864:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001866:	4902      	ldr	r1, [pc, #8]	; (1a001870 <Chip_SSP_Init+0x34>)
1a001868:	4620      	mov	r0, r4
1a00186a:	f7ff ffc8 	bl	1a0017fe <Chip_SSP_SetBitRate>
}
1a00186e:	bd10      	pop	{r4, pc}
1a001870:	000186a0 	.word	0x000186a0

1a001874 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001874:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a001876:	4a0b      	ldr	r2, [pc, #44]	; (1a0018a4 <SystemInit+0x30>)
1a001878:	4b0b      	ldr	r3, [pc, #44]	; (1a0018a8 <SystemInit+0x34>)
1a00187a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a00187c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001880:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a001882:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a001886:	2b20      	cmp	r3, #32
1a001888:	d004      	beq.n	1a001894 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a00188a:	f7ff f921 	bl	1a000ad0 <Board_SystemInit>
   Board_Init();
1a00188e:	f7ff f8a7 	bl	1a0009e0 <Board_Init>
}
1a001892:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001894:	4a04      	ldr	r2, [pc, #16]	; (1a0018a8 <SystemInit+0x34>)
1a001896:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00189a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00189e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0018a2:	e7f2      	b.n	1a00188a <SystemInit+0x16>
1a0018a4:	1a000000 	.word	0x1a000000
1a0018a8:	e000ed00 	.word	0xe000ed00

1a0018ac <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0018ac:	4b04      	ldr	r3, [pc, #16]	; (1a0018c0 <cyclesCounterInit+0x14>)
1a0018ae:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0018b0:	4a04      	ldr	r2, [pc, #16]	; (1a0018c4 <cyclesCounterInit+0x18>)
1a0018b2:	6813      	ldr	r3, [r2, #0]
1a0018b4:	f043 0301 	orr.w	r3, r3, #1
1a0018b8:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0018ba:	2001      	movs	r0, #1
1a0018bc:	4770      	bx	lr
1a0018be:	bf00      	nop
1a0018c0:	1000003c 	.word	0x1000003c
1a0018c4:	e0001000 	.word	0xe0001000

1a0018c8 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a0018c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0018cc:	4680      	mov	r8, r0
1a0018ce:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0018d0:	4c19      	ldr	r4, [pc, #100]	; (1a001938 <uartInit+0x70>)
1a0018d2:	0045      	lsls	r5, r0, #1
1a0018d4:	182a      	adds	r2, r5, r0
1a0018d6:	0093      	lsls	r3, r2, #2
1a0018d8:	18e6      	adds	r6, r4, r3
1a0018da:	58e7      	ldr	r7, [r4, r3]
1a0018dc:	4638      	mov	r0, r7
1a0018de:	f7ff f913 	bl	1a000b08 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0018e2:	4649      	mov	r1, r9
1a0018e4:	4638      	mov	r0, r7
1a0018e6:	f7ff f939 	bl	1a000b5c <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0018ea:	2307      	movs	r3, #7
1a0018ec:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0018ee:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0018f0:	2301      	movs	r3, #1
1a0018f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0018f4:	7930      	ldrb	r0, [r6, #4]
1a0018f6:	7973      	ldrb	r3, [r6, #5]
1a0018f8:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0018fa:	f042 0218 	orr.w	r2, r2, #24
1a0018fe:	490f      	ldr	r1, [pc, #60]	; (1a00193c <uartInit+0x74>)
1a001900:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a001908:	79f0      	ldrb	r0, [r6, #7]
1a00190a:	7a33      	ldrb	r3, [r6, #8]
1a00190c:	7a72      	ldrb	r2, [r6, #9]
1a00190e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001912:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a00191a:	f1b8 0f01 	cmp.w	r8, #1
1a00191e:	d001      	beq.n	1a001924 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a001920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a001924:	4a06      	ldr	r2, [pc, #24]	; (1a001940 <uartInit+0x78>)
1a001926:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a001928:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a00192c:	64d3      	str	r3, [r2, #76]	; 0x4c
1a00192e:	221a      	movs	r2, #26
1a001930:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a001934:	e7f4      	b.n	1a001920 <uartInit+0x58>
1a001936:	bf00      	nop
1a001938:	1a007b2c 	.word	0x1a007b2c
1a00193c:	40086000 	.word	0x40086000
1a001940:	40081000 	.word	0x40081000

1a001944 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a001944:	4b01      	ldr	r3, [pc, #4]	; (1a00194c <tickRead+0x8>)
1a001946:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00194a:	4770      	bx	lr
1a00194c:	10000a28 	.word	0x10000a28

1a001950 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a001950:	b918      	cbnz	r0, 1a00195a <tickPowerSet+0xa>
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a001952:	4b04      	ldr	r3, [pc, #16]	; (1a001964 <tickPowerSet+0x14>)
1a001954:	2200      	movs	r2, #0
1a001956:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a001958:	4770      	bx	lr
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a00195a:	4b02      	ldr	r3, [pc, #8]	; (1a001964 <tickPowerSet+0x14>)
1a00195c:	2207      	movs	r2, #7
1a00195e:	601a      	str	r2, [r3, #0]
1a001960:	4770      	bx	lr
1a001962:	bf00      	nop
1a001964:	e000e010 	.word	0xe000e010

1a001968 <tickInit>:
{
1a001968:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a00196a:	ea50 0301 	orrs.w	r3, r0, r1
1a00196e:	d02a      	beq.n	1a0019c6 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001970:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a001974:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a001978:	2b00      	cmp	r3, #0
1a00197a:	bf08      	it	eq
1a00197c:	2a32      	cmpeq	r2, #50	; 0x32
1a00197e:	d227      	bcs.n	1a0019d0 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001980:	4b14      	ldr	r3, [pc, #80]	; (1a0019d4 <tickInit+0x6c>)
1a001982:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a001986:	4b14      	ldr	r3, [pc, #80]	; (1a0019d8 <tickInit+0x70>)
1a001988:	681b      	ldr	r3, [r3, #0]
1a00198a:	fba3 4500 	umull	r4, r5, r3, r0
1a00198e:	fb03 5501 	mla	r5, r3, r1, r5
1a001992:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001996:	2300      	movs	r3, #0
1a001998:	4620      	mov	r0, r4
1a00199a:	4629      	mov	r1, r5
1a00199c:	f000 feb2 	bl	1a002704 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a0019a0:	3801      	subs	r0, #1
1a0019a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a0019a6:	d209      	bcs.n	1a0019bc <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a0019a8:	4b0c      	ldr	r3, [pc, #48]	; (1a0019dc <tickInit+0x74>)
1a0019aa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0019ac:	4a0c      	ldr	r2, [pc, #48]	; (1a0019e0 <tickInit+0x78>)
1a0019ae:	21e0      	movs	r1, #224	; 0xe0
1a0019b0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a0019b4:	2200      	movs	r2, #0
1a0019b6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a0019b8:	2207      	movs	r2, #7
1a0019ba:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a0019bc:	2001      	movs	r0, #1
1a0019be:	f7ff ffc7 	bl	1a001950 <tickPowerSet>
      bool_t ret_val = 1;
1a0019c2:	2001      	movs	r0, #1
}
1a0019c4:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a0019c6:	2000      	movs	r0, #0
1a0019c8:	f7ff ffc2 	bl	1a001950 <tickPowerSet>
         ret_val = 0;
1a0019cc:	2000      	movs	r0, #0
1a0019ce:	e7f9      	b.n	1a0019c4 <tickInit+0x5c>
            ret_val = 0;
1a0019d0:	2000      	movs	r0, #0
1a0019d2:	e7f7      	b.n	1a0019c4 <tickInit+0x5c>
1a0019d4:	10000040 	.word	0x10000040
1a0019d8:	10000a6c 	.word	0x10000a6c
1a0019dc:	e000e010 	.word	0xe000e010
1a0019e0:	e000ed00 	.word	0xe000ed00

1a0019e4 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0019e4:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a0019e8:	4908      	ldr	r1, [pc, #32]	; (1a001a0c <SysTick_Handler+0x28>)
1a0019ea:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0019ee:	f112 0b01 	adds.w	fp, r2, #1
1a0019f2:	f143 0c00 	adc.w	ip, r3, #0
1a0019f6:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0019fa:	4b05      	ldr	r3, [pc, #20]	; (1a001a10 <SysTick_Handler+0x2c>)
1a0019fc:	681b      	ldr	r3, [r3, #0]
1a0019fe:	b113      	cbz	r3, 1a001a06 <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a001a00:	4a04      	ldr	r2, [pc, #16]	; (1a001a14 <SysTick_Handler+0x30>)
1a001a02:	6810      	ldr	r0, [r2, #0]
1a001a04:	4798      	blx	r3
   }
}
1a001a06:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a001a0a:	bf00      	nop
1a001a0c:	10000a28 	.word	0x10000a28
1a001a10:	10000a30 	.word	0x10000a30
1a001a14:	10000a24 	.word	0x10000a24

1a001a18 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a001a18:	b538      	push	{r3, r4, r5, lr}
1a001a1a:	4604      	mov	r4, r0
1a001a1c:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a001a1e:	4b08      	ldr	r3, [pc, #32]	; (1a001a40 <i2cHardwareInit+0x28>)
1a001a20:	f640 0208 	movw	r2, #2056	; 0x808
1a001a24:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE ); // Equal for CIAA-NXP and EDU-CIAA-NXP on I2C0

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a001a28:	f7ff fe44 	bl	1a0016b4 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a001a2c:	4629      	mov	r1, r5
1a001a2e:	4620      	mov	r0, r4
1a001a30:	f7ff fe52 	bl	1a0016d8 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a001a34:	4903      	ldr	r1, [pc, #12]	; (1a001a44 <i2cHardwareInit+0x2c>)
1a001a36:	4620      	mov	r0, r4
1a001a38:	f7ff fe6a 	bl	1a001710 <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a001a3c:	2001      	movs	r0, #1
1a001a3e:	bd38      	pop	{r3, r4, r5, pc}
1a001a40:	40086000 	.word	0x40086000
1a001a44:	1a001789 	.word	0x1a001789

1a001a48 <i2cHardwareRead>:
                               uint16_t dataToReadBufferSize,
                               bool_t   sendWriteStop,
                               uint8_t* receiveDataBuffer,
                               uint16_t receiveDataBufferSize,
                               bool_t   sendReadStop )
{
1a001a48:	b500      	push	{lr}
1a001a4a:	b085      	sub	sp, #20

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   i2cData.slaveAddr = i2cSlaveAddress;
1a001a4c:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a001a50:	2100      	movs	r1, #0
1a001a52:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a001a56:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = dataToReadBuffer;
1a001a5a:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = dataToReadBufferSize;
1a001a5c:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = receiveDataBuffer;
1a001a60:	9b07      	ldr	r3, [sp, #28]
1a001a62:	9303      	str	r3, [sp, #12]
   i2cData.rxSz      = receiveDataBufferSize;
1a001a64:	f8bd 3020 	ldrh.w	r3, [sp, #32]
1a001a68:	f8ad 3006 	strh.w	r3, [sp, #6]

   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a001a6c:	4669      	mov	r1, sp
1a001a6e:	4804      	ldr	r0, [pc, #16]	; (1a001a80 <i2cHardwareRead+0x38>)
1a001a70:	f7ff fd6d 	bl	1a00154e <Chip_I2CM_XferBlocking>
1a001a74:	b100      	cbz	r0, 1a001a78 <i2cHardwareRead+0x30>
      return FALSE;
   }

   return TRUE;
1a001a76:	2001      	movs	r0, #1
}
1a001a78:	b005      	add	sp, #20
1a001a7a:	f85d fb04 	ldr.w	pc, [sp], #4
1a001a7e:	bf00      	nop
1a001a80:	400a1000 	.word	0x400a1000

1a001a84 <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a001a84:	b108      	cbz	r0, 1a001a8a <i2cHardwareWrite+0x6>
      return FALSE;
1a001a86:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a001a88:	4770      	bx	lr
{
1a001a8a:	b500      	push	{lr}
1a001a8c:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a001a8e:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a001a92:	2100      	movs	r1, #0
1a001a94:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a001a98:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a001a9c:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a001a9e:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a001aa2:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a001aa4:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a001aa8:	4669      	mov	r1, sp
1a001aaa:	4804      	ldr	r0, [pc, #16]	; (1a001abc <i2cHardwareWrite+0x38>)
1a001aac:	f7ff fd4f 	bl	1a00154e <Chip_I2CM_XferBlocking>
1a001ab0:	b100      	cbz	r0, 1a001ab4 <i2cHardwareWrite+0x30>
   return TRUE;
1a001ab2:	2001      	movs	r0, #1
}
1a001ab4:	b005      	add	sp, #20
1a001ab6:	f85d fb04 	ldr.w	pc, [sp], #4
1a001aba:	bf00      	nop
1a001abc:	400a1000 	.word	0x400a1000

1a001ac0 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a001ac0:	b108      	cbz	r0, 1a001ac6 <i2cInit+0x6>
      return FALSE;
1a001ac2:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a001ac4:	4770      	bx	lr
{
1a001ac6:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a001ac8:	f7ff ffa6 	bl	1a001a18 <i2cHardwareInit>
}
1a001acc:	bd08      	pop	{r3, pc}

1a001ace <i2cRead>:
                bool_t   sendReadStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a001ace:	b108      	cbz	r0, 1a001ad4 <i2cRead+0x6>
      return FALSE;
1a001ad0:	2000      	movs	r0, #0
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
}
1a001ad2:	4770      	bx	lr
{
1a001ad4:	b510      	push	{r4, lr}
1a001ad6:	b084      	sub	sp, #16
   retVal = i2cHardwareRead( i2cNumber,
1a001ad8:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
1a001adc:	9403      	str	r4, [sp, #12]
1a001ade:	f8bd 4020 	ldrh.w	r4, [sp, #32]
1a001ae2:	9402      	str	r4, [sp, #8]
1a001ae4:	9c07      	ldr	r4, [sp, #28]
1a001ae6:	9401      	str	r4, [sp, #4]
1a001ae8:	f89d 4018 	ldrb.w	r4, [sp, #24]
1a001aec:	9400      	str	r4, [sp, #0]
1a001aee:	f7ff ffab 	bl	1a001a48 <i2cHardwareRead>
}
1a001af2:	b004      	add	sp, #16
1a001af4:	bd10      	pop	{r4, pc}

1a001af6 <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a001af6:	b108      	cbz	r0, 1a001afc <i2cWrite+0x6>
      return FALSE;
1a001af8:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a001afa:	4770      	bx	lr
{
1a001afc:	b510      	push	{r4, lr}
1a001afe:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a001b00:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a001b04:	9400      	str	r4, [sp, #0]
1a001b06:	f7ff ffbd 	bl	1a001a84 <i2cHardwareWrite>
}
1a001b0a:	b002      	add	sp, #8
1a001b0c:	bd10      	pop	{r4, pc}
1a001b0e:	Address 0x000000001a001b0e is out of bounds.


1a001b10 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001b10:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001b12:	4d0b      	ldr	r5, [pc, #44]	; (1a001b40 <gpioObtainPinInit+0x30>)
1a001b14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001b18:	182c      	adds	r4, r5, r0
1a001b1a:	5628      	ldrsb	r0, [r5, r0]
1a001b1c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a001b1e:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001b22:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001b24:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001b28:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a001b2a:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a001b2e:	9b02      	ldr	r3, [sp, #8]
1a001b30:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001b32:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001b36:	9b03      	ldr	r3, [sp, #12]
1a001b38:	701a      	strb	r2, [r3, #0]
}
1a001b3a:	bc30      	pop	{r4, r5}
1a001b3c:	4770      	bx	lr
1a001b3e:	bf00      	nop
1a001b40:	1a007b74 	.word	0x1a007b74

1a001b44 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a001b44:	f110 0f02 	cmn.w	r0, #2
1a001b48:	f000 80c7 	beq.w	1a001cda <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a001b4c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001b50:	f000 80c5 	beq.w	1a001cde <gpioInit+0x19a>
{
1a001b54:	b570      	push	{r4, r5, r6, lr}
1a001b56:	b084      	sub	sp, #16
1a001b58:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001b5a:	2300      	movs	r3, #0
1a001b5c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001b60:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001b64:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001b68:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001b6c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001b70:	f10d 030b 	add.w	r3, sp, #11
1a001b74:	9301      	str	r3, [sp, #4]
1a001b76:	ab03      	add	r3, sp, #12
1a001b78:	9300      	str	r3, [sp, #0]
1a001b7a:	f10d 030d 	add.w	r3, sp, #13
1a001b7e:	f10d 020e 	add.w	r2, sp, #14
1a001b82:	f10d 010f 	add.w	r1, sp, #15
1a001b86:	f7ff ffc3 	bl	1a001b10 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a001b8a:	2c05      	cmp	r4, #5
1a001b8c:	f200 80a9 	bhi.w	1a001ce2 <gpioInit+0x19e>
1a001b90:	e8df f004 	tbb	[pc, r4]
1a001b94:	45278109 	.word	0x45278109
1a001b98:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a001b9a:	4853      	ldr	r0, [pc, #332]	; (1a001ce8 <gpioInit+0x1a4>)
1a001b9c:	f7ff fce9 	bl	1a001572 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001ba0:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001ba2:	b004      	add	sp, #16
1a001ba4:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a001ba6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001baa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001bae:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001bb2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001bb6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001bba:	494c      	ldr	r1, [pc, #304]	; (1a001cec <gpioInit+0x1a8>)
1a001bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001bc0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001bc4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001bc8:	2001      	movs	r0, #1
1a001bca:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001bce:	4c46      	ldr	r4, [pc, #280]	; (1a001ce8 <gpioInit+0x1a4>)
1a001bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001bd4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001bd8:	ea22 0201 	bic.w	r2, r2, r1
1a001bdc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001be0:	e7df      	b.n	1a001ba2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001be2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001be6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001bea:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001bee:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001bf2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001bf6:	493d      	ldr	r1, [pc, #244]	; (1a001cec <gpioInit+0x1a8>)
1a001bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001bfc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001c00:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001c04:	2001      	movs	r0, #1
1a001c06:	fa00 f102 	lsl.w	r1, r0, r2
1a001c0a:	4c37      	ldr	r4, [pc, #220]	; (1a001ce8 <gpioInit+0x1a4>)
1a001c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001c10:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001c14:	ea22 0201 	bic.w	r2, r2, r1
1a001c18:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001c1c:	e7c1      	b.n	1a001ba2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001c1e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001c22:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001c26:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001c2a:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a001c2e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001c32:	492e      	ldr	r1, [pc, #184]	; (1a001cec <gpioInit+0x1a8>)
1a001c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001c38:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001c3c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001c40:	2001      	movs	r0, #1
1a001c42:	fa00 f102 	lsl.w	r1, r0, r2
1a001c46:	4c28      	ldr	r4, [pc, #160]	; (1a001ce8 <gpioInit+0x1a4>)
1a001c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001c4c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001c50:	ea22 0201 	bic.w	r2, r2, r1
1a001c54:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001c58:	e7a3      	b.n	1a001ba2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001c5a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001c5e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001c62:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001c66:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001c6a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001c6e:	491f      	ldr	r1, [pc, #124]	; (1a001cec <gpioInit+0x1a8>)
1a001c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001c74:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001c78:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001c7c:	2001      	movs	r0, #1
1a001c7e:	fa00 f102 	lsl.w	r1, r0, r2
1a001c82:	4c19      	ldr	r4, [pc, #100]	; (1a001ce8 <gpioInit+0x1a4>)
1a001c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001c88:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001c8c:	ea22 0201 	bic.w	r2, r2, r1
1a001c90:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001c94:	e785      	b.n	1a001ba2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001c96:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001c9a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001c9e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001ca2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001ca6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001caa:	4910      	ldr	r1, [pc, #64]	; (1a001cec <gpioInit+0x1a8>)
1a001cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001cb0:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001cb4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001cb8:	2001      	movs	r0, #1
1a001cba:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a001cbe:	4b0a      	ldr	r3, [pc, #40]	; (1a001ce8 <gpioInit+0x1a4>)
1a001cc0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001cc4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001cc8:	4331      	orrs	r1, r6
1a001cca:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001cce:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001cd0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001cd4:	2100      	movs	r1, #0
1a001cd6:	5499      	strb	r1, [r3, r2]
1a001cd8:	e763      	b.n	1a001ba2 <gpioInit+0x5e>
	  return FALSE;
1a001cda:	2000      	movs	r0, #0
1a001cdc:	4770      	bx	lr
	  return FALSE;
1a001cde:	2000      	movs	r0, #0
}
1a001ce0:	4770      	bx	lr
      ret_val = 0;
1a001ce2:	2000      	movs	r0, #0
1a001ce4:	e75d      	b.n	1a001ba2 <gpioInit+0x5e>
1a001ce6:	bf00      	nop
1a001ce8:	400f4000 	.word	0x400f4000
1a001cec:	40086000 	.word	0x40086000

1a001cf0 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001cf0:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001cf2:	4b04      	ldr	r3, [pc, #16]	; (1a001d04 <USB0_IRQHandler+0x14>)
1a001cf4:	681b      	ldr	r3, [r3, #0]
1a001cf6:	681b      	ldr	r3, [r3, #0]
1a001cf8:	68db      	ldr	r3, [r3, #12]
1a001cfa:	4a03      	ldr	r2, [pc, #12]	; (1a001d08 <USB0_IRQHandler+0x18>)
1a001cfc:	6810      	ldr	r0, [r2, #0]
1a001cfe:	4798      	blx	r3
}
1a001d00:	bd08      	pop	{r3, pc}
1a001d02:	bf00      	nop
1a001d04:	10000a70 	.word	0x10000a70
1a001d08:	10000a34 	.word	0x10000a34

1a001d0c <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001d0c:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001d0e:	f7ff fae5 	bl	1a0012dc <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001d12:	4b1a      	ldr	r3, [pc, #104]	; (1a001d7c <boardInit+0x70>)
1a001d14:	6818      	ldr	r0, [r3, #0]
1a001d16:	f7ff fdc9 	bl	1a0018ac <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001d1a:	2001      	movs	r0, #1
1a001d1c:	2100      	movs	r1, #0
1a001d1e:	f7ff fe23 	bl	1a001968 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001d22:	2105      	movs	r1, #5
1a001d24:	2000      	movs	r0, #0
1a001d26:	f7ff ff0d 	bl	1a001b44 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001d2a:	2100      	movs	r1, #0
1a001d2c:	2024      	movs	r0, #36	; 0x24
1a001d2e:	f7ff ff09 	bl	1a001b44 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001d32:	2100      	movs	r1, #0
1a001d34:	2025      	movs	r0, #37	; 0x25
1a001d36:	f7ff ff05 	bl	1a001b44 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001d3a:	2100      	movs	r1, #0
1a001d3c:	2026      	movs	r0, #38	; 0x26
1a001d3e:	f7ff ff01 	bl	1a001b44 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001d42:	2100      	movs	r1, #0
1a001d44:	2027      	movs	r0, #39	; 0x27
1a001d46:	f7ff fefd 	bl	1a001b44 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001d4a:	2101      	movs	r1, #1
1a001d4c:	2028      	movs	r0, #40	; 0x28
1a001d4e:	f7ff fef9 	bl	1a001b44 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001d52:	2101      	movs	r1, #1
1a001d54:	2029      	movs	r0, #41	; 0x29
1a001d56:	f7ff fef5 	bl	1a001b44 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001d5a:	2101      	movs	r1, #1
1a001d5c:	202a      	movs	r0, #42	; 0x2a
1a001d5e:	f7ff fef1 	bl	1a001b44 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001d62:	2101      	movs	r1, #1
1a001d64:	202b      	movs	r0, #43	; 0x2b
1a001d66:	f7ff feed 	bl	1a001b44 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001d6a:	2101      	movs	r1, #1
1a001d6c:	202c      	movs	r0, #44	; 0x2c
1a001d6e:	f7ff fee9 	bl	1a001b44 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001d72:	2101      	movs	r1, #1
1a001d74:	202d      	movs	r0, #45	; 0x2d
1a001d76:	f7ff fee5 	bl	1a001b44 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001d7a:	bd08      	pop	{r3, pc}
1a001d7c:	10000a6c 	.word	0x10000a6c

1a001d80 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a001d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001d84:	4680      	mov	r8, r0
1a001d86:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a001d88:	f7ff fddc 	bl	1a001944 <tickRead>
1a001d8c:	4606      	mov	r6, r0
1a001d8e:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a001d90:	f7ff fdd8 	bl	1a001944 <tickRead>
1a001d94:	1b84      	subs	r4, r0, r6
1a001d96:	eb61 0507 	sbc.w	r5, r1, r7
1a001d9a:	4b06      	ldr	r3, [pc, #24]	; (1a001db4 <delay+0x34>)
1a001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001da0:	4640      	mov	r0, r8
1a001da2:	4649      	mov	r1, r9
1a001da4:	f000 fcae 	bl	1a002704 <__aeabi_uldivmod>
1a001da8:	428d      	cmp	r5, r1
1a001daa:	bf08      	it	eq
1a001dac:	4284      	cmpeq	r4, r0
1a001dae:	d3ef      	bcc.n	1a001d90 <delay+0x10>
}
1a001db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001db4:	10000040 	.word	0x10000040

1a001db8 <__aeabi_drsub>:
1a001db8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a001dbc:	e002      	b.n	1a001dc4 <__adddf3>
1a001dbe:	bf00      	nop

1a001dc0 <__aeabi_dsub>:
1a001dc0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a001dc4 <__adddf3>:
1a001dc4:	b530      	push	{r4, r5, lr}
1a001dc6:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a001dca:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a001dce:	ea94 0f05 	teq	r4, r5
1a001dd2:	bf08      	it	eq
1a001dd4:	ea90 0f02 	teqeq	r0, r2
1a001dd8:	bf1f      	itttt	ne
1a001dda:	ea54 0c00 	orrsne.w	ip, r4, r0
1a001dde:	ea55 0c02 	orrsne.w	ip, r5, r2
1a001de2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a001de6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a001dea:	f000 80e2 	beq.w	1a001fb2 <__adddf3+0x1ee>
1a001dee:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a001df2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a001df6:	bfb8      	it	lt
1a001df8:	426d      	neglt	r5, r5
1a001dfa:	dd0c      	ble.n	1a001e16 <__adddf3+0x52>
1a001dfc:	442c      	add	r4, r5
1a001dfe:	ea80 0202 	eor.w	r2, r0, r2
1a001e02:	ea81 0303 	eor.w	r3, r1, r3
1a001e06:	ea82 0000 	eor.w	r0, r2, r0
1a001e0a:	ea83 0101 	eor.w	r1, r3, r1
1a001e0e:	ea80 0202 	eor.w	r2, r0, r2
1a001e12:	ea81 0303 	eor.w	r3, r1, r3
1a001e16:	2d36      	cmp	r5, #54	; 0x36
1a001e18:	bf88      	it	hi
1a001e1a:	bd30      	pophi	{r4, r5, pc}
1a001e1c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a001e20:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a001e24:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a001e28:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a001e2c:	d002      	beq.n	1a001e34 <__adddf3+0x70>
1a001e2e:	4240      	negs	r0, r0
1a001e30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a001e34:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a001e38:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a001e3c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a001e40:	d002      	beq.n	1a001e48 <__adddf3+0x84>
1a001e42:	4252      	negs	r2, r2
1a001e44:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a001e48:	ea94 0f05 	teq	r4, r5
1a001e4c:	f000 80a7 	beq.w	1a001f9e <__adddf3+0x1da>
1a001e50:	f1a4 0401 	sub.w	r4, r4, #1
1a001e54:	f1d5 0e20 	rsbs	lr, r5, #32
1a001e58:	db0d      	blt.n	1a001e76 <__adddf3+0xb2>
1a001e5a:	fa02 fc0e 	lsl.w	ip, r2, lr
1a001e5e:	fa22 f205 	lsr.w	r2, r2, r5
1a001e62:	1880      	adds	r0, r0, r2
1a001e64:	f141 0100 	adc.w	r1, r1, #0
1a001e68:	fa03 f20e 	lsl.w	r2, r3, lr
1a001e6c:	1880      	adds	r0, r0, r2
1a001e6e:	fa43 f305 	asr.w	r3, r3, r5
1a001e72:	4159      	adcs	r1, r3
1a001e74:	e00e      	b.n	1a001e94 <__adddf3+0xd0>
1a001e76:	f1a5 0520 	sub.w	r5, r5, #32
1a001e7a:	f10e 0e20 	add.w	lr, lr, #32
1a001e7e:	2a01      	cmp	r2, #1
1a001e80:	fa03 fc0e 	lsl.w	ip, r3, lr
1a001e84:	bf28      	it	cs
1a001e86:	f04c 0c02 	orrcs.w	ip, ip, #2
1a001e8a:	fa43 f305 	asr.w	r3, r3, r5
1a001e8e:	18c0      	adds	r0, r0, r3
1a001e90:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a001e94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a001e98:	d507      	bpl.n	1a001eaa <__adddf3+0xe6>
1a001e9a:	f04f 0e00 	mov.w	lr, #0
1a001e9e:	f1dc 0c00 	rsbs	ip, ip, #0
1a001ea2:	eb7e 0000 	sbcs.w	r0, lr, r0
1a001ea6:	eb6e 0101 	sbc.w	r1, lr, r1
1a001eaa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a001eae:	d31b      	bcc.n	1a001ee8 <__adddf3+0x124>
1a001eb0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a001eb4:	d30c      	bcc.n	1a001ed0 <__adddf3+0x10c>
1a001eb6:	0849      	lsrs	r1, r1, #1
1a001eb8:	ea5f 0030 	movs.w	r0, r0, rrx
1a001ebc:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a001ec0:	f104 0401 	add.w	r4, r4, #1
1a001ec4:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a001ec8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a001ecc:	f080 809a 	bcs.w	1a002004 <__adddf3+0x240>
1a001ed0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a001ed4:	bf08      	it	eq
1a001ed6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a001eda:	f150 0000 	adcs.w	r0, r0, #0
1a001ede:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a001ee2:	ea41 0105 	orr.w	r1, r1, r5
1a001ee6:	bd30      	pop	{r4, r5, pc}
1a001ee8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a001eec:	4140      	adcs	r0, r0
1a001eee:	eb41 0101 	adc.w	r1, r1, r1
1a001ef2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a001ef6:	f1a4 0401 	sub.w	r4, r4, #1
1a001efa:	d1e9      	bne.n	1a001ed0 <__adddf3+0x10c>
1a001efc:	f091 0f00 	teq	r1, #0
1a001f00:	bf04      	itt	eq
1a001f02:	4601      	moveq	r1, r0
1a001f04:	2000      	moveq	r0, #0
1a001f06:	fab1 f381 	clz	r3, r1
1a001f0a:	bf08      	it	eq
1a001f0c:	3320      	addeq	r3, #32
1a001f0e:	f1a3 030b 	sub.w	r3, r3, #11
1a001f12:	f1b3 0220 	subs.w	r2, r3, #32
1a001f16:	da0c      	bge.n	1a001f32 <__adddf3+0x16e>
1a001f18:	320c      	adds	r2, #12
1a001f1a:	dd08      	ble.n	1a001f2e <__adddf3+0x16a>
1a001f1c:	f102 0c14 	add.w	ip, r2, #20
1a001f20:	f1c2 020c 	rsb	r2, r2, #12
1a001f24:	fa01 f00c 	lsl.w	r0, r1, ip
1a001f28:	fa21 f102 	lsr.w	r1, r1, r2
1a001f2c:	e00c      	b.n	1a001f48 <__adddf3+0x184>
1a001f2e:	f102 0214 	add.w	r2, r2, #20
1a001f32:	bfd8      	it	le
1a001f34:	f1c2 0c20 	rsble	ip, r2, #32
1a001f38:	fa01 f102 	lsl.w	r1, r1, r2
1a001f3c:	fa20 fc0c 	lsr.w	ip, r0, ip
1a001f40:	bfdc      	itt	le
1a001f42:	ea41 010c 	orrle.w	r1, r1, ip
1a001f46:	4090      	lslle	r0, r2
1a001f48:	1ae4      	subs	r4, r4, r3
1a001f4a:	bfa2      	ittt	ge
1a001f4c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a001f50:	4329      	orrge	r1, r5
1a001f52:	bd30      	popge	{r4, r5, pc}
1a001f54:	ea6f 0404 	mvn.w	r4, r4
1a001f58:	3c1f      	subs	r4, #31
1a001f5a:	da1c      	bge.n	1a001f96 <__adddf3+0x1d2>
1a001f5c:	340c      	adds	r4, #12
1a001f5e:	dc0e      	bgt.n	1a001f7e <__adddf3+0x1ba>
1a001f60:	f104 0414 	add.w	r4, r4, #20
1a001f64:	f1c4 0220 	rsb	r2, r4, #32
1a001f68:	fa20 f004 	lsr.w	r0, r0, r4
1a001f6c:	fa01 f302 	lsl.w	r3, r1, r2
1a001f70:	ea40 0003 	orr.w	r0, r0, r3
1a001f74:	fa21 f304 	lsr.w	r3, r1, r4
1a001f78:	ea45 0103 	orr.w	r1, r5, r3
1a001f7c:	bd30      	pop	{r4, r5, pc}
1a001f7e:	f1c4 040c 	rsb	r4, r4, #12
1a001f82:	f1c4 0220 	rsb	r2, r4, #32
1a001f86:	fa20 f002 	lsr.w	r0, r0, r2
1a001f8a:	fa01 f304 	lsl.w	r3, r1, r4
1a001f8e:	ea40 0003 	orr.w	r0, r0, r3
1a001f92:	4629      	mov	r1, r5
1a001f94:	bd30      	pop	{r4, r5, pc}
1a001f96:	fa21 f004 	lsr.w	r0, r1, r4
1a001f9a:	4629      	mov	r1, r5
1a001f9c:	bd30      	pop	{r4, r5, pc}
1a001f9e:	f094 0f00 	teq	r4, #0
1a001fa2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a001fa6:	bf06      	itte	eq
1a001fa8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a001fac:	3401      	addeq	r4, #1
1a001fae:	3d01      	subne	r5, #1
1a001fb0:	e74e      	b.n	1a001e50 <__adddf3+0x8c>
1a001fb2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a001fb6:	bf18      	it	ne
1a001fb8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a001fbc:	d029      	beq.n	1a002012 <__adddf3+0x24e>
1a001fbe:	ea94 0f05 	teq	r4, r5
1a001fc2:	bf08      	it	eq
1a001fc4:	ea90 0f02 	teqeq	r0, r2
1a001fc8:	d005      	beq.n	1a001fd6 <__adddf3+0x212>
1a001fca:	ea54 0c00 	orrs.w	ip, r4, r0
1a001fce:	bf04      	itt	eq
1a001fd0:	4619      	moveq	r1, r3
1a001fd2:	4610      	moveq	r0, r2
1a001fd4:	bd30      	pop	{r4, r5, pc}
1a001fd6:	ea91 0f03 	teq	r1, r3
1a001fda:	bf1e      	ittt	ne
1a001fdc:	2100      	movne	r1, #0
1a001fde:	2000      	movne	r0, #0
1a001fe0:	bd30      	popne	{r4, r5, pc}
1a001fe2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a001fe6:	d105      	bne.n	1a001ff4 <__adddf3+0x230>
1a001fe8:	0040      	lsls	r0, r0, #1
1a001fea:	4149      	adcs	r1, r1
1a001fec:	bf28      	it	cs
1a001fee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a001ff2:	bd30      	pop	{r4, r5, pc}
1a001ff4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a001ff8:	bf3c      	itt	cc
1a001ffa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a001ffe:	bd30      	popcc	{r4, r5, pc}
1a002000:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002004:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a002008:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a00200c:	f04f 0000 	mov.w	r0, #0
1a002010:	bd30      	pop	{r4, r5, pc}
1a002012:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a002016:	bf1a      	itte	ne
1a002018:	4619      	movne	r1, r3
1a00201a:	4610      	movne	r0, r2
1a00201c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a002020:	bf1c      	itt	ne
1a002022:	460b      	movne	r3, r1
1a002024:	4602      	movne	r2, r0
1a002026:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a00202a:	bf06      	itte	eq
1a00202c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a002030:	ea91 0f03 	teqeq	r1, r3
1a002034:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a002038:	bd30      	pop	{r4, r5, pc}
1a00203a:	bf00      	nop

1a00203c <__aeabi_ui2d>:
1a00203c:	f090 0f00 	teq	r0, #0
1a002040:	bf04      	itt	eq
1a002042:	2100      	moveq	r1, #0
1a002044:	4770      	bxeq	lr
1a002046:	b530      	push	{r4, r5, lr}
1a002048:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a00204c:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002050:	f04f 0500 	mov.w	r5, #0
1a002054:	f04f 0100 	mov.w	r1, #0
1a002058:	e750      	b.n	1a001efc <__adddf3+0x138>
1a00205a:	bf00      	nop

1a00205c <__aeabi_i2d>:
1a00205c:	f090 0f00 	teq	r0, #0
1a002060:	bf04      	itt	eq
1a002062:	2100      	moveq	r1, #0
1a002064:	4770      	bxeq	lr
1a002066:	b530      	push	{r4, r5, lr}
1a002068:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a00206c:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002070:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a002074:	bf48      	it	mi
1a002076:	4240      	negmi	r0, r0
1a002078:	f04f 0100 	mov.w	r1, #0
1a00207c:	e73e      	b.n	1a001efc <__adddf3+0x138>
1a00207e:	bf00      	nop

1a002080 <__aeabi_f2d>:
1a002080:	0042      	lsls	r2, r0, #1
1a002082:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a002086:	ea4f 0131 	mov.w	r1, r1, rrx
1a00208a:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a00208e:	bf1f      	itttt	ne
1a002090:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a002094:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a002098:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a00209c:	4770      	bxne	lr
1a00209e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a0020a2:	bf08      	it	eq
1a0020a4:	4770      	bxeq	lr
1a0020a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a0020aa:	bf04      	itt	eq
1a0020ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a0020b0:	4770      	bxeq	lr
1a0020b2:	b530      	push	{r4, r5, lr}
1a0020b4:	f44f 7460 	mov.w	r4, #896	; 0x380
1a0020b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0020bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0020c0:	e71c      	b.n	1a001efc <__adddf3+0x138>
1a0020c2:	bf00      	nop

1a0020c4 <__aeabi_ul2d>:
1a0020c4:	ea50 0201 	orrs.w	r2, r0, r1
1a0020c8:	bf08      	it	eq
1a0020ca:	4770      	bxeq	lr
1a0020cc:	b530      	push	{r4, r5, lr}
1a0020ce:	f04f 0500 	mov.w	r5, #0
1a0020d2:	e00a      	b.n	1a0020ea <__aeabi_l2d+0x16>

1a0020d4 <__aeabi_l2d>:
1a0020d4:	ea50 0201 	orrs.w	r2, r0, r1
1a0020d8:	bf08      	it	eq
1a0020da:	4770      	bxeq	lr
1a0020dc:	b530      	push	{r4, r5, lr}
1a0020de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a0020e2:	d502      	bpl.n	1a0020ea <__aeabi_l2d+0x16>
1a0020e4:	4240      	negs	r0, r0
1a0020e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0020ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0020ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0020f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a0020f6:	f43f aed8 	beq.w	1a001eaa <__adddf3+0xe6>
1a0020fa:	f04f 0203 	mov.w	r2, #3
1a0020fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002102:	bf18      	it	ne
1a002104:	3203      	addne	r2, #3
1a002106:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a00210a:	bf18      	it	ne
1a00210c:	3203      	addne	r2, #3
1a00210e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a002112:	f1c2 0320 	rsb	r3, r2, #32
1a002116:	fa00 fc03 	lsl.w	ip, r0, r3
1a00211a:	fa20 f002 	lsr.w	r0, r0, r2
1a00211e:	fa01 fe03 	lsl.w	lr, r1, r3
1a002122:	ea40 000e 	orr.w	r0, r0, lr
1a002126:	fa21 f102 	lsr.w	r1, r1, r2
1a00212a:	4414      	add	r4, r2
1a00212c:	e6bd      	b.n	1a001eaa <__adddf3+0xe6>
1a00212e:	bf00      	nop

1a002130 <__aeabi_dmul>:
1a002130:	b570      	push	{r4, r5, r6, lr}
1a002132:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002136:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a00213a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a00213e:	bf1d      	ittte	ne
1a002140:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002144:	ea94 0f0c 	teqne	r4, ip
1a002148:	ea95 0f0c 	teqne	r5, ip
1a00214c:	f000 f8de 	bleq	1a00230c <__aeabi_dmul+0x1dc>
1a002150:	442c      	add	r4, r5
1a002152:	ea81 0603 	eor.w	r6, r1, r3
1a002156:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a00215a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a00215e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a002162:	bf18      	it	ne
1a002164:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a002168:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00216c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a002170:	d038      	beq.n	1a0021e4 <__aeabi_dmul+0xb4>
1a002172:	fba0 ce02 	umull	ip, lr, r0, r2
1a002176:	f04f 0500 	mov.w	r5, #0
1a00217a:	fbe1 e502 	umlal	lr, r5, r1, r2
1a00217e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a002182:	fbe0 e503 	umlal	lr, r5, r0, r3
1a002186:	f04f 0600 	mov.w	r6, #0
1a00218a:	fbe1 5603 	umlal	r5, r6, r1, r3
1a00218e:	f09c 0f00 	teq	ip, #0
1a002192:	bf18      	it	ne
1a002194:	f04e 0e01 	orrne.w	lr, lr, #1
1a002198:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a00219c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a0021a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a0021a4:	d204      	bcs.n	1a0021b0 <__aeabi_dmul+0x80>
1a0021a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a0021aa:	416d      	adcs	r5, r5
1a0021ac:	eb46 0606 	adc.w	r6, r6, r6
1a0021b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a0021b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a0021b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a0021bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a0021c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a0021c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a0021c8:	bf88      	it	hi
1a0021ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a0021ce:	d81e      	bhi.n	1a00220e <__aeabi_dmul+0xde>
1a0021d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a0021d4:	bf08      	it	eq
1a0021d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a0021da:	f150 0000 	adcs.w	r0, r0, #0
1a0021de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0021e2:	bd70      	pop	{r4, r5, r6, pc}
1a0021e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a0021e8:	ea46 0101 	orr.w	r1, r6, r1
1a0021ec:	ea40 0002 	orr.w	r0, r0, r2
1a0021f0:	ea81 0103 	eor.w	r1, r1, r3
1a0021f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a0021f8:	bfc2      	ittt	gt
1a0021fa:	ebd4 050c 	rsbsgt	r5, r4, ip
1a0021fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002202:	bd70      	popgt	{r4, r5, r6, pc}
1a002204:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002208:	f04f 0e00 	mov.w	lr, #0
1a00220c:	3c01      	subs	r4, #1
1a00220e:	f300 80ab 	bgt.w	1a002368 <__aeabi_dmul+0x238>
1a002212:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a002216:	bfde      	ittt	le
1a002218:	2000      	movle	r0, #0
1a00221a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a00221e:	bd70      	pople	{r4, r5, r6, pc}
1a002220:	f1c4 0400 	rsb	r4, r4, #0
1a002224:	3c20      	subs	r4, #32
1a002226:	da35      	bge.n	1a002294 <__aeabi_dmul+0x164>
1a002228:	340c      	adds	r4, #12
1a00222a:	dc1b      	bgt.n	1a002264 <__aeabi_dmul+0x134>
1a00222c:	f104 0414 	add.w	r4, r4, #20
1a002230:	f1c4 0520 	rsb	r5, r4, #32
1a002234:	fa00 f305 	lsl.w	r3, r0, r5
1a002238:	fa20 f004 	lsr.w	r0, r0, r4
1a00223c:	fa01 f205 	lsl.w	r2, r1, r5
1a002240:	ea40 0002 	orr.w	r0, r0, r2
1a002244:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a002248:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a00224c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002250:	fa21 f604 	lsr.w	r6, r1, r4
1a002254:	eb42 0106 	adc.w	r1, r2, r6
1a002258:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a00225c:	bf08      	it	eq
1a00225e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002262:	bd70      	pop	{r4, r5, r6, pc}
1a002264:	f1c4 040c 	rsb	r4, r4, #12
1a002268:	f1c4 0520 	rsb	r5, r4, #32
1a00226c:	fa00 f304 	lsl.w	r3, r0, r4
1a002270:	fa20 f005 	lsr.w	r0, r0, r5
1a002274:	fa01 f204 	lsl.w	r2, r1, r4
1a002278:	ea40 0002 	orr.w	r0, r0, r2
1a00227c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002280:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002284:	f141 0100 	adc.w	r1, r1, #0
1a002288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a00228c:	bf08      	it	eq
1a00228e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002292:	bd70      	pop	{r4, r5, r6, pc}
1a002294:	f1c4 0520 	rsb	r5, r4, #32
1a002298:	fa00 f205 	lsl.w	r2, r0, r5
1a00229c:	ea4e 0e02 	orr.w	lr, lr, r2
1a0022a0:	fa20 f304 	lsr.w	r3, r0, r4
1a0022a4:	fa01 f205 	lsl.w	r2, r1, r5
1a0022a8:	ea43 0302 	orr.w	r3, r3, r2
1a0022ac:	fa21 f004 	lsr.w	r0, r1, r4
1a0022b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0022b4:	fa21 f204 	lsr.w	r2, r1, r4
1a0022b8:	ea20 0002 	bic.w	r0, r0, r2
1a0022bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a0022c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0022c4:	bf08      	it	eq
1a0022c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0022ca:	bd70      	pop	{r4, r5, r6, pc}
1a0022cc:	f094 0f00 	teq	r4, #0
1a0022d0:	d10f      	bne.n	1a0022f2 <__aeabi_dmul+0x1c2>
1a0022d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a0022d6:	0040      	lsls	r0, r0, #1
1a0022d8:	eb41 0101 	adc.w	r1, r1, r1
1a0022dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0022e0:	bf08      	it	eq
1a0022e2:	3c01      	subeq	r4, #1
1a0022e4:	d0f7      	beq.n	1a0022d6 <__aeabi_dmul+0x1a6>
1a0022e6:	ea41 0106 	orr.w	r1, r1, r6
1a0022ea:	f095 0f00 	teq	r5, #0
1a0022ee:	bf18      	it	ne
1a0022f0:	4770      	bxne	lr
1a0022f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a0022f6:	0052      	lsls	r2, r2, #1
1a0022f8:	eb43 0303 	adc.w	r3, r3, r3
1a0022fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a002300:	bf08      	it	eq
1a002302:	3d01      	subeq	r5, #1
1a002304:	d0f7      	beq.n	1a0022f6 <__aeabi_dmul+0x1c6>
1a002306:	ea43 0306 	orr.w	r3, r3, r6
1a00230a:	4770      	bx	lr
1a00230c:	ea94 0f0c 	teq	r4, ip
1a002310:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002314:	bf18      	it	ne
1a002316:	ea95 0f0c 	teqne	r5, ip
1a00231a:	d00c      	beq.n	1a002336 <__aeabi_dmul+0x206>
1a00231c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002320:	bf18      	it	ne
1a002322:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002326:	d1d1      	bne.n	1a0022cc <__aeabi_dmul+0x19c>
1a002328:	ea81 0103 	eor.w	r1, r1, r3
1a00232c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002330:	f04f 0000 	mov.w	r0, #0
1a002334:	bd70      	pop	{r4, r5, r6, pc}
1a002336:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a00233a:	bf06      	itte	eq
1a00233c:	4610      	moveq	r0, r2
1a00233e:	4619      	moveq	r1, r3
1a002340:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002344:	d019      	beq.n	1a00237a <__aeabi_dmul+0x24a>
1a002346:	ea94 0f0c 	teq	r4, ip
1a00234a:	d102      	bne.n	1a002352 <__aeabi_dmul+0x222>
1a00234c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a002350:	d113      	bne.n	1a00237a <__aeabi_dmul+0x24a>
1a002352:	ea95 0f0c 	teq	r5, ip
1a002356:	d105      	bne.n	1a002364 <__aeabi_dmul+0x234>
1a002358:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a00235c:	bf1c      	itt	ne
1a00235e:	4610      	movne	r0, r2
1a002360:	4619      	movne	r1, r3
1a002362:	d10a      	bne.n	1a00237a <__aeabi_dmul+0x24a>
1a002364:	ea81 0103 	eor.w	r1, r1, r3
1a002368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a00236c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002370:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002374:	f04f 0000 	mov.w	r0, #0
1a002378:	bd70      	pop	{r4, r5, r6, pc}
1a00237a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a00237e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a002382:	bd70      	pop	{r4, r5, r6, pc}

1a002384 <__aeabi_ddiv>:
1a002384:	b570      	push	{r4, r5, r6, lr}
1a002386:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00238a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a00238e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002392:	bf1d      	ittte	ne
1a002394:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002398:	ea94 0f0c 	teqne	r4, ip
1a00239c:	ea95 0f0c 	teqne	r5, ip
1a0023a0:	f000 f8a7 	bleq	1a0024f2 <__aeabi_ddiv+0x16e>
1a0023a4:	eba4 0405 	sub.w	r4, r4, r5
1a0023a8:	ea81 0e03 	eor.w	lr, r1, r3
1a0023ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a0023b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0023b4:	f000 8088 	beq.w	1a0024c8 <__aeabi_ddiv+0x144>
1a0023b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a0023bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a0023c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a0023c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a0023c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a0023cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a0023d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a0023d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a0023d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a0023dc:	429d      	cmp	r5, r3
1a0023de:	bf08      	it	eq
1a0023e0:	4296      	cmpeq	r6, r2
1a0023e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a0023e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a0023ea:	d202      	bcs.n	1a0023f2 <__aeabi_ddiv+0x6e>
1a0023ec:	085b      	lsrs	r3, r3, #1
1a0023ee:	ea4f 0232 	mov.w	r2, r2, rrx
1a0023f2:	1ab6      	subs	r6, r6, r2
1a0023f4:	eb65 0503 	sbc.w	r5, r5, r3
1a0023f8:	085b      	lsrs	r3, r3, #1
1a0023fa:	ea4f 0232 	mov.w	r2, r2, rrx
1a0023fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a002402:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a002406:	ebb6 0e02 	subs.w	lr, r6, r2
1a00240a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00240e:	bf22      	ittt	cs
1a002410:	1ab6      	subcs	r6, r6, r2
1a002412:	4675      	movcs	r5, lr
1a002414:	ea40 000c 	orrcs.w	r0, r0, ip
1a002418:	085b      	lsrs	r3, r3, #1
1a00241a:	ea4f 0232 	mov.w	r2, r2, rrx
1a00241e:	ebb6 0e02 	subs.w	lr, r6, r2
1a002422:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002426:	bf22      	ittt	cs
1a002428:	1ab6      	subcs	r6, r6, r2
1a00242a:	4675      	movcs	r5, lr
1a00242c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a002430:	085b      	lsrs	r3, r3, #1
1a002432:	ea4f 0232 	mov.w	r2, r2, rrx
1a002436:	ebb6 0e02 	subs.w	lr, r6, r2
1a00243a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00243e:	bf22      	ittt	cs
1a002440:	1ab6      	subcs	r6, r6, r2
1a002442:	4675      	movcs	r5, lr
1a002444:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a002448:	085b      	lsrs	r3, r3, #1
1a00244a:	ea4f 0232 	mov.w	r2, r2, rrx
1a00244e:	ebb6 0e02 	subs.w	lr, r6, r2
1a002452:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002456:	bf22      	ittt	cs
1a002458:	1ab6      	subcs	r6, r6, r2
1a00245a:	4675      	movcs	r5, lr
1a00245c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a002460:	ea55 0e06 	orrs.w	lr, r5, r6
1a002464:	d018      	beq.n	1a002498 <__aeabi_ddiv+0x114>
1a002466:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a00246a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a00246e:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a002472:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a002476:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a00247a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a00247e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a002482:	d1c0      	bne.n	1a002406 <__aeabi_ddiv+0x82>
1a002484:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002488:	d10b      	bne.n	1a0024a2 <__aeabi_ddiv+0x11e>
1a00248a:	ea41 0100 	orr.w	r1, r1, r0
1a00248e:	f04f 0000 	mov.w	r0, #0
1a002492:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a002496:	e7b6      	b.n	1a002406 <__aeabi_ddiv+0x82>
1a002498:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00249c:	bf04      	itt	eq
1a00249e:	4301      	orreq	r1, r0
1a0024a0:	2000      	moveq	r0, #0
1a0024a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a0024a6:	bf88      	it	hi
1a0024a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a0024ac:	f63f aeaf 	bhi.w	1a00220e <__aeabi_dmul+0xde>
1a0024b0:	ebb5 0c03 	subs.w	ip, r5, r3
1a0024b4:	bf04      	itt	eq
1a0024b6:	ebb6 0c02 	subseq.w	ip, r6, r2
1a0024ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a0024be:	f150 0000 	adcs.w	r0, r0, #0
1a0024c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0024c6:	bd70      	pop	{r4, r5, r6, pc}
1a0024c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a0024cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a0024d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a0024d4:	bfc2      	ittt	gt
1a0024d6:	ebd4 050c 	rsbsgt	r5, r4, ip
1a0024da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a0024de:	bd70      	popgt	{r4, r5, r6, pc}
1a0024e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0024e4:	f04f 0e00 	mov.w	lr, #0
1a0024e8:	3c01      	subs	r4, #1
1a0024ea:	e690      	b.n	1a00220e <__aeabi_dmul+0xde>
1a0024ec:	ea45 0e06 	orr.w	lr, r5, r6
1a0024f0:	e68d      	b.n	1a00220e <__aeabi_dmul+0xde>
1a0024f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a0024f6:	ea94 0f0c 	teq	r4, ip
1a0024fa:	bf08      	it	eq
1a0024fc:	ea95 0f0c 	teqeq	r5, ip
1a002500:	f43f af3b 	beq.w	1a00237a <__aeabi_dmul+0x24a>
1a002504:	ea94 0f0c 	teq	r4, ip
1a002508:	d10a      	bne.n	1a002520 <__aeabi_ddiv+0x19c>
1a00250a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a00250e:	f47f af34 	bne.w	1a00237a <__aeabi_dmul+0x24a>
1a002512:	ea95 0f0c 	teq	r5, ip
1a002516:	f47f af25 	bne.w	1a002364 <__aeabi_dmul+0x234>
1a00251a:	4610      	mov	r0, r2
1a00251c:	4619      	mov	r1, r3
1a00251e:	e72c      	b.n	1a00237a <__aeabi_dmul+0x24a>
1a002520:	ea95 0f0c 	teq	r5, ip
1a002524:	d106      	bne.n	1a002534 <__aeabi_ddiv+0x1b0>
1a002526:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a00252a:	f43f aefd 	beq.w	1a002328 <__aeabi_dmul+0x1f8>
1a00252e:	4610      	mov	r0, r2
1a002530:	4619      	mov	r1, r3
1a002532:	e722      	b.n	1a00237a <__aeabi_dmul+0x24a>
1a002534:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002538:	bf18      	it	ne
1a00253a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00253e:	f47f aec5 	bne.w	1a0022cc <__aeabi_dmul+0x19c>
1a002542:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a002546:	f47f af0d 	bne.w	1a002364 <__aeabi_dmul+0x234>
1a00254a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a00254e:	f47f aeeb 	bne.w	1a002328 <__aeabi_dmul+0x1f8>
1a002552:	e712      	b.n	1a00237a <__aeabi_dmul+0x24a>

1a002554 <__gedf2>:
1a002554:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a002558:	e006      	b.n	1a002568 <__cmpdf2+0x4>
1a00255a:	bf00      	nop

1a00255c <__ledf2>:
1a00255c:	f04f 0c01 	mov.w	ip, #1
1a002560:	e002      	b.n	1a002568 <__cmpdf2+0x4>
1a002562:	bf00      	nop

1a002564 <__cmpdf2>:
1a002564:	f04f 0c01 	mov.w	ip, #1
1a002568:	f84d cd04 	str.w	ip, [sp, #-4]!
1a00256c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a002570:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a002578:	bf18      	it	ne
1a00257a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a00257e:	d01b      	beq.n	1a0025b8 <__cmpdf2+0x54>
1a002580:	b001      	add	sp, #4
1a002582:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a002586:	bf0c      	ite	eq
1a002588:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a00258c:	ea91 0f03 	teqne	r1, r3
1a002590:	bf02      	ittt	eq
1a002592:	ea90 0f02 	teqeq	r0, r2
1a002596:	2000      	moveq	r0, #0
1a002598:	4770      	bxeq	lr
1a00259a:	f110 0f00 	cmn.w	r0, #0
1a00259e:	ea91 0f03 	teq	r1, r3
1a0025a2:	bf58      	it	pl
1a0025a4:	4299      	cmppl	r1, r3
1a0025a6:	bf08      	it	eq
1a0025a8:	4290      	cmpeq	r0, r2
1a0025aa:	bf2c      	ite	cs
1a0025ac:	17d8      	asrcs	r0, r3, #31
1a0025ae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a0025b2:	f040 0001 	orr.w	r0, r0, #1
1a0025b6:	4770      	bx	lr
1a0025b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a0025bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0025c0:	d102      	bne.n	1a0025c8 <__cmpdf2+0x64>
1a0025c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a0025c6:	d107      	bne.n	1a0025d8 <__cmpdf2+0x74>
1a0025c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a0025cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0025d0:	d1d6      	bne.n	1a002580 <__cmpdf2+0x1c>
1a0025d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a0025d6:	d0d3      	beq.n	1a002580 <__cmpdf2+0x1c>
1a0025d8:	f85d 0b04 	ldr.w	r0, [sp], #4
1a0025dc:	4770      	bx	lr
1a0025de:	bf00      	nop

1a0025e0 <__aeabi_cdrcmple>:
1a0025e0:	4684      	mov	ip, r0
1a0025e2:	4610      	mov	r0, r2
1a0025e4:	4662      	mov	r2, ip
1a0025e6:	468c      	mov	ip, r1
1a0025e8:	4619      	mov	r1, r3
1a0025ea:	4663      	mov	r3, ip
1a0025ec:	e000      	b.n	1a0025f0 <__aeabi_cdcmpeq>
1a0025ee:	bf00      	nop

1a0025f0 <__aeabi_cdcmpeq>:
1a0025f0:	b501      	push	{r0, lr}
1a0025f2:	f7ff ffb7 	bl	1a002564 <__cmpdf2>
1a0025f6:	2800      	cmp	r0, #0
1a0025f8:	bf48      	it	mi
1a0025fa:	f110 0f00 	cmnmi.w	r0, #0
1a0025fe:	bd01      	pop	{r0, pc}

1a002600 <__aeabi_dcmpeq>:
1a002600:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002604:	f7ff fff4 	bl	1a0025f0 <__aeabi_cdcmpeq>
1a002608:	bf0c      	ite	eq
1a00260a:	2001      	moveq	r0, #1
1a00260c:	2000      	movne	r0, #0
1a00260e:	f85d fb08 	ldr.w	pc, [sp], #8
1a002612:	bf00      	nop

1a002614 <__aeabi_dcmplt>:
1a002614:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002618:	f7ff ffea 	bl	1a0025f0 <__aeabi_cdcmpeq>
1a00261c:	bf34      	ite	cc
1a00261e:	2001      	movcc	r0, #1
1a002620:	2000      	movcs	r0, #0
1a002622:	f85d fb08 	ldr.w	pc, [sp], #8
1a002626:	bf00      	nop

1a002628 <__aeabi_dcmple>:
1a002628:	f84d ed08 	str.w	lr, [sp, #-8]!
1a00262c:	f7ff ffe0 	bl	1a0025f0 <__aeabi_cdcmpeq>
1a002630:	bf94      	ite	ls
1a002632:	2001      	movls	r0, #1
1a002634:	2000      	movhi	r0, #0
1a002636:	f85d fb08 	ldr.w	pc, [sp], #8
1a00263a:	bf00      	nop

1a00263c <__aeabi_dcmpge>:
1a00263c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002640:	f7ff ffce 	bl	1a0025e0 <__aeabi_cdrcmple>
1a002644:	bf94      	ite	ls
1a002646:	2001      	movls	r0, #1
1a002648:	2000      	movhi	r0, #0
1a00264a:	f85d fb08 	ldr.w	pc, [sp], #8
1a00264e:	bf00      	nop

1a002650 <__aeabi_dcmpgt>:
1a002650:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002654:	f7ff ffc4 	bl	1a0025e0 <__aeabi_cdrcmple>
1a002658:	bf34      	ite	cc
1a00265a:	2001      	movcc	r0, #1
1a00265c:	2000      	movcs	r0, #0
1a00265e:	f85d fb08 	ldr.w	pc, [sp], #8
1a002662:	bf00      	nop

1a002664 <__aeabi_d2f>:
1a002664:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a002668:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a00266c:	bf24      	itt	cs
1a00266e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a002672:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a002676:	d90d      	bls.n	1a002694 <__aeabi_d2f+0x30>
1a002678:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a00267c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a002680:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a002684:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a002688:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a00268c:	bf08      	it	eq
1a00268e:	f020 0001 	biceq.w	r0, r0, #1
1a002692:	4770      	bx	lr
1a002694:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a002698:	d121      	bne.n	1a0026de <__aeabi_d2f+0x7a>
1a00269a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a00269e:	bfbc      	itt	lt
1a0026a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a0026a4:	4770      	bxlt	lr
1a0026a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0026aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a0026ae:	f1c2 0218 	rsb	r2, r2, #24
1a0026b2:	f1c2 0c20 	rsb	ip, r2, #32
1a0026b6:	fa10 f30c 	lsls.w	r3, r0, ip
1a0026ba:	fa20 f002 	lsr.w	r0, r0, r2
1a0026be:	bf18      	it	ne
1a0026c0:	f040 0001 	orrne.w	r0, r0, #1
1a0026c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a0026c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a0026cc:	fa03 fc0c 	lsl.w	ip, r3, ip
1a0026d0:	ea40 000c 	orr.w	r0, r0, ip
1a0026d4:	fa23 f302 	lsr.w	r3, r3, r2
1a0026d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a0026dc:	e7cc      	b.n	1a002678 <__aeabi_d2f+0x14>
1a0026de:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a0026e2:	d107      	bne.n	1a0026f4 <__aeabi_d2f+0x90>
1a0026e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a0026e8:	bf1e      	ittt	ne
1a0026ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a0026ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a0026f2:	4770      	bxne	lr
1a0026f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a0026f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a0026fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a002700:	4770      	bx	lr
1a002702:	bf00      	nop

1a002704 <__aeabi_uldivmod>:
1a002704:	b953      	cbnz	r3, 1a00271c <__aeabi_uldivmod+0x18>
1a002706:	b94a      	cbnz	r2, 1a00271c <__aeabi_uldivmod+0x18>
1a002708:	2900      	cmp	r1, #0
1a00270a:	bf08      	it	eq
1a00270c:	2800      	cmpeq	r0, #0
1a00270e:	bf1c      	itt	ne
1a002710:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a002714:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a002718:	f000 b972 	b.w	1a002a00 <__aeabi_idiv0>
1a00271c:	f1ad 0c08 	sub.w	ip, sp, #8
1a002720:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a002724:	f000 f806 	bl	1a002734 <__udivmoddi4>
1a002728:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00272c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002730:	b004      	add	sp, #16
1a002732:	4770      	bx	lr

1a002734 <__udivmoddi4>:
1a002734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002738:	9e08      	ldr	r6, [sp, #32]
1a00273a:	4604      	mov	r4, r0
1a00273c:	4688      	mov	r8, r1
1a00273e:	2b00      	cmp	r3, #0
1a002740:	d14b      	bne.n	1a0027da <__udivmoddi4+0xa6>
1a002742:	428a      	cmp	r2, r1
1a002744:	4615      	mov	r5, r2
1a002746:	d967      	bls.n	1a002818 <__udivmoddi4+0xe4>
1a002748:	fab2 f282 	clz	r2, r2
1a00274c:	b14a      	cbz	r2, 1a002762 <__udivmoddi4+0x2e>
1a00274e:	f1c2 0720 	rsb	r7, r2, #32
1a002752:	fa01 f302 	lsl.w	r3, r1, r2
1a002756:	fa20 f707 	lsr.w	r7, r0, r7
1a00275a:	4095      	lsls	r5, r2
1a00275c:	ea47 0803 	orr.w	r8, r7, r3
1a002760:	4094      	lsls	r4, r2
1a002762:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002766:	0c23      	lsrs	r3, r4, #16
1a002768:	fbb8 f7fe 	udiv	r7, r8, lr
1a00276c:	fa1f fc85 	uxth.w	ip, r5
1a002770:	fb0e 8817 	mls	r8, lr, r7, r8
1a002774:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002778:	fb07 f10c 	mul.w	r1, r7, ip
1a00277c:	4299      	cmp	r1, r3
1a00277e:	d909      	bls.n	1a002794 <__udivmoddi4+0x60>
1a002780:	18eb      	adds	r3, r5, r3
1a002782:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a002786:	f080 811b 	bcs.w	1a0029c0 <__udivmoddi4+0x28c>
1a00278a:	4299      	cmp	r1, r3
1a00278c:	f240 8118 	bls.w	1a0029c0 <__udivmoddi4+0x28c>
1a002790:	3f02      	subs	r7, #2
1a002792:	442b      	add	r3, r5
1a002794:	1a5b      	subs	r3, r3, r1
1a002796:	b2a4      	uxth	r4, r4
1a002798:	fbb3 f0fe 	udiv	r0, r3, lr
1a00279c:	fb0e 3310 	mls	r3, lr, r0, r3
1a0027a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0027a4:	fb00 fc0c 	mul.w	ip, r0, ip
1a0027a8:	45a4      	cmp	ip, r4
1a0027aa:	d909      	bls.n	1a0027c0 <__udivmoddi4+0x8c>
1a0027ac:	192c      	adds	r4, r5, r4
1a0027ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0027b2:	f080 8107 	bcs.w	1a0029c4 <__udivmoddi4+0x290>
1a0027b6:	45a4      	cmp	ip, r4
1a0027b8:	f240 8104 	bls.w	1a0029c4 <__udivmoddi4+0x290>
1a0027bc:	3802      	subs	r0, #2
1a0027be:	442c      	add	r4, r5
1a0027c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0027c4:	eba4 040c 	sub.w	r4, r4, ip
1a0027c8:	2700      	movs	r7, #0
1a0027ca:	b11e      	cbz	r6, 1a0027d4 <__udivmoddi4+0xa0>
1a0027cc:	40d4      	lsrs	r4, r2
1a0027ce:	2300      	movs	r3, #0
1a0027d0:	e9c6 4300 	strd	r4, r3, [r6]
1a0027d4:	4639      	mov	r1, r7
1a0027d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0027da:	428b      	cmp	r3, r1
1a0027dc:	d909      	bls.n	1a0027f2 <__udivmoddi4+0xbe>
1a0027de:	2e00      	cmp	r6, #0
1a0027e0:	f000 80eb 	beq.w	1a0029ba <__udivmoddi4+0x286>
1a0027e4:	2700      	movs	r7, #0
1a0027e6:	e9c6 0100 	strd	r0, r1, [r6]
1a0027ea:	4638      	mov	r0, r7
1a0027ec:	4639      	mov	r1, r7
1a0027ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0027f2:	fab3 f783 	clz	r7, r3
1a0027f6:	2f00      	cmp	r7, #0
1a0027f8:	d147      	bne.n	1a00288a <__udivmoddi4+0x156>
1a0027fa:	428b      	cmp	r3, r1
1a0027fc:	d302      	bcc.n	1a002804 <__udivmoddi4+0xd0>
1a0027fe:	4282      	cmp	r2, r0
1a002800:	f200 80fa 	bhi.w	1a0029f8 <__udivmoddi4+0x2c4>
1a002804:	1a84      	subs	r4, r0, r2
1a002806:	eb61 0303 	sbc.w	r3, r1, r3
1a00280a:	2001      	movs	r0, #1
1a00280c:	4698      	mov	r8, r3
1a00280e:	2e00      	cmp	r6, #0
1a002810:	d0e0      	beq.n	1a0027d4 <__udivmoddi4+0xa0>
1a002812:	e9c6 4800 	strd	r4, r8, [r6]
1a002816:	e7dd      	b.n	1a0027d4 <__udivmoddi4+0xa0>
1a002818:	b902      	cbnz	r2, 1a00281c <__udivmoddi4+0xe8>
1a00281a:	deff      	udf	#255	; 0xff
1a00281c:	fab2 f282 	clz	r2, r2
1a002820:	2a00      	cmp	r2, #0
1a002822:	f040 808f 	bne.w	1a002944 <__udivmoddi4+0x210>
1a002826:	1b49      	subs	r1, r1, r5
1a002828:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00282c:	fa1f f885 	uxth.w	r8, r5
1a002830:	2701      	movs	r7, #1
1a002832:	fbb1 fcfe 	udiv	ip, r1, lr
1a002836:	0c23      	lsrs	r3, r4, #16
1a002838:	fb0e 111c 	mls	r1, lr, ip, r1
1a00283c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002840:	fb08 f10c 	mul.w	r1, r8, ip
1a002844:	4299      	cmp	r1, r3
1a002846:	d907      	bls.n	1a002858 <__udivmoddi4+0x124>
1a002848:	18eb      	adds	r3, r5, r3
1a00284a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a00284e:	d202      	bcs.n	1a002856 <__udivmoddi4+0x122>
1a002850:	4299      	cmp	r1, r3
1a002852:	f200 80cd 	bhi.w	1a0029f0 <__udivmoddi4+0x2bc>
1a002856:	4684      	mov	ip, r0
1a002858:	1a59      	subs	r1, r3, r1
1a00285a:	b2a3      	uxth	r3, r4
1a00285c:	fbb1 f0fe 	udiv	r0, r1, lr
1a002860:	fb0e 1410 	mls	r4, lr, r0, r1
1a002864:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a002868:	fb08 f800 	mul.w	r8, r8, r0
1a00286c:	45a0      	cmp	r8, r4
1a00286e:	d907      	bls.n	1a002880 <__udivmoddi4+0x14c>
1a002870:	192c      	adds	r4, r5, r4
1a002872:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002876:	d202      	bcs.n	1a00287e <__udivmoddi4+0x14a>
1a002878:	45a0      	cmp	r8, r4
1a00287a:	f200 80b6 	bhi.w	1a0029ea <__udivmoddi4+0x2b6>
1a00287e:	4618      	mov	r0, r3
1a002880:	eba4 0408 	sub.w	r4, r4, r8
1a002884:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a002888:	e79f      	b.n	1a0027ca <__udivmoddi4+0x96>
1a00288a:	f1c7 0c20 	rsb	ip, r7, #32
1a00288e:	40bb      	lsls	r3, r7
1a002890:	fa22 fe0c 	lsr.w	lr, r2, ip
1a002894:	ea4e 0e03 	orr.w	lr, lr, r3
1a002898:	fa01 f407 	lsl.w	r4, r1, r7
1a00289c:	fa20 f50c 	lsr.w	r5, r0, ip
1a0028a0:	fa21 f30c 	lsr.w	r3, r1, ip
1a0028a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a0028a8:	4325      	orrs	r5, r4
1a0028aa:	fbb3 f9f8 	udiv	r9, r3, r8
1a0028ae:	0c2c      	lsrs	r4, r5, #16
1a0028b0:	fb08 3319 	mls	r3, r8, r9, r3
1a0028b4:	fa1f fa8e 	uxth.w	sl, lr
1a0028b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a0028bc:	fb09 f40a 	mul.w	r4, r9, sl
1a0028c0:	429c      	cmp	r4, r3
1a0028c2:	fa02 f207 	lsl.w	r2, r2, r7
1a0028c6:	fa00 f107 	lsl.w	r1, r0, r7
1a0028ca:	d90b      	bls.n	1a0028e4 <__udivmoddi4+0x1b0>
1a0028cc:	eb1e 0303 	adds.w	r3, lr, r3
1a0028d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0028d4:	f080 8087 	bcs.w	1a0029e6 <__udivmoddi4+0x2b2>
1a0028d8:	429c      	cmp	r4, r3
1a0028da:	f240 8084 	bls.w	1a0029e6 <__udivmoddi4+0x2b2>
1a0028de:	f1a9 0902 	sub.w	r9, r9, #2
1a0028e2:	4473      	add	r3, lr
1a0028e4:	1b1b      	subs	r3, r3, r4
1a0028e6:	b2ad      	uxth	r5, r5
1a0028e8:	fbb3 f0f8 	udiv	r0, r3, r8
1a0028ec:	fb08 3310 	mls	r3, r8, r0, r3
1a0028f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a0028f4:	fb00 fa0a 	mul.w	sl, r0, sl
1a0028f8:	45a2      	cmp	sl, r4
1a0028fa:	d908      	bls.n	1a00290e <__udivmoddi4+0x1da>
1a0028fc:	eb1e 0404 	adds.w	r4, lr, r4
1a002900:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002904:	d26b      	bcs.n	1a0029de <__udivmoddi4+0x2aa>
1a002906:	45a2      	cmp	sl, r4
1a002908:	d969      	bls.n	1a0029de <__udivmoddi4+0x2aa>
1a00290a:	3802      	subs	r0, #2
1a00290c:	4474      	add	r4, lr
1a00290e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a002912:	fba0 8902 	umull	r8, r9, r0, r2
1a002916:	eba4 040a 	sub.w	r4, r4, sl
1a00291a:	454c      	cmp	r4, r9
1a00291c:	46c2      	mov	sl, r8
1a00291e:	464b      	mov	r3, r9
1a002920:	d354      	bcc.n	1a0029cc <__udivmoddi4+0x298>
1a002922:	d051      	beq.n	1a0029c8 <__udivmoddi4+0x294>
1a002924:	2e00      	cmp	r6, #0
1a002926:	d069      	beq.n	1a0029fc <__udivmoddi4+0x2c8>
1a002928:	ebb1 050a 	subs.w	r5, r1, sl
1a00292c:	eb64 0403 	sbc.w	r4, r4, r3
1a002930:	fa04 fc0c 	lsl.w	ip, r4, ip
1a002934:	40fd      	lsrs	r5, r7
1a002936:	40fc      	lsrs	r4, r7
1a002938:	ea4c 0505 	orr.w	r5, ip, r5
1a00293c:	e9c6 5400 	strd	r5, r4, [r6]
1a002940:	2700      	movs	r7, #0
1a002942:	e747      	b.n	1a0027d4 <__udivmoddi4+0xa0>
1a002944:	f1c2 0320 	rsb	r3, r2, #32
1a002948:	fa20 f703 	lsr.w	r7, r0, r3
1a00294c:	4095      	lsls	r5, r2
1a00294e:	fa01 f002 	lsl.w	r0, r1, r2
1a002952:	fa21 f303 	lsr.w	r3, r1, r3
1a002956:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00295a:	4338      	orrs	r0, r7
1a00295c:	0c01      	lsrs	r1, r0, #16
1a00295e:	fbb3 f7fe 	udiv	r7, r3, lr
1a002962:	fa1f f885 	uxth.w	r8, r5
1a002966:	fb0e 3317 	mls	r3, lr, r7, r3
1a00296a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00296e:	fb07 f308 	mul.w	r3, r7, r8
1a002972:	428b      	cmp	r3, r1
1a002974:	fa04 f402 	lsl.w	r4, r4, r2
1a002978:	d907      	bls.n	1a00298a <__udivmoddi4+0x256>
1a00297a:	1869      	adds	r1, r5, r1
1a00297c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a002980:	d22f      	bcs.n	1a0029e2 <__udivmoddi4+0x2ae>
1a002982:	428b      	cmp	r3, r1
1a002984:	d92d      	bls.n	1a0029e2 <__udivmoddi4+0x2ae>
1a002986:	3f02      	subs	r7, #2
1a002988:	4429      	add	r1, r5
1a00298a:	1acb      	subs	r3, r1, r3
1a00298c:	b281      	uxth	r1, r0
1a00298e:	fbb3 f0fe 	udiv	r0, r3, lr
1a002992:	fb0e 3310 	mls	r3, lr, r0, r3
1a002996:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00299a:	fb00 f308 	mul.w	r3, r0, r8
1a00299e:	428b      	cmp	r3, r1
1a0029a0:	d907      	bls.n	1a0029b2 <__udivmoddi4+0x27e>
1a0029a2:	1869      	adds	r1, r5, r1
1a0029a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0029a8:	d217      	bcs.n	1a0029da <__udivmoddi4+0x2a6>
1a0029aa:	428b      	cmp	r3, r1
1a0029ac:	d915      	bls.n	1a0029da <__udivmoddi4+0x2a6>
1a0029ae:	3802      	subs	r0, #2
1a0029b0:	4429      	add	r1, r5
1a0029b2:	1ac9      	subs	r1, r1, r3
1a0029b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0029b8:	e73b      	b.n	1a002832 <__udivmoddi4+0xfe>
1a0029ba:	4637      	mov	r7, r6
1a0029bc:	4630      	mov	r0, r6
1a0029be:	e709      	b.n	1a0027d4 <__udivmoddi4+0xa0>
1a0029c0:	4607      	mov	r7, r0
1a0029c2:	e6e7      	b.n	1a002794 <__udivmoddi4+0x60>
1a0029c4:	4618      	mov	r0, r3
1a0029c6:	e6fb      	b.n	1a0027c0 <__udivmoddi4+0x8c>
1a0029c8:	4541      	cmp	r1, r8
1a0029ca:	d2ab      	bcs.n	1a002924 <__udivmoddi4+0x1f0>
1a0029cc:	ebb8 0a02 	subs.w	sl, r8, r2
1a0029d0:	eb69 020e 	sbc.w	r2, r9, lr
1a0029d4:	3801      	subs	r0, #1
1a0029d6:	4613      	mov	r3, r2
1a0029d8:	e7a4      	b.n	1a002924 <__udivmoddi4+0x1f0>
1a0029da:	4660      	mov	r0, ip
1a0029dc:	e7e9      	b.n	1a0029b2 <__udivmoddi4+0x27e>
1a0029de:	4618      	mov	r0, r3
1a0029e0:	e795      	b.n	1a00290e <__udivmoddi4+0x1da>
1a0029e2:	4667      	mov	r7, ip
1a0029e4:	e7d1      	b.n	1a00298a <__udivmoddi4+0x256>
1a0029e6:	4681      	mov	r9, r0
1a0029e8:	e77c      	b.n	1a0028e4 <__udivmoddi4+0x1b0>
1a0029ea:	3802      	subs	r0, #2
1a0029ec:	442c      	add	r4, r5
1a0029ee:	e747      	b.n	1a002880 <__udivmoddi4+0x14c>
1a0029f0:	f1ac 0c02 	sub.w	ip, ip, #2
1a0029f4:	442b      	add	r3, r5
1a0029f6:	e72f      	b.n	1a002858 <__udivmoddi4+0x124>
1a0029f8:	4638      	mov	r0, r7
1a0029fa:	e708      	b.n	1a00280e <__udivmoddi4+0xda>
1a0029fc:	4637      	mov	r7, r6
1a0029fe:	e6e9      	b.n	1a0027d4 <__udivmoddi4+0xa0>

1a002a00 <__aeabi_idiv0>:
1a002a00:	4770      	bx	lr
1a002a02:	bf00      	nop

1a002a04 <__libc_init_array>:
1a002a04:	b570      	push	{r4, r5, r6, lr}
1a002a06:	4e0d      	ldr	r6, [pc, #52]	; (1a002a3c <__libc_init_array+0x38>)
1a002a08:	4d0d      	ldr	r5, [pc, #52]	; (1a002a40 <__libc_init_array+0x3c>)
1a002a0a:	1b76      	subs	r6, r6, r5
1a002a0c:	10b6      	asrs	r6, r6, #2
1a002a0e:	d006      	beq.n	1a002a1e <__libc_init_array+0x1a>
1a002a10:	2400      	movs	r4, #0
1a002a12:	3401      	adds	r4, #1
1a002a14:	f855 3b04 	ldr.w	r3, [r5], #4
1a002a18:	4798      	blx	r3
1a002a1a:	42a6      	cmp	r6, r4
1a002a1c:	d1f9      	bne.n	1a002a12 <__libc_init_array+0xe>
1a002a1e:	4e09      	ldr	r6, [pc, #36]	; (1a002a44 <__libc_init_array+0x40>)
1a002a20:	4d09      	ldr	r5, [pc, #36]	; (1a002a48 <__libc_init_array+0x44>)
1a002a22:	1b76      	subs	r6, r6, r5
1a002a24:	f7fd fea5 	bl	1a000772 <_init>
1a002a28:	10b6      	asrs	r6, r6, #2
1a002a2a:	d006      	beq.n	1a002a3a <__libc_init_array+0x36>
1a002a2c:	2400      	movs	r4, #0
1a002a2e:	3401      	adds	r4, #1
1a002a30:	f855 3b04 	ldr.w	r3, [r5], #4
1a002a34:	4798      	blx	r3
1a002a36:	42a6      	cmp	r6, r4
1a002a38:	d1f9      	bne.n	1a002a2e <__libc_init_array+0x2a>
1a002a3a:	bd70      	pop	{r4, r5, r6, pc}
1a002a3c:	1a007ee0 	.word	0x1a007ee0
1a002a40:	1a007ee0 	.word	0x1a007ee0
1a002a44:	1a007ee4 	.word	0x1a007ee4
1a002a48:	1a007ee0 	.word	0x1a007ee0

1a002a4c <memcpy>:
1a002a4c:	4684      	mov	ip, r0
1a002a4e:	ea41 0300 	orr.w	r3, r1, r0
1a002a52:	f013 0303 	ands.w	r3, r3, #3
1a002a56:	d16d      	bne.n	1a002b34 <memcpy+0xe8>
1a002a58:	3a40      	subs	r2, #64	; 0x40
1a002a5a:	d341      	bcc.n	1a002ae0 <memcpy+0x94>
1a002a5c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002a60:	f840 3b04 	str.w	r3, [r0], #4
1a002a64:	f851 3b04 	ldr.w	r3, [r1], #4
1a002a68:	f840 3b04 	str.w	r3, [r0], #4
1a002a6c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002a70:	f840 3b04 	str.w	r3, [r0], #4
1a002a74:	f851 3b04 	ldr.w	r3, [r1], #4
1a002a78:	f840 3b04 	str.w	r3, [r0], #4
1a002a7c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002a80:	f840 3b04 	str.w	r3, [r0], #4
1a002a84:	f851 3b04 	ldr.w	r3, [r1], #4
1a002a88:	f840 3b04 	str.w	r3, [r0], #4
1a002a8c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002a90:	f840 3b04 	str.w	r3, [r0], #4
1a002a94:	f851 3b04 	ldr.w	r3, [r1], #4
1a002a98:	f840 3b04 	str.w	r3, [r0], #4
1a002a9c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002aa0:	f840 3b04 	str.w	r3, [r0], #4
1a002aa4:	f851 3b04 	ldr.w	r3, [r1], #4
1a002aa8:	f840 3b04 	str.w	r3, [r0], #4
1a002aac:	f851 3b04 	ldr.w	r3, [r1], #4
1a002ab0:	f840 3b04 	str.w	r3, [r0], #4
1a002ab4:	f851 3b04 	ldr.w	r3, [r1], #4
1a002ab8:	f840 3b04 	str.w	r3, [r0], #4
1a002abc:	f851 3b04 	ldr.w	r3, [r1], #4
1a002ac0:	f840 3b04 	str.w	r3, [r0], #4
1a002ac4:	f851 3b04 	ldr.w	r3, [r1], #4
1a002ac8:	f840 3b04 	str.w	r3, [r0], #4
1a002acc:	f851 3b04 	ldr.w	r3, [r1], #4
1a002ad0:	f840 3b04 	str.w	r3, [r0], #4
1a002ad4:	f851 3b04 	ldr.w	r3, [r1], #4
1a002ad8:	f840 3b04 	str.w	r3, [r0], #4
1a002adc:	3a40      	subs	r2, #64	; 0x40
1a002ade:	d2bd      	bcs.n	1a002a5c <memcpy+0x10>
1a002ae0:	3230      	adds	r2, #48	; 0x30
1a002ae2:	d311      	bcc.n	1a002b08 <memcpy+0xbc>
1a002ae4:	f851 3b04 	ldr.w	r3, [r1], #4
1a002ae8:	f840 3b04 	str.w	r3, [r0], #4
1a002aec:	f851 3b04 	ldr.w	r3, [r1], #4
1a002af0:	f840 3b04 	str.w	r3, [r0], #4
1a002af4:	f851 3b04 	ldr.w	r3, [r1], #4
1a002af8:	f840 3b04 	str.w	r3, [r0], #4
1a002afc:	f851 3b04 	ldr.w	r3, [r1], #4
1a002b00:	f840 3b04 	str.w	r3, [r0], #4
1a002b04:	3a10      	subs	r2, #16
1a002b06:	d2ed      	bcs.n	1a002ae4 <memcpy+0x98>
1a002b08:	320c      	adds	r2, #12
1a002b0a:	d305      	bcc.n	1a002b18 <memcpy+0xcc>
1a002b0c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002b10:	f840 3b04 	str.w	r3, [r0], #4
1a002b14:	3a04      	subs	r2, #4
1a002b16:	d2f9      	bcs.n	1a002b0c <memcpy+0xc0>
1a002b18:	3204      	adds	r2, #4
1a002b1a:	d008      	beq.n	1a002b2e <memcpy+0xe2>
1a002b1c:	07d2      	lsls	r2, r2, #31
1a002b1e:	bf1c      	itt	ne
1a002b20:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a002b24:	f800 3b01 	strbne.w	r3, [r0], #1
1a002b28:	d301      	bcc.n	1a002b2e <memcpy+0xe2>
1a002b2a:	880b      	ldrh	r3, [r1, #0]
1a002b2c:	8003      	strh	r3, [r0, #0]
1a002b2e:	4660      	mov	r0, ip
1a002b30:	4770      	bx	lr
1a002b32:	bf00      	nop
1a002b34:	2a08      	cmp	r2, #8
1a002b36:	d313      	bcc.n	1a002b60 <memcpy+0x114>
1a002b38:	078b      	lsls	r3, r1, #30
1a002b3a:	d08d      	beq.n	1a002a58 <memcpy+0xc>
1a002b3c:	f010 0303 	ands.w	r3, r0, #3
1a002b40:	d08a      	beq.n	1a002a58 <memcpy+0xc>
1a002b42:	f1c3 0304 	rsb	r3, r3, #4
1a002b46:	1ad2      	subs	r2, r2, r3
1a002b48:	07db      	lsls	r3, r3, #31
1a002b4a:	bf1c      	itt	ne
1a002b4c:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a002b50:	f800 3b01 	strbne.w	r3, [r0], #1
1a002b54:	d380      	bcc.n	1a002a58 <memcpy+0xc>
1a002b56:	f831 3b02 	ldrh.w	r3, [r1], #2
1a002b5a:	f820 3b02 	strh.w	r3, [r0], #2
1a002b5e:	e77b      	b.n	1a002a58 <memcpy+0xc>
1a002b60:	3a04      	subs	r2, #4
1a002b62:	d3d9      	bcc.n	1a002b18 <memcpy+0xcc>
1a002b64:	3a01      	subs	r2, #1
1a002b66:	f811 3b01 	ldrb.w	r3, [r1], #1
1a002b6a:	f800 3b01 	strb.w	r3, [r0], #1
1a002b6e:	d2f9      	bcs.n	1a002b64 <memcpy+0x118>
1a002b70:	780b      	ldrb	r3, [r1, #0]
1a002b72:	7003      	strb	r3, [r0, #0]
1a002b74:	784b      	ldrb	r3, [r1, #1]
1a002b76:	7043      	strb	r3, [r0, #1]
1a002b78:	788b      	ldrb	r3, [r1, #2]
1a002b7a:	7083      	strb	r3, [r0, #2]
1a002b7c:	4660      	mov	r0, ip
1a002b7e:	4770      	bx	lr

1a002b80 <memset>:
1a002b80:	b4f0      	push	{r4, r5, r6, r7}
1a002b82:	0786      	lsls	r6, r0, #30
1a002b84:	d043      	beq.n	1a002c0e <memset+0x8e>
1a002b86:	1e54      	subs	r4, r2, #1
1a002b88:	2a00      	cmp	r2, #0
1a002b8a:	d03e      	beq.n	1a002c0a <memset+0x8a>
1a002b8c:	b2ca      	uxtb	r2, r1
1a002b8e:	4603      	mov	r3, r0
1a002b90:	e002      	b.n	1a002b98 <memset+0x18>
1a002b92:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a002b96:	d338      	bcc.n	1a002c0a <memset+0x8a>
1a002b98:	f803 2b01 	strb.w	r2, [r3], #1
1a002b9c:	079d      	lsls	r5, r3, #30
1a002b9e:	d1f8      	bne.n	1a002b92 <memset+0x12>
1a002ba0:	2c03      	cmp	r4, #3
1a002ba2:	d92b      	bls.n	1a002bfc <memset+0x7c>
1a002ba4:	b2cd      	uxtb	r5, r1
1a002ba6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a002baa:	2c0f      	cmp	r4, #15
1a002bac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a002bb0:	d916      	bls.n	1a002be0 <memset+0x60>
1a002bb2:	f1a4 0710 	sub.w	r7, r4, #16
1a002bb6:	093f      	lsrs	r7, r7, #4
1a002bb8:	f103 0620 	add.w	r6, r3, #32
1a002bbc:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a002bc0:	f103 0210 	add.w	r2, r3, #16
1a002bc4:	e942 5504 	strd	r5, r5, [r2, #-16]
1a002bc8:	e942 5502 	strd	r5, r5, [r2, #-8]
1a002bcc:	3210      	adds	r2, #16
1a002bce:	42b2      	cmp	r2, r6
1a002bd0:	d1f8      	bne.n	1a002bc4 <memset+0x44>
1a002bd2:	f004 040f 	and.w	r4, r4, #15
1a002bd6:	3701      	adds	r7, #1
1a002bd8:	2c03      	cmp	r4, #3
1a002bda:	eb03 1307 	add.w	r3, r3, r7, lsl #4
1a002bde:	d90d      	bls.n	1a002bfc <memset+0x7c>
1a002be0:	461e      	mov	r6, r3
1a002be2:	4622      	mov	r2, r4
1a002be4:	3a04      	subs	r2, #4
1a002be6:	2a03      	cmp	r2, #3
1a002be8:	f846 5b04 	str.w	r5, [r6], #4
1a002bec:	d8fa      	bhi.n	1a002be4 <memset+0x64>
1a002bee:	1f22      	subs	r2, r4, #4
1a002bf0:	f022 0203 	bic.w	r2, r2, #3
1a002bf4:	3204      	adds	r2, #4
1a002bf6:	4413      	add	r3, r2
1a002bf8:	f004 0403 	and.w	r4, r4, #3
1a002bfc:	b12c      	cbz	r4, 1a002c0a <memset+0x8a>
1a002bfe:	b2c9      	uxtb	r1, r1
1a002c00:	441c      	add	r4, r3
1a002c02:	f803 1b01 	strb.w	r1, [r3], #1
1a002c06:	429c      	cmp	r4, r3
1a002c08:	d1fb      	bne.n	1a002c02 <memset+0x82>
1a002c0a:	bcf0      	pop	{r4, r5, r6, r7}
1a002c0c:	4770      	bx	lr
1a002c0e:	4614      	mov	r4, r2
1a002c10:	4603      	mov	r3, r0
1a002c12:	e7c5      	b.n	1a002ba0 <memset+0x20>

1a002c14 <printf>:
1a002c14:	b40f      	push	{r0, r1, r2, r3}
1a002c16:	b500      	push	{lr}
1a002c18:	4907      	ldr	r1, [pc, #28]	; (1a002c38 <printf+0x24>)
1a002c1a:	b083      	sub	sp, #12
1a002c1c:	ab04      	add	r3, sp, #16
1a002c1e:	6808      	ldr	r0, [r1, #0]
1a002c20:	f853 2b04 	ldr.w	r2, [r3], #4
1a002c24:	6881      	ldr	r1, [r0, #8]
1a002c26:	9301      	str	r3, [sp, #4]
1a002c28:	f000 f8da 	bl	1a002de0 <_vfprintf_r>
1a002c2c:	b003      	add	sp, #12
1a002c2e:	f85d eb04 	ldr.w	lr, [sp], #4
1a002c32:	b004      	add	sp, #16
1a002c34:	4770      	bx	lr
1a002c36:	bf00      	nop
1a002c38:	10000048 	.word	0x10000048

1a002c3c <_puts_r>:
1a002c3c:	b570      	push	{r4, r5, r6, lr}
1a002c3e:	4605      	mov	r5, r0
1a002c40:	b088      	sub	sp, #32
1a002c42:	4608      	mov	r0, r1
1a002c44:	460c      	mov	r4, r1
1a002c46:	f000 f85b 	bl	1a002d00 <strlen>
1a002c4a:	4a22      	ldr	r2, [pc, #136]	; (1a002cd4 <_puts_r+0x98>)
1a002c4c:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a002c4e:	9404      	str	r4, [sp, #16]
1a002c50:	2601      	movs	r6, #1
1a002c52:	1c44      	adds	r4, r0, #1
1a002c54:	a904      	add	r1, sp, #16
1a002c56:	9206      	str	r2, [sp, #24]
1a002c58:	2202      	movs	r2, #2
1a002c5a:	9403      	str	r4, [sp, #12]
1a002c5c:	9005      	str	r0, [sp, #20]
1a002c5e:	68ac      	ldr	r4, [r5, #8]
1a002c60:	9607      	str	r6, [sp, #28]
1a002c62:	e9cd 1201 	strd	r1, r2, [sp, #4]
1a002c66:	b31b      	cbz	r3, 1a002cb0 <_puts_r+0x74>
1a002c68:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a002c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002c6e:	07ce      	lsls	r6, r1, #31
1a002c70:	b29a      	uxth	r2, r3
1a002c72:	d401      	bmi.n	1a002c78 <_puts_r+0x3c>
1a002c74:	0590      	lsls	r0, r2, #22
1a002c76:	d525      	bpl.n	1a002cc4 <_puts_r+0x88>
1a002c78:	0491      	lsls	r1, r2, #18
1a002c7a:	d406      	bmi.n	1a002c8a <_puts_r+0x4e>
1a002c7c:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a002c7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a002c82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
1a002c86:	81a3      	strh	r3, [r4, #12]
1a002c88:	6662      	str	r2, [r4, #100]	; 0x64
1a002c8a:	4628      	mov	r0, r5
1a002c8c:	aa01      	add	r2, sp, #4
1a002c8e:	4621      	mov	r1, r4
1a002c90:	f003 f8b0 	bl	1a005df4 <__sfvwrite_r>
1a002c94:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002c96:	2800      	cmp	r0, #0
1a002c98:	bf0c      	ite	eq
1a002c9a:	250a      	moveq	r5, #10
1a002c9c:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a002ca0:	07da      	lsls	r2, r3, #31
1a002ca2:	d402      	bmi.n	1a002caa <_puts_r+0x6e>
1a002ca4:	89a3      	ldrh	r3, [r4, #12]
1a002ca6:	059b      	lsls	r3, r3, #22
1a002ca8:	d506      	bpl.n	1a002cb8 <_puts_r+0x7c>
1a002caa:	4628      	mov	r0, r5
1a002cac:	b008      	add	sp, #32
1a002cae:	bd70      	pop	{r4, r5, r6, pc}
1a002cb0:	4628      	mov	r0, r5
1a002cb2:	f002 ff23 	bl	1a005afc <__sinit>
1a002cb6:	e7d7      	b.n	1a002c68 <_puts_r+0x2c>
1a002cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002cba:	f003 fa57 	bl	1a00616c <__retarget_lock_release_recursive>
1a002cbe:	4628      	mov	r0, r5
1a002cc0:	b008      	add	sp, #32
1a002cc2:	bd70      	pop	{r4, r5, r6, pc}
1a002cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002cc6:	f003 fa4f 	bl	1a006168 <__retarget_lock_acquire_recursive>
1a002cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002cce:	b29a      	uxth	r2, r3
1a002cd0:	e7d2      	b.n	1a002c78 <_puts_r+0x3c>
1a002cd2:	bf00      	nop
1a002cd4:	1a0079b0 	.word	0x1a0079b0

1a002cd8 <puts>:
1a002cd8:	4b02      	ldr	r3, [pc, #8]	; (1a002ce4 <puts+0xc>)
1a002cda:	4601      	mov	r1, r0
1a002cdc:	6818      	ldr	r0, [r3, #0]
1a002cde:	f7ff bfad 	b.w	1a002c3c <_puts_r>
1a002ce2:	bf00      	nop
1a002ce4:	10000048 	.word	0x10000048
1a002ce8:	ffffffff 	.word	0xffffffff
1a002cec:	ffffffff 	.word	0xffffffff
1a002cf0:	ffffffff 	.word	0xffffffff
1a002cf4:	ffffffff 	.word	0xffffffff
1a002cf8:	ffffffff 	.word	0xffffffff
1a002cfc:	ffffffff 	.word	0xffffffff

1a002d00 <strlen>:
1a002d00:	f890 f000 	pld	[r0]
1a002d04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a002d08:	f020 0107 	bic.w	r1, r0, #7
1a002d0c:	f06f 0c00 	mvn.w	ip, #0
1a002d10:	f010 0407 	ands.w	r4, r0, #7
1a002d14:	f891 f020 	pld	[r1, #32]
1a002d18:	f040 8049 	bne.w	1a002dae <strlen+0xae>
1a002d1c:	f04f 0400 	mov.w	r4, #0
1a002d20:	f06f 0007 	mvn.w	r0, #7
1a002d24:	e9d1 2300 	ldrd	r2, r3, [r1]
1a002d28:	f891 f040 	pld	[r1, #64]	; 0x40
1a002d2c:	f100 0008 	add.w	r0, r0, #8
1a002d30:	fa82 f24c 	uadd8	r2, r2, ip
1a002d34:	faa4 f28c 	sel	r2, r4, ip
1a002d38:	fa83 f34c 	uadd8	r3, r3, ip
1a002d3c:	faa2 f38c 	sel	r3, r2, ip
1a002d40:	bb4b      	cbnz	r3, 1a002d96 <strlen+0x96>
1a002d42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a002d46:	fa82 f24c 	uadd8	r2, r2, ip
1a002d4a:	f100 0008 	add.w	r0, r0, #8
1a002d4e:	faa4 f28c 	sel	r2, r4, ip
1a002d52:	fa83 f34c 	uadd8	r3, r3, ip
1a002d56:	faa2 f38c 	sel	r3, r2, ip
1a002d5a:	b9e3      	cbnz	r3, 1a002d96 <strlen+0x96>
1a002d5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a002d60:	fa82 f24c 	uadd8	r2, r2, ip
1a002d64:	f100 0008 	add.w	r0, r0, #8
1a002d68:	faa4 f28c 	sel	r2, r4, ip
1a002d6c:	fa83 f34c 	uadd8	r3, r3, ip
1a002d70:	faa2 f38c 	sel	r3, r2, ip
1a002d74:	b97b      	cbnz	r3, 1a002d96 <strlen+0x96>
1a002d76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a002d7a:	f101 0120 	add.w	r1, r1, #32
1a002d7e:	fa82 f24c 	uadd8	r2, r2, ip
1a002d82:	f100 0008 	add.w	r0, r0, #8
1a002d86:	faa4 f28c 	sel	r2, r4, ip
1a002d8a:	fa83 f34c 	uadd8	r3, r3, ip
1a002d8e:	faa2 f38c 	sel	r3, r2, ip
1a002d92:	2b00      	cmp	r3, #0
1a002d94:	d0c6      	beq.n	1a002d24 <strlen+0x24>
1a002d96:	2a00      	cmp	r2, #0
1a002d98:	bf04      	itt	eq
1a002d9a:	3004      	addeq	r0, #4
1a002d9c:	461a      	moveq	r2, r3
1a002d9e:	ba12      	rev	r2, r2
1a002da0:	fab2 f282 	clz	r2, r2
1a002da4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a002da8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a002dac:	4770      	bx	lr
1a002dae:	e9d1 2300 	ldrd	r2, r3, [r1]
1a002db2:	f004 0503 	and.w	r5, r4, #3
1a002db6:	f1c4 0000 	rsb	r0, r4, #0
1a002dba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a002dbe:	f014 0f04 	tst.w	r4, #4
1a002dc2:	f891 f040 	pld	[r1, #64]	; 0x40
1a002dc6:	fa0c f505 	lsl.w	r5, ip, r5
1a002dca:	ea62 0205 	orn	r2, r2, r5
1a002dce:	bf1c      	itt	ne
1a002dd0:	ea63 0305 	ornne	r3, r3, r5
1a002dd4:	4662      	movne	r2, ip
1a002dd6:	f04f 0400 	mov.w	r4, #0
1a002dda:	e7a9      	b.n	1a002d30 <strlen+0x30>
1a002ddc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a002de0 <_vfprintf_r>:
1a002de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002de4:	b0d7      	sub	sp, #348	; 0x15c
1a002de6:	461c      	mov	r4, r3
1a002de8:	4689      	mov	r9, r1
1a002dea:	4617      	mov	r7, r2
1a002dec:	4605      	mov	r5, r0
1a002dee:	9003      	str	r0, [sp, #12]
1a002df0:	f003 f9a8 	bl	1a006144 <_localeconv_r>
1a002df4:	6803      	ldr	r3, [r0, #0]
1a002df6:	9316      	str	r3, [sp, #88]	; 0x58
1a002df8:	4618      	mov	r0, r3
1a002dfa:	f7ff ff81 	bl	1a002d00 <strlen>
1a002dfe:	9408      	str	r4, [sp, #32]
1a002e00:	9015      	str	r0, [sp, #84]	; 0x54
1a002e02:	b11d      	cbz	r5, 1a002e0c <_vfprintf_r+0x2c>
1a002e04:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a002e06:	2b00      	cmp	r3, #0
1a002e08:	f000 8107 	beq.w	1a00301a <_vfprintf_r+0x23a>
1a002e0c:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a002e10:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a002e14:	07c8      	lsls	r0, r1, #31
1a002e16:	b293      	uxth	r3, r2
1a002e18:	d402      	bmi.n	1a002e20 <_vfprintf_r+0x40>
1a002e1a:	0599      	lsls	r1, r3, #22
1a002e1c:	f140 811f 	bpl.w	1a00305e <_vfprintf_r+0x27e>
1a002e20:	049e      	lsls	r6, r3, #18
1a002e22:	d40a      	bmi.n	1a002e3a <_vfprintf_r+0x5a>
1a002e24:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a002e28:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
1a002e2c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a002e30:	f8a9 300c 	strh.w	r3, [r9, #12]
1a002e34:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
1a002e38:	b29b      	uxth	r3, r3
1a002e3a:	071d      	lsls	r5, r3, #28
1a002e3c:	f140 80b2 	bpl.w	1a002fa4 <_vfprintf_r+0x1c4>
1a002e40:	f8d9 2010 	ldr.w	r2, [r9, #16]
1a002e44:	2a00      	cmp	r2, #0
1a002e46:	f000 80ad 	beq.w	1a002fa4 <_vfprintf_r+0x1c4>
1a002e4a:	f003 021a 	and.w	r2, r3, #26
1a002e4e:	2a0a      	cmp	r2, #10
1a002e50:	f000 80c9 	beq.w	1a002fe6 <_vfprintf_r+0x206>
1a002e54:	2300      	movs	r3, #0
1a002e56:	ed9f 7b86 	vldr	d7, [pc, #536]	; 1a003070 <_vfprintf_r+0x290>
1a002e5a:	9310      	str	r3, [sp, #64]	; 0x40
1a002e5c:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
1a002e60:	9317      	str	r3, [sp, #92]	; 0x5c
1a002e62:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
1a002e66:	931b      	str	r3, [sp, #108]	; 0x6c
1a002e68:	9318      	str	r3, [sp, #96]	; 0x60
1a002e6a:	9305      	str	r3, [sp, #20]
1a002e6c:	ab2d      	add	r3, sp, #180	; 0xb4
1a002e6e:	932a      	str	r3, [sp, #168]	; 0xa8
1a002e70:	469b      	mov	fp, r3
1a002e72:	783b      	ldrb	r3, [r7, #0]
1a002e74:	f8cd 901c 	str.w	r9, [sp, #28]
1a002e78:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
1a002e7c:	2b00      	cmp	r3, #0
1a002e7e:	f000 8259 	beq.w	1a003334 <_vfprintf_r+0x554>
1a002e82:	2b25      	cmp	r3, #37	; 0x25
1a002e84:	463c      	mov	r4, r7
1a002e86:	d102      	bne.n	1a002e8e <_vfprintf_r+0xae>
1a002e88:	e01d      	b.n	1a002ec6 <_vfprintf_r+0xe6>
1a002e8a:	2b25      	cmp	r3, #37	; 0x25
1a002e8c:	d003      	beq.n	1a002e96 <_vfprintf_r+0xb6>
1a002e8e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
1a002e92:	2b00      	cmp	r3, #0
1a002e94:	d1f9      	bne.n	1a002e8a <_vfprintf_r+0xaa>
1a002e96:	1be5      	subs	r5, r4, r7
1a002e98:	b18d      	cbz	r5, 1a002ebe <_vfprintf_r+0xde>
1a002e9a:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
1a002e9e:	3301      	adds	r3, #1
1a002ea0:	442a      	add	r2, r5
1a002ea2:	2b07      	cmp	r3, #7
1a002ea4:	f8cb 7000 	str.w	r7, [fp]
1a002ea8:	f8cb 5004 	str.w	r5, [fp, #4]
1a002eac:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
1a002eb0:	f300 80ca 	bgt.w	1a003048 <_vfprintf_r+0x268>
1a002eb4:	f10b 0b08 	add.w	fp, fp, #8
1a002eb8:	9b05      	ldr	r3, [sp, #20]
1a002eba:	442b      	add	r3, r5
1a002ebc:	9305      	str	r3, [sp, #20]
1a002ebe:	7823      	ldrb	r3, [r4, #0]
1a002ec0:	2b00      	cmp	r3, #0
1a002ec2:	f000 8237 	beq.w	1a003334 <_vfprintf_r+0x554>
1a002ec6:	2300      	movs	r3, #0
1a002ec8:	7866      	ldrb	r6, [r4, #1]
1a002eca:	9306      	str	r3, [sp, #24]
1a002ecc:	4698      	mov	r8, r3
1a002ece:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a002ed2:	f104 0a01 	add.w	sl, r4, #1
1a002ed6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
1a002eda:	252b      	movs	r5, #43	; 0x2b
1a002edc:	f10a 0a01 	add.w	sl, sl, #1
1a002ee0:	f1a6 0320 	sub.w	r3, r6, #32
1a002ee4:	2b5a      	cmp	r3, #90	; 0x5a
1a002ee6:	f200 842a 	bhi.w	1a00373e <_vfprintf_r+0x95e>
1a002eea:	e8df f013 	tbh	[pc, r3, lsl #1]
1a002eee:	03aa      	.short	0x03aa
1a002ef0:	04280428 	.word	0x04280428
1a002ef4:	0428029c 	.word	0x0428029c
1a002ef8:	04280428 	.word	0x04280428
1a002efc:	042802a7 	.word	0x042802a7
1a002f00:	02c60428 	.word	0x02c60428
1a002f04:	042802d2 	.word	0x042802d2
1a002f08:	02dc02d7 	.word	0x02dc02d7
1a002f0c:	02f60428 	.word	0x02f60428
1a002f10:	026d026d 	.word	0x026d026d
1a002f14:	026d026d 	.word	0x026d026d
1a002f18:	026d026d 	.word	0x026d026d
1a002f1c:	026d026d 	.word	0x026d026d
1a002f20:	0428026d 	.word	0x0428026d
1a002f24:	04280428 	.word	0x04280428
1a002f28:	04280428 	.word	0x04280428
1a002f2c:	04280428 	.word	0x04280428
1a002f30:	042802fb 	.word	0x042802fb
1a002f34:	03f3033c 	.word	0x03f3033c
1a002f38:	02fb02fb 	.word	0x02fb02fb
1a002f3c:	042802fb 	.word	0x042802fb
1a002f40:	04280428 	.word	0x04280428
1a002f44:	03ee0428 	.word	0x03ee0428
1a002f48:	04280428 	.word	0x04280428
1a002f4c:	0428009a 	.word	0x0428009a
1a002f50:	04280428 	.word	0x04280428
1a002f54:	04280350 	.word	0x04280350
1a002f58:	04280379 	.word	0x04280379
1a002f5c:	03900428 	.word	0x03900428
1a002f60:	04280428 	.word	0x04280428
1a002f64:	04280428 	.word	0x04280428
1a002f68:	04280428 	.word	0x04280428
1a002f6c:	04280428 	.word	0x04280428
1a002f70:	042802fb 	.word	0x042802fb
1a002f74:	00c5033c 	.word	0x00c5033c
1a002f78:	02fb02fb 	.word	0x02fb02fb
1a002f7c:	03d102fb 	.word	0x03d102fb
1a002f80:	007000c5 	.word	0x007000c5
1a002f84:	03b50428 	.word	0x03b50428
1a002f88:	03c20428 	.word	0x03c20428
1a002f8c:	03de009c 	.word	0x03de009c
1a002f90:	04280070 	.word	0x04280070
1a002f94:	00720350 	.word	0x00720350
1a002f98:	0428022c 	.word	0x0428022c
1a002f9c:	027c0428 	.word	0x027c0428
1a002fa0:	00720428 	.word	0x00720428
1a002fa4:	4649      	mov	r1, r9
1a002fa6:	9803      	ldr	r0, [sp, #12]
1a002fa8:	f001 fc9a 	bl	1a0048e0 <__swsetup_r>
1a002fac:	b1a0      	cbz	r0, 1a002fd8 <_vfprintf_r+0x1f8>
1a002fae:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
1a002fb2:	07d8      	lsls	r0, r3, #31
1a002fb4:	d404      	bmi.n	1a002fc0 <_vfprintf_r+0x1e0>
1a002fb6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a002fba:	0599      	lsls	r1, r3, #22
1a002fbc:	f140 83b7 	bpl.w	1a00372e <_vfprintf_r+0x94e>
1a002fc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a002fc4:	9305      	str	r3, [sp, #20]
1a002fc6:	9805      	ldr	r0, [sp, #20]
1a002fc8:	b057      	add	sp, #348	; 0x15c
1a002fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002fce:	f048 0820 	orr.w	r8, r8, #32
1a002fd2:	f89a 6000 	ldrb.w	r6, [sl]
1a002fd6:	e781      	b.n	1a002edc <_vfprintf_r+0xfc>
1a002fd8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a002fdc:	f003 021a 	and.w	r2, r3, #26
1a002fe0:	2a0a      	cmp	r2, #10
1a002fe2:	f47f af37 	bne.w	1a002e54 <_vfprintf_r+0x74>
1a002fe6:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
1a002fea:	2a00      	cmp	r2, #0
1a002fec:	f6ff af32 	blt.w	1a002e54 <_vfprintf_r+0x74>
1a002ff0:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a002ff4:	07d2      	lsls	r2, r2, #31
1a002ff6:	d405      	bmi.n	1a003004 <_vfprintf_r+0x224>
1a002ff8:	059b      	lsls	r3, r3, #22
1a002ffa:	d403      	bmi.n	1a003004 <_vfprintf_r+0x224>
1a002ffc:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a003000:	f003 f8b4 	bl	1a00616c <__retarget_lock_release_recursive>
1a003004:	4623      	mov	r3, r4
1a003006:	463a      	mov	r2, r7
1a003008:	4649      	mov	r1, r9
1a00300a:	9803      	ldr	r0, [sp, #12]
1a00300c:	f001 fc26 	bl	1a00485c <__sbprintf>
1a003010:	9005      	str	r0, [sp, #20]
1a003012:	9805      	ldr	r0, [sp, #20]
1a003014:	b057      	add	sp, #348	; 0x15c
1a003016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00301a:	9803      	ldr	r0, [sp, #12]
1a00301c:	f002 fd6e 	bl	1a005afc <__sinit>
1a003020:	e6f4      	b.n	1a002e0c <_vfprintf_r+0x2c>
1a003022:	f048 0810 	orr.w	r8, r8, #16
1a003026:	f018 0f20 	tst.w	r8, #32
1a00302a:	f000 836c 	beq.w	1a003706 <_vfprintf_r+0x926>
1a00302e:	9c08      	ldr	r4, [sp, #32]
1a003030:	3407      	adds	r4, #7
1a003032:	f024 0307 	bic.w	r3, r4, #7
1a003036:	e9d3 4500 	ldrd	r4, r5, [r3]
1a00303a:	f103 0208 	add.w	r2, r3, #8
1a00303e:	9208      	str	r2, [sp, #32]
1a003040:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
1a003044:	2200      	movs	r2, #0
1a003046:	e18c      	b.n	1a003362 <_vfprintf_r+0x582>
1a003048:	aa2a      	add	r2, sp, #168	; 0xa8
1a00304a:	9907      	ldr	r1, [sp, #28]
1a00304c:	9803      	ldr	r0, [sp, #12]
1a00304e:	f004 fa0d 	bl	1a00746c <__sprint_r>
1a003052:	2800      	cmp	r0, #0
1a003054:	f041 8376 	bne.w	1a004744 <_vfprintf_r+0x1964>
1a003058:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00305c:	e72c      	b.n	1a002eb8 <_vfprintf_r+0xd8>
1a00305e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a003062:	f003 f881 	bl	1a006168 <__retarget_lock_acquire_recursive>
1a003066:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a00306a:	b293      	uxth	r3, r2
1a00306c:	e6d8      	b.n	1a002e20 <_vfprintf_r+0x40>
1a00306e:	bf00      	nop
	...
1a003078:	4643      	mov	r3, r8
1a00307a:	069f      	lsls	r7, r3, #26
1a00307c:	f140 832f 	bpl.w	1a0036de <_vfprintf_r+0x8fe>
1a003080:	9c08      	ldr	r4, [sp, #32]
1a003082:	3407      	adds	r4, #7
1a003084:	f024 0407 	bic.w	r4, r4, #7
1a003088:	e9d4 0100 	ldrd	r0, r1, [r4]
1a00308c:	f104 0208 	add.w	r2, r4, #8
1a003090:	9208      	str	r2, [sp, #32]
1a003092:	4604      	mov	r4, r0
1a003094:	460d      	mov	r5, r1
1a003096:	2800      	cmp	r0, #0
1a003098:	f171 0200 	sbcs.w	r2, r1, #0
1a00309c:	da05      	bge.n	1a0030aa <_vfprintf_r+0x2ca>
1a00309e:	222d      	movs	r2, #45	; 0x2d
1a0030a0:	4264      	negs	r4, r4
1a0030a2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a0030a6:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
1a0030aa:	aa56      	add	r2, sp, #344	; 0x158
1a0030ac:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0030b0:	9204      	str	r2, [sp, #16]
1a0030b2:	f000 84b2 	beq.w	1a003a1a <_vfprintf_r+0xc3a>
1a0030b6:	2201      	movs	r2, #1
1a0030b8:	ea54 0105 	orrs.w	r1, r4, r5
1a0030bc:	f023 0880 	bic.w	r8, r3, #128	; 0x80
1a0030c0:	f040 8159 	bne.w	1a003376 <_vfprintf_r+0x596>
1a0030c4:	f1b9 0f00 	cmp.w	r9, #0
1a0030c8:	f040 8619 	bne.w	1a003cfe <_vfprintf_r+0xf1e>
1a0030cc:	2a00      	cmp	r2, #0
1a0030ce:	f040 8508 	bne.w	1a003ae2 <_vfprintf_r+0xd02>
1a0030d2:	f013 0301 	ands.w	r3, r3, #1
1a0030d6:	af56      	add	r7, sp, #344	; 0x158
1a0030d8:	9309      	str	r3, [sp, #36]	; 0x24
1a0030da:	d002      	beq.n	1a0030e2 <_vfprintf_r+0x302>
1a0030dc:	2330      	movs	r3, #48	; 0x30
1a0030de:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a0030e2:	2300      	movs	r3, #0
1a0030e4:	930a      	str	r3, [sp, #40]	; 0x28
1a0030e6:	930f      	str	r3, [sp, #60]	; 0x3c
1a0030e8:	9314      	str	r3, [sp, #80]	; 0x50
1a0030ea:	9311      	str	r3, [sp, #68]	; 0x44
1a0030ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0030ee:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a0030f2:	454b      	cmp	r3, r9
1a0030f4:	bfb8      	it	lt
1a0030f6:	464b      	movlt	r3, r9
1a0030f8:	9304      	str	r3, [sp, #16]
1a0030fa:	b112      	cbz	r2, 1a003102 <_vfprintf_r+0x322>
1a0030fc:	9b04      	ldr	r3, [sp, #16]
1a0030fe:	3301      	adds	r3, #1
1a003100:	9304      	str	r3, [sp, #16]
1a003102:	f018 0302 	ands.w	r3, r8, #2
1a003106:	930b      	str	r3, [sp, #44]	; 0x2c
1a003108:	d002      	beq.n	1a003110 <_vfprintf_r+0x330>
1a00310a:	9b04      	ldr	r3, [sp, #16]
1a00310c:	3302      	adds	r3, #2
1a00310e:	9304      	str	r3, [sp, #16]
1a003110:	f018 0384 	ands.w	r3, r8, #132	; 0x84
1a003114:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003116:	930e      	str	r3, [sp, #56]	; 0x38
1a003118:	d13f      	bne.n	1a00319a <_vfprintf_r+0x3ba>
1a00311a:	9b06      	ldr	r3, [sp, #24]
1a00311c:	9904      	ldr	r1, [sp, #16]
1a00311e:	1a5d      	subs	r5, r3, r1
1a003120:	2d00      	cmp	r5, #0
1a003122:	dd3a      	ble.n	1a00319a <_vfprintf_r+0x3ba>
1a003124:	2d10      	cmp	r5, #16
1a003126:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a003128:	dd29      	ble.n	1a00317e <_vfprintf_r+0x39e>
1a00312a:	4659      	mov	r1, fp
1a00312c:	4620      	mov	r0, r4
1a00312e:	9620      	str	r6, [sp, #128]	; 0x80
1a003130:	2310      	movs	r3, #16
1a003132:	9c03      	ldr	r4, [sp, #12]
1a003134:	9e07      	ldr	r6, [sp, #28]
1a003136:	46bb      	mov	fp, r7
1a003138:	e004      	b.n	1a003144 <_vfprintf_r+0x364>
1a00313a:	3d10      	subs	r5, #16
1a00313c:	2d10      	cmp	r5, #16
1a00313e:	f101 0108 	add.w	r1, r1, #8
1a003142:	dd18      	ble.n	1a003176 <_vfprintf_r+0x396>
1a003144:	3201      	adds	r2, #1
1a003146:	4fba      	ldr	r7, [pc, #744]	; (1a003430 <_vfprintf_r+0x650>)
1a003148:	3010      	adds	r0, #16
1a00314a:	2a07      	cmp	r2, #7
1a00314c:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
1a003150:	e9c1 7300 	strd	r7, r3, [r1]
1a003154:	ddf1      	ble.n	1a00313a <_vfprintf_r+0x35a>
1a003156:	aa2a      	add	r2, sp, #168	; 0xa8
1a003158:	4631      	mov	r1, r6
1a00315a:	4620      	mov	r0, r4
1a00315c:	930c      	str	r3, [sp, #48]	; 0x30
1a00315e:	f004 f985 	bl	1a00746c <__sprint_r>
1a003162:	2800      	cmp	r0, #0
1a003164:	f040 843d 	bne.w	1a0039e2 <_vfprintf_r+0xc02>
1a003168:	3d10      	subs	r5, #16
1a00316a:	2d10      	cmp	r5, #16
1a00316c:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
1a003170:	a92d      	add	r1, sp, #180	; 0xb4
1a003172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a003174:	dce6      	bgt.n	1a003144 <_vfprintf_r+0x364>
1a003176:	9e20      	ldr	r6, [sp, #128]	; 0x80
1a003178:	465f      	mov	r7, fp
1a00317a:	4604      	mov	r4, r0
1a00317c:	468b      	mov	fp, r1
1a00317e:	3201      	adds	r2, #1
1a003180:	4bab      	ldr	r3, [pc, #684]	; (1a003430 <_vfprintf_r+0x650>)
1a003182:	442c      	add	r4, r5
1a003184:	2a07      	cmp	r2, #7
1a003186:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a00318a:	e9cb 3500 	strd	r3, r5, [fp]
1a00318e:	f300 84ff 	bgt.w	1a003b90 <_vfprintf_r+0xdb0>
1a003192:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a003196:	f10b 0b08 	add.w	fp, fp, #8
1a00319a:	b172      	cbz	r2, 1a0031ba <_vfprintf_r+0x3da>
1a00319c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a00319e:	3201      	adds	r2, #1
1a0031a0:	3401      	adds	r4, #1
1a0031a2:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
1a0031a6:	2101      	movs	r1, #1
1a0031a8:	2a07      	cmp	r2, #7
1a0031aa:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a0031ae:	e9cb 0100 	strd	r0, r1, [fp]
1a0031b2:	f300 8418 	bgt.w	1a0039e6 <_vfprintf_r+0xc06>
1a0031b6:	f10b 0b08 	add.w	fp, fp, #8
1a0031ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0031bc:	b16b      	cbz	r3, 1a0031da <_vfprintf_r+0x3fa>
1a0031be:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a0031c0:	3301      	adds	r3, #1
1a0031c2:	3402      	adds	r4, #2
1a0031c4:	a923      	add	r1, sp, #140	; 0x8c
1a0031c6:	2202      	movs	r2, #2
1a0031c8:	2b07      	cmp	r3, #7
1a0031ca:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a0031ce:	e9cb 1200 	strd	r1, r2, [fp]
1a0031d2:	f300 8415 	bgt.w	1a003a00 <_vfprintf_r+0xc20>
1a0031d6:	f10b 0b08 	add.w	fp, fp, #8
1a0031da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0031dc:	2b80      	cmp	r3, #128	; 0x80
1a0031de:	f000 8331 	beq.w	1a003844 <_vfprintf_r+0xa64>
1a0031e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0031e4:	eba9 0503 	sub.w	r5, r9, r3
1a0031e8:	2d00      	cmp	r5, #0
1a0031ea:	dd37      	ble.n	1a00325c <_vfprintf_r+0x47c>
1a0031ec:	2d10      	cmp	r5, #16
1a0031ee:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a0031f0:	4b90      	ldr	r3, [pc, #576]	; (1a003434 <_vfprintf_r+0x654>)
1a0031f2:	dd28      	ble.n	1a003246 <_vfprintf_r+0x466>
1a0031f4:	4659      	mov	r1, fp
1a0031f6:	4620      	mov	r0, r4
1a0031f8:	46bb      	mov	fp, r7
1a0031fa:	f04f 0910 	mov.w	r9, #16
1a0031fe:	4637      	mov	r7, r6
1a003200:	461c      	mov	r4, r3
1a003202:	9e07      	ldr	r6, [sp, #28]
1a003204:	e004      	b.n	1a003210 <_vfprintf_r+0x430>
1a003206:	3d10      	subs	r5, #16
1a003208:	2d10      	cmp	r5, #16
1a00320a:	f101 0108 	add.w	r1, r1, #8
1a00320e:	dd15      	ble.n	1a00323c <_vfprintf_r+0x45c>
1a003210:	3201      	adds	r2, #1
1a003212:	3010      	adds	r0, #16
1a003214:	2a07      	cmp	r2, #7
1a003216:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
1a00321a:	e9c1 4900 	strd	r4, r9, [r1]
1a00321e:	ddf2      	ble.n	1a003206 <_vfprintf_r+0x426>
1a003220:	aa2a      	add	r2, sp, #168	; 0xa8
1a003222:	4631      	mov	r1, r6
1a003224:	9803      	ldr	r0, [sp, #12]
1a003226:	f004 f921 	bl	1a00746c <__sprint_r>
1a00322a:	2800      	cmp	r0, #0
1a00322c:	f040 83d9 	bne.w	1a0039e2 <_vfprintf_r+0xc02>
1a003230:	3d10      	subs	r5, #16
1a003232:	2d10      	cmp	r5, #16
1a003234:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
1a003238:	a92d      	add	r1, sp, #180	; 0xb4
1a00323a:	dce9      	bgt.n	1a003210 <_vfprintf_r+0x430>
1a00323c:	463e      	mov	r6, r7
1a00323e:	4623      	mov	r3, r4
1a003240:	465f      	mov	r7, fp
1a003242:	4604      	mov	r4, r0
1a003244:	468b      	mov	fp, r1
1a003246:	3201      	adds	r2, #1
1a003248:	442c      	add	r4, r5
1a00324a:	2a07      	cmp	r2, #7
1a00324c:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a003250:	e9cb 3500 	strd	r3, r5, [fp]
1a003254:	f300 83ef 	bgt.w	1a003a36 <_vfprintf_r+0xc56>
1a003258:	f10b 0b08 	add.w	fp, fp, #8
1a00325c:	f418 7f80 	tst.w	r8, #256	; 0x100
1a003260:	f040 8280 	bne.w	1a003764 <_vfprintf_r+0x984>
1a003264:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a003266:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a003268:	f8cb 7000 	str.w	r7, [fp]
1a00326c:	3301      	adds	r3, #1
1a00326e:	4414      	add	r4, r2
1a003270:	2b07      	cmp	r3, #7
1a003272:	942c      	str	r4, [sp, #176]	; 0xb0
1a003274:	f8cb 2004 	str.w	r2, [fp, #4]
1a003278:	932b      	str	r3, [sp, #172]	; 0xac
1a00327a:	f300 8392 	bgt.w	1a0039a2 <_vfprintf_r+0xbc2>
1a00327e:	f10b 0b08 	add.w	fp, fp, #8
1a003282:	f018 0f04 	tst.w	r8, #4
1a003286:	d03b      	beq.n	1a003300 <_vfprintf_r+0x520>
1a003288:	9b06      	ldr	r3, [sp, #24]
1a00328a:	9a04      	ldr	r2, [sp, #16]
1a00328c:	1a9d      	subs	r5, r3, r2
1a00328e:	2d00      	cmp	r5, #0
1a003290:	dd36      	ble.n	1a003300 <_vfprintf_r+0x520>
1a003292:	2d10      	cmp	r5, #16
1a003294:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a003296:	dd21      	ble.n	1a0032dc <_vfprintf_r+0x4fc>
1a003298:	2610      	movs	r6, #16
1a00329a:	9f03      	ldr	r7, [sp, #12]
1a00329c:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a0032a0:	e004      	b.n	1a0032ac <_vfprintf_r+0x4cc>
1a0032a2:	3d10      	subs	r5, #16
1a0032a4:	2d10      	cmp	r5, #16
1a0032a6:	f10b 0b08 	add.w	fp, fp, #8
1a0032aa:	dd17      	ble.n	1a0032dc <_vfprintf_r+0x4fc>
1a0032ac:	3301      	adds	r3, #1
1a0032ae:	4a60      	ldr	r2, [pc, #384]	; (1a003430 <_vfprintf_r+0x650>)
1a0032b0:	3410      	adds	r4, #16
1a0032b2:	2b07      	cmp	r3, #7
1a0032b4:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a0032b8:	e9cb 2600 	strd	r2, r6, [fp]
1a0032bc:	ddf1      	ble.n	1a0032a2 <_vfprintf_r+0x4c2>
1a0032be:	aa2a      	add	r2, sp, #168	; 0xa8
1a0032c0:	4641      	mov	r1, r8
1a0032c2:	4638      	mov	r0, r7
1a0032c4:	f004 f8d2 	bl	1a00746c <__sprint_r>
1a0032c8:	2800      	cmp	r0, #0
1a0032ca:	f040 856c 	bne.w	1a003da6 <_vfprintf_r+0xfc6>
1a0032ce:	3d10      	subs	r5, #16
1a0032d0:	2d10      	cmp	r5, #16
1a0032d2:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
1a0032d6:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0032da:	dce7      	bgt.n	1a0032ac <_vfprintf_r+0x4cc>
1a0032dc:	3301      	adds	r3, #1
1a0032de:	4a54      	ldr	r2, [pc, #336]	; (1a003430 <_vfprintf_r+0x650>)
1a0032e0:	442c      	add	r4, r5
1a0032e2:	2b07      	cmp	r3, #7
1a0032e4:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a0032e8:	e9cb 2500 	strd	r2, r5, [fp]
1a0032ec:	dd08      	ble.n	1a003300 <_vfprintf_r+0x520>
1a0032ee:	aa2a      	add	r2, sp, #168	; 0xa8
1a0032f0:	9907      	ldr	r1, [sp, #28]
1a0032f2:	9803      	ldr	r0, [sp, #12]
1a0032f4:	f004 f8ba 	bl	1a00746c <__sprint_r>
1a0032f8:	2800      	cmp	r0, #0
1a0032fa:	f040 82e9 	bne.w	1a0038d0 <_vfprintf_r+0xaf0>
1a0032fe:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003300:	9904      	ldr	r1, [sp, #16]
1a003302:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
1a003306:	428a      	cmp	r2, r1
1a003308:	bfac      	ite	ge
1a00330a:	189b      	addge	r3, r3, r2
1a00330c:	185b      	addlt	r3, r3, r1
1a00330e:	9305      	str	r3, [sp, #20]
1a003310:	2c00      	cmp	r4, #0
1a003312:	f040 82d5 	bne.w	1a0038c0 <_vfprintf_r+0xae0>
1a003316:	2300      	movs	r3, #0
1a003318:	932b      	str	r3, [sp, #172]	; 0xac
1a00331a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00331c:	b11b      	cbz	r3, 1a003326 <_vfprintf_r+0x546>
1a00331e:	990a      	ldr	r1, [sp, #40]	; 0x28
1a003320:	9803      	ldr	r0, [sp, #12]
1a003322:	f002 fc73 	bl	1a005c0c <_free_r>
1a003326:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00332a:	4657      	mov	r7, sl
1a00332c:	783b      	ldrb	r3, [r7, #0]
1a00332e:	2b00      	cmp	r3, #0
1a003330:	f47f ada7 	bne.w	1a002e82 <_vfprintf_r+0xa2>
1a003334:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
1a003336:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a00333a:	2b00      	cmp	r3, #0
1a00333c:	f041 80e7 	bne.w	1a00450e <_vfprintf_r+0x172e>
1a003340:	2300      	movs	r3, #0
1a003342:	932b      	str	r3, [sp, #172]	; 0xac
1a003344:	e2cb      	b.n	1a0038de <_vfprintf_r+0xafe>
1a003346:	4643      	mov	r3, r8
1a003348:	069a      	lsls	r2, r3, #26
1a00334a:	f140 814e 	bpl.w	1a0035ea <_vfprintf_r+0x80a>
1a00334e:	9c08      	ldr	r4, [sp, #32]
1a003350:	3407      	adds	r4, #7
1a003352:	f024 0207 	bic.w	r2, r4, #7
1a003356:	f102 0108 	add.w	r1, r2, #8
1a00335a:	e9d2 4500 	ldrd	r4, r5, [r2]
1a00335e:	9108      	str	r1, [sp, #32]
1a003360:	2201      	movs	r2, #1
1a003362:	2100      	movs	r1, #0
1a003364:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
1a003368:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a00336c:	a956      	add	r1, sp, #344	; 0x158
1a00336e:	9104      	str	r1, [sp, #16]
1a003370:	f47f aea2 	bne.w	1a0030b8 <_vfprintf_r+0x2d8>
1a003374:	4698      	mov	r8, r3
1a003376:	2a01      	cmp	r2, #1
1a003378:	f000 8350 	beq.w	1a003a1c <_vfprintf_r+0xc3c>
1a00337c:	2a02      	cmp	r2, #2
1a00337e:	f000 831b 	beq.w	1a0039b8 <_vfprintf_r+0xbd8>
1a003382:	a956      	add	r1, sp, #344	; 0x158
1a003384:	e000      	b.n	1a003388 <_vfprintf_r+0x5a8>
1a003386:	4639      	mov	r1, r7
1a003388:	08e2      	lsrs	r2, r4, #3
1a00338a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a00338e:	08e8      	lsrs	r0, r5, #3
1a003390:	f004 0307 	and.w	r3, r4, #7
1a003394:	4605      	mov	r5, r0
1a003396:	4614      	mov	r4, r2
1a003398:	3330      	adds	r3, #48	; 0x30
1a00339a:	ea54 0205 	orrs.w	r2, r4, r5
1a00339e:	f801 3c01 	strb.w	r3, [r1, #-1]
1a0033a2:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
1a0033a6:	d1ee      	bne.n	1a003386 <_vfprintf_r+0x5a6>
1a0033a8:	f018 0f01 	tst.w	r8, #1
1a0033ac:	f000 8314 	beq.w	1a0039d8 <_vfprintf_r+0xbf8>
1a0033b0:	2b30      	cmp	r3, #48	; 0x30
1a0033b2:	f000 8311 	beq.w	1a0039d8 <_vfprintf_r+0xbf8>
1a0033b6:	9a04      	ldr	r2, [sp, #16]
1a0033b8:	3902      	subs	r1, #2
1a0033ba:	2330      	movs	r3, #48	; 0x30
1a0033bc:	1a52      	subs	r2, r2, r1
1a0033be:	f807 3c01 	strb.w	r3, [r7, #-1]
1a0033c2:	9209      	str	r2, [sp, #36]	; 0x24
1a0033c4:	460f      	mov	r7, r1
1a0033c6:	e68c      	b.n	1a0030e2 <_vfprintf_r+0x302>
1a0033c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a0033cc:	2200      	movs	r2, #0
1a0033ce:	f81a 6b01 	ldrb.w	r6, [sl], #1
1a0033d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0033d6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a0033da:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a0033de:	2b09      	cmp	r3, #9
1a0033e0:	d9f5      	bls.n	1a0033ce <_vfprintf_r+0x5ee>
1a0033e2:	9206      	str	r2, [sp, #24]
1a0033e4:	e57c      	b.n	1a002ee0 <_vfprintf_r+0x100>
1a0033e6:	4b14      	ldr	r3, [pc, #80]	; (1a003438 <_vfprintf_r+0x658>)
1a0033e8:	9317      	str	r3, [sp, #92]	; 0x5c
1a0033ea:	f018 0f20 	tst.w	r8, #32
1a0033ee:	f000 8114 	beq.w	1a00361a <_vfprintf_r+0x83a>
1a0033f2:	9c08      	ldr	r4, [sp, #32]
1a0033f4:	3407      	adds	r4, #7
1a0033f6:	f024 0307 	bic.w	r3, r4, #7
1a0033fa:	e9d3 4500 	ldrd	r4, r5, [r3]
1a0033fe:	f103 0208 	add.w	r2, r3, #8
1a003402:	9208      	str	r2, [sp, #32]
1a003404:	f018 0f01 	tst.w	r8, #1
1a003408:	d009      	beq.n	1a00341e <_vfprintf_r+0x63e>
1a00340a:	ea54 0305 	orrs.w	r3, r4, r5
1a00340e:	d006      	beq.n	1a00341e <_vfprintf_r+0x63e>
1a003410:	2330      	movs	r3, #48	; 0x30
1a003412:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
1a003416:	f048 0802 	orr.w	r8, r8, #2
1a00341a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
1a00341e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
1a003422:	2202      	movs	r2, #2
1a003424:	e79d      	b.n	1a003362 <_vfprintf_r+0x582>
1a003426:	f048 0801 	orr.w	r8, r8, #1
1a00342a:	f89a 6000 	ldrb.w	r6, [sl]
1a00342e:	e555      	b.n	1a002edc <_vfprintf_r+0xfc>
1a003430:	1a007ca0 	.word	0x1a007ca0
1a003434:	1a007cb0 	.word	0x1a007cb0
1a003438:	1a007c6c 	.word	0x1a007c6c
1a00343c:	9e03      	ldr	r6, [sp, #12]
1a00343e:	4630      	mov	r0, r6
1a003440:	f002 fe80 	bl	1a006144 <_localeconv_r>
1a003444:	6843      	ldr	r3, [r0, #4]
1a003446:	9318      	str	r3, [sp, #96]	; 0x60
1a003448:	4618      	mov	r0, r3
1a00344a:	f7ff fc59 	bl	1a002d00 <strlen>
1a00344e:	901b      	str	r0, [sp, #108]	; 0x6c
1a003450:	4604      	mov	r4, r0
1a003452:	4630      	mov	r0, r6
1a003454:	f002 fe76 	bl	1a006144 <_localeconv_r>
1a003458:	6883      	ldr	r3, [r0, #8]
1a00345a:	931a      	str	r3, [sp, #104]	; 0x68
1a00345c:	2c00      	cmp	r4, #0
1a00345e:	f43f adb8 	beq.w	1a002fd2 <_vfprintf_r+0x1f2>
1a003462:	f89a 6000 	ldrb.w	r6, [sl]
1a003466:	2b00      	cmp	r3, #0
1a003468:	f43f ad38 	beq.w	1a002edc <_vfprintf_r+0xfc>
1a00346c:	781b      	ldrb	r3, [r3, #0]
1a00346e:	2b00      	cmp	r3, #0
1a003470:	f43f ad34 	beq.w	1a002edc <_vfprintf_r+0xfc>
1a003474:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
1a003478:	e530      	b.n	1a002edc <_vfprintf_r+0xfc>
1a00347a:	9b08      	ldr	r3, [sp, #32]
1a00347c:	f89a 6000 	ldrb.w	r6, [sl]
1a003480:	681a      	ldr	r2, [r3, #0]
1a003482:	9206      	str	r2, [sp, #24]
1a003484:	2a00      	cmp	r2, #0
1a003486:	f103 0304 	add.w	r3, r3, #4
1a00348a:	f2c0 8697 	blt.w	1a0041bc <_vfprintf_r+0x13dc>
1a00348e:	9308      	str	r3, [sp, #32]
1a003490:	e524      	b.n	1a002edc <_vfprintf_r+0xfc>
1a003492:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
1a003496:	f89a 6000 	ldrb.w	r6, [sl]
1a00349a:	e51f      	b.n	1a002edc <_vfprintf_r+0xfc>
1a00349c:	f89a 6000 	ldrb.w	r6, [sl]
1a0034a0:	f048 0804 	orr.w	r8, r8, #4
1a0034a4:	e51a      	b.n	1a002edc <_vfprintf_r+0xfc>
1a0034a6:	f89a 6000 	ldrb.w	r6, [sl]
1a0034aa:	2e2a      	cmp	r6, #42	; 0x2a
1a0034ac:	f10a 0201 	add.w	r2, sl, #1
1a0034b0:	f001 81b0 	beq.w	1a004814 <_vfprintf_r+0x1a34>
1a0034b4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a0034b8:	2b09      	cmp	r3, #9
1a0034ba:	4692      	mov	sl, r2
1a0034bc:	f04f 0900 	mov.w	r9, #0
1a0034c0:	f63f ad0e 	bhi.w	1a002ee0 <_vfprintf_r+0x100>
1a0034c4:	f81a 6b01 	ldrb.w	r6, [sl], #1
1a0034c8:	eb09 0989 	add.w	r9, r9, r9, lsl #2
1a0034cc:	eb03 0949 	add.w	r9, r3, r9, lsl #1
1a0034d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a0034d4:	2b09      	cmp	r3, #9
1a0034d6:	d9f5      	bls.n	1a0034c4 <_vfprintf_r+0x6e4>
1a0034d8:	e502      	b.n	1a002ee0 <_vfprintf_r+0x100>
1a0034da:	f048 0880 	orr.w	r8, r8, #128	; 0x80
1a0034de:	f89a 6000 	ldrb.w	r6, [sl]
1a0034e2:	e4fb      	b.n	1a002edc <_vfprintf_r+0xfc>
1a0034e4:	9c08      	ldr	r4, [sp, #32]
1a0034e6:	3407      	adds	r4, #7
1a0034e8:	f024 0407 	bic.w	r4, r4, #7
1a0034ec:	ed94 7b00 	vldr	d7, [r4]
1a0034f0:	ec52 1b17 	vmov	r1, r2, d7
1a0034f4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
1a0034f8:	931d      	str	r3, [sp, #116]	; 0x74
1a0034fa:	ed8d 7a1c 	vstr	s14, [sp, #112]	; 0x70
1a0034fe:	3408      	adds	r4, #8
1a003500:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a003504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003508:	4bba      	ldr	r3, [pc, #744]	; (1a0037f4 <_vfprintf_r+0xa14>)
1a00350a:	9408      	str	r4, [sp, #32]
1a00350c:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
1a003510:	f004 f986 	bl	1a007820 <__aeabi_dcmpun>
1a003514:	2800      	cmp	r0, #0
1a003516:	f040 846f 	bne.w	1a003df8 <_vfprintf_r+0x1018>
1a00351a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00351e:	4bb5      	ldr	r3, [pc, #724]	; (1a0037f4 <_vfprintf_r+0xa14>)
1a003520:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a003524:	f7ff f880 	bl	1a002628 <__aeabi_dcmple>
1a003528:	2800      	cmp	r0, #0
1a00352a:	f040 8465 	bne.w	1a003df8 <_vfprintf_r+0x1018>
1a00352e:	2200      	movs	r2, #0
1a003530:	2300      	movs	r3, #0
1a003532:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a003536:	f7ff f86d 	bl	1a002614 <__aeabi_dcmplt>
1a00353a:	2800      	cmp	r0, #0
1a00353c:	f040 855b 	bne.w	1a003ff6 <_vfprintf_r+0x1216>
1a003540:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a003544:	4fac      	ldr	r7, [pc, #688]	; (1a0037f8 <_vfprintf_r+0xa18>)
1a003546:	4bad      	ldr	r3, [pc, #692]	; (1a0037fc <_vfprintf_r+0xa1c>)
1a003548:	2000      	movs	r0, #0
1a00354a:	2103      	movs	r1, #3
1a00354c:	9104      	str	r1, [sp, #16]
1a00354e:	900a      	str	r0, [sp, #40]	; 0x28
1a003550:	f028 0880 	bic.w	r8, r8, #128	; 0x80
1a003554:	2e47      	cmp	r6, #71	; 0x47
1a003556:	bfd8      	it	le
1a003558:	461f      	movle	r7, r3
1a00355a:	9109      	str	r1, [sp, #36]	; 0x24
1a00355c:	4681      	mov	r9, r0
1a00355e:	900f      	str	r0, [sp, #60]	; 0x3c
1a003560:	9014      	str	r0, [sp, #80]	; 0x50
1a003562:	9011      	str	r0, [sp, #68]	; 0x44
1a003564:	e5c9      	b.n	1a0030fa <_vfprintf_r+0x31a>
1a003566:	9808      	ldr	r0, [sp, #32]
1a003568:	2300      	movs	r3, #0
1a00356a:	6801      	ldr	r1, [r0, #0]
1a00356c:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a003570:	461a      	mov	r2, r3
1a003572:	f88d 10f4 	strb.w	r1, [sp, #244]	; 0xf4
1a003576:	2301      	movs	r3, #1
1a003578:	1d01      	adds	r1, r0, #4
1a00357a:	9304      	str	r3, [sp, #16]
1a00357c:	920a      	str	r2, [sp, #40]	; 0x28
1a00357e:	4691      	mov	r9, r2
1a003580:	920f      	str	r2, [sp, #60]	; 0x3c
1a003582:	9214      	str	r2, [sp, #80]	; 0x50
1a003584:	9211      	str	r2, [sp, #68]	; 0x44
1a003586:	e9cd 1308 	strd	r1, r3, [sp, #32]
1a00358a:	af3d      	add	r7, sp, #244	; 0xf4
1a00358c:	e5b9      	b.n	1a003102 <_vfprintf_r+0x322>
1a00358e:	9b08      	ldr	r3, [sp, #32]
1a003590:	681f      	ldr	r7, [r3, #0]
1a003592:	2500      	movs	r5, #0
1a003594:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
1a003598:	1d1c      	adds	r4, r3, #4
1a00359a:	2f00      	cmp	r7, #0
1a00359c:	f000 8639 	beq.w	1a004212 <_vfprintf_r+0x1432>
1a0035a0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0035a4:	f000 8711 	beq.w	1a0043ca <_vfprintf_r+0x15ea>
1a0035a8:	464a      	mov	r2, r9
1a0035aa:	4629      	mov	r1, r5
1a0035ac:	4638      	mov	r0, r7
1a0035ae:	f003 f8ff 	bl	1a0067b0 <memchr>
1a0035b2:	900a      	str	r0, [sp, #40]	; 0x28
1a0035b4:	2800      	cmp	r0, #0
1a0035b6:	f000 85e7 	beq.w	1a004188 <_vfprintf_r+0x13a8>
1a0035ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0035bc:	1bdb      	subs	r3, r3, r7
1a0035be:	9309      	str	r3, [sp, #36]	; 0x24
1a0035c0:	46a9      	mov	r9, r5
1a0035c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a0035c6:	9408      	str	r4, [sp, #32]
1a0035c8:	9304      	str	r3, [sp, #16]
1a0035ca:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a0035ce:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
1a0035d2:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
1a0035d6:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
1a0035da:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a0035de:	e58c      	b.n	1a0030fa <_vfprintf_r+0x31a>
1a0035e0:	f048 0310 	orr.w	r3, r8, #16
1a0035e4:	069a      	lsls	r2, r3, #26
1a0035e6:	f53f aeb2 	bmi.w	1a00334e <_vfprintf_r+0x56e>
1a0035ea:	9a08      	ldr	r2, [sp, #32]
1a0035ec:	06df      	lsls	r7, r3, #27
1a0035ee:	f102 0104 	add.w	r1, r2, #4
1a0035f2:	f100 837e 	bmi.w	1a003cf2 <_vfprintf_r+0xf12>
1a0035f6:	065d      	lsls	r5, r3, #25
1a0035f8:	9a08      	ldr	r2, [sp, #32]
1a0035fa:	f100 84e4 	bmi.w	1a003fc6 <_vfprintf_r+0x11e6>
1a0035fe:	059c      	lsls	r4, r3, #22
1a003600:	f140 8377 	bpl.w	1a003cf2 <_vfprintf_r+0xf12>
1a003604:	7814      	ldrb	r4, [r2, #0]
1a003606:	9108      	str	r1, [sp, #32]
1a003608:	2500      	movs	r5, #0
1a00360a:	2201      	movs	r2, #1
1a00360c:	e6a9      	b.n	1a003362 <_vfprintf_r+0x582>
1a00360e:	4b7c      	ldr	r3, [pc, #496]	; (1a003800 <_vfprintf_r+0xa20>)
1a003610:	9317      	str	r3, [sp, #92]	; 0x5c
1a003612:	f018 0f20 	tst.w	r8, #32
1a003616:	f47f aeec 	bne.w	1a0033f2 <_vfprintf_r+0x612>
1a00361a:	9a08      	ldr	r2, [sp, #32]
1a00361c:	f018 0f10 	tst.w	r8, #16
1a003620:	f102 0304 	add.w	r3, r2, #4
1a003624:	f040 8354 	bne.w	1a003cd0 <_vfprintf_r+0xef0>
1a003628:	f018 0f40 	tst.w	r8, #64	; 0x40
1a00362c:	9a08      	ldr	r2, [sp, #32]
1a00362e:	f040 84d0 	bne.w	1a003fd2 <_vfprintf_r+0x11f2>
1a003632:	f418 7f00 	tst.w	r8, #512	; 0x200
1a003636:	f000 834b 	beq.w	1a003cd0 <_vfprintf_r+0xef0>
1a00363a:	7814      	ldrb	r4, [r2, #0]
1a00363c:	9308      	str	r3, [sp, #32]
1a00363e:	2500      	movs	r5, #0
1a003640:	e6e0      	b.n	1a003404 <_vfprintf_r+0x624>
1a003642:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
1a003646:	f89a 6000 	ldrb.w	r6, [sl]
1a00364a:	2b00      	cmp	r3, #0
1a00364c:	f47f ac46 	bne.w	1a002edc <_vfprintf_r+0xfc>
1a003650:	2320      	movs	r3, #32
1a003652:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a003656:	e441      	b.n	1a002edc <_vfprintf_r+0xfc>
1a003658:	f89a 6000 	ldrb.w	r6, [sl]
1a00365c:	2e6c      	cmp	r6, #108	; 0x6c
1a00365e:	bf03      	ittte	eq
1a003660:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
1a003664:	f048 0820 	orreq.w	r8, r8, #32
1a003668:	f10a 0a01 	addeq.w	sl, sl, #1
1a00366c:	f048 0810 	orrne.w	r8, r8, #16
1a003670:	e434      	b.n	1a002edc <_vfprintf_r+0xfc>
1a003672:	9a08      	ldr	r2, [sp, #32]
1a003674:	f018 0f20 	tst.w	r8, #32
1a003678:	f852 3b04 	ldr.w	r3, [r2], #4
1a00367c:	9208      	str	r2, [sp, #32]
1a00367e:	f000 83a1 	beq.w	1a003dc4 <_vfprintf_r+0xfe4>
1a003682:	9a05      	ldr	r2, [sp, #20]
1a003684:	4610      	mov	r0, r2
1a003686:	17d1      	asrs	r1, r2, #31
1a003688:	e9c3 0100 	strd	r0, r1, [r3]
1a00368c:	4657      	mov	r7, sl
1a00368e:	e64d      	b.n	1a00332c <_vfprintf_r+0x54c>
1a003690:	f89a 6000 	ldrb.w	r6, [sl]
1a003694:	2e68      	cmp	r6, #104	; 0x68
1a003696:	bf03      	ittte	eq
1a003698:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
1a00369c:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
1a0036a0:	f10a 0a01 	addeq.w	sl, sl, #1
1a0036a4:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
1a0036a8:	e418      	b.n	1a002edc <_vfprintf_r+0xfc>
1a0036aa:	9908      	ldr	r1, [sp, #32]
1a0036ac:	4b55      	ldr	r3, [pc, #340]	; (1a003804 <_vfprintf_r+0xa24>)
1a0036ae:	680c      	ldr	r4, [r1, #0]
1a0036b0:	9317      	str	r3, [sp, #92]	; 0x5c
1a0036b2:	f647 0230 	movw	r2, #30768	; 0x7830
1a0036b6:	3104      	adds	r1, #4
1a0036b8:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
1a0036bc:	f048 0302 	orr.w	r3, r8, #2
1a0036c0:	9108      	str	r1, [sp, #32]
1a0036c2:	2500      	movs	r5, #0
1a0036c4:	2202      	movs	r2, #2
1a0036c6:	2678      	movs	r6, #120	; 0x78
1a0036c8:	e64b      	b.n	1a003362 <_vfprintf_r+0x582>
1a0036ca:	f048 0808 	orr.w	r8, r8, #8
1a0036ce:	f89a 6000 	ldrb.w	r6, [sl]
1a0036d2:	e403      	b.n	1a002edc <_vfprintf_r+0xfc>
1a0036d4:	f048 0310 	orr.w	r3, r8, #16
1a0036d8:	069f      	lsls	r7, r3, #26
1a0036da:	f53f acd1 	bmi.w	1a003080 <_vfprintf_r+0x2a0>
1a0036de:	9908      	ldr	r1, [sp, #32]
1a0036e0:	06dd      	lsls	r5, r3, #27
1a0036e2:	f101 0204 	add.w	r2, r1, #4
1a0036e6:	f100 82fd 	bmi.w	1a003ce4 <_vfprintf_r+0xf04>
1a0036ea:	065c      	lsls	r4, r3, #25
1a0036ec:	9908      	ldr	r1, [sp, #32]
1a0036ee:	f100 8475 	bmi.w	1a003fdc <_vfprintf_r+0x11fc>
1a0036f2:	0598      	lsls	r0, r3, #22
1a0036f4:	f140 82f6 	bpl.w	1a003ce4 <_vfprintf_r+0xf04>
1a0036f8:	f991 4000 	ldrsb.w	r4, [r1]
1a0036fc:	9208      	str	r2, [sp, #32]
1a0036fe:	17e5      	asrs	r5, r4, #31
1a003700:	4620      	mov	r0, r4
1a003702:	4629      	mov	r1, r5
1a003704:	e4c7      	b.n	1a003096 <_vfprintf_r+0x2b6>
1a003706:	9a08      	ldr	r2, [sp, #32]
1a003708:	f018 0f10 	tst.w	r8, #16
1a00370c:	f102 0304 	add.w	r3, r2, #4
1a003710:	f040 82e3 	bne.w	1a003cda <_vfprintf_r+0xefa>
1a003714:	f018 0f40 	tst.w	r8, #64	; 0x40
1a003718:	9a08      	ldr	r2, [sp, #32]
1a00371a:	f040 8467 	bne.w	1a003fec <_vfprintf_r+0x120c>
1a00371e:	f418 7f00 	tst.w	r8, #512	; 0x200
1a003722:	f000 82da 	beq.w	1a003cda <_vfprintf_r+0xefa>
1a003726:	7814      	ldrb	r4, [r2, #0]
1a003728:	9308      	str	r3, [sp, #32]
1a00372a:	2500      	movs	r5, #0
1a00372c:	e488      	b.n	1a003040 <_vfprintf_r+0x260>
1a00372e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a003732:	f002 fd1b 	bl	1a00616c <__retarget_lock_release_recursive>
1a003736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00373a:	9305      	str	r3, [sp, #20]
1a00373c:	e443      	b.n	1a002fc6 <_vfprintf_r+0x1e6>
1a00373e:	2e00      	cmp	r6, #0
1a003740:	f43f adf8 	beq.w	1a003334 <_vfprintf_r+0x554>
1a003744:	2300      	movs	r3, #0
1a003746:	2101      	movs	r1, #1
1a003748:	461a      	mov	r2, r3
1a00374a:	9104      	str	r1, [sp, #16]
1a00374c:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
1a003750:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a003754:	930a      	str	r3, [sp, #40]	; 0x28
1a003756:	4699      	mov	r9, r3
1a003758:	930f      	str	r3, [sp, #60]	; 0x3c
1a00375a:	9314      	str	r3, [sp, #80]	; 0x50
1a00375c:	9311      	str	r3, [sp, #68]	; 0x44
1a00375e:	9109      	str	r1, [sp, #36]	; 0x24
1a003760:	af3d      	add	r7, sp, #244	; 0xf4
1a003762:	e4ce      	b.n	1a003102 <_vfprintf_r+0x322>
1a003764:	2e65      	cmp	r6, #101	; 0x65
1a003766:	f340 80ca 	ble.w	1a0038fe <_vfprintf_r+0xb1e>
1a00376a:	2200      	movs	r2, #0
1a00376c:	2300      	movs	r3, #0
1a00376e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a003772:	f7fe ff45 	bl	1a002600 <__aeabi_dcmpeq>
1a003776:	2800      	cmp	r0, #0
1a003778:	f000 8169 	beq.w	1a003a4e <_vfprintf_r+0xc6e>
1a00377c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a00377e:	4a22      	ldr	r2, [pc, #136]	; (1a003808 <_vfprintf_r+0xa28>)
1a003780:	f8cb 2000 	str.w	r2, [fp]
1a003784:	3301      	adds	r3, #1
1a003786:	3401      	adds	r4, #1
1a003788:	2201      	movs	r2, #1
1a00378a:	2b07      	cmp	r3, #7
1a00378c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a003790:	f8cb 2004 	str.w	r2, [fp, #4]
1a003794:	f300 8406 	bgt.w	1a003fa4 <_vfprintf_r+0x11c4>
1a003798:	f10b 0b08 	add.w	fp, fp, #8
1a00379c:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a00379e:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a0037a0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0037a2:	4293      	cmp	r3, r2
1a0037a4:	db03      	blt.n	1a0037ae <_vfprintf_r+0x9ce>
1a0037a6:	f018 0f01 	tst.w	r8, #1
1a0037aa:	f43f ad6a 	beq.w	1a003282 <_vfprintf_r+0x4a2>
1a0037ae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a0037b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a0037b2:	f8cb 2000 	str.w	r2, [fp]
1a0037b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a0037b8:	f8cb 2004 	str.w	r2, [fp, #4]
1a0037bc:	3301      	adds	r3, #1
1a0037be:	4414      	add	r4, r2
1a0037c0:	2b07      	cmp	r3, #7
1a0037c2:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a0037c6:	f300 8517 	bgt.w	1a0041f8 <_vfprintf_r+0x1418>
1a0037ca:	f10b 0b08 	add.w	fp, fp, #8
1a0037ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0037d0:	1e5d      	subs	r5, r3, #1
1a0037d2:	2d00      	cmp	r5, #0
1a0037d4:	f77f ad55 	ble.w	1a003282 <_vfprintf_r+0x4a2>
1a0037d8:	2d10      	cmp	r5, #16
1a0037da:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a0037dc:	4b0b      	ldr	r3, [pc, #44]	; (1a00380c <_vfprintf_r+0xa2c>)
1a0037de:	f340 82e7 	ble.w	1a003db0 <_vfprintf_r+0xfd0>
1a0037e2:	4619      	mov	r1, r3
1a0037e4:	2610      	movs	r6, #16
1a0037e6:	4623      	mov	r3, r4
1a0037e8:	9f03      	ldr	r7, [sp, #12]
1a0037ea:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0037ee:	460c      	mov	r4, r1
1a0037f0:	e014      	b.n	1a00381c <_vfprintf_r+0xa3c>
1a0037f2:	bf00      	nop
1a0037f4:	7fefffff 	.word	0x7fefffff
1a0037f8:	1a007c60 	.word	0x1a007c60
1a0037fc:	1a007c5c 	.word	0x1a007c5c
1a003800:	1a007c80 	.word	0x1a007c80
1a003804:	1a007c6c 	.word	0x1a007c6c
1a003808:	1a007c9c 	.word	0x1a007c9c
1a00380c:	1a007cb0 	.word	0x1a007cb0
1a003810:	f10b 0b08 	add.w	fp, fp, #8
1a003814:	3d10      	subs	r5, #16
1a003816:	2d10      	cmp	r5, #16
1a003818:	f340 82c7 	ble.w	1a003daa <_vfprintf_r+0xfca>
1a00381c:	3201      	adds	r2, #1
1a00381e:	3310      	adds	r3, #16
1a003820:	2a07      	cmp	r2, #7
1a003822:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
1a003826:	e9cb 4600 	strd	r4, r6, [fp]
1a00382a:	ddf1      	ble.n	1a003810 <_vfprintf_r+0xa30>
1a00382c:	aa2a      	add	r2, sp, #168	; 0xa8
1a00382e:	4649      	mov	r1, r9
1a003830:	4638      	mov	r0, r7
1a003832:	f003 fe1b 	bl	1a00746c <__sprint_r>
1a003836:	2800      	cmp	r0, #0
1a003838:	d14c      	bne.n	1a0038d4 <_vfprintf_r+0xaf4>
1a00383a:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
1a00383e:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003842:	e7e7      	b.n	1a003814 <_vfprintf_r+0xa34>
1a003844:	9b06      	ldr	r3, [sp, #24]
1a003846:	9a04      	ldr	r2, [sp, #16]
1a003848:	1a9d      	subs	r5, r3, r2
1a00384a:	2d00      	cmp	r5, #0
1a00384c:	f77f acc9 	ble.w	1a0031e2 <_vfprintf_r+0x402>
1a003850:	2d10      	cmp	r5, #16
1a003852:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a003854:	4bbc      	ldr	r3, [pc, #752]	; (1a003b48 <_vfprintf_r+0xd68>)
1a003856:	dd27      	ble.n	1a0038a8 <_vfprintf_r+0xac8>
1a003858:	4659      	mov	r1, fp
1a00385a:	4620      	mov	r0, r4
1a00385c:	46bb      	mov	fp, r7
1a00385e:	461c      	mov	r4, r3
1a003860:	4637      	mov	r7, r6
1a003862:	9e07      	ldr	r6, [sp, #28]
1a003864:	e004      	b.n	1a003870 <_vfprintf_r+0xa90>
1a003866:	3d10      	subs	r5, #16
1a003868:	2d10      	cmp	r5, #16
1a00386a:	f101 0108 	add.w	r1, r1, #8
1a00386e:	dd16      	ble.n	1a00389e <_vfprintf_r+0xabe>
1a003870:	3201      	adds	r2, #1
1a003872:	3010      	adds	r0, #16
1a003874:	2310      	movs	r3, #16
1a003876:	2a07      	cmp	r2, #7
1a003878:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
1a00387c:	600c      	str	r4, [r1, #0]
1a00387e:	604b      	str	r3, [r1, #4]
1a003880:	ddf1      	ble.n	1a003866 <_vfprintf_r+0xa86>
1a003882:	aa2a      	add	r2, sp, #168	; 0xa8
1a003884:	4631      	mov	r1, r6
1a003886:	9803      	ldr	r0, [sp, #12]
1a003888:	f003 fdf0 	bl	1a00746c <__sprint_r>
1a00388c:	2800      	cmp	r0, #0
1a00388e:	f040 80a8 	bne.w	1a0039e2 <_vfprintf_r+0xc02>
1a003892:	3d10      	subs	r5, #16
1a003894:	2d10      	cmp	r5, #16
1a003896:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
1a00389a:	a92d      	add	r1, sp, #180	; 0xb4
1a00389c:	dce8      	bgt.n	1a003870 <_vfprintf_r+0xa90>
1a00389e:	463e      	mov	r6, r7
1a0038a0:	4623      	mov	r3, r4
1a0038a2:	465f      	mov	r7, fp
1a0038a4:	4604      	mov	r4, r0
1a0038a6:	468b      	mov	fp, r1
1a0038a8:	3201      	adds	r2, #1
1a0038aa:	442c      	add	r4, r5
1a0038ac:	2a07      	cmp	r2, #7
1a0038ae:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a0038b2:	e9cb 3500 	strd	r3, r5, [fp]
1a0038b6:	f300 8292 	bgt.w	1a003dde <_vfprintf_r+0xffe>
1a0038ba:	f10b 0b08 	add.w	fp, fp, #8
1a0038be:	e490      	b.n	1a0031e2 <_vfprintf_r+0x402>
1a0038c0:	aa2a      	add	r2, sp, #168	; 0xa8
1a0038c2:	9907      	ldr	r1, [sp, #28]
1a0038c4:	9803      	ldr	r0, [sp, #12]
1a0038c6:	f003 fdd1 	bl	1a00746c <__sprint_r>
1a0038ca:	2800      	cmp	r0, #0
1a0038cc:	f43f ad23 	beq.w	1a003316 <_vfprintf_r+0x536>
1a0038d0:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a0038d4:	990a      	ldr	r1, [sp, #40]	; 0x28
1a0038d6:	b111      	cbz	r1, 1a0038de <_vfprintf_r+0xafe>
1a0038d8:	9803      	ldr	r0, [sp, #12]
1a0038da:	f002 f997 	bl	1a005c0c <_free_r>
1a0038de:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a0038e2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a0038e6:	07d0      	lsls	r0, r2, #31
1a0038e8:	d402      	bmi.n	1a0038f0 <_vfprintf_r+0xb10>
1a0038ea:	0599      	lsls	r1, r3, #22
1a0038ec:	f140 81d0 	bpl.w	1a003c90 <_vfprintf_r+0xeb0>
1a0038f0:	065a      	lsls	r2, r3, #25
1a0038f2:	f53f ab65 	bmi.w	1a002fc0 <_vfprintf_r+0x1e0>
1a0038f6:	9805      	ldr	r0, [sp, #20]
1a0038f8:	b057      	add	sp, #348	; 0x15c
1a0038fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0038fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a003900:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a003902:	2a01      	cmp	r2, #1
1a003904:	f104 0401 	add.w	r4, r4, #1
1a003908:	f103 0501 	add.w	r5, r3, #1
1a00390c:	f10b 0608 	add.w	r6, fp, #8
1a003910:	f340 811c 	ble.w	1a003b4c <_vfprintf_r+0xd6c>
1a003914:	2301      	movs	r3, #1
1a003916:	2d07      	cmp	r5, #7
1a003918:	f8cb 7000 	str.w	r7, [fp]
1a00391c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
1a003920:	f8cb 3004 	str.w	r3, [fp, #4]
1a003924:	f300 81bb 	bgt.w	1a003c9e <_vfprintf_r+0xebe>
1a003928:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00392a:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a00392c:	1c69      	adds	r1, r5, #1
1a00392e:	441c      	add	r4, r3
1a003930:	2907      	cmp	r1, #7
1a003932:	910b      	str	r1, [sp, #44]	; 0x2c
1a003934:	e9cd 142b 	strd	r1, r4, [sp, #172]	; 0xac
1a003938:	e9c6 2300 	strd	r2, r3, [r6]
1a00393c:	f300 81bb 	bgt.w	1a003cb6 <_vfprintf_r+0xed6>
1a003940:	3608      	adds	r6, #8
1a003942:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a003944:	1c53      	adds	r3, r2, #1
1a003946:	461d      	mov	r5, r3
1a003948:	9509      	str	r5, [sp, #36]	; 0x24
1a00394a:	9d10      	ldr	r5, [sp, #64]	; 0x40
1a00394c:	930e      	str	r3, [sp, #56]	; 0x38
1a00394e:	2200      	movs	r2, #0
1a003950:	2300      	movs	r3, #0
1a003952:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a003956:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
1a00395a:	f106 0b08 	add.w	fp, r6, #8
1a00395e:	f7fe fe4f 	bl	1a002600 <__aeabi_dcmpeq>
1a003962:	2800      	cmp	r0, #0
1a003964:	f040 80c2 	bne.w	1a003aec <_vfprintf_r+0xd0c>
1a003968:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a00396a:	f8c6 9004 	str.w	r9, [r6, #4]
1a00396e:	3701      	adds	r7, #1
1a003970:	444c      	add	r4, r9
1a003972:	2d07      	cmp	r5, #7
1a003974:	6037      	str	r7, [r6, #0]
1a003976:	942c      	str	r4, [sp, #176]	; 0xb0
1a003978:	952b      	str	r5, [sp, #172]	; 0xac
1a00397a:	f300 80f9 	bgt.w	1a003b70 <_vfprintf_r+0xd90>
1a00397e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a003980:	f106 0310 	add.w	r3, r6, #16
1a003984:	3202      	adds	r2, #2
1a003986:	465e      	mov	r6, fp
1a003988:	9209      	str	r2, [sp, #36]	; 0x24
1a00398a:	469b      	mov	fp, r3
1a00398c:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a00398e:	6072      	str	r2, [r6, #4]
1a003990:	4414      	add	r4, r2
1a003992:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a003994:	942c      	str	r4, [sp, #176]	; 0xb0
1a003996:	ab26      	add	r3, sp, #152	; 0x98
1a003998:	2a07      	cmp	r2, #7
1a00399a:	922b      	str	r2, [sp, #172]	; 0xac
1a00399c:	6033      	str	r3, [r6, #0]
1a00399e:	f77f ac70 	ble.w	1a003282 <_vfprintf_r+0x4a2>
1a0039a2:	aa2a      	add	r2, sp, #168	; 0xa8
1a0039a4:	9907      	ldr	r1, [sp, #28]
1a0039a6:	9803      	ldr	r0, [sp, #12]
1a0039a8:	f003 fd60 	bl	1a00746c <__sprint_r>
1a0039ac:	2800      	cmp	r0, #0
1a0039ae:	d18f      	bne.n	1a0038d0 <_vfprintf_r+0xaf0>
1a0039b0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0039b2:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0039b6:	e464      	b.n	1a003282 <_vfprintf_r+0x4a2>
1a0039b8:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a0039ba:	af56      	add	r7, sp, #344	; 0x158
1a0039bc:	0923      	lsrs	r3, r4, #4
1a0039be:	f004 010f 	and.w	r1, r4, #15
1a0039c2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a0039c6:	092a      	lsrs	r2, r5, #4
1a0039c8:	461c      	mov	r4, r3
1a0039ca:	4615      	mov	r5, r2
1a0039cc:	5c43      	ldrb	r3, [r0, r1]
1a0039ce:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a0039d2:	ea54 0305 	orrs.w	r3, r4, r5
1a0039d6:	d1f1      	bne.n	1a0039bc <_vfprintf_r+0xbdc>
1a0039d8:	9b04      	ldr	r3, [sp, #16]
1a0039da:	1bdb      	subs	r3, r3, r7
1a0039dc:	9309      	str	r3, [sp, #36]	; 0x24
1a0039de:	f7ff bb80 	b.w	1a0030e2 <_vfprintf_r+0x302>
1a0039e2:	46b1      	mov	r9, r6
1a0039e4:	e776      	b.n	1a0038d4 <_vfprintf_r+0xaf4>
1a0039e6:	aa2a      	add	r2, sp, #168	; 0xa8
1a0039e8:	9907      	ldr	r1, [sp, #28]
1a0039ea:	9803      	ldr	r0, [sp, #12]
1a0039ec:	f003 fd3e 	bl	1a00746c <__sprint_r>
1a0039f0:	2800      	cmp	r0, #0
1a0039f2:	f47f af6d 	bne.w	1a0038d0 <_vfprintf_r+0xaf0>
1a0039f6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0039f8:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0039fc:	f7ff bbdd 	b.w	1a0031ba <_vfprintf_r+0x3da>
1a003a00:	aa2a      	add	r2, sp, #168	; 0xa8
1a003a02:	9907      	ldr	r1, [sp, #28]
1a003a04:	9803      	ldr	r0, [sp, #12]
1a003a06:	f003 fd31 	bl	1a00746c <__sprint_r>
1a003a0a:	2800      	cmp	r0, #0
1a003a0c:	f47f af60 	bne.w	1a0038d0 <_vfprintf_r+0xaf0>
1a003a10:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003a12:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003a16:	f7ff bbe0 	b.w	1a0031da <_vfprintf_r+0x3fa>
1a003a1a:	4698      	mov	r8, r3
1a003a1c:	2d00      	cmp	r5, #0
1a003a1e:	bf08      	it	eq
1a003a20:	2c0a      	cmpeq	r4, #10
1a003a22:	f080 8170 	bcs.w	1a003d06 <_vfprintf_r+0xf26>
1a003a26:	af56      	add	r7, sp, #344	; 0x158
1a003a28:	3430      	adds	r4, #48	; 0x30
1a003a2a:	2301      	movs	r3, #1
1a003a2c:	f807 4d01 	strb.w	r4, [r7, #-1]!
1a003a30:	9309      	str	r3, [sp, #36]	; 0x24
1a003a32:	f7ff bb56 	b.w	1a0030e2 <_vfprintf_r+0x302>
1a003a36:	aa2a      	add	r2, sp, #168	; 0xa8
1a003a38:	9907      	ldr	r1, [sp, #28]
1a003a3a:	9803      	ldr	r0, [sp, #12]
1a003a3c:	f003 fd16 	bl	1a00746c <__sprint_r>
1a003a40:	2800      	cmp	r0, #0
1a003a42:	f47f af45 	bne.w	1a0038d0 <_vfprintf_r+0xaf0>
1a003a46:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003a48:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003a4c:	e406      	b.n	1a00325c <_vfprintf_r+0x47c>
1a003a4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a003a50:	2b00      	cmp	r3, #0
1a003a52:	f340 8273 	ble.w	1a003f3c <_vfprintf_r+0x115c>
1a003a56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a003a5a:	4293      	cmp	r3, r2
1a003a5c:	bfa8      	it	ge
1a003a5e:	4613      	movge	r3, r2
1a003a60:	2b00      	cmp	r3, #0
1a003a62:	461d      	mov	r5, r3
1a003a64:	dd0d      	ble.n	1a003a82 <_vfprintf_r+0xca2>
1a003a66:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a003a68:	f8cb 7000 	str.w	r7, [fp]
1a003a6c:	3301      	adds	r3, #1
1a003a6e:	442c      	add	r4, r5
1a003a70:	2b07      	cmp	r3, #7
1a003a72:	942c      	str	r4, [sp, #176]	; 0xb0
1a003a74:	f8cb 5004 	str.w	r5, [fp, #4]
1a003a78:	932b      	str	r3, [sp, #172]	; 0xac
1a003a7a:	f300 82c1 	bgt.w	1a004000 <_vfprintf_r+0x1220>
1a003a7e:	f10b 0b08 	add.w	fp, fp, #8
1a003a82:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a003a84:	2d00      	cmp	r5, #0
1a003a86:	bfa8      	it	ge
1a003a88:	1b5b      	subge	r3, r3, r5
1a003a8a:	2b00      	cmp	r3, #0
1a003a8c:	461d      	mov	r5, r3
1a003a8e:	f340 8099 	ble.w	1a003bc4 <_vfprintf_r+0xde4>
1a003a92:	2d10      	cmp	r5, #16
1a003a94:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a003a96:	4b2c      	ldr	r3, [pc, #176]	; (1a003b48 <_vfprintf_r+0xd68>)
1a003a98:	f340 83db 	ble.w	1a004252 <_vfprintf_r+0x1472>
1a003a9c:	4618      	mov	r0, r3
1a003a9e:	4621      	mov	r1, r4
1a003aa0:	465b      	mov	r3, fp
1a003aa2:	2610      	movs	r6, #16
1a003aa4:	46bb      	mov	fp, r7
1a003aa6:	f8dd 900c 	ldr.w	r9, [sp, #12]
1a003aaa:	9c07      	ldr	r4, [sp, #28]
1a003aac:	4607      	mov	r7, r0
1a003aae:	e004      	b.n	1a003aba <_vfprintf_r+0xcda>
1a003ab0:	3308      	adds	r3, #8
1a003ab2:	3d10      	subs	r5, #16
1a003ab4:	2d10      	cmp	r5, #16
1a003ab6:	f340 83c7 	ble.w	1a004248 <_vfprintf_r+0x1468>
1a003aba:	3201      	adds	r2, #1
1a003abc:	3110      	adds	r1, #16
1a003abe:	2a07      	cmp	r2, #7
1a003ac0:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
1a003ac4:	e9c3 7600 	strd	r7, r6, [r3]
1a003ac8:	ddf2      	ble.n	1a003ab0 <_vfprintf_r+0xcd0>
1a003aca:	aa2a      	add	r2, sp, #168	; 0xa8
1a003acc:	4621      	mov	r1, r4
1a003ace:	4648      	mov	r0, r9
1a003ad0:	f003 fccc 	bl	1a00746c <__sprint_r>
1a003ad4:	2800      	cmp	r0, #0
1a003ad6:	f040 84a5 	bne.w	1a004424 <_vfprintf_r+0x1644>
1a003ada:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
1a003ade:	ab2d      	add	r3, sp, #180	; 0xb4
1a003ae0:	e7e7      	b.n	1a003ab2 <_vfprintf_r+0xcd2>
1a003ae2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a003ae6:	af56      	add	r7, sp, #344	; 0x158
1a003ae8:	f7ff bafb 	b.w	1a0030e2 <_vfprintf_r+0x302>
1a003aec:	f1b9 0f00 	cmp.w	r9, #0
1a003af0:	f77f af4c 	ble.w	1a00398c <_vfprintf_r+0xbac>
1a003af4:	f1b9 0f10 	cmp.w	r9, #16
1a003af8:	4b13      	ldr	r3, [pc, #76]	; (1a003b48 <_vfprintf_r+0xd68>)
1a003afa:	f340 8659 	ble.w	1a0047b0 <_vfprintf_r+0x19d0>
1a003afe:	4619      	mov	r1, r3
1a003b00:	4622      	mov	r2, r4
1a003b02:	4633      	mov	r3, r6
1a003b04:	2710      	movs	r7, #16
1a003b06:	f8dd b00c 	ldr.w	fp, [sp, #12]
1a003b0a:	9c07      	ldr	r4, [sp, #28]
1a003b0c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
1a003b0e:	460e      	mov	r6, r1
1a003b10:	e007      	b.n	1a003b22 <_vfprintf_r+0xd42>
1a003b12:	3308      	adds	r3, #8
1a003b14:	f1a9 0910 	sub.w	r9, r9, #16
1a003b18:	f1b9 0f10 	cmp.w	r9, #16
1a003b1c:	f340 8353 	ble.w	1a0041c6 <_vfprintf_r+0x13e6>
1a003b20:	3501      	adds	r5, #1
1a003b22:	3210      	adds	r2, #16
1a003b24:	2d07      	cmp	r5, #7
1a003b26:	e9cd 522b 	strd	r5, r2, [sp, #172]	; 0xac
1a003b2a:	e9c3 6700 	strd	r6, r7, [r3]
1a003b2e:	ddf0      	ble.n	1a003b12 <_vfprintf_r+0xd32>
1a003b30:	aa2a      	add	r2, sp, #168	; 0xa8
1a003b32:	4621      	mov	r1, r4
1a003b34:	4658      	mov	r0, fp
1a003b36:	f003 fc99 	bl	1a00746c <__sprint_r>
1a003b3a:	2800      	cmp	r0, #0
1a003b3c:	f040 8472 	bne.w	1a004424 <_vfprintf_r+0x1644>
1a003b40:	e9dd 522b 	ldrd	r5, r2, [sp, #172]	; 0xac
1a003b44:	ab2d      	add	r3, sp, #180	; 0xb4
1a003b46:	e7e5      	b.n	1a003b14 <_vfprintf_r+0xd34>
1a003b48:	1a007cb0 	.word	0x1a007cb0
1a003b4c:	f018 0f01 	tst.w	r8, #1
1a003b50:	f47f aee0 	bne.w	1a003914 <_vfprintf_r+0xb34>
1a003b54:	2201      	movs	r2, #1
1a003b56:	2d07      	cmp	r5, #7
1a003b58:	f8cb 7000 	str.w	r7, [fp]
1a003b5c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
1a003b60:	f8cb 2004 	str.w	r2, [fp, #4]
1a003b64:	dc04      	bgt.n	1a003b70 <_vfprintf_r+0xd90>
1a003b66:	3302      	adds	r3, #2
1a003b68:	9309      	str	r3, [sp, #36]	; 0x24
1a003b6a:	f10b 0b10 	add.w	fp, fp, #16
1a003b6e:	e70d      	b.n	1a00398c <_vfprintf_r+0xbac>
1a003b70:	aa2a      	add	r2, sp, #168	; 0xa8
1a003b72:	9907      	ldr	r1, [sp, #28]
1a003b74:	9803      	ldr	r0, [sp, #12]
1a003b76:	f003 fc79 	bl	1a00746c <__sprint_r>
1a003b7a:	2800      	cmp	r0, #0
1a003b7c:	f47f aea8 	bne.w	1a0038d0 <_vfprintf_r+0xaf0>
1a003b80:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
1a003b84:	3301      	adds	r3, #1
1a003b86:	9309      	str	r3, [sp, #36]	; 0x24
1a003b88:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
1a003b8c:	ae2d      	add	r6, sp, #180	; 0xb4
1a003b8e:	e6fd      	b.n	1a00398c <_vfprintf_r+0xbac>
1a003b90:	aa2a      	add	r2, sp, #168	; 0xa8
1a003b92:	9907      	ldr	r1, [sp, #28]
1a003b94:	9803      	ldr	r0, [sp, #12]
1a003b96:	f003 fc69 	bl	1a00746c <__sprint_r>
1a003b9a:	2800      	cmp	r0, #0
1a003b9c:	f47f ae98 	bne.w	1a0038d0 <_vfprintf_r+0xaf0>
1a003ba0:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a003ba4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003ba6:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003baa:	f7ff baf6 	b.w	1a00319a <_vfprintf_r+0x3ba>
1a003bae:	aa2a      	add	r2, sp, #168	; 0xa8
1a003bb0:	9907      	ldr	r1, [sp, #28]
1a003bb2:	9803      	ldr	r0, [sp, #12]
1a003bb4:	f003 fc5a 	bl	1a00746c <__sprint_r>
1a003bb8:	2800      	cmp	r0, #0
1a003bba:	f47f ae89 	bne.w	1a0038d0 <_vfprintf_r+0xaf0>
1a003bbe:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003bc0:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003bc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a003bc6:	f418 6f80 	tst.w	r8, #1024	; 0x400
1a003bca:	443b      	add	r3, r7
1a003bcc:	4699      	mov	r9, r3
1a003bce:	f040 8357 	bne.w	1a004280 <_vfprintf_r+0x14a0>
1a003bd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a003bd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a003bd6:	4293      	cmp	r3, r2
1a003bd8:	db49      	blt.n	1a003c6e <_vfprintf_r+0xe8e>
1a003bda:	f018 0f01 	tst.w	r8, #1
1a003bde:	d146      	bne.n	1a003c6e <_vfprintf_r+0xe8e>
1a003be0:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a003be2:	18bd      	adds	r5, r7, r2
1a003be4:	eba5 0509 	sub.w	r5, r5, r9
1a003be8:	1ad3      	subs	r3, r2, r3
1a003bea:	429d      	cmp	r5, r3
1a003bec:	bfa8      	it	ge
1a003bee:	461d      	movge	r5, r3
1a003bf0:	2d00      	cmp	r5, #0
1a003bf2:	dd0d      	ble.n	1a003c10 <_vfprintf_r+0xe30>
1a003bf4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a003bf6:	f8cb 9000 	str.w	r9, [fp]
1a003bfa:	3201      	adds	r2, #1
1a003bfc:	442c      	add	r4, r5
1a003bfe:	2a07      	cmp	r2, #7
1a003c00:	942c      	str	r4, [sp, #176]	; 0xb0
1a003c02:	f8cb 5004 	str.w	r5, [fp, #4]
1a003c06:	922b      	str	r2, [sp, #172]	; 0xac
1a003c08:	f300 8462 	bgt.w	1a0044d0 <_vfprintf_r+0x16f0>
1a003c0c:	f10b 0b08 	add.w	fp, fp, #8
1a003c10:	2d00      	cmp	r5, #0
1a003c12:	bfac      	ite	ge
1a003c14:	1b5d      	subge	r5, r3, r5
1a003c16:	461d      	movlt	r5, r3
1a003c18:	2d00      	cmp	r5, #0
1a003c1a:	f77f ab32 	ble.w	1a003282 <_vfprintf_r+0x4a2>
1a003c1e:	2d10      	cmp	r5, #16
1a003c20:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a003c22:	4bc5      	ldr	r3, [pc, #788]	; (1a003f38 <_vfprintf_r+0x1158>)
1a003c24:	f340 80c4 	ble.w	1a003db0 <_vfprintf_r+0xfd0>
1a003c28:	4619      	mov	r1, r3
1a003c2a:	2610      	movs	r6, #16
1a003c2c:	4623      	mov	r3, r4
1a003c2e:	9f03      	ldr	r7, [sp, #12]
1a003c30:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a003c34:	460c      	mov	r4, r1
1a003c36:	e005      	b.n	1a003c44 <_vfprintf_r+0xe64>
1a003c38:	f10b 0b08 	add.w	fp, fp, #8
1a003c3c:	3d10      	subs	r5, #16
1a003c3e:	2d10      	cmp	r5, #16
1a003c40:	f340 80b3 	ble.w	1a003daa <_vfprintf_r+0xfca>
1a003c44:	3201      	adds	r2, #1
1a003c46:	3310      	adds	r3, #16
1a003c48:	2a07      	cmp	r2, #7
1a003c4a:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
1a003c4e:	e9cb 4600 	strd	r4, r6, [fp]
1a003c52:	ddf1      	ble.n	1a003c38 <_vfprintf_r+0xe58>
1a003c54:	aa2a      	add	r2, sp, #168	; 0xa8
1a003c56:	4649      	mov	r1, r9
1a003c58:	4638      	mov	r0, r7
1a003c5a:	f003 fc07 	bl	1a00746c <__sprint_r>
1a003c5e:	2800      	cmp	r0, #0
1a003c60:	f47f ae38 	bne.w	1a0038d4 <_vfprintf_r+0xaf4>
1a003c64:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
1a003c68:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003c6c:	e7e6      	b.n	1a003c3c <_vfprintf_r+0xe5c>
1a003c6e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a003c70:	9916      	ldr	r1, [sp, #88]	; 0x58
1a003c72:	f8cb 1000 	str.w	r1, [fp]
1a003c76:	9915      	ldr	r1, [sp, #84]	; 0x54
1a003c78:	f8cb 1004 	str.w	r1, [fp, #4]
1a003c7c:	3201      	adds	r2, #1
1a003c7e:	440c      	add	r4, r1
1a003c80:	2a07      	cmp	r2, #7
1a003c82:	942c      	str	r4, [sp, #176]	; 0xb0
1a003c84:	922b      	str	r2, [sp, #172]	; 0xac
1a003c86:	f300 828c 	bgt.w	1a0041a2 <_vfprintf_r+0x13c2>
1a003c8a:	f10b 0b08 	add.w	fp, fp, #8
1a003c8e:	e7a7      	b.n	1a003be0 <_vfprintf_r+0xe00>
1a003c90:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a003c94:	f002 fa6a 	bl	1a00616c <__retarget_lock_release_recursive>
1a003c98:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a003c9c:	e628      	b.n	1a0038f0 <_vfprintf_r+0xb10>
1a003c9e:	aa2a      	add	r2, sp, #168	; 0xa8
1a003ca0:	9907      	ldr	r1, [sp, #28]
1a003ca2:	9803      	ldr	r0, [sp, #12]
1a003ca4:	f003 fbe2 	bl	1a00746c <__sprint_r>
1a003ca8:	2800      	cmp	r0, #0
1a003caa:	f47f ae11 	bne.w	1a0038d0 <_vfprintf_r+0xaf0>
1a003cae:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
1a003cb2:	ae2d      	add	r6, sp, #180	; 0xb4
1a003cb4:	e638      	b.n	1a003928 <_vfprintf_r+0xb48>
1a003cb6:	aa2a      	add	r2, sp, #168	; 0xa8
1a003cb8:	9907      	ldr	r1, [sp, #28]
1a003cba:	9803      	ldr	r0, [sp, #12]
1a003cbc:	f003 fbd6 	bl	1a00746c <__sprint_r>
1a003cc0:	2800      	cmp	r0, #0
1a003cc2:	f47f ae05 	bne.w	1a0038d0 <_vfprintf_r+0xaf0>
1a003cc6:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
1a003cca:	ae2d      	add	r6, sp, #180	; 0xb4
1a003ccc:	930b      	str	r3, [sp, #44]	; 0x2c
1a003cce:	e638      	b.n	1a003942 <_vfprintf_r+0xb62>
1a003cd0:	6814      	ldr	r4, [r2, #0]
1a003cd2:	9308      	str	r3, [sp, #32]
1a003cd4:	2500      	movs	r5, #0
1a003cd6:	f7ff bb95 	b.w	1a003404 <_vfprintf_r+0x624>
1a003cda:	6814      	ldr	r4, [r2, #0]
1a003cdc:	9308      	str	r3, [sp, #32]
1a003cde:	2500      	movs	r5, #0
1a003ce0:	f7ff b9ae 	b.w	1a003040 <_vfprintf_r+0x260>
1a003ce4:	680c      	ldr	r4, [r1, #0]
1a003ce6:	9208      	str	r2, [sp, #32]
1a003ce8:	17e5      	asrs	r5, r4, #31
1a003cea:	4620      	mov	r0, r4
1a003cec:	4629      	mov	r1, r5
1a003cee:	f7ff b9d2 	b.w	1a003096 <_vfprintf_r+0x2b6>
1a003cf2:	6814      	ldr	r4, [r2, #0]
1a003cf4:	9108      	str	r1, [sp, #32]
1a003cf6:	2201      	movs	r2, #1
1a003cf8:	2500      	movs	r5, #0
1a003cfa:	f7ff bb32 	b.w	1a003362 <_vfprintf_r+0x582>
1a003cfe:	2a01      	cmp	r2, #1
1a003d00:	f47f ab3c 	bne.w	1a00337c <_vfprintf_r+0x59c>
1a003d04:	e68f      	b.n	1a003a26 <_vfprintf_r+0xc46>
1a003d06:	f408 6380 	and.w	r3, r8, #1024	; 0x400
1a003d0a:	2200      	movs	r2, #0
1a003d0c:	e9cd a609 	strd	sl, r6, [sp, #36]	; 0x24
1a003d10:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
1a003d14:	af56      	add	r7, sp, #344	; 0x158
1a003d16:	4692      	mov	sl, r2
1a003d18:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
1a003d1c:	461e      	mov	r6, r3
1a003d1e:	e00a      	b.n	1a003d36 <_vfprintf_r+0xf56>
1a003d20:	2300      	movs	r3, #0
1a003d22:	4620      	mov	r0, r4
1a003d24:	4629      	mov	r1, r5
1a003d26:	220a      	movs	r2, #10
1a003d28:	f7fe fcec 	bl	1a002704 <__aeabi_uldivmod>
1a003d2c:	4604      	mov	r4, r0
1a003d2e:	460d      	mov	r5, r1
1a003d30:	ea54 0305 	orrs.w	r3, r4, r5
1a003d34:	d029      	beq.n	1a003d8a <_vfprintf_r+0xfaa>
1a003d36:	220a      	movs	r2, #10
1a003d38:	2300      	movs	r3, #0
1a003d3a:	4620      	mov	r0, r4
1a003d3c:	4629      	mov	r1, r5
1a003d3e:	f7fe fce1 	bl	1a002704 <__aeabi_uldivmod>
1a003d42:	3230      	adds	r2, #48	; 0x30
1a003d44:	f807 2c01 	strb.w	r2, [r7, #-1]
1a003d48:	f10a 0a01 	add.w	sl, sl, #1
1a003d4c:	3f01      	subs	r7, #1
1a003d4e:	2e00      	cmp	r6, #0
1a003d50:	d0e6      	beq.n	1a003d20 <_vfprintf_r+0xf40>
1a003d52:	f898 3000 	ldrb.w	r3, [r8]
1a003d56:	459a      	cmp	sl, r3
1a003d58:	d1e2      	bne.n	1a003d20 <_vfprintf_r+0xf40>
1a003d5a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
1a003d5e:	d0df      	beq.n	1a003d20 <_vfprintf_r+0xf40>
1a003d60:	2d00      	cmp	r5, #0
1a003d62:	bf08      	it	eq
1a003d64:	2c0a      	cmpeq	r4, #10
1a003d66:	d3db      	bcc.n	1a003d20 <_vfprintf_r+0xf40>
1a003d68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a003d6a:	9918      	ldr	r1, [sp, #96]	; 0x60
1a003d6c:	1aff      	subs	r7, r7, r3
1a003d6e:	461a      	mov	r2, r3
1a003d70:	4638      	mov	r0, r7
1a003d72:	f003 fb0d 	bl	1a007390 <strncpy>
1a003d76:	f898 3001 	ldrb.w	r3, [r8, #1]
1a003d7a:	2b00      	cmp	r3, #0
1a003d7c:	f000 8496 	beq.w	1a0046ac <_vfprintf_r+0x18cc>
1a003d80:	f108 0801 	add.w	r8, r8, #1
1a003d84:	f04f 0a00 	mov.w	sl, #0
1a003d88:	e7ca      	b.n	1a003d20 <_vfprintf_r+0xf40>
1a003d8a:	9b04      	ldr	r3, [sp, #16]
1a003d8c:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
1a003d90:	1bdb      	subs	r3, r3, r7
1a003d92:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
1a003d96:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a003d98:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
1a003d9c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
1a003da0:	9309      	str	r3, [sp, #36]	; 0x24
1a003da2:	f7ff b99e 	b.w	1a0030e2 <_vfprintf_r+0x302>
1a003da6:	46c1      	mov	r9, r8
1a003da8:	e594      	b.n	1a0038d4 <_vfprintf_r+0xaf4>
1a003daa:	4621      	mov	r1, r4
1a003dac:	461c      	mov	r4, r3
1a003dae:	460b      	mov	r3, r1
1a003db0:	3201      	adds	r2, #1
1a003db2:	442c      	add	r4, r5
1a003db4:	2a07      	cmp	r2, #7
1a003db6:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a003dba:	e9cb 3500 	strd	r3, r5, [fp]
1a003dbe:	f77f aa5e 	ble.w	1a00327e <_vfprintf_r+0x49e>
1a003dc2:	e5ee      	b.n	1a0039a2 <_vfprintf_r+0xbc2>
1a003dc4:	f018 0f10 	tst.w	r8, #16
1a003dc8:	f040 80f8 	bne.w	1a003fbc <_vfprintf_r+0x11dc>
1a003dcc:	f018 0f40 	tst.w	r8, #64	; 0x40
1a003dd0:	f000 8351 	beq.w	1a004476 <_vfprintf_r+0x1696>
1a003dd4:	9a05      	ldr	r2, [sp, #20]
1a003dd6:	801a      	strh	r2, [r3, #0]
1a003dd8:	4657      	mov	r7, sl
1a003dda:	f7ff baa7 	b.w	1a00332c <_vfprintf_r+0x54c>
1a003dde:	aa2a      	add	r2, sp, #168	; 0xa8
1a003de0:	9907      	ldr	r1, [sp, #28]
1a003de2:	9803      	ldr	r0, [sp, #12]
1a003de4:	f003 fb42 	bl	1a00746c <__sprint_r>
1a003de8:	2800      	cmp	r0, #0
1a003dea:	f47f ad71 	bne.w	1a0038d0 <_vfprintf_r+0xaf0>
1a003dee:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003df0:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003df4:	f7ff b9f5 	b.w	1a0031e2 <_vfprintf_r+0x402>
1a003df8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a003dfc:	4602      	mov	r2, r0
1a003dfe:	460b      	mov	r3, r1
1a003e00:	f003 fd0e 	bl	1a007820 <__aeabi_dcmpun>
1a003e04:	2800      	cmp	r0, #0
1a003e06:	f040 8491 	bne.w	1a00472c <_vfprintf_r+0x194c>
1a003e0a:	2e61      	cmp	r6, #97	; 0x61
1a003e0c:	f000 8111 	beq.w	1a004032 <_vfprintf_r+0x1252>
1a003e10:	2e41      	cmp	r6, #65	; 0x41
1a003e12:	f000 8377 	beq.w	1a004504 <_vfprintf_r+0x1724>
1a003e16:	f448 7380 	orr.w	r3, r8, #256	; 0x100
1a003e1a:	f026 0220 	bic.w	r2, r6, #32
1a003e1e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a003e22:	930e      	str	r3, [sp, #56]	; 0x38
1a003e24:	9204      	str	r2, [sp, #16]
1a003e26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a003e28:	f000 842d 	beq.w	1a004686 <_vfprintf_r+0x18a6>
1a003e2c:	2a47      	cmp	r2, #71	; 0x47
1a003e2e:	f000 8424 	beq.w	1a00467a <_vfprintf_r+0x189a>
1a003e32:	2b00      	cmp	r3, #0
1a003e34:	f2c0 82f9 	blt.w	1a00442a <_vfprintf_r+0x164a>
1a003e38:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
1a003e3c:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
1a003e40:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
1a003e44:	2e66      	cmp	r6, #102	; 0x66
1a003e46:	f000 83eb 	beq.w	1a004620 <_vfprintf_r+0x1840>
1a003e4a:	2e46      	cmp	r6, #70	; 0x46
1a003e4c:	f000 847e 	beq.w	1a00474c <_vfprintf_r+0x196c>
1a003e50:	9b04      	ldr	r3, [sp, #16]
1a003e52:	9803      	ldr	r0, [sp, #12]
1a003e54:	2b45      	cmp	r3, #69	; 0x45
1a003e56:	bf0c      	ite	eq
1a003e58:	f109 0501 	addeq.w	r5, r9, #1
1a003e5c:	464d      	movne	r5, r9
1a003e5e:	aa28      	add	r2, sp, #160	; 0xa0
1a003e60:	ab25      	add	r3, sp, #148	; 0x94
1a003e62:	e9cd 3200 	strd	r3, r2, [sp]
1a003e66:	2102      	movs	r1, #2
1a003e68:	ab24      	add	r3, sp, #144	; 0x90
1a003e6a:	462a      	mov	r2, r5
1a003e6c:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a003e70:	f000 fe2e 	bl	1a004ad0 <_dtoa_r>
1a003e74:	2e67      	cmp	r6, #103	; 0x67
1a003e76:	4607      	mov	r7, r0
1a003e78:	f040 849c 	bne.w	1a0047b4 <_vfprintf_r+0x19d4>
1a003e7c:	f018 0f01 	tst.w	r8, #1
1a003e80:	f040 83f9 	bne.w	1a004676 <_vfprintf_r+0x1896>
1a003e84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a003e86:	4640      	mov	r0, r8
1a003e88:	1bdb      	subs	r3, r3, r7
1a003e8a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a003e8e:	9310      	str	r3, [sp, #64]	; 0x40
1a003e90:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a003e92:	9311      	str	r3, [sp, #68]	; 0x44
1a003e94:	9b04      	ldr	r3, [sp, #16]
1a003e96:	2b47      	cmp	r3, #71	; 0x47
1a003e98:	f000 81e7 	beq.w	1a00426a <_vfprintf_r+0x148a>
1a003e9c:	9b04      	ldr	r3, [sp, #16]
1a003e9e:	2b46      	cmp	r3, #70	; 0x46
1a003ea0:	f000 8300 	beq.w	1a0044a4 <_vfprintf_r+0x16c4>
1a003ea4:	9904      	ldr	r1, [sp, #16]
1a003ea6:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a003ea8:	b2f2      	uxtb	r2, r6
1a003eaa:	2941      	cmp	r1, #65	; 0x41
1a003eac:	bf08      	it	eq
1a003eae:	320f      	addeq	r2, #15
1a003eb0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
1a003eb4:	bf06      	itte	eq
1a003eb6:	b2d2      	uxtbeq	r2, r2
1a003eb8:	2101      	moveq	r1, #1
1a003eba:	2100      	movne	r1, #0
1a003ebc:	2b00      	cmp	r3, #0
1a003ebe:	9324      	str	r3, [sp, #144]	; 0x90
1a003ec0:	bfb8      	it	lt
1a003ec2:	9b11      	ldrlt	r3, [sp, #68]	; 0x44
1a003ec4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
1a003ec8:	bfba      	itte	lt
1a003eca:	f1c3 0301 	rsblt	r3, r3, #1
1a003ece:	222d      	movlt	r2, #45	; 0x2d
1a003ed0:	222b      	movge	r2, #43	; 0x2b
1a003ed2:	2b09      	cmp	r3, #9
1a003ed4:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
1a003ed8:	f300 83f9 	bgt.w	1a0046ce <_vfprintf_r+0x18ee>
1a003edc:	2900      	cmp	r1, #0
1a003ede:	f040 8487 	bne.w	1a0047f0 <_vfprintf_r+0x1a10>
1a003ee2:	2230      	movs	r2, #48	; 0x30
1a003ee4:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
1a003ee8:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
1a003eec:	3330      	adds	r3, #48	; 0x30
1a003eee:	7013      	strb	r3, [r2, #0]
1a003ef0:	1c53      	adds	r3, r2, #1
1a003ef2:	aa26      	add	r2, sp, #152	; 0x98
1a003ef4:	1a9b      	subs	r3, r3, r2
1a003ef6:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a003ef8:	9319      	str	r3, [sp, #100]	; 0x64
1a003efa:	2a01      	cmp	r2, #1
1a003efc:	4413      	add	r3, r2
1a003efe:	9309      	str	r3, [sp, #36]	; 0x24
1a003f00:	f340 8442 	ble.w	1a004788 <_vfprintf_r+0x19a8>
1a003f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003f06:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a003f08:	4413      	add	r3, r2
1a003f0a:	9309      	str	r3, [sp, #36]	; 0x24
1a003f0c:	2300      	movs	r3, #0
1a003f0e:	930f      	str	r3, [sp, #60]	; 0x3c
1a003f10:	9314      	str	r3, [sp, #80]	; 0x50
1a003f12:	9311      	str	r3, [sp, #68]	; 0x44
1a003f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003f16:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
1a003f1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a003f1e:	f440 7880 	orr.w	r8, r0, #256	; 0x100
1a003f22:	9304      	str	r3, [sp, #16]
1a003f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a003f26:	2b00      	cmp	r3, #0
1a003f28:	f040 8275 	bne.w	1a004416 <_vfprintf_r+0x1636>
1a003f2c:	4699      	mov	r9, r3
1a003f2e:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a003f32:	f7ff b8e2 	b.w	1a0030fa <_vfprintf_r+0x31a>
1a003f36:	bf00      	nop
1a003f38:	1a007cb0 	.word	0x1a007cb0
1a003f3c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a003f3e:	49bd      	ldr	r1, [pc, #756]	; (1a004234 <_vfprintf_r+0x1454>)
1a003f40:	f8cb 1000 	str.w	r1, [fp]
1a003f44:	3201      	adds	r2, #1
1a003f46:	3401      	adds	r4, #1
1a003f48:	2101      	movs	r1, #1
1a003f4a:	2a07      	cmp	r2, #7
1a003f4c:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a003f50:	f8cb 1004 	str.w	r1, [fp, #4]
1a003f54:	dc60      	bgt.n	1a004018 <_vfprintf_r+0x1238>
1a003f56:	f10b 0b08 	add.w	fp, fp, #8
1a003f5a:	b92b      	cbnz	r3, 1a003f68 <_vfprintf_r+0x1188>
1a003f5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a003f5e:	b91a      	cbnz	r2, 1a003f68 <_vfprintf_r+0x1188>
1a003f60:	f018 0f01 	tst.w	r8, #1
1a003f64:	f43f a98d 	beq.w	1a003282 <_vfprintf_r+0x4a2>
1a003f68:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a003f6a:	9916      	ldr	r1, [sp, #88]	; 0x58
1a003f6c:	f8cb 1000 	str.w	r1, [fp]
1a003f70:	9915      	ldr	r1, [sp, #84]	; 0x54
1a003f72:	f8cb 1004 	str.w	r1, [fp, #4]
1a003f76:	3201      	adds	r2, #1
1a003f78:	440c      	add	r4, r1
1a003f7a:	2a07      	cmp	r2, #7
1a003f7c:	942c      	str	r4, [sp, #176]	; 0xb0
1a003f7e:	922b      	str	r2, [sp, #172]	; 0xac
1a003f80:	f300 8282 	bgt.w	1a004488 <_vfprintf_r+0x16a8>
1a003f84:	f10b 0b08 	add.w	fp, fp, #8
1a003f88:	2b00      	cmp	r3, #0
1a003f8a:	f2c0 82e7 	blt.w	1a00455c <_vfprintf_r+0x177c>
1a003f8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a003f90:	3201      	adds	r2, #1
1a003f92:	441c      	add	r4, r3
1a003f94:	2a07      	cmp	r2, #7
1a003f96:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a003f9a:	e9cb 7300 	strd	r7, r3, [fp]
1a003f9e:	f77f a96e 	ble.w	1a00327e <_vfprintf_r+0x49e>
1a003fa2:	e4fe      	b.n	1a0039a2 <_vfprintf_r+0xbc2>
1a003fa4:	aa2a      	add	r2, sp, #168	; 0xa8
1a003fa6:	9907      	ldr	r1, [sp, #28]
1a003fa8:	9803      	ldr	r0, [sp, #12]
1a003faa:	f003 fa5f 	bl	1a00746c <__sprint_r>
1a003fae:	2800      	cmp	r0, #0
1a003fb0:	f47f ac8e 	bne.w	1a0038d0 <_vfprintf_r+0xaf0>
1a003fb4:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003fb8:	f7ff bbf0 	b.w	1a00379c <_vfprintf_r+0x9bc>
1a003fbc:	9a05      	ldr	r2, [sp, #20]
1a003fbe:	601a      	str	r2, [r3, #0]
1a003fc0:	4657      	mov	r7, sl
1a003fc2:	f7ff b9b3 	b.w	1a00332c <_vfprintf_r+0x54c>
1a003fc6:	8814      	ldrh	r4, [r2, #0]
1a003fc8:	9108      	str	r1, [sp, #32]
1a003fca:	2500      	movs	r5, #0
1a003fcc:	2201      	movs	r2, #1
1a003fce:	f7ff b9c8 	b.w	1a003362 <_vfprintf_r+0x582>
1a003fd2:	8814      	ldrh	r4, [r2, #0]
1a003fd4:	9308      	str	r3, [sp, #32]
1a003fd6:	2500      	movs	r5, #0
1a003fd8:	f7ff ba14 	b.w	1a003404 <_vfprintf_r+0x624>
1a003fdc:	f9b1 4000 	ldrsh.w	r4, [r1]
1a003fe0:	9208      	str	r2, [sp, #32]
1a003fe2:	17e5      	asrs	r5, r4, #31
1a003fe4:	4620      	mov	r0, r4
1a003fe6:	4629      	mov	r1, r5
1a003fe8:	f7ff b855 	b.w	1a003096 <_vfprintf_r+0x2b6>
1a003fec:	8814      	ldrh	r4, [r2, #0]
1a003fee:	9308      	str	r3, [sp, #32]
1a003ff0:	2500      	movs	r5, #0
1a003ff2:	f7ff b825 	b.w	1a003040 <_vfprintf_r+0x260>
1a003ff6:	222d      	movs	r2, #45	; 0x2d
1a003ff8:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
1a003ffc:	f7ff baa2 	b.w	1a003544 <_vfprintf_r+0x764>
1a004000:	aa2a      	add	r2, sp, #168	; 0xa8
1a004002:	9907      	ldr	r1, [sp, #28]
1a004004:	9803      	ldr	r0, [sp, #12]
1a004006:	f003 fa31 	bl	1a00746c <__sprint_r>
1a00400a:	2800      	cmp	r0, #0
1a00400c:	f47f ac60 	bne.w	1a0038d0 <_vfprintf_r+0xaf0>
1a004010:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a004012:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a004016:	e534      	b.n	1a003a82 <_vfprintf_r+0xca2>
1a004018:	aa2a      	add	r2, sp, #168	; 0xa8
1a00401a:	9907      	ldr	r1, [sp, #28]
1a00401c:	9803      	ldr	r0, [sp, #12]
1a00401e:	f003 fa25 	bl	1a00746c <__sprint_r>
1a004022:	2800      	cmp	r0, #0
1a004024:	f47f ac54 	bne.w	1a0038d0 <_vfprintf_r+0xaf0>
1a004028:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a00402a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a00402c:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a004030:	e793      	b.n	1a003f5a <_vfprintf_r+0x117a>
1a004032:	2330      	movs	r3, #48	; 0x30
1a004034:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
1a004038:	2378      	movs	r3, #120	; 0x78
1a00403a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
1a00403e:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
1a004042:	f048 0402 	orr.w	r4, r8, #2
1a004046:	f300 82b0 	bgt.w	1a0045aa <_vfprintf_r+0x17ca>
1a00404a:	f448 7381 	orr.w	r3, r8, #258	; 0x102
1a00404e:	930e      	str	r3, [sp, #56]	; 0x38
1a004050:	f026 0320 	bic.w	r3, r6, #32
1a004054:	9304      	str	r3, [sp, #16]
1a004056:	2200      	movs	r2, #0
1a004058:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00405a:	920a      	str	r2, [sp, #40]	; 0x28
1a00405c:	46a0      	mov	r8, r4
1a00405e:	af3d      	add	r7, sp, #244	; 0xf4
1a004060:	2b00      	cmp	r3, #0
1a004062:	f2c0 81e3 	blt.w	1a00442c <_vfprintf_r+0x164c>
1a004066:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
1a00406a:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
1a00406e:	2300      	movs	r3, #0
1a004070:	930b      	str	r3, [sp, #44]	; 0x2c
1a004072:	2e61      	cmp	r6, #97	; 0x61
1a004074:	f000 8255 	beq.w	1a004522 <_vfprintf_r+0x1742>
1a004078:	2e41      	cmp	r6, #65	; 0x41
1a00407a:	f47f aee3 	bne.w	1a003e44 <_vfprintf_r+0x1064>
1a00407e:	a824      	add	r0, sp, #144	; 0x90
1a004080:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a004084:	f003 f90c 	bl	1a0072a0 <frexp>
1a004088:	2200      	movs	r2, #0
1a00408a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a00408e:	ec51 0b10 	vmov	r0, r1, d0
1a004092:	f7fe f84d 	bl	1a002130 <__aeabi_dmul>
1a004096:	2200      	movs	r2, #0
1a004098:	2300      	movs	r3, #0
1a00409a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00409e:	f7fe faaf 	bl	1a002600 <__aeabi_dcmpeq>
1a0040a2:	2800      	cmp	r0, #0
1a0040a4:	f040 8305 	bne.w	1a0046b2 <_vfprintf_r+0x18d2>
1a0040a8:	4b63      	ldr	r3, [pc, #396]	; (1a004238 <_vfprintf_r+0x1458>)
1a0040aa:	9309      	str	r3, [sp, #36]	; 0x24
1a0040ac:	e9cd a60f 	strd	sl, r6, [sp, #60]	; 0x3c
1a0040b0:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
1a0040b4:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
1a0040b8:	9721      	str	r7, [sp, #132]	; 0x84
1a0040ba:	46b9      	mov	r9, r7
1a0040bc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
1a0040c0:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
1a0040c4:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
1a0040c8:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
1a0040cc:	e003      	b.n	1a0040d6 <_vfprintf_r+0x12f6>
1a0040ce:	f7fe fa97 	bl	1a002600 <__aeabi_dcmpeq>
1a0040d2:	bb20      	cbnz	r0, 1a00411e <_vfprintf_r+0x133e>
1a0040d4:	46a9      	mov	r9, r5
1a0040d6:	2200      	movs	r2, #0
1a0040d8:	4b58      	ldr	r3, [pc, #352]	; (1a00423c <_vfprintf_r+0x145c>)
1a0040da:	4630      	mov	r0, r6
1a0040dc:	4639      	mov	r1, r7
1a0040de:	f7fe f827 	bl	1a002130 <__aeabi_dmul>
1a0040e2:	460f      	mov	r7, r1
1a0040e4:	4606      	mov	r6, r0
1a0040e6:	f003 fbb1 	bl	1a00784c <__aeabi_d2iz>
1a0040ea:	4680      	mov	r8, r0
1a0040ec:	f7fd ffb6 	bl	1a00205c <__aeabi_i2d>
1a0040f0:	4602      	mov	r2, r0
1a0040f2:	460b      	mov	r3, r1
1a0040f4:	4630      	mov	r0, r6
1a0040f6:	4639      	mov	r1, r7
1a0040f8:	f7fd fe62 	bl	1a001dc0 <__aeabi_dsub>
1a0040fc:	464d      	mov	r5, r9
1a0040fe:	f81a c008 	ldrb.w	ip, [sl, r8]
1a004102:	f805 cb01 	strb.w	ip, [r5], #1
1a004106:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a00410a:	46a3      	mov	fp, r4
1a00410c:	4606      	mov	r6, r0
1a00410e:	460f      	mov	r7, r1
1a004110:	f04f 0200 	mov.w	r2, #0
1a004114:	f04f 0300 	mov.w	r3, #0
1a004118:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
1a00411c:	d1d7      	bne.n	1a0040ce <_vfprintf_r+0x12ee>
1a00411e:	4630      	mov	r0, r6
1a004120:	4639      	mov	r1, r7
1a004122:	2200      	movs	r2, #0
1a004124:	4b46      	ldr	r3, [pc, #280]	; (1a004240 <_vfprintf_r+0x1460>)
1a004126:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
1a00412a:	9e10      	ldr	r6, [sp, #64]	; 0x40
1a00412c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
1a004130:	4644      	mov	r4, r8
1a004132:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a004136:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
1a00413a:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
1a00413e:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
1a004142:	9f21      	ldr	r7, [sp, #132]	; 0x84
1a004144:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a004148:	f7fe fa82 	bl	1a002650 <__aeabi_dcmpgt>
1a00414c:	2800      	cmp	r0, #0
1a00414e:	f040 8176 	bne.w	1a00443e <_vfprintf_r+0x165e>
1a004152:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a004156:	2200      	movs	r2, #0
1a004158:	4b39      	ldr	r3, [pc, #228]	; (1a004240 <_vfprintf_r+0x1460>)
1a00415a:	f7fe fa51 	bl	1a002600 <__aeabi_dcmpeq>
1a00415e:	b110      	cbz	r0, 1a004166 <_vfprintf_r+0x1386>
1a004160:	07e2      	lsls	r2, r4, #31
1a004162:	f100 816c 	bmi.w	1a00443e <_vfprintf_r+0x165e>
1a004166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004168:	2b00      	cmp	r3, #0
1a00416a:	db07      	blt.n	1a00417c <_vfprintf_r+0x139c>
1a00416c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00416e:	3301      	adds	r3, #1
1a004170:	442b      	add	r3, r5
1a004172:	2230      	movs	r2, #48	; 0x30
1a004174:	f805 2b01 	strb.w	r2, [r5], #1
1a004178:	42ab      	cmp	r3, r5
1a00417a:	d1fb      	bne.n	1a004174 <_vfprintf_r+0x1394>
1a00417c:	1beb      	subs	r3, r5, r7
1a00417e:	4640      	mov	r0, r8
1a004180:	9310      	str	r3, [sp, #64]	; 0x40
1a004182:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a004186:	e683      	b.n	1a003e90 <_vfprintf_r+0x10b0>
1a004188:	f8cd 9010 	str.w	r9, [sp, #16]
1a00418c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a004190:	9408      	str	r4, [sp, #32]
1a004192:	4681      	mov	r9, r0
1a004194:	900f      	str	r0, [sp, #60]	; 0x3c
1a004196:	9014      	str	r0, [sp, #80]	; 0x50
1a004198:	9011      	str	r0, [sp, #68]	; 0x44
1a00419a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a00419e:	f7fe bfac 	b.w	1a0030fa <_vfprintf_r+0x31a>
1a0041a2:	aa2a      	add	r2, sp, #168	; 0xa8
1a0041a4:	9907      	ldr	r1, [sp, #28]
1a0041a6:	9803      	ldr	r0, [sp, #12]
1a0041a8:	f003 f960 	bl	1a00746c <__sprint_r>
1a0041ac:	2800      	cmp	r0, #0
1a0041ae:	f47f ab8f 	bne.w	1a0038d0 <_vfprintf_r+0xaf0>
1a0041b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a0041b4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0041b6:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0041ba:	e511      	b.n	1a003be0 <_vfprintf_r+0xe00>
1a0041bc:	4252      	negs	r2, r2
1a0041be:	9206      	str	r2, [sp, #24]
1a0041c0:	9308      	str	r3, [sp, #32]
1a0041c2:	f7ff b96d 	b.w	1a0034a0 <_vfprintf_r+0x6c0>
1a0041c6:	4614      	mov	r4, r2
1a0041c8:	4632      	mov	r2, r6
1a0041ca:	461e      	mov	r6, r3
1a0041cc:	4613      	mov	r3, r2
1a0041ce:	462a      	mov	r2, r5
1a0041d0:	3201      	adds	r2, #1
1a0041d2:	9209      	str	r2, [sp, #36]	; 0x24
1a0041d4:	f106 0208 	add.w	r2, r6, #8
1a0041d8:	e9c6 3900 	strd	r3, r9, [r6]
1a0041dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0041de:	932b      	str	r3, [sp, #172]	; 0xac
1a0041e0:	444c      	add	r4, r9
1a0041e2:	2b07      	cmp	r3, #7
1a0041e4:	942c      	str	r4, [sp, #176]	; 0xb0
1a0041e6:	f73f acc3 	bgt.w	1a003b70 <_vfprintf_r+0xd90>
1a0041ea:	3301      	adds	r3, #1
1a0041ec:	9309      	str	r3, [sp, #36]	; 0x24
1a0041ee:	f102 0b08 	add.w	fp, r2, #8
1a0041f2:	4616      	mov	r6, r2
1a0041f4:	f7ff bbca 	b.w	1a00398c <_vfprintf_r+0xbac>
1a0041f8:	aa2a      	add	r2, sp, #168	; 0xa8
1a0041fa:	9907      	ldr	r1, [sp, #28]
1a0041fc:	9803      	ldr	r0, [sp, #12]
1a0041fe:	f003 f935 	bl	1a00746c <__sprint_r>
1a004202:	2800      	cmp	r0, #0
1a004204:	f47f ab64 	bne.w	1a0038d0 <_vfprintf_r+0xaf0>
1a004208:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a00420a:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00420e:	f7ff bade 	b.w	1a0037ce <_vfprintf_r+0x9ee>
1a004212:	464b      	mov	r3, r9
1a004214:	2b06      	cmp	r3, #6
1a004216:	bf28      	it	cs
1a004218:	2306      	movcs	r3, #6
1a00421a:	46b9      	mov	r9, r7
1a00421c:	970f      	str	r7, [sp, #60]	; 0x3c
1a00421e:	9714      	str	r7, [sp, #80]	; 0x50
1a004220:	9711      	str	r7, [sp, #68]	; 0x44
1a004222:	970a      	str	r7, [sp, #40]	; 0x28
1a004224:	463a      	mov	r2, r7
1a004226:	9304      	str	r3, [sp, #16]
1a004228:	e9cd 4308 	strd	r4, r3, [sp, #32]
1a00422c:	4f05      	ldr	r7, [pc, #20]	; (1a004244 <_vfprintf_r+0x1464>)
1a00422e:	f7fe bf64 	b.w	1a0030fa <_vfprintf_r+0x31a>
1a004232:	bf00      	nop
1a004234:	1a007c9c 	.word	0x1a007c9c
1a004238:	1a007c80 	.word	0x1a007c80
1a00423c:	40300000 	.word	0x40300000
1a004240:	3fe00000 	.word	0x3fe00000
1a004244:	1a007c94 	.word	0x1a007c94
1a004248:	460c      	mov	r4, r1
1a00424a:	4639      	mov	r1, r7
1a00424c:	465f      	mov	r7, fp
1a00424e:	469b      	mov	fp, r3
1a004250:	460b      	mov	r3, r1
1a004252:	3201      	adds	r2, #1
1a004254:	442c      	add	r4, r5
1a004256:	2a07      	cmp	r2, #7
1a004258:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a00425c:	e9cb 3500 	strd	r3, r5, [fp]
1a004260:	f73f aca5 	bgt.w	1a003bae <_vfprintf_r+0xdce>
1a004264:	f10b 0b08 	add.w	fp, fp, #8
1a004268:	e4ac      	b.n	1a003bc4 <_vfprintf_r+0xde4>
1a00426a:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a00426c:	1cda      	adds	r2, r3, #3
1a00426e:	db02      	blt.n	1a004276 <_vfprintf_r+0x1496>
1a004270:	4599      	cmp	r9, r3
1a004272:	f280 80b5 	bge.w	1a0043e0 <_vfprintf_r+0x1600>
1a004276:	3e02      	subs	r6, #2
1a004278:	f026 0320 	bic.w	r3, r6, #32
1a00427c:	9304      	str	r3, [sp, #16]
1a00427e:	e611      	b.n	1a003ea4 <_vfprintf_r+0x10c4>
1a004280:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a004282:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
1a004286:	465a      	mov	r2, fp
1a004288:	e9dd 8b1a 	ldrd	r8, fp, [sp, #104]	; 0x68
1a00428c:	18fb      	adds	r3, r7, r3
1a00428e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a004292:	970c      	str	r7, [sp, #48]	; 0x30
1a004294:	4eaf      	ldr	r6, [pc, #700]	; (1a004554 <_vfprintf_r+0x1774>)
1a004296:	f8dd a01c 	ldr.w	sl, [sp, #28]
1a00429a:	9309      	str	r3, [sp, #36]	; 0x24
1a00429c:	464f      	mov	r7, r9
1a00429e:	f8dd 900c 	ldr.w	r9, [sp, #12]
1a0042a2:	4621      	mov	r1, r4
1a0042a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a0042a6:	2b00      	cmp	r3, #0
1a0042a8:	d05b      	beq.n	1a004362 <_vfprintf_r+0x1582>
1a0042aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0042ac:	2b00      	cmp	r3, #0
1a0042ae:	d154      	bne.n	1a00435a <_vfprintf_r+0x157a>
1a0042b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a0042b2:	3b01      	subs	r3, #1
1a0042b4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a0042b8:	9314      	str	r3, [sp, #80]	; 0x50
1a0042ba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a0042bc:	9818      	ldr	r0, [sp, #96]	; 0x60
1a0042be:	6010      	str	r0, [r2, #0]
1a0042c0:	3301      	adds	r3, #1
1a0042c2:	4459      	add	r1, fp
1a0042c4:	2b07      	cmp	r3, #7
1a0042c6:	912c      	str	r1, [sp, #176]	; 0xb0
1a0042c8:	f8c2 b004 	str.w	fp, [r2, #4]
1a0042cc:	932b      	str	r3, [sp, #172]	; 0xac
1a0042ce:	dc68      	bgt.n	1a0043a2 <_vfprintf_r+0x15c2>
1a0042d0:	3208      	adds	r2, #8
1a0042d2:	9809      	ldr	r0, [sp, #36]	; 0x24
1a0042d4:	f898 3000 	ldrb.w	r3, [r8]
1a0042d8:	1bc5      	subs	r5, r0, r7
1a0042da:	429d      	cmp	r5, r3
1a0042dc:	bfa8      	it	ge
1a0042de:	461d      	movge	r5, r3
1a0042e0:	2d00      	cmp	r5, #0
1a0042e2:	dd0b      	ble.n	1a0042fc <_vfprintf_r+0x151c>
1a0042e4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a0042e6:	6017      	str	r7, [r2, #0]
1a0042e8:	3301      	adds	r3, #1
1a0042ea:	4429      	add	r1, r5
1a0042ec:	2b07      	cmp	r3, #7
1a0042ee:	912c      	str	r1, [sp, #176]	; 0xb0
1a0042f0:	6055      	str	r5, [r2, #4]
1a0042f2:	932b      	str	r3, [sp, #172]	; 0xac
1a0042f4:	dc5e      	bgt.n	1a0043b4 <_vfprintf_r+0x15d4>
1a0042f6:	f898 3000 	ldrb.w	r3, [r8]
1a0042fa:	3208      	adds	r2, #8
1a0042fc:	2d00      	cmp	r5, #0
1a0042fe:	bfac      	ite	ge
1a004300:	1b5d      	subge	r5, r3, r5
1a004302:	461d      	movlt	r5, r3
1a004304:	2d00      	cmp	r5, #0
1a004306:	dd26      	ble.n	1a004356 <_vfprintf_r+0x1576>
1a004308:	2d10      	cmp	r5, #16
1a00430a:	982b      	ldr	r0, [sp, #172]	; 0xac
1a00430c:	dd3c      	ble.n	1a004388 <_vfprintf_r+0x15a8>
1a00430e:	2410      	movs	r4, #16
1a004310:	e003      	b.n	1a00431a <_vfprintf_r+0x153a>
1a004312:	3208      	adds	r2, #8
1a004314:	3d10      	subs	r5, #16
1a004316:	2d10      	cmp	r5, #16
1a004318:	dd36      	ble.n	1a004388 <_vfprintf_r+0x15a8>
1a00431a:	3001      	adds	r0, #1
1a00431c:	3110      	adds	r1, #16
1a00431e:	2807      	cmp	r0, #7
1a004320:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
1a004324:	e9c2 6400 	strd	r6, r4, [r2]
1a004328:	ddf3      	ble.n	1a004312 <_vfprintf_r+0x1532>
1a00432a:	aa2a      	add	r2, sp, #168	; 0xa8
1a00432c:	4651      	mov	r1, sl
1a00432e:	4648      	mov	r0, r9
1a004330:	f003 f89c 	bl	1a00746c <__sprint_r>
1a004334:	2800      	cmp	r0, #0
1a004336:	d150      	bne.n	1a0043da <_vfprintf_r+0x15fa>
1a004338:	e9dd 012b 	ldrd	r0, r1, [sp, #172]	; 0xac
1a00433c:	aa2d      	add	r2, sp, #180	; 0xb4
1a00433e:	e7e9      	b.n	1a004314 <_vfprintf_r+0x1534>
1a004340:	aa2a      	add	r2, sp, #168	; 0xa8
1a004342:	4651      	mov	r1, sl
1a004344:	4648      	mov	r0, r9
1a004346:	f003 f891 	bl	1a00746c <__sprint_r>
1a00434a:	2800      	cmp	r0, #0
1a00434c:	d145      	bne.n	1a0043da <_vfprintf_r+0x15fa>
1a00434e:	f898 3000 	ldrb.w	r3, [r8]
1a004352:	992c      	ldr	r1, [sp, #176]	; 0xb0
1a004354:	aa2d      	add	r2, sp, #180	; 0xb4
1a004356:	441f      	add	r7, r3
1a004358:	e7a4      	b.n	1a0042a4 <_vfprintf_r+0x14c4>
1a00435a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00435c:	3b01      	subs	r3, #1
1a00435e:	930f      	str	r3, [sp, #60]	; 0x3c
1a004360:	e7ab      	b.n	1a0042ba <_vfprintf_r+0x14da>
1a004362:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004364:	2b00      	cmp	r3, #0
1a004366:	d1f8      	bne.n	1a00435a <_vfprintf_r+0x157a>
1a004368:	46b9      	mov	r9, r7
1a00436a:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00436c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
1a00436e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
1a004372:	18fb      	adds	r3, r7, r3
1a004374:	4599      	cmp	r9, r3
1a004376:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
1a00437a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a00437e:	4693      	mov	fp, r2
1a004380:	460c      	mov	r4, r1
1a004382:	bf28      	it	cs
1a004384:	4699      	movcs	r9, r3
1a004386:	e424      	b.n	1a003bd2 <_vfprintf_r+0xdf2>
1a004388:	3001      	adds	r0, #1
1a00438a:	4429      	add	r1, r5
1a00438c:	2807      	cmp	r0, #7
1a00438e:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
1a004392:	e9c2 6500 	strd	r6, r5, [r2]
1a004396:	dcd3      	bgt.n	1a004340 <_vfprintf_r+0x1560>
1a004398:	f898 3000 	ldrb.w	r3, [r8]
1a00439c:	3208      	adds	r2, #8
1a00439e:	441f      	add	r7, r3
1a0043a0:	e780      	b.n	1a0042a4 <_vfprintf_r+0x14c4>
1a0043a2:	aa2a      	add	r2, sp, #168	; 0xa8
1a0043a4:	4651      	mov	r1, sl
1a0043a6:	4648      	mov	r0, r9
1a0043a8:	f003 f860 	bl	1a00746c <__sprint_r>
1a0043ac:	b9a8      	cbnz	r0, 1a0043da <_vfprintf_r+0x15fa>
1a0043ae:	992c      	ldr	r1, [sp, #176]	; 0xb0
1a0043b0:	aa2d      	add	r2, sp, #180	; 0xb4
1a0043b2:	e78e      	b.n	1a0042d2 <_vfprintf_r+0x14f2>
1a0043b4:	aa2a      	add	r2, sp, #168	; 0xa8
1a0043b6:	4651      	mov	r1, sl
1a0043b8:	4648      	mov	r0, r9
1a0043ba:	f003 f857 	bl	1a00746c <__sprint_r>
1a0043be:	b960      	cbnz	r0, 1a0043da <_vfprintf_r+0x15fa>
1a0043c0:	f898 3000 	ldrb.w	r3, [r8]
1a0043c4:	992c      	ldr	r1, [sp, #176]	; 0xb0
1a0043c6:	aa2d      	add	r2, sp, #180	; 0xb4
1a0043c8:	e798      	b.n	1a0042fc <_vfprintf_r+0x151c>
1a0043ca:	4638      	mov	r0, r7
1a0043cc:	f7fe fc98 	bl	1a002d00 <strlen>
1a0043d0:	46a9      	mov	r9, r5
1a0043d2:	4603      	mov	r3, r0
1a0043d4:	9009      	str	r0, [sp, #36]	; 0x24
1a0043d6:	f7ff b8f4 	b.w	1a0035c2 <_vfprintf_r+0x7e2>
1a0043da:	46d1      	mov	r9, sl
1a0043dc:	f7ff ba7a 	b.w	1a0038d4 <_vfprintf_r+0xaf4>
1a0043e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0043e2:	4619      	mov	r1, r3
1a0043e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0043e6:	4299      	cmp	r1, r3
1a0043e8:	f300 8082 	bgt.w	1a0044f0 <_vfprintf_r+0x1710>
1a0043ec:	07c4      	lsls	r4, r0, #31
1a0043ee:	f140 816b 	bpl.w	1a0046c8 <_vfprintf_r+0x18e8>
1a0043f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a0043f4:	4413      	add	r3, r2
1a0043f6:	9309      	str	r3, [sp, #36]	; 0x24
1a0043f8:	0541      	lsls	r1, r0, #21
1a0043fa:	d503      	bpl.n	1a004404 <_vfprintf_r+0x1624>
1a0043fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0043fe:	2b00      	cmp	r3, #0
1a004400:	f300 80e6 	bgt.w	1a0045d0 <_vfprintf_r+0x17f0>
1a004404:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004406:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a00440a:	9304      	str	r3, [sp, #16]
1a00440c:	2667      	movs	r6, #103	; 0x67
1a00440e:	2300      	movs	r3, #0
1a004410:	930f      	str	r3, [sp, #60]	; 0x3c
1a004412:	9314      	str	r3, [sp, #80]	; 0x50
1a004414:	e586      	b.n	1a003f24 <_vfprintf_r+0x1144>
1a004416:	222d      	movs	r2, #45	; 0x2d
1a004418:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
1a00441c:	f04f 0900 	mov.w	r9, #0
1a004420:	f7fe be6c 	b.w	1a0030fc <_vfprintf_r+0x31c>
1a004424:	46a1      	mov	r9, r4
1a004426:	f7ff ba55 	b.w	1a0038d4 <_vfprintf_r+0xaf4>
1a00442a:	900a      	str	r0, [sp, #40]	; 0x28
1a00442c:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
1a004430:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a004434:	931f      	str	r3, [sp, #124]	; 0x7c
1a004436:	232d      	movs	r3, #45	; 0x2d
1a004438:	911e      	str	r1, [sp, #120]	; 0x78
1a00443a:	930b      	str	r3, [sp, #44]	; 0x2c
1a00443c:	e619      	b.n	1a004072 <_vfprintf_r+0x1292>
1a00443e:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a004440:	9328      	str	r3, [sp, #160]	; 0xa0
1a004442:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004444:	f815 2c01 	ldrb.w	r2, [r5, #-1]
1a004448:	7bd9      	ldrb	r1, [r3, #15]
1a00444a:	4291      	cmp	r1, r2
1a00444c:	462b      	mov	r3, r5
1a00444e:	d109      	bne.n	1a004464 <_vfprintf_r+0x1684>
1a004450:	2030      	movs	r0, #48	; 0x30
1a004452:	f803 0c01 	strb.w	r0, [r3, #-1]
1a004456:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a004458:	1e5a      	subs	r2, r3, #1
1a00445a:	9228      	str	r2, [sp, #160]	; 0xa0
1a00445c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a004460:	4291      	cmp	r1, r2
1a004462:	d0f6      	beq.n	1a004452 <_vfprintf_r+0x1672>
1a004464:	2a39      	cmp	r2, #57	; 0x39
1a004466:	bf0b      	itete	eq
1a004468:	9a09      	ldreq	r2, [sp, #36]	; 0x24
1a00446a:	3201      	addne	r2, #1
1a00446c:	7a92      	ldrbeq	r2, [r2, #10]
1a00446e:	b2d2      	uxtbne	r2, r2
1a004470:	f803 2c01 	strb.w	r2, [r3, #-1]
1a004474:	e682      	b.n	1a00417c <_vfprintf_r+0x139c>
1a004476:	f418 7f00 	tst.w	r8, #512	; 0x200
1a00447a:	f43f ad9f 	beq.w	1a003fbc <_vfprintf_r+0x11dc>
1a00447e:	9a05      	ldr	r2, [sp, #20]
1a004480:	701a      	strb	r2, [r3, #0]
1a004482:	4657      	mov	r7, sl
1a004484:	f7fe bf52 	b.w	1a00332c <_vfprintf_r+0x54c>
1a004488:	aa2a      	add	r2, sp, #168	; 0xa8
1a00448a:	9907      	ldr	r1, [sp, #28]
1a00448c:	9803      	ldr	r0, [sp, #12]
1a00448e:	f002 ffed 	bl	1a00746c <__sprint_r>
1a004492:	2800      	cmp	r0, #0
1a004494:	f47f aa1c 	bne.w	1a0038d0 <_vfprintf_r+0xaf0>
1a004498:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a00449a:	e9dd 242b 	ldrd	r2, r4, [sp, #172]	; 0xac
1a00449e:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0044a2:	e571      	b.n	1a003f88 <_vfprintf_r+0x11a8>
1a0044a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0044a6:	2b00      	cmp	r3, #0
1a0044a8:	f340 8164 	ble.w	1a004774 <_vfprintf_r+0x1994>
1a0044ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0044ae:	f1b9 0f00 	cmp.w	r9, #0
1a0044b2:	f040 8103 	bne.w	1a0046bc <_vfprintf_r+0x18dc>
1a0044b6:	07c6      	lsls	r6, r0, #31
1a0044b8:	f100 8100 	bmi.w	1a0046bc <_vfprintf_r+0x18dc>
1a0044bc:	9309      	str	r3, [sp, #36]	; 0x24
1a0044be:	2666      	movs	r6, #102	; 0x66
1a0044c0:	0543      	lsls	r3, r0, #21
1a0044c2:	f100 8086 	bmi.w	1a0045d2 <_vfprintf_r+0x17f2>
1a0044c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0044c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a0044cc:	9304      	str	r3, [sp, #16]
1a0044ce:	e79e      	b.n	1a00440e <_vfprintf_r+0x162e>
1a0044d0:	aa2a      	add	r2, sp, #168	; 0xa8
1a0044d2:	9907      	ldr	r1, [sp, #28]
1a0044d4:	9803      	ldr	r0, [sp, #12]
1a0044d6:	f002 ffc9 	bl	1a00746c <__sprint_r>
1a0044da:	2800      	cmp	r0, #0
1a0044dc:	f47f a9f8 	bne.w	1a0038d0 <_vfprintf_r+0xaf0>
1a0044e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a0044e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a0044e4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0044e6:	1ad3      	subs	r3, r2, r3
1a0044e8:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0044ec:	f7ff bb90 	b.w	1a003c10 <_vfprintf_r+0xe30>
1a0044f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0044f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a0044f4:	4413      	add	r3, r2
1a0044f6:	9309      	str	r3, [sp, #36]	; 0x24
1a0044f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0044fa:	2b00      	cmp	r3, #0
1a0044fc:	f340 8149 	ble.w	1a004792 <_vfprintf_r+0x19b2>
1a004500:	2667      	movs	r6, #103	; 0x67
1a004502:	e7dd      	b.n	1a0044c0 <_vfprintf_r+0x16e0>
1a004504:	2330      	movs	r3, #48	; 0x30
1a004506:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
1a00450a:	2358      	movs	r3, #88	; 0x58
1a00450c:	e595      	b.n	1a00403a <_vfprintf_r+0x125a>
1a00450e:	9803      	ldr	r0, [sp, #12]
1a004510:	aa2a      	add	r2, sp, #168	; 0xa8
1a004512:	4649      	mov	r1, r9
1a004514:	f002 ffaa 	bl	1a00746c <__sprint_r>
1a004518:	2800      	cmp	r0, #0
1a00451a:	f47f a9e0 	bne.w	1a0038de <_vfprintf_r+0xafe>
1a00451e:	f7fe bf0f 	b.w	1a003340 <_vfprintf_r+0x560>
1a004522:	a824      	add	r0, sp, #144	; 0x90
1a004524:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a004528:	f002 feba 	bl	1a0072a0 <frexp>
1a00452c:	2200      	movs	r2, #0
1a00452e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a004532:	ec51 0b10 	vmov	r0, r1, d0
1a004536:	f7fd fdfb 	bl	1a002130 <__aeabi_dmul>
1a00453a:	2200      	movs	r2, #0
1a00453c:	2300      	movs	r3, #0
1a00453e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a004542:	f7fe f85d 	bl	1a002600 <__aeabi_dcmpeq>
1a004546:	b108      	cbz	r0, 1a00454c <_vfprintf_r+0x176c>
1a004548:	2301      	movs	r3, #1
1a00454a:	9324      	str	r3, [sp, #144]	; 0x90
1a00454c:	4b02      	ldr	r3, [pc, #8]	; (1a004558 <_vfprintf_r+0x1778>)
1a00454e:	9309      	str	r3, [sp, #36]	; 0x24
1a004550:	e5ac      	b.n	1a0040ac <_vfprintf_r+0x12cc>
1a004552:	bf00      	nop
1a004554:	1a007cb0 	.word	0x1a007cb0
1a004558:	1a007c6c 	.word	0x1a007c6c
1a00455c:	425d      	negs	r5, r3
1a00455e:	3310      	adds	r3, #16
1a004560:	4bb9      	ldr	r3, [pc, #740]	; (1a004848 <_vfprintf_r+0x1a68>)
1a004562:	f280 8097 	bge.w	1a004694 <_vfprintf_r+0x18b4>
1a004566:	4619      	mov	r1, r3
1a004568:	2610      	movs	r6, #16
1a00456a:	4623      	mov	r3, r4
1a00456c:	f8dd 900c 	ldr.w	r9, [sp, #12]
1a004570:	460c      	mov	r4, r1
1a004572:	e005      	b.n	1a004580 <_vfprintf_r+0x17a0>
1a004574:	f10b 0b08 	add.w	fp, fp, #8
1a004578:	3d10      	subs	r5, #16
1a00457a:	2d10      	cmp	r5, #16
1a00457c:	f340 8087 	ble.w	1a00468e <_vfprintf_r+0x18ae>
1a004580:	3201      	adds	r2, #1
1a004582:	3310      	adds	r3, #16
1a004584:	2a07      	cmp	r2, #7
1a004586:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
1a00458a:	e9cb 4600 	strd	r4, r6, [fp]
1a00458e:	ddf1      	ble.n	1a004574 <_vfprintf_r+0x1794>
1a004590:	aa2a      	add	r2, sp, #168	; 0xa8
1a004592:	9907      	ldr	r1, [sp, #28]
1a004594:	4648      	mov	r0, r9
1a004596:	f002 ff69 	bl	1a00746c <__sprint_r>
1a00459a:	2800      	cmp	r0, #0
1a00459c:	f47f a998 	bne.w	1a0038d0 <_vfprintf_r+0xaf0>
1a0045a0:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
1a0045a4:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0045a8:	e7e6      	b.n	1a004578 <_vfprintf_r+0x1798>
1a0045aa:	f109 0101 	add.w	r1, r9, #1
1a0045ae:	9803      	ldr	r0, [sp, #12]
1a0045b0:	f001 fe56 	bl	1a006260 <_malloc_r>
1a0045b4:	4607      	mov	r7, r0
1a0045b6:	2800      	cmp	r0, #0
1a0045b8:	f000 813b 	beq.w	1a004832 <_vfprintf_r+0x1a52>
1a0045bc:	f448 7381 	orr.w	r3, r8, #258	; 0x102
1a0045c0:	930e      	str	r3, [sp, #56]	; 0x38
1a0045c2:	f026 0320 	bic.w	r3, r6, #32
1a0045c6:	9304      	str	r3, [sp, #16]
1a0045c8:	46a0      	mov	r8, r4
1a0045ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0045cc:	900a      	str	r0, [sp, #40]	; 0x28
1a0045ce:	e547      	b.n	1a004060 <_vfprintf_r+0x1280>
1a0045d0:	2667      	movs	r6, #103	; 0x67
1a0045d2:	981a      	ldr	r0, [sp, #104]	; 0x68
1a0045d4:	2200      	movs	r2, #0
1a0045d6:	920f      	str	r2, [sp, #60]	; 0x3c
1a0045d8:	9214      	str	r2, [sp, #80]	; 0x50
1a0045da:	7803      	ldrb	r3, [r0, #0]
1a0045dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a0045de:	2bff      	cmp	r3, #255	; 0xff
1a0045e0:	d00c      	beq.n	1a0045fc <_vfprintf_r+0x181c>
1a0045e2:	4293      	cmp	r3, r2
1a0045e4:	da0a      	bge.n	1a0045fc <_vfprintf_r+0x181c>
1a0045e6:	7841      	ldrb	r1, [r0, #1]
1a0045e8:	1ad2      	subs	r2, r2, r3
1a0045ea:	b1a9      	cbz	r1, 1a004618 <_vfprintf_r+0x1838>
1a0045ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a0045ee:	3301      	adds	r3, #1
1a0045f0:	9314      	str	r3, [sp, #80]	; 0x50
1a0045f2:	460b      	mov	r3, r1
1a0045f4:	2bff      	cmp	r3, #255	; 0xff
1a0045f6:	f100 0001 	add.w	r0, r0, #1
1a0045fa:	d1f2      	bne.n	1a0045e2 <_vfprintf_r+0x1802>
1a0045fc:	9211      	str	r2, [sp, #68]	; 0x44
1a0045fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a004600:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a004602:	9909      	ldr	r1, [sp, #36]	; 0x24
1a004604:	901a      	str	r0, [sp, #104]	; 0x68
1a004606:	4413      	add	r3, r2
1a004608:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
1a00460a:	fb02 1303 	mla	r3, r2, r3, r1
1a00460e:	9309      	str	r3, [sp, #36]	; 0x24
1a004610:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004614:	9304      	str	r3, [sp, #16]
1a004616:	e485      	b.n	1a003f24 <_vfprintf_r+0x1144>
1a004618:	990f      	ldr	r1, [sp, #60]	; 0x3c
1a00461a:	3101      	adds	r1, #1
1a00461c:	910f      	str	r1, [sp, #60]	; 0x3c
1a00461e:	e7de      	b.n	1a0045de <_vfprintf_r+0x17fe>
1a004620:	aa28      	add	r2, sp, #160	; 0xa0
1a004622:	ab25      	add	r3, sp, #148	; 0x94
1a004624:	e9cd 3200 	strd	r3, r2, [sp]
1a004628:	2103      	movs	r1, #3
1a00462a:	ab24      	add	r3, sp, #144	; 0x90
1a00462c:	464a      	mov	r2, r9
1a00462e:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a004632:	9803      	ldr	r0, [sp, #12]
1a004634:	f000 fa4c 	bl	1a004ad0 <_dtoa_r>
1a004638:	464d      	mov	r5, r9
1a00463a:	4607      	mov	r7, r0
1a00463c:	eb00 0409 	add.w	r4, r0, r9
1a004640:	783b      	ldrb	r3, [r7, #0]
1a004642:	2b30      	cmp	r3, #48	; 0x30
1a004644:	f000 80be 	beq.w	1a0047c4 <_vfprintf_r+0x19e4>
1a004648:	9d24      	ldr	r5, [sp, #144]	; 0x90
1a00464a:	442c      	add	r4, r5
1a00464c:	2200      	movs	r2, #0
1a00464e:	2300      	movs	r3, #0
1a004650:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
1a004654:	f7fd ffd4 	bl	1a002600 <__aeabi_dcmpeq>
1a004658:	b108      	cbz	r0, 1a00465e <_vfprintf_r+0x187e>
1a00465a:	4623      	mov	r3, r4
1a00465c:	e413      	b.n	1a003e86 <_vfprintf_r+0x10a6>
1a00465e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a004660:	42a3      	cmp	r3, r4
1a004662:	f4bf ac10 	bcs.w	1a003e86 <_vfprintf_r+0x10a6>
1a004666:	2130      	movs	r1, #48	; 0x30
1a004668:	1c5a      	adds	r2, r3, #1
1a00466a:	9228      	str	r2, [sp, #160]	; 0xa0
1a00466c:	7019      	strb	r1, [r3, #0]
1a00466e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a004670:	429c      	cmp	r4, r3
1a004672:	d8f9      	bhi.n	1a004668 <_vfprintf_r+0x1888>
1a004674:	e407      	b.n	1a003e86 <_vfprintf_r+0x10a6>
1a004676:	197c      	adds	r4, r7, r5
1a004678:	e7e8      	b.n	1a00464c <_vfprintf_r+0x186c>
1a00467a:	f1b9 0f00 	cmp.w	r9, #0
1a00467e:	f000 8092 	beq.w	1a0047a6 <_vfprintf_r+0x19c6>
1a004682:	900a      	str	r0, [sp, #40]	; 0x28
1a004684:	e4ec      	b.n	1a004060 <_vfprintf_r+0x1280>
1a004686:	900a      	str	r0, [sp, #40]	; 0x28
1a004688:	f04f 0906 	mov.w	r9, #6
1a00468c:	e4e8      	b.n	1a004060 <_vfprintf_r+0x1280>
1a00468e:	4621      	mov	r1, r4
1a004690:	461c      	mov	r4, r3
1a004692:	460b      	mov	r3, r1
1a004694:	3201      	adds	r2, #1
1a004696:	442c      	add	r4, r5
1a004698:	2a07      	cmp	r2, #7
1a00469a:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a00469e:	e9cb 3500 	strd	r3, r5, [fp]
1a0046a2:	f300 80a9 	bgt.w	1a0047f8 <_vfprintf_r+0x1a18>
1a0046a6:	f10b 0b08 	add.w	fp, fp, #8
1a0046aa:	e470      	b.n	1a003f8e <_vfprintf_r+0x11ae>
1a0046ac:	469a      	mov	sl, r3
1a0046ae:	f7ff bb37 	b.w	1a003d20 <_vfprintf_r+0xf40>
1a0046b2:	2301      	movs	r3, #1
1a0046b4:	9324      	str	r3, [sp, #144]	; 0x90
1a0046b6:	4b65      	ldr	r3, [pc, #404]	; (1a00484c <_vfprintf_r+0x1a6c>)
1a0046b8:	9309      	str	r3, [sp, #36]	; 0x24
1a0046ba:	e4f7      	b.n	1a0040ac <_vfprintf_r+0x12cc>
1a0046bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a0046be:	4413      	add	r3, r2
1a0046c0:	444b      	add	r3, r9
1a0046c2:	9309      	str	r3, [sp, #36]	; 0x24
1a0046c4:	2666      	movs	r6, #102	; 0x66
1a0046c6:	e6fb      	b.n	1a0044c0 <_vfprintf_r+0x16e0>
1a0046c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0046ca:	9309      	str	r3, [sp, #36]	; 0x24
1a0046cc:	e694      	b.n	1a0043f8 <_vfprintf_r+0x1618>
1a0046ce:	f10d 0ca7 	add.w	ip, sp, #167	; 0xa7
1a0046d2:	4664      	mov	r4, ip
1a0046d4:	4d5e      	ldr	r5, [pc, #376]	; (1a004850 <_vfprintf_r+0x1a70>)
1a0046d6:	e000      	b.n	1a0046da <_vfprintf_r+0x18fa>
1a0046d8:	4614      	mov	r4, r2
1a0046da:	fba5 1203 	umull	r1, r2, r5, r3
1a0046de:	08d2      	lsrs	r2, r2, #3
1a0046e0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a0046e4:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
1a0046e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
1a0046ec:	4613      	mov	r3, r2
1a0046ee:	2b09      	cmp	r3, #9
1a0046f0:	f804 1c01 	strb.w	r1, [r4, #-1]
1a0046f4:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a0046f8:	dcee      	bgt.n	1a0046d8 <_vfprintf_r+0x18f8>
1a0046fa:	3330      	adds	r3, #48	; 0x30
1a0046fc:	3c02      	subs	r4, #2
1a0046fe:	b2db      	uxtb	r3, r3
1a004700:	45a4      	cmp	ip, r4
1a004702:	f802 3c01 	strb.w	r3, [r2, #-1]
1a004706:	f240 8090 	bls.w	1a00482a <_vfprintf_r+0x1a4a>
1a00470a:	f10d 049a 	add.w	r4, sp, #154	; 0x9a
1a00470e:	4611      	mov	r1, r2
1a004710:	e001      	b.n	1a004716 <_vfprintf_r+0x1936>
1a004712:	f811 3b01 	ldrb.w	r3, [r1], #1
1a004716:	f804 3b01 	strb.w	r3, [r4], #1
1a00471a:	458c      	cmp	ip, r1
1a00471c:	d1f9      	bne.n	1a004712 <_vfprintf_r+0x1932>
1a00471e:	ab2a      	add	r3, sp, #168	; 0xa8
1a004720:	1a9b      	subs	r3, r3, r2
1a004722:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
1a004726:	4413      	add	r3, r2
1a004728:	f7ff bbe3 	b.w	1a003ef2 <_vfprintf_r+0x1112>
1a00472c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00472e:	4f49      	ldr	r7, [pc, #292]	; (1a004854 <_vfprintf_r+0x1a74>)
1a004730:	2b00      	cmp	r3, #0
1a004732:	bfb6      	itet	lt
1a004734:	222d      	movlt	r2, #45	; 0x2d
1a004736:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
1a00473a:	f88d 208b 	strblt.w	r2, [sp, #139]	; 0x8b
1a00473e:	4b46      	ldr	r3, [pc, #280]	; (1a004858 <_vfprintf_r+0x1a78>)
1a004740:	f7fe bf02 	b.w	1a003548 <_vfprintf_r+0x768>
1a004744:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a004748:	f7ff b8c9 	b.w	1a0038de <_vfprintf_r+0xafe>
1a00474c:	aa28      	add	r2, sp, #160	; 0xa0
1a00474e:	ab25      	add	r3, sp, #148	; 0x94
1a004750:	e9cd 3200 	strd	r3, r2, [sp]
1a004754:	2103      	movs	r1, #3
1a004756:	ab24      	add	r3, sp, #144	; 0x90
1a004758:	464a      	mov	r2, r9
1a00475a:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a00475e:	9803      	ldr	r0, [sp, #12]
1a004760:	f000 f9b6 	bl	1a004ad0 <_dtoa_r>
1a004764:	464d      	mov	r5, r9
1a004766:	4607      	mov	r7, r0
1a004768:	2e46      	cmp	r6, #70	; 0x46
1a00476a:	eb07 0405 	add.w	r4, r7, r5
1a00476e:	f43f af67 	beq.w	1a004640 <_vfprintf_r+0x1860>
1a004772:	e76b      	b.n	1a00464c <_vfprintf_r+0x186c>
1a004774:	f1b9 0f00 	cmp.w	r9, #0
1a004778:	d131      	bne.n	1a0047de <_vfprintf_r+0x19fe>
1a00477a:	07c5      	lsls	r5, r0, #31
1a00477c:	d42f      	bmi.n	1a0047de <_vfprintf_r+0x19fe>
1a00477e:	2301      	movs	r3, #1
1a004780:	9304      	str	r3, [sp, #16]
1a004782:	9309      	str	r3, [sp, #36]	; 0x24
1a004784:	2666      	movs	r6, #102	; 0x66
1a004786:	e642      	b.n	1a00440e <_vfprintf_r+0x162e>
1a004788:	07c3      	lsls	r3, r0, #31
1a00478a:	f57f abbf 	bpl.w	1a003f0c <_vfprintf_r+0x112c>
1a00478e:	f7ff bbb9 	b.w	1a003f04 <_vfprintf_r+0x1124>
1a004792:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a004794:	f1c3 0301 	rsb	r3, r3, #1
1a004798:	441a      	add	r2, r3
1a00479a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
1a00479e:	9209      	str	r2, [sp, #36]	; 0x24
1a0047a0:	9304      	str	r3, [sp, #16]
1a0047a2:	2667      	movs	r6, #103	; 0x67
1a0047a4:	e633      	b.n	1a00440e <_vfprintf_r+0x162e>
1a0047a6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a0047aa:	f04f 0901 	mov.w	r9, #1
1a0047ae:	e457      	b.n	1a004060 <_vfprintf_r+0x1280>
1a0047b0:	465a      	mov	r2, fp
1a0047b2:	e511      	b.n	1a0041d8 <_vfprintf_r+0x13f8>
1a0047b4:	2e47      	cmp	r6, #71	; 0x47
1a0047b6:	f47f af5e 	bne.w	1a004676 <_vfprintf_r+0x1896>
1a0047ba:	f018 0f01 	tst.w	r8, #1
1a0047be:	f43f ab61 	beq.w	1a003e84 <_vfprintf_r+0x10a4>
1a0047c2:	e7d1      	b.n	1a004768 <_vfprintf_r+0x1988>
1a0047c4:	2200      	movs	r2, #0
1a0047c6:	2300      	movs	r3, #0
1a0047c8:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
1a0047cc:	f7fd ff18 	bl	1a002600 <__aeabi_dcmpeq>
1a0047d0:	2800      	cmp	r0, #0
1a0047d2:	f47f af39 	bne.w	1a004648 <_vfprintf_r+0x1868>
1a0047d6:	f1c5 0501 	rsb	r5, r5, #1
1a0047da:	9524      	str	r5, [sp, #144]	; 0x90
1a0047dc:	e735      	b.n	1a00464a <_vfprintf_r+0x186a>
1a0047de:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a0047e0:	3301      	adds	r3, #1
1a0047e2:	444b      	add	r3, r9
1a0047e4:	9309      	str	r3, [sp, #36]	; 0x24
1a0047e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a0047ea:	9304      	str	r3, [sp, #16]
1a0047ec:	2666      	movs	r6, #102	; 0x66
1a0047ee:	e60e      	b.n	1a00440e <_vfprintf_r+0x162e>
1a0047f0:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
1a0047f4:	f7ff bb7a 	b.w	1a003eec <_vfprintf_r+0x110c>
1a0047f8:	aa2a      	add	r2, sp, #168	; 0xa8
1a0047fa:	9907      	ldr	r1, [sp, #28]
1a0047fc:	9803      	ldr	r0, [sp, #12]
1a0047fe:	f002 fe35 	bl	1a00746c <__sprint_r>
1a004802:	2800      	cmp	r0, #0
1a004804:	f47f a864 	bne.w	1a0038d0 <_vfprintf_r+0xaf0>
1a004808:	e9dd 242b 	ldrd	r2, r4, [sp, #172]	; 0xac
1a00480c:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a004810:	f7ff bbbd 	b.w	1a003f8e <_vfprintf_r+0x11ae>
1a004814:	9908      	ldr	r1, [sp, #32]
1a004816:	f89a 6001 	ldrb.w	r6, [sl, #1]
1a00481a:	680b      	ldr	r3, [r1, #0]
1a00481c:	ea43 79e3 	orr.w	r9, r3, r3, asr #31
1a004820:	1d0b      	adds	r3, r1, #4
1a004822:	4692      	mov	sl, r2
1a004824:	9308      	str	r3, [sp, #32]
1a004826:	f7fe bb59 	b.w	1a002edc <_vfprintf_r+0xfc>
1a00482a:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
1a00482e:	f7ff bb60 	b.w	1a003ef2 <_vfprintf_r+0x1112>
1a004832:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a004836:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00483a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00483e:	f8a9 300c 	strh.w	r3, [r9, #12]
1a004842:	f7ff b84c 	b.w	1a0038de <_vfprintf_r+0xafe>
1a004846:	bf00      	nop
1a004848:	1a007cb0 	.word	0x1a007cb0
1a00484c:	1a007c80 	.word	0x1a007c80
1a004850:	cccccccd 	.word	0xcccccccd
1a004854:	1a007c68 	.word	0x1a007c68
1a004858:	1a007c64 	.word	0x1a007c64

1a00485c <__sbprintf>:
1a00485c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004860:	460c      	mov	r4, r1
1a004862:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
1a004866:	8989      	ldrh	r1, [r1, #12]
1a004868:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a00486a:	89e5      	ldrh	r5, [r4, #14]
1a00486c:	9619      	str	r6, [sp, #100]	; 0x64
1a00486e:	f021 0102 	bic.w	r1, r1, #2
1a004872:	4606      	mov	r6, r0
1a004874:	69e0      	ldr	r0, [r4, #28]
1a004876:	f8ad 100c 	strh.w	r1, [sp, #12]
1a00487a:	4617      	mov	r7, r2
1a00487c:	f44f 6180 	mov.w	r1, #1024	; 0x400
1a004880:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a004882:	f8ad 500e 	strh.w	r5, [sp, #14]
1a004886:	4698      	mov	r8, r3
1a004888:	ad1a      	add	r5, sp, #104	; 0x68
1a00488a:	2300      	movs	r3, #0
1a00488c:	9007      	str	r0, [sp, #28]
1a00488e:	a816      	add	r0, sp, #88	; 0x58
1a004890:	9209      	str	r2, [sp, #36]	; 0x24
1a004892:	9306      	str	r3, [sp, #24]
1a004894:	9500      	str	r5, [sp, #0]
1a004896:	9504      	str	r5, [sp, #16]
1a004898:	9102      	str	r1, [sp, #8]
1a00489a:	9105      	str	r1, [sp, #20]
1a00489c:	f001 fc60 	bl	1a006160 <__retarget_lock_init_recursive>
1a0048a0:	4643      	mov	r3, r8
1a0048a2:	463a      	mov	r2, r7
1a0048a4:	4669      	mov	r1, sp
1a0048a6:	4630      	mov	r0, r6
1a0048a8:	f7fe fa9a 	bl	1a002de0 <_vfprintf_r>
1a0048ac:	1e05      	subs	r5, r0, #0
1a0048ae:	db07      	blt.n	1a0048c0 <__sbprintf+0x64>
1a0048b0:	4630      	mov	r0, r6
1a0048b2:	4669      	mov	r1, sp
1a0048b4:	f001 f8c6 	bl	1a005a44 <_fflush_r>
1a0048b8:	2800      	cmp	r0, #0
1a0048ba:	bf18      	it	ne
1a0048bc:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a0048c0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a0048c4:	065b      	lsls	r3, r3, #25
1a0048c6:	d503      	bpl.n	1a0048d0 <__sbprintf+0x74>
1a0048c8:	89a3      	ldrh	r3, [r4, #12]
1a0048ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0048ce:	81a3      	strh	r3, [r4, #12]
1a0048d0:	9816      	ldr	r0, [sp, #88]	; 0x58
1a0048d2:	f001 fc47 	bl	1a006164 <__retarget_lock_close_recursive>
1a0048d6:	4628      	mov	r0, r5
1a0048d8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
1a0048dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a0048e0 <__swsetup_r>:
1a0048e0:	b538      	push	{r3, r4, r5, lr}
1a0048e2:	4b31      	ldr	r3, [pc, #196]	; (1a0049a8 <__swsetup_r+0xc8>)
1a0048e4:	681b      	ldr	r3, [r3, #0]
1a0048e6:	4605      	mov	r5, r0
1a0048e8:	460c      	mov	r4, r1
1a0048ea:	b113      	cbz	r3, 1a0048f2 <__swsetup_r+0x12>
1a0048ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a0048ee:	2a00      	cmp	r2, #0
1a0048f0:	d03a      	beq.n	1a004968 <__swsetup_r+0x88>
1a0048f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0048f6:	b293      	uxth	r3, r2
1a0048f8:	0718      	lsls	r0, r3, #28
1a0048fa:	d50c      	bpl.n	1a004916 <__swsetup_r+0x36>
1a0048fc:	6920      	ldr	r0, [r4, #16]
1a0048fe:	b1a8      	cbz	r0, 1a00492c <__swsetup_r+0x4c>
1a004900:	f013 0201 	ands.w	r2, r3, #1
1a004904:	d020      	beq.n	1a004948 <__swsetup_r+0x68>
1a004906:	6963      	ldr	r3, [r4, #20]
1a004908:	2200      	movs	r2, #0
1a00490a:	425b      	negs	r3, r3
1a00490c:	61a3      	str	r3, [r4, #24]
1a00490e:	60a2      	str	r2, [r4, #8]
1a004910:	b300      	cbz	r0, 1a004954 <__swsetup_r+0x74>
1a004912:	2000      	movs	r0, #0
1a004914:	bd38      	pop	{r3, r4, r5, pc}
1a004916:	06d9      	lsls	r1, r3, #27
1a004918:	d53e      	bpl.n	1a004998 <__swsetup_r+0xb8>
1a00491a:	0758      	lsls	r0, r3, #29
1a00491c:	d428      	bmi.n	1a004970 <__swsetup_r+0x90>
1a00491e:	6920      	ldr	r0, [r4, #16]
1a004920:	f042 0308 	orr.w	r3, r2, #8
1a004924:	81a3      	strh	r3, [r4, #12]
1a004926:	b29b      	uxth	r3, r3
1a004928:	2800      	cmp	r0, #0
1a00492a:	d1e9      	bne.n	1a004900 <__swsetup_r+0x20>
1a00492c:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a004930:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a004934:	d0e4      	beq.n	1a004900 <__swsetup_r+0x20>
1a004936:	4628      	mov	r0, r5
1a004938:	4621      	mov	r1, r4
1a00493a:	f001 fc47 	bl	1a0061cc <__smakebuf_r>
1a00493e:	89a3      	ldrh	r3, [r4, #12]
1a004940:	6920      	ldr	r0, [r4, #16]
1a004942:	f013 0201 	ands.w	r2, r3, #1
1a004946:	d1de      	bne.n	1a004906 <__swsetup_r+0x26>
1a004948:	0799      	lsls	r1, r3, #30
1a00494a:	bf58      	it	pl
1a00494c:	6962      	ldrpl	r2, [r4, #20]
1a00494e:	60a2      	str	r2, [r4, #8]
1a004950:	2800      	cmp	r0, #0
1a004952:	d1de      	bne.n	1a004912 <__swsetup_r+0x32>
1a004954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004958:	061a      	lsls	r2, r3, #24
1a00495a:	d5db      	bpl.n	1a004914 <__swsetup_r+0x34>
1a00495c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004960:	81a3      	strh	r3, [r4, #12]
1a004962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004966:	bd38      	pop	{r3, r4, r5, pc}
1a004968:	4618      	mov	r0, r3
1a00496a:	f001 f8c7 	bl	1a005afc <__sinit>
1a00496e:	e7c0      	b.n	1a0048f2 <__swsetup_r+0x12>
1a004970:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a004972:	b151      	cbz	r1, 1a00498a <__swsetup_r+0xaa>
1a004974:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a004978:	4299      	cmp	r1, r3
1a00497a:	d004      	beq.n	1a004986 <__swsetup_r+0xa6>
1a00497c:	4628      	mov	r0, r5
1a00497e:	f001 f945 	bl	1a005c0c <_free_r>
1a004982:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a004986:	2300      	movs	r3, #0
1a004988:	6323      	str	r3, [r4, #48]	; 0x30
1a00498a:	2300      	movs	r3, #0
1a00498c:	6920      	ldr	r0, [r4, #16]
1a00498e:	6063      	str	r3, [r4, #4]
1a004990:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a004994:	6020      	str	r0, [r4, #0]
1a004996:	e7c3      	b.n	1a004920 <__swsetup_r+0x40>
1a004998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a00499c:	2309      	movs	r3, #9
1a00499e:	602b      	str	r3, [r5, #0]
1a0049a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0049a4:	81a2      	strh	r2, [r4, #12]
1a0049a6:	bd38      	pop	{r3, r4, r5, pc}
1a0049a8:	10000048 	.word	0x10000048

1a0049ac <quorem>:
1a0049ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0049b0:	6903      	ldr	r3, [r0, #16]
1a0049b2:	690f      	ldr	r7, [r1, #16]
1a0049b4:	42bb      	cmp	r3, r7
1a0049b6:	b083      	sub	sp, #12
1a0049b8:	f2c0 8086 	blt.w	1a004ac8 <quorem+0x11c>
1a0049bc:	3f01      	subs	r7, #1
1a0049be:	f101 0914 	add.w	r9, r1, #20
1a0049c2:	f100 0a14 	add.w	sl, r0, #20
1a0049c6:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
1a0049ca:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
1a0049ce:	00bc      	lsls	r4, r7, #2
1a0049d0:	3201      	adds	r2, #1
1a0049d2:	fbb3 f8f2 	udiv	r8, r3, r2
1a0049d6:	eb0a 0304 	add.w	r3, sl, r4
1a0049da:	9400      	str	r4, [sp, #0]
1a0049dc:	eb09 0b04 	add.w	fp, r9, r4
1a0049e0:	9301      	str	r3, [sp, #4]
1a0049e2:	f1b8 0f00 	cmp.w	r8, #0
1a0049e6:	d038      	beq.n	1a004a5a <quorem+0xae>
1a0049e8:	2500      	movs	r5, #0
1a0049ea:	462e      	mov	r6, r5
1a0049ec:	46ce      	mov	lr, r9
1a0049ee:	46d4      	mov	ip, sl
1a0049f0:	f85e 4b04 	ldr.w	r4, [lr], #4
1a0049f4:	f8dc 3000 	ldr.w	r3, [ip]
1a0049f8:	b2a2      	uxth	r2, r4
1a0049fa:	fb08 5502 	mla	r5, r8, r2, r5
1a0049fe:	0c22      	lsrs	r2, r4, #16
1a004a00:	0c2c      	lsrs	r4, r5, #16
1a004a02:	fb08 4202 	mla	r2, r8, r2, r4
1a004a06:	b2ad      	uxth	r5, r5
1a004a08:	1b75      	subs	r5, r6, r5
1a004a0a:	b296      	uxth	r6, r2
1a004a0c:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
1a004a10:	fa15 f383 	uxtah	r3, r5, r3
1a004a14:	eb06 4623 	add.w	r6, r6, r3, asr #16
1a004a18:	b29b      	uxth	r3, r3
1a004a1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
1a004a1e:	45f3      	cmp	fp, lr
1a004a20:	ea4f 4512 	mov.w	r5, r2, lsr #16
1a004a24:	f84c 3b04 	str.w	r3, [ip], #4
1a004a28:	ea4f 4626 	mov.w	r6, r6, asr #16
1a004a2c:	d2e0      	bcs.n	1a0049f0 <quorem+0x44>
1a004a2e:	9b00      	ldr	r3, [sp, #0]
1a004a30:	f85a 3003 	ldr.w	r3, [sl, r3]
1a004a34:	b98b      	cbnz	r3, 1a004a5a <quorem+0xae>
1a004a36:	9a01      	ldr	r2, [sp, #4]
1a004a38:	1f13      	subs	r3, r2, #4
1a004a3a:	459a      	cmp	sl, r3
1a004a3c:	d20c      	bcs.n	1a004a58 <quorem+0xac>
1a004a3e:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a004a42:	b94b      	cbnz	r3, 1a004a58 <quorem+0xac>
1a004a44:	f1a2 0308 	sub.w	r3, r2, #8
1a004a48:	e002      	b.n	1a004a50 <quorem+0xa4>
1a004a4a:	681a      	ldr	r2, [r3, #0]
1a004a4c:	3b04      	subs	r3, #4
1a004a4e:	b91a      	cbnz	r2, 1a004a58 <quorem+0xac>
1a004a50:	459a      	cmp	sl, r3
1a004a52:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a004a56:	d3f8      	bcc.n	1a004a4a <quorem+0x9e>
1a004a58:	6107      	str	r7, [r0, #16]
1a004a5a:	4604      	mov	r4, r0
1a004a5c:	f002 f97e 	bl	1a006d5c <__mcmp>
1a004a60:	2800      	cmp	r0, #0
1a004a62:	db2d      	blt.n	1a004ac0 <quorem+0x114>
1a004a64:	f108 0801 	add.w	r8, r8, #1
1a004a68:	4655      	mov	r5, sl
1a004a6a:	2300      	movs	r3, #0
1a004a6c:	f859 1b04 	ldr.w	r1, [r9], #4
1a004a70:	6828      	ldr	r0, [r5, #0]
1a004a72:	b28a      	uxth	r2, r1
1a004a74:	1a9a      	subs	r2, r3, r2
1a004a76:	0c0b      	lsrs	r3, r1, #16
1a004a78:	fa12 f280 	uxtah	r2, r2, r0
1a004a7c:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
1a004a80:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a004a84:	b292      	uxth	r2, r2
1a004a86:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a004a8a:	45cb      	cmp	fp, r9
1a004a8c:	f845 2b04 	str.w	r2, [r5], #4
1a004a90:	ea4f 4323 	mov.w	r3, r3, asr #16
1a004a94:	d2ea      	bcs.n	1a004a6c <quorem+0xc0>
1a004a96:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a004a9a:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
1a004a9e:	b97a      	cbnz	r2, 1a004ac0 <quorem+0x114>
1a004aa0:	1f1a      	subs	r2, r3, #4
1a004aa2:	4592      	cmp	sl, r2
1a004aa4:	d20b      	bcs.n	1a004abe <quorem+0x112>
1a004aa6:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a004aaa:	b942      	cbnz	r2, 1a004abe <quorem+0x112>
1a004aac:	3b08      	subs	r3, #8
1a004aae:	e002      	b.n	1a004ab6 <quorem+0x10a>
1a004ab0:	681a      	ldr	r2, [r3, #0]
1a004ab2:	3b04      	subs	r3, #4
1a004ab4:	b91a      	cbnz	r2, 1a004abe <quorem+0x112>
1a004ab6:	459a      	cmp	sl, r3
1a004ab8:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a004abc:	d3f8      	bcc.n	1a004ab0 <quorem+0x104>
1a004abe:	6127      	str	r7, [r4, #16]
1a004ac0:	4640      	mov	r0, r8
1a004ac2:	b003      	add	sp, #12
1a004ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004ac8:	2000      	movs	r0, #0
1a004aca:	b003      	add	sp, #12
1a004acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a004ad0 <_dtoa_r>:
1a004ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004ad4:	ec55 4b10 	vmov	r4, r5, d0
1a004ad8:	b09b      	sub	sp, #108	; 0x6c
1a004ada:	6c06      	ldr	r6, [r0, #64]	; 0x40
1a004adc:	9102      	str	r1, [sp, #8]
1a004ade:	4681      	mov	r9, r0
1a004ae0:	9207      	str	r2, [sp, #28]
1a004ae2:	9305      	str	r3, [sp, #20]
1a004ae4:	e9cd 4500 	strd	r4, r5, [sp]
1a004ae8:	b156      	cbz	r6, 1a004b00 <_dtoa_r+0x30>
1a004aea:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a004aec:	6072      	str	r2, [r6, #4]
1a004aee:	2301      	movs	r3, #1
1a004af0:	4093      	lsls	r3, r2
1a004af2:	60b3      	str	r3, [r6, #8]
1a004af4:	4631      	mov	r1, r6
1a004af6:	f001 ff41 	bl	1a00697c <_Bfree>
1a004afa:	2300      	movs	r3, #0
1a004afc:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
1a004b00:	f1b5 0800 	subs.w	r8, r5, #0
1a004b04:	9a24      	ldr	r2, [sp, #144]	; 0x90
1a004b06:	bfb4      	ite	lt
1a004b08:	2301      	movlt	r3, #1
1a004b0a:	2300      	movge	r3, #0
1a004b0c:	6013      	str	r3, [r2, #0]
1a004b0e:	4b76      	ldr	r3, [pc, #472]	; (1a004ce8 <_dtoa_r+0x218>)
1a004b10:	bfbc      	itt	lt
1a004b12:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
1a004b16:	f8cd 8004 	strlt.w	r8, [sp, #4]
1a004b1a:	ea33 0308 	bics.w	r3, r3, r8
1a004b1e:	f000 80a6 	beq.w	1a004c6e <_dtoa_r+0x19e>
1a004b22:	e9dd 6700 	ldrd	r6, r7, [sp]
1a004b26:	2200      	movs	r2, #0
1a004b28:	2300      	movs	r3, #0
1a004b2a:	4630      	mov	r0, r6
1a004b2c:	4639      	mov	r1, r7
1a004b2e:	f7fd fd67 	bl	1a002600 <__aeabi_dcmpeq>
1a004b32:	4605      	mov	r5, r0
1a004b34:	b178      	cbz	r0, 1a004b56 <_dtoa_r+0x86>
1a004b36:	9a05      	ldr	r2, [sp, #20]
1a004b38:	2301      	movs	r3, #1
1a004b3a:	6013      	str	r3, [r2, #0]
1a004b3c:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a004b3e:	2b00      	cmp	r3, #0
1a004b40:	f000 80c0 	beq.w	1a004cc4 <_dtoa_r+0x1f4>
1a004b44:	4b69      	ldr	r3, [pc, #420]	; (1a004cec <_dtoa_r+0x21c>)
1a004b46:	9a25      	ldr	r2, [sp, #148]	; 0x94
1a004b48:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
1a004b4c:	6013      	str	r3, [r2, #0]
1a004b4e:	4658      	mov	r0, fp
1a004b50:	b01b      	add	sp, #108	; 0x6c
1a004b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004b56:	aa18      	add	r2, sp, #96	; 0x60
1a004b58:	a919      	add	r1, sp, #100	; 0x64
1a004b5a:	ec47 6b10 	vmov	d0, r6, r7
1a004b5e:	4648      	mov	r0, r9
1a004b60:	f002 f98e 	bl	1a006e80 <__d2b>
1a004b64:	ea5f 5418 	movs.w	r4, r8, lsr #20
1a004b68:	4682      	mov	sl, r0
1a004b6a:	f040 80a0 	bne.w	1a004cae <_dtoa_r+0x1de>
1a004b6e:	e9dd 5418 	ldrd	r5, r4, [sp, #96]	; 0x60
1a004b72:	442c      	add	r4, r5
1a004b74:	f204 4332 	addw	r3, r4, #1074	; 0x432
1a004b78:	2b20      	cmp	r3, #32
1a004b7a:	f340 842c 	ble.w	1a0053d6 <_dtoa_r+0x906>
1a004b7e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a004b82:	fa08 f803 	lsl.w	r8, r8, r3
1a004b86:	9b00      	ldr	r3, [sp, #0]
1a004b88:	f204 4012 	addw	r0, r4, #1042	; 0x412
1a004b8c:	fa23 f000 	lsr.w	r0, r3, r0
1a004b90:	ea48 0000 	orr.w	r0, r8, r0
1a004b94:	f7fd fa52 	bl	1a00203c <__aeabi_ui2d>
1a004b98:	2301      	movs	r3, #1
1a004b9a:	4606      	mov	r6, r0
1a004b9c:	3c01      	subs	r4, #1
1a004b9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
1a004ba2:	930f      	str	r3, [sp, #60]	; 0x3c
1a004ba4:	4630      	mov	r0, r6
1a004ba6:	4639      	mov	r1, r7
1a004ba8:	2200      	movs	r2, #0
1a004baa:	4b51      	ldr	r3, [pc, #324]	; (1a004cf0 <_dtoa_r+0x220>)
1a004bac:	f7fd f908 	bl	1a001dc0 <__aeabi_dsub>
1a004bb0:	a347      	add	r3, pc, #284	; (adr r3, 1a004cd0 <_dtoa_r+0x200>)
1a004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004bb6:	f7fd fabb 	bl	1a002130 <__aeabi_dmul>
1a004bba:	a347      	add	r3, pc, #284	; (adr r3, 1a004cd8 <_dtoa_r+0x208>)
1a004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004bc0:	f7fd f900 	bl	1a001dc4 <__adddf3>
1a004bc4:	4606      	mov	r6, r0
1a004bc6:	4620      	mov	r0, r4
1a004bc8:	460f      	mov	r7, r1
1a004bca:	f7fd fa47 	bl	1a00205c <__aeabi_i2d>
1a004bce:	a344      	add	r3, pc, #272	; (adr r3, 1a004ce0 <_dtoa_r+0x210>)
1a004bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004bd4:	f7fd faac 	bl	1a002130 <__aeabi_dmul>
1a004bd8:	4602      	mov	r2, r0
1a004bda:	460b      	mov	r3, r1
1a004bdc:	4630      	mov	r0, r6
1a004bde:	4639      	mov	r1, r7
1a004be0:	f7fd f8f0 	bl	1a001dc4 <__adddf3>
1a004be4:	4606      	mov	r6, r0
1a004be6:	460f      	mov	r7, r1
1a004be8:	f002 fe30 	bl	1a00784c <__aeabi_d2iz>
1a004bec:	2200      	movs	r2, #0
1a004bee:	9006      	str	r0, [sp, #24]
1a004bf0:	2300      	movs	r3, #0
1a004bf2:	4630      	mov	r0, r6
1a004bf4:	4639      	mov	r1, r7
1a004bf6:	f7fd fd0d 	bl	1a002614 <__aeabi_dcmplt>
1a004bfa:	2800      	cmp	r0, #0
1a004bfc:	f040 8273 	bne.w	1a0050e6 <_dtoa_r+0x616>
1a004c00:	9e06      	ldr	r6, [sp, #24]
1a004c02:	2e16      	cmp	r6, #22
1a004c04:	f200 825d 	bhi.w	1a0050c2 <_dtoa_r+0x5f2>
1a004c08:	4b3a      	ldr	r3, [pc, #232]	; (1a004cf4 <_dtoa_r+0x224>)
1a004c0a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
1a004c0e:	e9d3 0100 	ldrd	r0, r1, [r3]
1a004c12:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004c16:	f7fd fd1b 	bl	1a002650 <__aeabi_dcmpgt>
1a004c1a:	2800      	cmp	r0, #0
1a004c1c:	f000 83d7 	beq.w	1a0053ce <_dtoa_r+0x8fe>
1a004c20:	1e73      	subs	r3, r6, #1
1a004c22:	9306      	str	r3, [sp, #24]
1a004c24:	2300      	movs	r3, #0
1a004c26:	930d      	str	r3, [sp, #52]	; 0x34
1a004c28:	1b2c      	subs	r4, r5, r4
1a004c2a:	f1b4 0801 	subs.w	r8, r4, #1
1a004c2e:	f100 8254 	bmi.w	1a0050da <_dtoa_r+0x60a>
1a004c32:	2300      	movs	r3, #0
1a004c34:	9308      	str	r3, [sp, #32]
1a004c36:	9b06      	ldr	r3, [sp, #24]
1a004c38:	2b00      	cmp	r3, #0
1a004c3a:	f2c0 8245 	blt.w	1a0050c8 <_dtoa_r+0x5f8>
1a004c3e:	4498      	add	r8, r3
1a004c40:	930c      	str	r3, [sp, #48]	; 0x30
1a004c42:	2300      	movs	r3, #0
1a004c44:	930b      	str	r3, [sp, #44]	; 0x2c
1a004c46:	9b02      	ldr	r3, [sp, #8]
1a004c48:	2b09      	cmp	r3, #9
1a004c4a:	d85b      	bhi.n	1a004d04 <_dtoa_r+0x234>
1a004c4c:	2b05      	cmp	r3, #5
1a004c4e:	f340 83c0 	ble.w	1a0053d2 <_dtoa_r+0x902>
1a004c52:	3b04      	subs	r3, #4
1a004c54:	9302      	str	r3, [sp, #8]
1a004c56:	2500      	movs	r5, #0
1a004c58:	9b02      	ldr	r3, [sp, #8]
1a004c5a:	3b02      	subs	r3, #2
1a004c5c:	2b03      	cmp	r3, #3
1a004c5e:	f200 8498 	bhi.w	1a005592 <_dtoa_r+0xac2>
1a004c62:	e8df f013 	tbh	[pc, r3, lsl #1]
1a004c66:	03df      	.short	0x03df
1a004c68:	03e803bf 	.word	0x03e803bf
1a004c6c:	04f5      	.short	0x04f5
1a004c6e:	9a05      	ldr	r2, [sp, #20]
1a004c70:	f242 730f 	movw	r3, #9999	; 0x270f
1a004c74:	6013      	str	r3, [r2, #0]
1a004c76:	9b00      	ldr	r3, [sp, #0]
1a004c78:	b983      	cbnz	r3, 1a004c9c <_dtoa_r+0x1cc>
1a004c7a:	f3c8 0313 	ubfx	r3, r8, #0, #20
1a004c7e:	b96b      	cbnz	r3, 1a004c9c <_dtoa_r+0x1cc>
1a004c80:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a004c82:	f8df b074 	ldr.w	fp, [pc, #116]	; 1a004cf8 <_dtoa_r+0x228>
1a004c86:	2b00      	cmp	r3, #0
1a004c88:	f43f af61 	beq.w	1a004b4e <_dtoa_r+0x7e>
1a004c8c:	f10b 0308 	add.w	r3, fp, #8
1a004c90:	9a25      	ldr	r2, [sp, #148]	; 0x94
1a004c92:	4658      	mov	r0, fp
1a004c94:	6013      	str	r3, [r2, #0]
1a004c96:	b01b      	add	sp, #108	; 0x6c
1a004c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004c9c:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a004c9e:	f8df b05c 	ldr.w	fp, [pc, #92]	; 1a004cfc <_dtoa_r+0x22c>
1a004ca2:	2b00      	cmp	r3, #0
1a004ca4:	f43f af53 	beq.w	1a004b4e <_dtoa_r+0x7e>
1a004ca8:	f10b 0303 	add.w	r3, fp, #3
1a004cac:	e7f0      	b.n	1a004c90 <_dtoa_r+0x1c0>
1a004cae:	f3c7 0313 	ubfx	r3, r7, #0, #20
1a004cb2:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
1a004cb6:	950f      	str	r5, [sp, #60]	; 0x3c
1a004cb8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a004cbc:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
1a004cc0:	9d18      	ldr	r5, [sp, #96]	; 0x60
1a004cc2:	e76f      	b.n	1a004ba4 <_dtoa_r+0xd4>
1a004cc4:	f8df b038 	ldr.w	fp, [pc, #56]	; 1a004d00 <_dtoa_r+0x230>
1a004cc8:	4658      	mov	r0, fp
1a004cca:	b01b      	add	sp, #108	; 0x6c
1a004ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004cd0:	636f4361 	.word	0x636f4361
1a004cd4:	3fd287a7 	.word	0x3fd287a7
1a004cd8:	8b60c8b3 	.word	0x8b60c8b3
1a004cdc:	3fc68a28 	.word	0x3fc68a28
1a004ce0:	509f79fb 	.word	0x509f79fb
1a004ce4:	3fd34413 	.word	0x3fd34413
1a004ce8:	7ff00000 	.word	0x7ff00000
1a004cec:	1a007c9d 	.word	0x1a007c9d
1a004cf0:	3ff80000 	.word	0x3ff80000
1a004cf4:	1a007cf8 	.word	0x1a007cf8
1a004cf8:	1a007cc0 	.word	0x1a007cc0
1a004cfc:	1a007ccc 	.word	0x1a007ccc
1a004d00:	1a007c9c 	.word	0x1a007c9c
1a004d04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
1a004d08:	2501      	movs	r5, #1
1a004d0a:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
1a004d0e:	2300      	movs	r3, #0
1a004d10:	9302      	str	r3, [sp, #8]
1a004d12:	9307      	str	r3, [sp, #28]
1a004d14:	2100      	movs	r1, #0
1a004d16:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
1a004d1a:	940e      	str	r4, [sp, #56]	; 0x38
1a004d1c:	4648      	mov	r0, r9
1a004d1e:	f001 fe07 	bl	1a006930 <_Balloc>
1a004d22:	2c0e      	cmp	r4, #14
1a004d24:	4683      	mov	fp, r0
1a004d26:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
1a004d2a:	f200 80fb 	bhi.w	1a004f24 <_dtoa_r+0x454>
1a004d2e:	2d00      	cmp	r5, #0
1a004d30:	f000 80f8 	beq.w	1a004f24 <_dtoa_r+0x454>
1a004d34:	ed9d 7b00 	vldr	d7, [sp]
1a004d38:	9906      	ldr	r1, [sp, #24]
1a004d3a:	2900      	cmp	r1, #0
1a004d3c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a004d40:	f340 83e5 	ble.w	1a00550e <_dtoa_r+0xa3e>
1a004d44:	4b9d      	ldr	r3, [pc, #628]	; (1a004fbc <_dtoa_r+0x4ec>)
1a004d46:	f001 020f 	and.w	r2, r1, #15
1a004d4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a004d4e:	ed93 7b00 	vldr	d7, [r3]
1a004d52:	110c      	asrs	r4, r1, #4
1a004d54:	06e2      	lsls	r2, r4, #27
1a004d56:	ed8d 7b00 	vstr	d7, [sp]
1a004d5a:	f140 849e 	bpl.w	1a00569a <_dtoa_r+0xbca>
1a004d5e:	4b98      	ldr	r3, [pc, #608]	; (1a004fc0 <_dtoa_r+0x4f0>)
1a004d60:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a004d64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a004d68:	f7fd fb0c 	bl	1a002384 <__aeabi_ddiv>
1a004d6c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
1a004d70:	f004 040f 	and.w	r4, r4, #15
1a004d74:	2603      	movs	r6, #3
1a004d76:	b17c      	cbz	r4, 1a004d98 <_dtoa_r+0x2c8>
1a004d78:	e9dd 0100 	ldrd	r0, r1, [sp]
1a004d7c:	4d90      	ldr	r5, [pc, #576]	; (1a004fc0 <_dtoa_r+0x4f0>)
1a004d7e:	07e3      	lsls	r3, r4, #31
1a004d80:	d504      	bpl.n	1a004d8c <_dtoa_r+0x2bc>
1a004d82:	e9d5 2300 	ldrd	r2, r3, [r5]
1a004d86:	f7fd f9d3 	bl	1a002130 <__aeabi_dmul>
1a004d8a:	3601      	adds	r6, #1
1a004d8c:	1064      	asrs	r4, r4, #1
1a004d8e:	f105 0508 	add.w	r5, r5, #8
1a004d92:	d1f4      	bne.n	1a004d7e <_dtoa_r+0x2ae>
1a004d94:	e9cd 0100 	strd	r0, r1, [sp]
1a004d98:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004d9c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a004da0:	f7fd faf0 	bl	1a002384 <__aeabi_ddiv>
1a004da4:	e9cd 0100 	strd	r0, r1, [sp]
1a004da8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a004daa:	b143      	cbz	r3, 1a004dbe <_dtoa_r+0x2ee>
1a004dac:	2200      	movs	r2, #0
1a004dae:	4b85      	ldr	r3, [pc, #532]	; (1a004fc4 <_dtoa_r+0x4f4>)
1a004db0:	e9dd 0100 	ldrd	r0, r1, [sp]
1a004db4:	f7fd fc2e 	bl	1a002614 <__aeabi_dcmplt>
1a004db8:	2800      	cmp	r0, #0
1a004dba:	f040 84ff 	bne.w	1a0057bc <_dtoa_r+0xcec>
1a004dbe:	4630      	mov	r0, r6
1a004dc0:	f7fd f94c 	bl	1a00205c <__aeabi_i2d>
1a004dc4:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004dc8:	f7fd f9b2 	bl	1a002130 <__aeabi_dmul>
1a004dcc:	4b7e      	ldr	r3, [pc, #504]	; (1a004fc8 <_dtoa_r+0x4f8>)
1a004dce:	2200      	movs	r2, #0
1a004dd0:	f7fc fff8 	bl	1a001dc4 <__adddf3>
1a004dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004dd6:	4606      	mov	r6, r0
1a004dd8:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a004ddc:	2b00      	cmp	r3, #0
1a004dde:	f000 841c 	beq.w	1a00561a <_dtoa_r+0xb4a>
1a004de2:	9b06      	ldr	r3, [sp, #24]
1a004de4:	9316      	str	r3, [sp, #88]	; 0x58
1a004de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004de8:	9312      	str	r3, [sp, #72]	; 0x48
1a004dea:	e9dd 0100 	ldrd	r0, r1, [sp]
1a004dee:	f002 fd2d 	bl	1a00784c <__aeabi_d2iz>
1a004df2:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004df4:	4b71      	ldr	r3, [pc, #452]	; (1a004fbc <_dtoa_r+0x4ec>)
1a004df6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a004dfa:	ed13 7b02 	vldr	d7, [r3, #-8]
1a004dfe:	f100 0530 	add.w	r5, r0, #48	; 0x30
1a004e02:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
1a004e06:	f7fd f929 	bl	1a00205c <__aeabi_i2d>
1a004e0a:	460b      	mov	r3, r1
1a004e0c:	4602      	mov	r2, r0
1a004e0e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a004e12:	e9cd 6700 	strd	r6, r7, [sp]
1a004e16:	f7fc ffd3 	bl	1a001dc0 <__aeabi_dsub>
1a004e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004e1c:	b2ed      	uxtb	r5, r5
1a004e1e:	4606      	mov	r6, r0
1a004e20:	460f      	mov	r7, r1
1a004e22:	f10b 0401 	add.w	r4, fp, #1
1a004e26:	2b00      	cmp	r3, #0
1a004e28:	f000 8458 	beq.w	1a0056dc <_dtoa_r+0xc0c>
1a004e2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
1a004e30:	2000      	movs	r0, #0
1a004e32:	4966      	ldr	r1, [pc, #408]	; (1a004fcc <_dtoa_r+0x4fc>)
1a004e34:	f7fd faa6 	bl	1a002384 <__aeabi_ddiv>
1a004e38:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004e3c:	f7fc ffc0 	bl	1a001dc0 <__aeabi_dsub>
1a004e40:	f88b 5000 	strb.w	r5, [fp]
1a004e44:	4632      	mov	r2, r6
1a004e46:	463b      	mov	r3, r7
1a004e48:	e9cd 0100 	strd	r0, r1, [sp]
1a004e4c:	f7fd fc00 	bl	1a002650 <__aeabi_dcmpgt>
1a004e50:	2800      	cmp	r0, #0
1a004e52:	f040 8502 	bne.w	1a00585a <_dtoa_r+0xd8a>
1a004e56:	4632      	mov	r2, r6
1a004e58:	463b      	mov	r3, r7
1a004e5a:	2000      	movs	r0, #0
1a004e5c:	4959      	ldr	r1, [pc, #356]	; (1a004fc4 <_dtoa_r+0x4f4>)
1a004e5e:	f7fc ffaf 	bl	1a001dc0 <__aeabi_dsub>
1a004e62:	4602      	mov	r2, r0
1a004e64:	460b      	mov	r3, r1
1a004e66:	e9dd 0100 	ldrd	r0, r1, [sp]
1a004e6a:	f7fd fbf1 	bl	1a002650 <__aeabi_dcmpgt>
1a004e6e:	2800      	cmp	r0, #0
1a004e70:	f040 84fb 	bne.w	1a00586a <_dtoa_r+0xd9a>
1a004e74:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004e76:	2a01      	cmp	r2, #1
1a004e78:	d050      	beq.n	1a004f1c <_dtoa_r+0x44c>
1a004e7a:	445a      	add	r2, fp
1a004e7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
1a004e80:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a004e84:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
1a004e88:	4692      	mov	sl, r2
1a004e8a:	46cb      	mov	fp, r9
1a004e8c:	e9dd 8900 	ldrd	r8, r9, [sp]
1a004e90:	e00c      	b.n	1a004eac <_dtoa_r+0x3dc>
1a004e92:	2000      	movs	r0, #0
1a004e94:	494b      	ldr	r1, [pc, #300]	; (1a004fc4 <_dtoa_r+0x4f4>)
1a004e96:	f7fc ff93 	bl	1a001dc0 <__aeabi_dsub>
1a004e9a:	4642      	mov	r2, r8
1a004e9c:	464b      	mov	r3, r9
1a004e9e:	f7fd fbb9 	bl	1a002614 <__aeabi_dcmplt>
1a004ea2:	2800      	cmp	r0, #0
1a004ea4:	f040 84dc 	bne.w	1a005860 <_dtoa_r+0xd90>
1a004ea8:	4554      	cmp	r4, sl
1a004eaa:	d030      	beq.n	1a004f0e <_dtoa_r+0x43e>
1a004eac:	4640      	mov	r0, r8
1a004eae:	4649      	mov	r1, r9
1a004eb0:	2200      	movs	r2, #0
1a004eb2:	4b47      	ldr	r3, [pc, #284]	; (1a004fd0 <_dtoa_r+0x500>)
1a004eb4:	f7fd f93c 	bl	1a002130 <__aeabi_dmul>
1a004eb8:	2200      	movs	r2, #0
1a004eba:	4b45      	ldr	r3, [pc, #276]	; (1a004fd0 <_dtoa_r+0x500>)
1a004ebc:	4680      	mov	r8, r0
1a004ebe:	4689      	mov	r9, r1
1a004ec0:	4630      	mov	r0, r6
1a004ec2:	4639      	mov	r1, r7
1a004ec4:	f7fd f934 	bl	1a002130 <__aeabi_dmul>
1a004ec8:	460f      	mov	r7, r1
1a004eca:	4606      	mov	r6, r0
1a004ecc:	f002 fcbe 	bl	1a00784c <__aeabi_d2iz>
1a004ed0:	4605      	mov	r5, r0
1a004ed2:	f7fd f8c3 	bl	1a00205c <__aeabi_i2d>
1a004ed6:	4602      	mov	r2, r0
1a004ed8:	460b      	mov	r3, r1
1a004eda:	4630      	mov	r0, r6
1a004edc:	4639      	mov	r1, r7
1a004ede:	f7fc ff6f 	bl	1a001dc0 <__aeabi_dsub>
1a004ee2:	3530      	adds	r5, #48	; 0x30
1a004ee4:	b2ed      	uxtb	r5, r5
1a004ee6:	4642      	mov	r2, r8
1a004ee8:	464b      	mov	r3, r9
1a004eea:	f804 5b01 	strb.w	r5, [r4], #1
1a004eee:	4606      	mov	r6, r0
1a004ef0:	460f      	mov	r7, r1
1a004ef2:	f7fd fb8f 	bl	1a002614 <__aeabi_dcmplt>
1a004ef6:	4632      	mov	r2, r6
1a004ef8:	463b      	mov	r3, r7
1a004efa:	2800      	cmp	r0, #0
1a004efc:	d0c9      	beq.n	1a004e92 <_dtoa_r+0x3c2>
1a004efe:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a004f00:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a004f04:	9306      	str	r3, [sp, #24]
1a004f06:	46d9      	mov	r9, fp
1a004f08:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
1a004f0c:	e236      	b.n	1a00537c <_dtoa_r+0x8ac>
1a004f0e:	46d9      	mov	r9, fp
1a004f10:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
1a004f14:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a004f18:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
1a004f1c:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
1a004f20:	e9cd 3400 	strd	r3, r4, [sp]
1a004f24:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a004f26:	2b00      	cmp	r3, #0
1a004f28:	f2c0 80ae 	blt.w	1a005088 <_dtoa_r+0x5b8>
1a004f2c:	9a06      	ldr	r2, [sp, #24]
1a004f2e:	2a0e      	cmp	r2, #14
1a004f30:	f300 80aa 	bgt.w	1a005088 <_dtoa_r+0x5b8>
1a004f34:	4b21      	ldr	r3, [pc, #132]	; (1a004fbc <_dtoa_r+0x4ec>)
1a004f36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a004f3a:	ed93 7b00 	vldr	d7, [r3]
1a004f3e:	9b07      	ldr	r3, [sp, #28]
1a004f40:	2b00      	cmp	r3, #0
1a004f42:	ed8d 7b02 	vstr	d7, [sp, #8]
1a004f46:	f2c0 82be 	blt.w	1a0054c6 <_dtoa_r+0x9f6>
1a004f4a:	e9dd 6700 	ldrd	r6, r7, [sp]
1a004f4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004f52:	4630      	mov	r0, r6
1a004f54:	4639      	mov	r1, r7
1a004f56:	f7fd fa15 	bl	1a002384 <__aeabi_ddiv>
1a004f5a:	f002 fc77 	bl	1a00784c <__aeabi_d2iz>
1a004f5e:	4605      	mov	r5, r0
1a004f60:	f7fd f87c 	bl	1a00205c <__aeabi_i2d>
1a004f64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004f68:	f7fd f8e2 	bl	1a002130 <__aeabi_dmul>
1a004f6c:	460b      	mov	r3, r1
1a004f6e:	4602      	mov	r2, r0
1a004f70:	4639      	mov	r1, r7
1a004f72:	4630      	mov	r0, r6
1a004f74:	f7fc ff24 	bl	1a001dc0 <__aeabi_dsub>
1a004f78:	f105 0330 	add.w	r3, r5, #48	; 0x30
1a004f7c:	f88b 3000 	strb.w	r3, [fp]
1a004f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004f82:	2b01      	cmp	r3, #1
1a004f84:	4606      	mov	r6, r0
1a004f86:	460f      	mov	r7, r1
1a004f88:	f10b 0401 	add.w	r4, fp, #1
1a004f8c:	d053      	beq.n	1a005036 <_dtoa_r+0x566>
1a004f8e:	2200      	movs	r2, #0
1a004f90:	4b0f      	ldr	r3, [pc, #60]	; (1a004fd0 <_dtoa_r+0x500>)
1a004f92:	f7fd f8cd 	bl	1a002130 <__aeabi_dmul>
1a004f96:	2200      	movs	r2, #0
1a004f98:	2300      	movs	r3, #0
1a004f9a:	4606      	mov	r6, r0
1a004f9c:	460f      	mov	r7, r1
1a004f9e:	f7fd fb2f 	bl	1a002600 <__aeabi_dcmpeq>
1a004fa2:	2800      	cmp	r0, #0
1a004fa4:	f040 81ea 	bne.w	1a00537c <_dtoa_r+0x8ac>
1a004fa8:	f8cd a000 	str.w	sl, [sp]
1a004fac:	f8cd 901c 	str.w	r9, [sp, #28]
1a004fb0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a004fb4:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
1a004fb8:	e017      	b.n	1a004fea <_dtoa_r+0x51a>
1a004fba:	bf00      	nop
1a004fbc:	1a007cf8 	.word	0x1a007cf8
1a004fc0:	1a007cd0 	.word	0x1a007cd0
1a004fc4:	3ff00000 	.word	0x3ff00000
1a004fc8:	401c0000 	.word	0x401c0000
1a004fcc:	3fe00000 	.word	0x3fe00000
1a004fd0:	40240000 	.word	0x40240000
1a004fd4:	f7fd f8ac 	bl	1a002130 <__aeabi_dmul>
1a004fd8:	2200      	movs	r2, #0
1a004fda:	2300      	movs	r3, #0
1a004fdc:	4606      	mov	r6, r0
1a004fde:	460f      	mov	r7, r1
1a004fe0:	f7fd fb0e 	bl	1a002600 <__aeabi_dcmpeq>
1a004fe4:	2800      	cmp	r0, #0
1a004fe6:	f040 833d 	bne.w	1a005664 <_dtoa_r+0xb94>
1a004fea:	464a      	mov	r2, r9
1a004fec:	4653      	mov	r3, sl
1a004fee:	4630      	mov	r0, r6
1a004ff0:	4639      	mov	r1, r7
1a004ff2:	f7fd f9c7 	bl	1a002384 <__aeabi_ddiv>
1a004ff6:	f002 fc29 	bl	1a00784c <__aeabi_d2iz>
1a004ffa:	4605      	mov	r5, r0
1a004ffc:	f7fd f82e 	bl	1a00205c <__aeabi_i2d>
1a005000:	464a      	mov	r2, r9
1a005002:	4653      	mov	r3, sl
1a005004:	f7fd f894 	bl	1a002130 <__aeabi_dmul>
1a005008:	4602      	mov	r2, r0
1a00500a:	460b      	mov	r3, r1
1a00500c:	4630      	mov	r0, r6
1a00500e:	4639      	mov	r1, r7
1a005010:	f7fc fed6 	bl	1a001dc0 <__aeabi_dsub>
1a005014:	f105 0c30 	add.w	ip, r5, #48	; 0x30
1a005018:	f804 cb01 	strb.w	ip, [r4], #1
1a00501c:	eba4 0c0b 	sub.w	ip, r4, fp
1a005020:	45e0      	cmp	r8, ip
1a005022:	4606      	mov	r6, r0
1a005024:	460f      	mov	r7, r1
1a005026:	f04f 0200 	mov.w	r2, #0
1a00502a:	4bc1      	ldr	r3, [pc, #772]	; (1a005330 <_dtoa_r+0x860>)
1a00502c:	d1d2      	bne.n	1a004fd4 <_dtoa_r+0x504>
1a00502e:	f8dd a000 	ldr.w	sl, [sp]
1a005032:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a005036:	4632      	mov	r2, r6
1a005038:	463b      	mov	r3, r7
1a00503a:	4630      	mov	r0, r6
1a00503c:	4639      	mov	r1, r7
1a00503e:	f7fc fec1 	bl	1a001dc4 <__adddf3>
1a005042:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a005046:	4606      	mov	r6, r0
1a005048:	460f      	mov	r7, r1
1a00504a:	f7fd fb01 	bl	1a002650 <__aeabi_dcmpgt>
1a00504e:	b958      	cbnz	r0, 1a005068 <_dtoa_r+0x598>
1a005050:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a005054:	4630      	mov	r0, r6
1a005056:	4639      	mov	r1, r7
1a005058:	f7fd fad2 	bl	1a002600 <__aeabi_dcmpeq>
1a00505c:	2800      	cmp	r0, #0
1a00505e:	f000 818d 	beq.w	1a00537c <_dtoa_r+0x8ac>
1a005062:	07e9      	lsls	r1, r5, #31
1a005064:	f140 818a 	bpl.w	1a00537c <_dtoa_r+0x8ac>
1a005068:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a00506c:	e005      	b.n	1a00507a <_dtoa_r+0x5aa>
1a00506e:	459b      	cmp	fp, r3
1a005070:	f000 8373 	beq.w	1a00575a <_dtoa_r+0xc8a>
1a005074:	f813 5c01 	ldrb.w	r5, [r3, #-1]
1a005078:	461c      	mov	r4, r3
1a00507a:	2d39      	cmp	r5, #57	; 0x39
1a00507c:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
1a005080:	d0f5      	beq.n	1a00506e <_dtoa_r+0x59e>
1a005082:	3501      	adds	r5, #1
1a005084:	701d      	strb	r5, [r3, #0]
1a005086:	e179      	b.n	1a00537c <_dtoa_r+0x8ac>
1a005088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00508a:	2a00      	cmp	r2, #0
1a00508c:	d03b      	beq.n	1a005106 <_dtoa_r+0x636>
1a00508e:	9a02      	ldr	r2, [sp, #8]
1a005090:	2a01      	cmp	r2, #1
1a005092:	f340 820b 	ble.w	1a0054ac <_dtoa_r+0x9dc>
1a005096:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005098:	1e5f      	subs	r7, r3, #1
1a00509a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00509c:	42bb      	cmp	r3, r7
1a00509e:	f2c0 82e6 	blt.w	1a00566e <_dtoa_r+0xb9e>
1a0050a2:	1bdf      	subs	r7, r3, r7
1a0050a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0050a6:	2b00      	cmp	r3, #0
1a0050a8:	f2c0 830b 	blt.w	1a0056c2 <_dtoa_r+0xbf2>
1a0050ac:	9a08      	ldr	r2, [sp, #32]
1a0050ae:	4614      	mov	r4, r2
1a0050b0:	441a      	add	r2, r3
1a0050b2:	4498      	add	r8, r3
1a0050b4:	9208      	str	r2, [sp, #32]
1a0050b6:	2101      	movs	r1, #1
1a0050b8:	4648      	mov	r0, r9
1a0050ba:	f001 fcf9 	bl	1a006ab0 <__i2b>
1a0050be:	4605      	mov	r5, r0
1a0050c0:	e024      	b.n	1a00510c <_dtoa_r+0x63c>
1a0050c2:	2301      	movs	r3, #1
1a0050c4:	930d      	str	r3, [sp, #52]	; 0x34
1a0050c6:	e5af      	b.n	1a004c28 <_dtoa_r+0x158>
1a0050c8:	9a08      	ldr	r2, [sp, #32]
1a0050ca:	9b06      	ldr	r3, [sp, #24]
1a0050cc:	1ad2      	subs	r2, r2, r3
1a0050ce:	425b      	negs	r3, r3
1a0050d0:	930b      	str	r3, [sp, #44]	; 0x2c
1a0050d2:	2300      	movs	r3, #0
1a0050d4:	9208      	str	r2, [sp, #32]
1a0050d6:	930c      	str	r3, [sp, #48]	; 0x30
1a0050d8:	e5b5      	b.n	1a004c46 <_dtoa_r+0x176>
1a0050da:	f1c4 0301 	rsb	r3, r4, #1
1a0050de:	9308      	str	r3, [sp, #32]
1a0050e0:	f04f 0800 	mov.w	r8, #0
1a0050e4:	e5a7      	b.n	1a004c36 <_dtoa_r+0x166>
1a0050e6:	f8dd 8018 	ldr.w	r8, [sp, #24]
1a0050ea:	4640      	mov	r0, r8
1a0050ec:	f7fc ffb6 	bl	1a00205c <__aeabi_i2d>
1a0050f0:	4632      	mov	r2, r6
1a0050f2:	463b      	mov	r3, r7
1a0050f4:	f7fd fa84 	bl	1a002600 <__aeabi_dcmpeq>
1a0050f8:	2800      	cmp	r0, #0
1a0050fa:	f47f ad81 	bne.w	1a004c00 <_dtoa_r+0x130>
1a0050fe:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a005102:	9306      	str	r3, [sp, #24]
1a005104:	e57c      	b.n	1a004c00 <_dtoa_r+0x130>
1a005106:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1a005108:	9c08      	ldr	r4, [sp, #32]
1a00510a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a00510c:	2c00      	cmp	r4, #0
1a00510e:	dd0c      	ble.n	1a00512a <_dtoa_r+0x65a>
1a005110:	f1b8 0f00 	cmp.w	r8, #0
1a005114:	dd09      	ble.n	1a00512a <_dtoa_r+0x65a>
1a005116:	4544      	cmp	r4, r8
1a005118:	9a08      	ldr	r2, [sp, #32]
1a00511a:	4623      	mov	r3, r4
1a00511c:	bfa8      	it	ge
1a00511e:	4643      	movge	r3, r8
1a005120:	1ad2      	subs	r2, r2, r3
1a005122:	9208      	str	r2, [sp, #32]
1a005124:	1ae4      	subs	r4, r4, r3
1a005126:	eba8 0803 	sub.w	r8, r8, r3
1a00512a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00512c:	b16b      	cbz	r3, 1a00514a <_dtoa_r+0x67a>
1a00512e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a005130:	2a00      	cmp	r2, #0
1a005132:	f000 8290 	beq.w	1a005656 <_dtoa_r+0xb86>
1a005136:	1bde      	subs	r6, r3, r7
1a005138:	2f00      	cmp	r7, #0
1a00513a:	f040 819b 	bne.w	1a005474 <_dtoa_r+0x9a4>
1a00513e:	4651      	mov	r1, sl
1a005140:	4632      	mov	r2, r6
1a005142:	4648      	mov	r0, r9
1a005144:	f001 fd64 	bl	1a006c10 <__pow5mult>
1a005148:	4682      	mov	sl, r0
1a00514a:	2101      	movs	r1, #1
1a00514c:	4648      	mov	r0, r9
1a00514e:	f001 fcaf 	bl	1a006ab0 <__i2b>
1a005152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005154:	4606      	mov	r6, r0
1a005156:	2a00      	cmp	r2, #0
1a005158:	f040 8125 	bne.w	1a0053a6 <_dtoa_r+0x8d6>
1a00515c:	9b02      	ldr	r3, [sp, #8]
1a00515e:	2b01      	cmp	r3, #1
1a005160:	f340 816c 	ble.w	1a00543c <_dtoa_r+0x96c>
1a005164:	2001      	movs	r0, #1
1a005166:	4440      	add	r0, r8
1a005168:	f010 001f 	ands.w	r0, r0, #31
1a00516c:	f000 8119 	beq.w	1a0053a2 <_dtoa_r+0x8d2>
1a005170:	f1c0 0320 	rsb	r3, r0, #32
1a005174:	2b04      	cmp	r3, #4
1a005176:	f340 83ac 	ble.w	1a0058d2 <_dtoa_r+0xe02>
1a00517a:	f1c0 001c 	rsb	r0, r0, #28
1a00517e:	9b08      	ldr	r3, [sp, #32]
1a005180:	4403      	add	r3, r0
1a005182:	9308      	str	r3, [sp, #32]
1a005184:	4404      	add	r4, r0
1a005186:	4480      	add	r8, r0
1a005188:	9b08      	ldr	r3, [sp, #32]
1a00518a:	2b00      	cmp	r3, #0
1a00518c:	dd05      	ble.n	1a00519a <_dtoa_r+0x6ca>
1a00518e:	4651      	mov	r1, sl
1a005190:	461a      	mov	r2, r3
1a005192:	4648      	mov	r0, r9
1a005194:	f001 fd8c 	bl	1a006cb0 <__lshift>
1a005198:	4682      	mov	sl, r0
1a00519a:	f1b8 0f00 	cmp.w	r8, #0
1a00519e:	dd05      	ble.n	1a0051ac <_dtoa_r+0x6dc>
1a0051a0:	4631      	mov	r1, r6
1a0051a2:	4642      	mov	r2, r8
1a0051a4:	4648      	mov	r0, r9
1a0051a6:	f001 fd83 	bl	1a006cb0 <__lshift>
1a0051aa:	4606      	mov	r6, r0
1a0051ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0051ae:	2b00      	cmp	r3, #0
1a0051b0:	d177      	bne.n	1a0052a2 <_dtoa_r+0x7d2>
1a0051b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0051b4:	2b00      	cmp	r3, #0
1a0051b6:	f340 8209 	ble.w	1a0055cc <_dtoa_r+0xafc>
1a0051ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0051bc:	2b00      	cmp	r3, #0
1a0051be:	f000 8089 	beq.w	1a0052d4 <_dtoa_r+0x804>
1a0051c2:	2c00      	cmp	r4, #0
1a0051c4:	f300 816b 	bgt.w	1a00549e <_dtoa_r+0x9ce>
1a0051c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0051ca:	2b00      	cmp	r3, #0
1a0051cc:	f040 81cd 	bne.w	1a00556a <_dtoa_r+0xa9a>
1a0051d0:	46a8      	mov	r8, r5
1a0051d2:	9a00      	ldr	r2, [sp, #0]
1a0051d4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
1a0051d8:	f002 0201 	and.w	r2, r2, #1
1a0051dc:	920a      	str	r2, [sp, #40]	; 0x28
1a0051de:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0051e0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
1a0051e4:	441a      	add	r2, r3
1a0051e6:	465f      	mov	r7, fp
1a0051e8:	9209      	str	r2, [sp, #36]	; 0x24
1a0051ea:	46b3      	mov	fp, r6
1a0051ec:	4659      	mov	r1, fp
1a0051ee:	4650      	mov	r0, sl
1a0051f0:	f7ff fbdc 	bl	1a0049ac <quorem>
1a0051f4:	4629      	mov	r1, r5
1a0051f6:	4604      	mov	r4, r0
1a0051f8:	4650      	mov	r0, sl
1a0051fa:	f001 fdaf 	bl	1a006d5c <__mcmp>
1a0051fe:	4659      	mov	r1, fp
1a005200:	4606      	mov	r6, r0
1a005202:	4642      	mov	r2, r8
1a005204:	4648      	mov	r0, r9
1a005206:	f001 fdc5 	bl	1a006d94 <__mdiff>
1a00520a:	f104 0330 	add.w	r3, r4, #48	; 0x30
1a00520e:	9300      	str	r3, [sp, #0]
1a005210:	68c3      	ldr	r3, [r0, #12]
1a005212:	4601      	mov	r1, r0
1a005214:	2b00      	cmp	r3, #0
1a005216:	f040 81d4 	bne.w	1a0055c2 <_dtoa_r+0xaf2>
1a00521a:	9008      	str	r0, [sp, #32]
1a00521c:	4650      	mov	r0, sl
1a00521e:	f001 fd9d 	bl	1a006d5c <__mcmp>
1a005222:	9a08      	ldr	r2, [sp, #32]
1a005224:	9007      	str	r0, [sp, #28]
1a005226:	4611      	mov	r1, r2
1a005228:	4648      	mov	r0, r9
1a00522a:	f001 fba7 	bl	1a00697c <_Bfree>
1a00522e:	9b07      	ldr	r3, [sp, #28]
1a005230:	b933      	cbnz	r3, 1a005240 <_dtoa_r+0x770>
1a005232:	9a02      	ldr	r2, [sp, #8]
1a005234:	b922      	cbnz	r2, 1a005240 <_dtoa_r+0x770>
1a005236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005238:	2b00      	cmp	r3, #0
1a00523a:	f000 8319 	beq.w	1a005870 <_dtoa_r+0xda0>
1a00523e:	9b02      	ldr	r3, [sp, #8]
1a005240:	2e00      	cmp	r6, #0
1a005242:	f2c0 821c 	blt.w	1a00567e <_dtoa_r+0xbae>
1a005246:	d105      	bne.n	1a005254 <_dtoa_r+0x784>
1a005248:	9a02      	ldr	r2, [sp, #8]
1a00524a:	b91a      	cbnz	r2, 1a005254 <_dtoa_r+0x784>
1a00524c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00524e:	2a00      	cmp	r2, #0
1a005250:	f000 8215 	beq.w	1a00567e <_dtoa_r+0xbae>
1a005254:	2b00      	cmp	r3, #0
1a005256:	f107 0401 	add.w	r4, r7, #1
1a00525a:	f300 8225 	bgt.w	1a0056a8 <_dtoa_r+0xbd8>
1a00525e:	9b00      	ldr	r3, [sp, #0]
1a005260:	703b      	strb	r3, [r7, #0]
1a005262:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005264:	42bb      	cmp	r3, r7
1a005266:	f000 8230 	beq.w	1a0056ca <_dtoa_r+0xbfa>
1a00526a:	4651      	mov	r1, sl
1a00526c:	2300      	movs	r3, #0
1a00526e:	220a      	movs	r2, #10
1a005270:	4648      	mov	r0, r9
1a005272:	f001 fb8d 	bl	1a006990 <__multadd>
1a005276:	4545      	cmp	r5, r8
1a005278:	4682      	mov	sl, r0
1a00527a:	4629      	mov	r1, r5
1a00527c:	f04f 0300 	mov.w	r3, #0
1a005280:	f04f 020a 	mov.w	r2, #10
1a005284:	4648      	mov	r0, r9
1a005286:	f000 8196 	beq.w	1a0055b6 <_dtoa_r+0xae6>
1a00528a:	f001 fb81 	bl	1a006990 <__multadd>
1a00528e:	4641      	mov	r1, r8
1a005290:	4605      	mov	r5, r0
1a005292:	2300      	movs	r3, #0
1a005294:	220a      	movs	r2, #10
1a005296:	4648      	mov	r0, r9
1a005298:	f001 fb7a 	bl	1a006990 <__multadd>
1a00529c:	4627      	mov	r7, r4
1a00529e:	4680      	mov	r8, r0
1a0052a0:	e7a4      	b.n	1a0051ec <_dtoa_r+0x71c>
1a0052a2:	4631      	mov	r1, r6
1a0052a4:	4650      	mov	r0, sl
1a0052a6:	f001 fd59 	bl	1a006d5c <__mcmp>
1a0052aa:	2800      	cmp	r0, #0
1a0052ac:	da81      	bge.n	1a0051b2 <_dtoa_r+0x6e2>
1a0052ae:	9f06      	ldr	r7, [sp, #24]
1a0052b0:	4651      	mov	r1, sl
1a0052b2:	2300      	movs	r3, #0
1a0052b4:	220a      	movs	r2, #10
1a0052b6:	4648      	mov	r0, r9
1a0052b8:	3f01      	subs	r7, #1
1a0052ba:	9706      	str	r7, [sp, #24]
1a0052bc:	f001 fb68 	bl	1a006990 <__multadd>
1a0052c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0052c2:	4682      	mov	sl, r0
1a0052c4:	2b00      	cmp	r3, #0
1a0052c6:	f040 82eb 	bne.w	1a0058a0 <_dtoa_r+0xdd0>
1a0052ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0052cc:	2b00      	cmp	r3, #0
1a0052ce:	f340 82f3 	ble.w	1a0058b8 <_dtoa_r+0xde8>
1a0052d2:	9309      	str	r3, [sp, #36]	; 0x24
1a0052d4:	465c      	mov	r4, fp
1a0052d6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0052da:	e002      	b.n	1a0052e2 <_dtoa_r+0x812>
1a0052dc:	f001 fb58 	bl	1a006990 <__multadd>
1a0052e0:	4682      	mov	sl, r0
1a0052e2:	4631      	mov	r1, r6
1a0052e4:	4650      	mov	r0, sl
1a0052e6:	f7ff fb61 	bl	1a0049ac <quorem>
1a0052ea:	f100 0730 	add.w	r7, r0, #48	; 0x30
1a0052ee:	f804 7b01 	strb.w	r7, [r4], #1
1a0052f2:	eba4 030b 	sub.w	r3, r4, fp
1a0052f6:	4598      	cmp	r8, r3
1a0052f8:	f04f 020a 	mov.w	r2, #10
1a0052fc:	f04f 0300 	mov.w	r3, #0
1a005300:	4651      	mov	r1, sl
1a005302:	4648      	mov	r0, r9
1a005304:	dcea      	bgt.n	1a0052dc <_dtoa_r+0x80c>
1a005306:	2300      	movs	r3, #0
1a005308:	9700      	str	r7, [sp, #0]
1a00530a:	9302      	str	r3, [sp, #8]
1a00530c:	4651      	mov	r1, sl
1a00530e:	2201      	movs	r2, #1
1a005310:	4648      	mov	r0, r9
1a005312:	f001 fccd 	bl	1a006cb0 <__lshift>
1a005316:	4631      	mov	r1, r6
1a005318:	4682      	mov	sl, r0
1a00531a:	f001 fd1f 	bl	1a006d5c <__mcmp>
1a00531e:	2800      	cmp	r0, #0
1a005320:	f814 2c01 	ldrb.w	r2, [r4, #-1]
1a005324:	dc14      	bgt.n	1a005350 <_dtoa_r+0x880>
1a005326:	d108      	bne.n	1a00533a <_dtoa_r+0x86a>
1a005328:	9b00      	ldr	r3, [sp, #0]
1a00532a:	07db      	lsls	r3, r3, #31
1a00532c:	d410      	bmi.n	1a005350 <_dtoa_r+0x880>
1a00532e:	e004      	b.n	1a00533a <_dtoa_r+0x86a>
1a005330:	40240000 	.word	0x40240000
1a005334:	f814 2c02 	ldrb.w	r2, [r4, #-2]
1a005338:	461c      	mov	r4, r3
1a00533a:	2a30      	cmp	r2, #48	; 0x30
1a00533c:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
1a005340:	d0f8      	beq.n	1a005334 <_dtoa_r+0x864>
1a005342:	e00b      	b.n	1a00535c <_dtoa_r+0x88c>
1a005344:	459b      	cmp	fp, r3
1a005346:	f000 814e 	beq.w	1a0055e6 <_dtoa_r+0xb16>
1a00534a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a00534e:	461c      	mov	r4, r3
1a005350:	2a39      	cmp	r2, #57	; 0x39
1a005352:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
1a005356:	d0f5      	beq.n	1a005344 <_dtoa_r+0x874>
1a005358:	3201      	adds	r2, #1
1a00535a:	701a      	strb	r2, [r3, #0]
1a00535c:	4631      	mov	r1, r6
1a00535e:	4648      	mov	r0, r9
1a005360:	f001 fb0c 	bl	1a00697c <_Bfree>
1a005364:	b155      	cbz	r5, 1a00537c <_dtoa_r+0x8ac>
1a005366:	9902      	ldr	r1, [sp, #8]
1a005368:	b121      	cbz	r1, 1a005374 <_dtoa_r+0x8a4>
1a00536a:	42a9      	cmp	r1, r5
1a00536c:	d002      	beq.n	1a005374 <_dtoa_r+0x8a4>
1a00536e:	4648      	mov	r0, r9
1a005370:	f001 fb04 	bl	1a00697c <_Bfree>
1a005374:	4629      	mov	r1, r5
1a005376:	4648      	mov	r0, r9
1a005378:	f001 fb00 	bl	1a00697c <_Bfree>
1a00537c:	4651      	mov	r1, sl
1a00537e:	4648      	mov	r0, r9
1a005380:	f001 fafc 	bl	1a00697c <_Bfree>
1a005384:	2200      	movs	r2, #0
1a005386:	9b06      	ldr	r3, [sp, #24]
1a005388:	7022      	strb	r2, [r4, #0]
1a00538a:	9a05      	ldr	r2, [sp, #20]
1a00538c:	3301      	adds	r3, #1
1a00538e:	6013      	str	r3, [r2, #0]
1a005390:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a005392:	2b00      	cmp	r3, #0
1a005394:	f43f abdb 	beq.w	1a004b4e <_dtoa_r+0x7e>
1a005398:	4658      	mov	r0, fp
1a00539a:	601c      	str	r4, [r3, #0]
1a00539c:	b01b      	add	sp, #108	; 0x6c
1a00539e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0053a2:	201c      	movs	r0, #28
1a0053a4:	e6eb      	b.n	1a00517e <_dtoa_r+0x6ae>
1a0053a6:	4601      	mov	r1, r0
1a0053a8:	4648      	mov	r0, r9
1a0053aa:	f001 fc31 	bl	1a006c10 <__pow5mult>
1a0053ae:	9b02      	ldr	r3, [sp, #8]
1a0053b0:	2b01      	cmp	r3, #1
1a0053b2:	4606      	mov	r6, r0
1a0053b4:	f340 80d4 	ble.w	1a005560 <_dtoa_r+0xa90>
1a0053b8:	2300      	movs	r3, #0
1a0053ba:	930c      	str	r3, [sp, #48]	; 0x30
1a0053bc:	6933      	ldr	r3, [r6, #16]
1a0053be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1a0053c2:	6918      	ldr	r0, [r3, #16]
1a0053c4:	f001 fb24 	bl	1a006a10 <__hi0bits>
1a0053c8:	f1c0 0020 	rsb	r0, r0, #32
1a0053cc:	e6cb      	b.n	1a005166 <_dtoa_r+0x696>
1a0053ce:	900d      	str	r0, [sp, #52]	; 0x34
1a0053d0:	e42a      	b.n	1a004c28 <_dtoa_r+0x158>
1a0053d2:	2501      	movs	r5, #1
1a0053d4:	e440      	b.n	1a004c58 <_dtoa_r+0x188>
1a0053d6:	f1c3 0820 	rsb	r8, r3, #32
1a0053da:	9b00      	ldr	r3, [sp, #0]
1a0053dc:	fa03 f008 	lsl.w	r0, r3, r8
1a0053e0:	f7ff bbd8 	b.w	1a004b94 <_dtoa_r+0xc4>
1a0053e4:	2300      	movs	r3, #0
1a0053e6:	930a      	str	r3, [sp, #40]	; 0x28
1a0053e8:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
1a0053ec:	4413      	add	r3, r2
1a0053ee:	930e      	str	r3, [sp, #56]	; 0x38
1a0053f0:	3301      	adds	r3, #1
1a0053f2:	2b01      	cmp	r3, #1
1a0053f4:	461e      	mov	r6, r3
1a0053f6:	9309      	str	r3, [sp, #36]	; 0x24
1a0053f8:	bfb8      	it	lt
1a0053fa:	2601      	movlt	r6, #1
1a0053fc:	2100      	movs	r1, #0
1a0053fe:	2e17      	cmp	r6, #23
1a005400:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
1a005404:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a005406:	f77f ac89 	ble.w	1a004d1c <_dtoa_r+0x24c>
1a00540a:	2201      	movs	r2, #1
1a00540c:	2304      	movs	r3, #4
1a00540e:	005b      	lsls	r3, r3, #1
1a005410:	f103 0014 	add.w	r0, r3, #20
1a005414:	42b0      	cmp	r0, r6
1a005416:	4611      	mov	r1, r2
1a005418:	f102 0201 	add.w	r2, r2, #1
1a00541c:	d9f7      	bls.n	1a00540e <_dtoa_r+0x93e>
1a00541e:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
1a005422:	e47b      	b.n	1a004d1c <_dtoa_r+0x24c>
1a005424:	2300      	movs	r3, #0
1a005426:	930a      	str	r3, [sp, #40]	; 0x28
1a005428:	9e07      	ldr	r6, [sp, #28]
1a00542a:	2e00      	cmp	r6, #0
1a00542c:	f340 80e2 	ble.w	1a0055f4 <_dtoa_r+0xb24>
1a005430:	960e      	str	r6, [sp, #56]	; 0x38
1a005432:	9609      	str	r6, [sp, #36]	; 0x24
1a005434:	e7e2      	b.n	1a0053fc <_dtoa_r+0x92c>
1a005436:	2301      	movs	r3, #1
1a005438:	930a      	str	r3, [sp, #40]	; 0x28
1a00543a:	e7f5      	b.n	1a005428 <_dtoa_r+0x958>
1a00543c:	9b00      	ldr	r3, [sp, #0]
1a00543e:	2b00      	cmp	r3, #0
1a005440:	f47f ae90 	bne.w	1a005164 <_dtoa_r+0x694>
1a005444:	e9dd 1200 	ldrd	r1, r2, [sp]
1a005448:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a00544c:	2b00      	cmp	r3, #0
1a00544e:	f040 8192 	bne.w	1a005776 <_dtoa_r+0xca6>
1a005452:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
1a005456:	0d1b      	lsrs	r3, r3, #20
1a005458:	051b      	lsls	r3, r3, #20
1a00545a:	b12b      	cbz	r3, 1a005468 <_dtoa_r+0x998>
1a00545c:	9b08      	ldr	r3, [sp, #32]
1a00545e:	3301      	adds	r3, #1
1a005460:	9308      	str	r3, [sp, #32]
1a005462:	f108 0801 	add.w	r8, r8, #1
1a005466:	2301      	movs	r3, #1
1a005468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a00546a:	930c      	str	r3, [sp, #48]	; 0x30
1a00546c:	2a00      	cmp	r2, #0
1a00546e:	f43f ae79 	beq.w	1a005164 <_dtoa_r+0x694>
1a005472:	e7a3      	b.n	1a0053bc <_dtoa_r+0x8ec>
1a005474:	463a      	mov	r2, r7
1a005476:	4629      	mov	r1, r5
1a005478:	4648      	mov	r0, r9
1a00547a:	f001 fbc9 	bl	1a006c10 <__pow5mult>
1a00547e:	4652      	mov	r2, sl
1a005480:	4601      	mov	r1, r0
1a005482:	4605      	mov	r5, r0
1a005484:	4648      	mov	r0, r9
1a005486:	f001 fb1d 	bl	1a006ac4 <__multiply>
1a00548a:	4651      	mov	r1, sl
1a00548c:	4607      	mov	r7, r0
1a00548e:	4648      	mov	r0, r9
1a005490:	f001 fa74 	bl	1a00697c <_Bfree>
1a005494:	46ba      	mov	sl, r7
1a005496:	2e00      	cmp	r6, #0
1a005498:	f43f ae57 	beq.w	1a00514a <_dtoa_r+0x67a>
1a00549c:	e64f      	b.n	1a00513e <_dtoa_r+0x66e>
1a00549e:	4629      	mov	r1, r5
1a0054a0:	4622      	mov	r2, r4
1a0054a2:	4648      	mov	r0, r9
1a0054a4:	f001 fc04 	bl	1a006cb0 <__lshift>
1a0054a8:	4605      	mov	r5, r0
1a0054aa:	e68d      	b.n	1a0051c8 <_dtoa_r+0x6f8>
1a0054ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a0054ae:	2a00      	cmp	r2, #0
1a0054b0:	f000 815d 	beq.w	1a00576e <_dtoa_r+0xc9e>
1a0054b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a0054b8:	9a08      	ldr	r2, [sp, #32]
1a0054ba:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1a0054bc:	4614      	mov	r4, r2
1a0054be:	441a      	add	r2, r3
1a0054c0:	4498      	add	r8, r3
1a0054c2:	9208      	str	r2, [sp, #32]
1a0054c4:	e5f7      	b.n	1a0050b6 <_dtoa_r+0x5e6>
1a0054c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0054c8:	2b00      	cmp	r3, #0
1a0054ca:	f73f ad3e 	bgt.w	1a004f4a <_dtoa_r+0x47a>
1a0054ce:	f040 80bc 	bne.w	1a00564a <_dtoa_r+0xb7a>
1a0054d2:	ec51 0b17 	vmov	r0, r1, d7
1a0054d6:	2200      	movs	r2, #0
1a0054d8:	4bb2      	ldr	r3, [pc, #712]	; (1a0057a4 <_dtoa_r+0xcd4>)
1a0054da:	f7fc fe29 	bl	1a002130 <__aeabi_dmul>
1a0054de:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0054e2:	f7fd f8ab 	bl	1a00263c <__aeabi_dcmpge>
1a0054e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
1a0054e8:	4635      	mov	r5, r6
1a0054ea:	2800      	cmp	r0, #0
1a0054ec:	d176      	bne.n	1a0055dc <_dtoa_r+0xb0c>
1a0054ee:	9a06      	ldr	r2, [sp, #24]
1a0054f0:	2331      	movs	r3, #49	; 0x31
1a0054f2:	3201      	adds	r2, #1
1a0054f4:	9206      	str	r2, [sp, #24]
1a0054f6:	f88b 3000 	strb.w	r3, [fp]
1a0054fa:	f10b 0401 	add.w	r4, fp, #1
1a0054fe:	4631      	mov	r1, r6
1a005500:	4648      	mov	r0, r9
1a005502:	f001 fa3b 	bl	1a00697c <_Bfree>
1a005506:	2d00      	cmp	r5, #0
1a005508:	f47f af34 	bne.w	1a005374 <_dtoa_r+0x8a4>
1a00550c:	e736      	b.n	1a00537c <_dtoa_r+0x8ac>
1a00550e:	f000 8142 	beq.w	1a005796 <_dtoa_r+0xcc6>
1a005512:	9b06      	ldr	r3, [sp, #24]
1a005514:	425c      	negs	r4, r3
1a005516:	4ba4      	ldr	r3, [pc, #656]	; (1a0057a8 <_dtoa_r+0xcd8>)
1a005518:	f004 020f 	and.w	r2, r4, #15
1a00551c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005520:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005524:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a005528:	f7fc fe02 	bl	1a002130 <__aeabi_dmul>
1a00552c:	1124      	asrs	r4, r4, #4
1a00552e:	e9cd 0100 	strd	r0, r1, [sp]
1a005532:	f000 81c6 	beq.w	1a0058c2 <_dtoa_r+0xdf2>
1a005536:	4d9d      	ldr	r5, [pc, #628]	; (1a0057ac <_dtoa_r+0xcdc>)
1a005538:	2300      	movs	r3, #0
1a00553a:	2602      	movs	r6, #2
1a00553c:	07e7      	lsls	r7, r4, #31
1a00553e:	d505      	bpl.n	1a00554c <_dtoa_r+0xa7c>
1a005540:	e9d5 2300 	ldrd	r2, r3, [r5]
1a005544:	f7fc fdf4 	bl	1a002130 <__aeabi_dmul>
1a005548:	3601      	adds	r6, #1
1a00554a:	2301      	movs	r3, #1
1a00554c:	1064      	asrs	r4, r4, #1
1a00554e:	f105 0508 	add.w	r5, r5, #8
1a005552:	d1f3      	bne.n	1a00553c <_dtoa_r+0xa6c>
1a005554:	2b00      	cmp	r3, #0
1a005556:	f43f ac27 	beq.w	1a004da8 <_dtoa_r+0x2d8>
1a00555a:	e9cd 0100 	strd	r0, r1, [sp]
1a00555e:	e423      	b.n	1a004da8 <_dtoa_r+0x2d8>
1a005560:	9b00      	ldr	r3, [sp, #0]
1a005562:	2b00      	cmp	r3, #0
1a005564:	f43f af6e 	beq.w	1a005444 <_dtoa_r+0x974>
1a005568:	e726      	b.n	1a0053b8 <_dtoa_r+0x8e8>
1a00556a:	6869      	ldr	r1, [r5, #4]
1a00556c:	4648      	mov	r0, r9
1a00556e:	f001 f9df 	bl	1a006930 <_Balloc>
1a005572:	692b      	ldr	r3, [r5, #16]
1a005574:	3302      	adds	r3, #2
1a005576:	009a      	lsls	r2, r3, #2
1a005578:	4604      	mov	r4, r0
1a00557a:	f105 010c 	add.w	r1, r5, #12
1a00557e:	300c      	adds	r0, #12
1a005580:	f7fd fa64 	bl	1a002a4c <memcpy>
1a005584:	4621      	mov	r1, r4
1a005586:	2201      	movs	r2, #1
1a005588:	4648      	mov	r0, r9
1a00558a:	f001 fb91 	bl	1a006cb0 <__lshift>
1a00558e:	4680      	mov	r8, r0
1a005590:	e61f      	b.n	1a0051d2 <_dtoa_r+0x702>
1a005592:	2400      	movs	r4, #0
1a005594:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
1a005598:	4621      	mov	r1, r4
1a00559a:	4648      	mov	r0, r9
1a00559c:	f001 f9c8 	bl	1a006930 <_Balloc>
1a0055a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0055a4:	930e      	str	r3, [sp, #56]	; 0x38
1a0055a6:	9309      	str	r3, [sp, #36]	; 0x24
1a0055a8:	2301      	movs	r3, #1
1a0055aa:	4683      	mov	fp, r0
1a0055ac:	9407      	str	r4, [sp, #28]
1a0055ae:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
1a0055b2:	930a      	str	r3, [sp, #40]	; 0x28
1a0055b4:	e4b6      	b.n	1a004f24 <_dtoa_r+0x454>
1a0055b6:	f001 f9eb 	bl	1a006990 <__multadd>
1a0055ba:	4627      	mov	r7, r4
1a0055bc:	4605      	mov	r5, r0
1a0055be:	4680      	mov	r8, r0
1a0055c0:	e614      	b.n	1a0051ec <_dtoa_r+0x71c>
1a0055c2:	4648      	mov	r0, r9
1a0055c4:	f001 f9da 	bl	1a00697c <_Bfree>
1a0055c8:	2301      	movs	r3, #1
1a0055ca:	e639      	b.n	1a005240 <_dtoa_r+0x770>
1a0055cc:	9b02      	ldr	r3, [sp, #8]
1a0055ce:	2b02      	cmp	r3, #2
1a0055d0:	f77f adf3 	ble.w	1a0051ba <_dtoa_r+0x6ea>
1a0055d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0055d6:	2b00      	cmp	r3, #0
1a0055d8:	f000 80cf 	beq.w	1a00577a <_dtoa_r+0xcaa>
1a0055dc:	9b07      	ldr	r3, [sp, #28]
1a0055de:	43db      	mvns	r3, r3
1a0055e0:	9306      	str	r3, [sp, #24]
1a0055e2:	465c      	mov	r4, fp
1a0055e4:	e78b      	b.n	1a0054fe <_dtoa_r+0xa2e>
1a0055e6:	9a06      	ldr	r2, [sp, #24]
1a0055e8:	2331      	movs	r3, #49	; 0x31
1a0055ea:	3201      	adds	r2, #1
1a0055ec:	9206      	str	r2, [sp, #24]
1a0055ee:	f88b 3000 	strb.w	r3, [fp]
1a0055f2:	e6b3      	b.n	1a00535c <_dtoa_r+0x88c>
1a0055f4:	2401      	movs	r4, #1
1a0055f6:	9409      	str	r4, [sp, #36]	; 0x24
1a0055f8:	9407      	str	r4, [sp, #28]
1a0055fa:	f7ff bb8b 	b.w	1a004d14 <_dtoa_r+0x244>
1a0055fe:	4630      	mov	r0, r6
1a005600:	f7fc fd2c 	bl	1a00205c <__aeabi_i2d>
1a005604:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005608:	f7fc fd92 	bl	1a002130 <__aeabi_dmul>
1a00560c:	2200      	movs	r2, #0
1a00560e:	4b68      	ldr	r3, [pc, #416]	; (1a0057b0 <_dtoa_r+0xce0>)
1a005610:	f7fc fbd8 	bl	1a001dc4 <__adddf3>
1a005614:	4606      	mov	r6, r0
1a005616:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a00561a:	2200      	movs	r2, #0
1a00561c:	4b61      	ldr	r3, [pc, #388]	; (1a0057a4 <_dtoa_r+0xcd4>)
1a00561e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005622:	f7fc fbcd 	bl	1a001dc0 <__aeabi_dsub>
1a005626:	4632      	mov	r2, r6
1a005628:	463b      	mov	r3, r7
1a00562a:	4604      	mov	r4, r0
1a00562c:	460d      	mov	r5, r1
1a00562e:	f7fd f80f 	bl	1a002650 <__aeabi_dcmpgt>
1a005632:	2800      	cmp	r0, #0
1a005634:	d14f      	bne.n	1a0056d6 <_dtoa_r+0xc06>
1a005636:	4632      	mov	r2, r6
1a005638:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
1a00563c:	4620      	mov	r0, r4
1a00563e:	4629      	mov	r1, r5
1a005640:	f7fc ffe8 	bl	1a002614 <__aeabi_dcmplt>
1a005644:	2800      	cmp	r0, #0
1a005646:	f43f ac69 	beq.w	1a004f1c <_dtoa_r+0x44c>
1a00564a:	2600      	movs	r6, #0
1a00564c:	4635      	mov	r5, r6
1a00564e:	e7c5      	b.n	1a0055dc <_dtoa_r+0xb0c>
1a005650:	2301      	movs	r3, #1
1a005652:	930a      	str	r3, [sp, #40]	; 0x28
1a005654:	e6c8      	b.n	1a0053e8 <_dtoa_r+0x918>
1a005656:	4651      	mov	r1, sl
1a005658:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a00565a:	4648      	mov	r0, r9
1a00565c:	f001 fad8 	bl	1a006c10 <__pow5mult>
1a005660:	4682      	mov	sl, r0
1a005662:	e572      	b.n	1a00514a <_dtoa_r+0x67a>
1a005664:	f8dd a000 	ldr.w	sl, [sp]
1a005668:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a00566c:	e686      	b.n	1a00537c <_dtoa_r+0x8ac>
1a00566e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005672:	1afb      	subs	r3, r7, r3
1a005674:	441a      	add	r2, r3
1a005676:	e9cd 720b 	strd	r7, r2, [sp, #44]	; 0x2c
1a00567a:	2700      	movs	r7, #0
1a00567c:	e512      	b.n	1a0050a4 <_dtoa_r+0x5d4>
1a00567e:	2b00      	cmp	r3, #0
1a005680:	9402      	str	r4, [sp, #8]
1a005682:	465e      	mov	r6, fp
1a005684:	f107 0401 	add.w	r4, r7, #1
1a005688:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a00568c:	f300 80ba 	bgt.w	1a005804 <_dtoa_r+0xd34>
1a005690:	9b00      	ldr	r3, [sp, #0]
1a005692:	9502      	str	r5, [sp, #8]
1a005694:	703b      	strb	r3, [r7, #0]
1a005696:	4645      	mov	r5, r8
1a005698:	e660      	b.n	1a00535c <_dtoa_r+0x88c>
1a00569a:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a00569e:	2602      	movs	r6, #2
1a0056a0:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
1a0056a4:	f7ff bb67 	b.w	1a004d76 <_dtoa_r+0x2a6>
1a0056a8:	9b00      	ldr	r3, [sp, #0]
1a0056aa:	2b39      	cmp	r3, #57	; 0x39
1a0056ac:	465e      	mov	r6, fp
1a0056ae:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a0056b2:	f000 80b9 	beq.w	1a005828 <_dtoa_r+0xd58>
1a0056b6:	9b00      	ldr	r3, [sp, #0]
1a0056b8:	9502      	str	r5, [sp, #8]
1a0056ba:	3301      	adds	r3, #1
1a0056bc:	703b      	strb	r3, [r7, #0]
1a0056be:	4645      	mov	r5, r8
1a0056c0:	e64c      	b.n	1a00535c <_dtoa_r+0x88c>
1a0056c2:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
1a0056c6:	1a9c      	subs	r4, r3, r2
1a0056c8:	e4f5      	b.n	1a0050b6 <_dtoa_r+0x5e6>
1a0056ca:	465e      	mov	r6, fp
1a0056cc:	9502      	str	r5, [sp, #8]
1a0056ce:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a0056d2:	4645      	mov	r5, r8
1a0056d4:	e61a      	b.n	1a00530c <_dtoa_r+0x83c>
1a0056d6:	2600      	movs	r6, #0
1a0056d8:	4635      	mov	r5, r6
1a0056da:	e708      	b.n	1a0054ee <_dtoa_r+0xa1e>
1a0056dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
1a0056e0:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0056e4:	f7fc fd24 	bl	1a002130 <__aeabi_dmul>
1a0056e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0056ea:	f88b 5000 	strb.w	r5, [fp]
1a0056ee:	2b01      	cmp	r3, #1
1a0056f0:	e9cd 0100 	strd	r0, r1, [sp]
1a0056f4:	d020      	beq.n	1a005738 <_dtoa_r+0xc68>
1a0056f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0056f8:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
1a0056fc:	445b      	add	r3, fp
1a0056fe:	4698      	mov	r8, r3
1a005700:	2200      	movs	r2, #0
1a005702:	4b2c      	ldr	r3, [pc, #176]	; (1a0057b4 <_dtoa_r+0xce4>)
1a005704:	4630      	mov	r0, r6
1a005706:	4639      	mov	r1, r7
1a005708:	f7fc fd12 	bl	1a002130 <__aeabi_dmul>
1a00570c:	460f      	mov	r7, r1
1a00570e:	4606      	mov	r6, r0
1a005710:	f002 f89c 	bl	1a00784c <__aeabi_d2iz>
1a005714:	4605      	mov	r5, r0
1a005716:	f7fc fca1 	bl	1a00205c <__aeabi_i2d>
1a00571a:	3530      	adds	r5, #48	; 0x30
1a00571c:	4602      	mov	r2, r0
1a00571e:	460b      	mov	r3, r1
1a005720:	4630      	mov	r0, r6
1a005722:	4639      	mov	r1, r7
1a005724:	f7fc fb4c 	bl	1a001dc0 <__aeabi_dsub>
1a005728:	f804 5b01 	strb.w	r5, [r4], #1
1a00572c:	4544      	cmp	r4, r8
1a00572e:	4606      	mov	r6, r0
1a005730:	460f      	mov	r7, r1
1a005732:	d1e5      	bne.n	1a005700 <_dtoa_r+0xc30>
1a005734:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
1a005738:	4b1f      	ldr	r3, [pc, #124]	; (1a0057b8 <_dtoa_r+0xce8>)
1a00573a:	2200      	movs	r2, #0
1a00573c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005740:	f7fc fb40 	bl	1a001dc4 <__adddf3>
1a005744:	4632      	mov	r2, r6
1a005746:	463b      	mov	r3, r7
1a005748:	f7fc ff64 	bl	1a002614 <__aeabi_dcmplt>
1a00574c:	2800      	cmp	r0, #0
1a00574e:	d070      	beq.n	1a005832 <_dtoa_r+0xd62>
1a005750:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a005752:	9306      	str	r3, [sp, #24]
1a005754:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a005758:	e48f      	b.n	1a00507a <_dtoa_r+0x5aa>
1a00575a:	2330      	movs	r3, #48	; 0x30
1a00575c:	f88b 3000 	strb.w	r3, [fp]
1a005760:	9b06      	ldr	r3, [sp, #24]
1a005762:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a005766:	3301      	adds	r3, #1
1a005768:	9306      	str	r3, [sp, #24]
1a00576a:	465b      	mov	r3, fp
1a00576c:	e489      	b.n	1a005082 <_dtoa_r+0x5b2>
1a00576e:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a005770:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a005774:	e6a0      	b.n	1a0054b8 <_dtoa_r+0x9e8>
1a005776:	2300      	movs	r3, #0
1a005778:	e676      	b.n	1a005468 <_dtoa_r+0x998>
1a00577a:	4631      	mov	r1, r6
1a00577c:	2205      	movs	r2, #5
1a00577e:	4648      	mov	r0, r9
1a005780:	f001 f906 	bl	1a006990 <__multadd>
1a005784:	4601      	mov	r1, r0
1a005786:	4606      	mov	r6, r0
1a005788:	4650      	mov	r0, sl
1a00578a:	f001 fae7 	bl	1a006d5c <__mcmp>
1a00578e:	2800      	cmp	r0, #0
1a005790:	f73f aead 	bgt.w	1a0054ee <_dtoa_r+0xa1e>
1a005794:	e722      	b.n	1a0055dc <_dtoa_r+0xb0c>
1a005796:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a00579a:	2602      	movs	r6, #2
1a00579c:	ed8d 7b00 	vstr	d7, [sp]
1a0057a0:	f7ff bb02 	b.w	1a004da8 <_dtoa_r+0x2d8>
1a0057a4:	40140000 	.word	0x40140000
1a0057a8:	1a007cf8 	.word	0x1a007cf8
1a0057ac:	1a007cd0 	.word	0x1a007cd0
1a0057b0:	401c0000 	.word	0x401c0000
1a0057b4:	40240000 	.word	0x40240000
1a0057b8:	3fe00000 	.word	0x3fe00000
1a0057bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0057be:	2b00      	cmp	r3, #0
1a0057c0:	f43f af1d 	beq.w	1a0055fe <_dtoa_r+0xb2e>
1a0057c4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1a0057c6:	2c00      	cmp	r4, #0
1a0057c8:	f77f aba8 	ble.w	1a004f1c <_dtoa_r+0x44c>
1a0057cc:	2200      	movs	r2, #0
1a0057ce:	4b45      	ldr	r3, [pc, #276]	; (1a0058e4 <_dtoa_r+0xe14>)
1a0057d0:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0057d4:	f7fc fcac 	bl	1a002130 <__aeabi_dmul>
1a0057d8:	e9cd 0100 	strd	r0, r1, [sp]
1a0057dc:	1c70      	adds	r0, r6, #1
1a0057de:	f7fc fc3d 	bl	1a00205c <__aeabi_i2d>
1a0057e2:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0057e6:	f7fc fca3 	bl	1a002130 <__aeabi_dmul>
1a0057ea:	4b3f      	ldr	r3, [pc, #252]	; (1a0058e8 <_dtoa_r+0xe18>)
1a0057ec:	2200      	movs	r2, #0
1a0057ee:	f7fc fae9 	bl	1a001dc4 <__adddf3>
1a0057f2:	9b06      	ldr	r3, [sp, #24]
1a0057f4:	9412      	str	r4, [sp, #72]	; 0x48
1a0057f6:	3b01      	subs	r3, #1
1a0057f8:	4606      	mov	r6, r0
1a0057fa:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a0057fe:	9316      	str	r3, [sp, #88]	; 0x58
1a005800:	f7ff baf3 	b.w	1a004dea <_dtoa_r+0x31a>
1a005804:	4651      	mov	r1, sl
1a005806:	2201      	movs	r2, #1
1a005808:	4648      	mov	r0, r9
1a00580a:	f001 fa51 	bl	1a006cb0 <__lshift>
1a00580e:	4631      	mov	r1, r6
1a005810:	4682      	mov	sl, r0
1a005812:	f001 faa3 	bl	1a006d5c <__mcmp>
1a005816:	2800      	cmp	r0, #0
1a005818:	dd3b      	ble.n	1a005892 <_dtoa_r+0xdc2>
1a00581a:	9b00      	ldr	r3, [sp, #0]
1a00581c:	2b39      	cmp	r3, #57	; 0x39
1a00581e:	d003      	beq.n	1a005828 <_dtoa_r+0xd58>
1a005820:	9b02      	ldr	r3, [sp, #8]
1a005822:	3331      	adds	r3, #49	; 0x31
1a005824:	9300      	str	r3, [sp, #0]
1a005826:	e733      	b.n	1a005690 <_dtoa_r+0xbc0>
1a005828:	2239      	movs	r2, #57	; 0x39
1a00582a:	9502      	str	r5, [sp, #8]
1a00582c:	703a      	strb	r2, [r7, #0]
1a00582e:	4645      	mov	r5, r8
1a005830:	e58e      	b.n	1a005350 <_dtoa_r+0x880>
1a005832:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005836:	2000      	movs	r0, #0
1a005838:	492c      	ldr	r1, [pc, #176]	; (1a0058ec <_dtoa_r+0xe1c>)
1a00583a:	f7fc fac1 	bl	1a001dc0 <__aeabi_dsub>
1a00583e:	4632      	mov	r2, r6
1a005840:	463b      	mov	r3, r7
1a005842:	f7fc ff05 	bl	1a002650 <__aeabi_dcmpgt>
1a005846:	b910      	cbnz	r0, 1a00584e <_dtoa_r+0xd7e>
1a005848:	f7ff bb68 	b.w	1a004f1c <_dtoa_r+0x44c>
1a00584c:	4614      	mov	r4, r2
1a00584e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
1a005852:	2b30      	cmp	r3, #48	; 0x30
1a005854:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a005858:	d0f8      	beq.n	1a00584c <_dtoa_r+0xd7c>
1a00585a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00585c:	9306      	str	r3, [sp, #24]
1a00585e:	e58d      	b.n	1a00537c <_dtoa_r+0x8ac>
1a005860:	46d9      	mov	r9, fp
1a005862:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a005866:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
1a00586a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00586c:	9306      	str	r3, [sp, #24]
1a00586e:	e404      	b.n	1a00507a <_dtoa_r+0x5aa>
1a005870:	9b00      	ldr	r3, [sp, #0]
1a005872:	2b39      	cmp	r3, #57	; 0x39
1a005874:	4621      	mov	r1, r4
1a005876:	4632      	mov	r2, r6
1a005878:	f107 0401 	add.w	r4, r7, #1
1a00587c:	465e      	mov	r6, fp
1a00587e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a005882:	d0d1      	beq.n	1a005828 <_dtoa_r+0xd58>
1a005884:	2a00      	cmp	r2, #0
1a005886:	f77f af03 	ble.w	1a005690 <_dtoa_r+0xbc0>
1a00588a:	460b      	mov	r3, r1
1a00588c:	3331      	adds	r3, #49	; 0x31
1a00588e:	9300      	str	r3, [sp, #0]
1a005890:	e6fe      	b.n	1a005690 <_dtoa_r+0xbc0>
1a005892:	f47f aefd 	bne.w	1a005690 <_dtoa_r+0xbc0>
1a005896:	9b00      	ldr	r3, [sp, #0]
1a005898:	07da      	lsls	r2, r3, #31
1a00589a:	f57f aef9 	bpl.w	1a005690 <_dtoa_r+0xbc0>
1a00589e:	e7bc      	b.n	1a00581a <_dtoa_r+0xd4a>
1a0058a0:	4629      	mov	r1, r5
1a0058a2:	2300      	movs	r3, #0
1a0058a4:	220a      	movs	r2, #10
1a0058a6:	4648      	mov	r0, r9
1a0058a8:	f001 f872 	bl	1a006990 <__multadd>
1a0058ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0058ae:	2b00      	cmp	r3, #0
1a0058b0:	4605      	mov	r5, r0
1a0058b2:	dd09      	ble.n	1a0058c8 <_dtoa_r+0xdf8>
1a0058b4:	9309      	str	r3, [sp, #36]	; 0x24
1a0058b6:	e484      	b.n	1a0051c2 <_dtoa_r+0x6f2>
1a0058b8:	9b02      	ldr	r3, [sp, #8]
1a0058ba:	2b02      	cmp	r3, #2
1a0058bc:	dc0e      	bgt.n	1a0058dc <_dtoa_r+0xe0c>
1a0058be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0058c0:	e507      	b.n	1a0052d2 <_dtoa_r+0x802>
1a0058c2:	2602      	movs	r6, #2
1a0058c4:	f7ff ba70 	b.w	1a004da8 <_dtoa_r+0x2d8>
1a0058c8:	9b02      	ldr	r3, [sp, #8]
1a0058ca:	2b02      	cmp	r3, #2
1a0058cc:	dc06      	bgt.n	1a0058dc <_dtoa_r+0xe0c>
1a0058ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0058d0:	e7f0      	b.n	1a0058b4 <_dtoa_r+0xde4>
1a0058d2:	f43f ac59 	beq.w	1a005188 <_dtoa_r+0x6b8>
1a0058d6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a0058da:	e450      	b.n	1a00517e <_dtoa_r+0x6ae>
1a0058dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0058de:	9309      	str	r3, [sp, #36]	; 0x24
1a0058e0:	e678      	b.n	1a0055d4 <_dtoa_r+0xb04>
1a0058e2:	bf00      	nop
1a0058e4:	40240000 	.word	0x40240000
1a0058e8:	401c0000 	.word	0x401c0000
1a0058ec:	3fe00000 	.word	0x3fe00000

1a0058f0 <__sflush_r>:
1a0058f0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a0058f4:	b29a      	uxth	r2, r3
1a0058f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0058fa:	460c      	mov	r4, r1
1a0058fc:	0711      	lsls	r1, r2, #28
1a0058fe:	4680      	mov	r8, r0
1a005900:	d444      	bmi.n	1a00598c <__sflush_r+0x9c>
1a005902:	6862      	ldr	r2, [r4, #4]
1a005904:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a005908:	2a00      	cmp	r2, #0
1a00590a:	81a3      	strh	r3, [r4, #12]
1a00590c:	dd59      	ble.n	1a0059c2 <__sflush_r+0xd2>
1a00590e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a005910:	2d00      	cmp	r5, #0
1a005912:	d053      	beq.n	1a0059bc <__sflush_r+0xcc>
1a005914:	2200      	movs	r2, #0
1a005916:	b29b      	uxth	r3, r3
1a005918:	f8d8 6000 	ldr.w	r6, [r8]
1a00591c:	69e1      	ldr	r1, [r4, #28]
1a00591e:	f8c8 2000 	str.w	r2, [r8]
1a005922:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a005926:	f040 8083 	bne.w	1a005a30 <__sflush_r+0x140>
1a00592a:	2301      	movs	r3, #1
1a00592c:	4640      	mov	r0, r8
1a00592e:	47a8      	blx	r5
1a005930:	1c42      	adds	r2, r0, #1
1a005932:	d04a      	beq.n	1a0059ca <__sflush_r+0xda>
1a005934:	89a3      	ldrh	r3, [r4, #12]
1a005936:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a005938:	69e1      	ldr	r1, [r4, #28]
1a00593a:	075b      	lsls	r3, r3, #29
1a00593c:	d505      	bpl.n	1a00594a <__sflush_r+0x5a>
1a00593e:	6862      	ldr	r2, [r4, #4]
1a005940:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a005942:	1a80      	subs	r0, r0, r2
1a005944:	b10b      	cbz	r3, 1a00594a <__sflush_r+0x5a>
1a005946:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a005948:	1ac0      	subs	r0, r0, r3
1a00594a:	4602      	mov	r2, r0
1a00594c:	2300      	movs	r3, #0
1a00594e:	4640      	mov	r0, r8
1a005950:	47a8      	blx	r5
1a005952:	1c47      	adds	r7, r0, #1
1a005954:	d045      	beq.n	1a0059e2 <__sflush_r+0xf2>
1a005956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00595a:	6922      	ldr	r2, [r4, #16]
1a00595c:	6022      	str	r2, [r4, #0]
1a00595e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a005962:	2200      	movs	r2, #0
1a005964:	81a3      	strh	r3, [r4, #12]
1a005966:	04db      	lsls	r3, r3, #19
1a005968:	6062      	str	r2, [r4, #4]
1a00596a:	d500      	bpl.n	1a00596e <__sflush_r+0x7e>
1a00596c:	6520      	str	r0, [r4, #80]	; 0x50
1a00596e:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a005970:	f8c8 6000 	str.w	r6, [r8]
1a005974:	b311      	cbz	r1, 1a0059bc <__sflush_r+0xcc>
1a005976:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a00597a:	4299      	cmp	r1, r3
1a00597c:	d002      	beq.n	1a005984 <__sflush_r+0x94>
1a00597e:	4640      	mov	r0, r8
1a005980:	f000 f944 	bl	1a005c0c <_free_r>
1a005984:	2000      	movs	r0, #0
1a005986:	6320      	str	r0, [r4, #48]	; 0x30
1a005988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00598c:	6926      	ldr	r6, [r4, #16]
1a00598e:	b1ae      	cbz	r6, 1a0059bc <__sflush_r+0xcc>
1a005990:	6825      	ldr	r5, [r4, #0]
1a005992:	6026      	str	r6, [r4, #0]
1a005994:	0792      	lsls	r2, r2, #30
1a005996:	bf0c      	ite	eq
1a005998:	6963      	ldreq	r3, [r4, #20]
1a00599a:	2300      	movne	r3, #0
1a00599c:	1bad      	subs	r5, r5, r6
1a00599e:	60a3      	str	r3, [r4, #8]
1a0059a0:	e00a      	b.n	1a0059b8 <__sflush_r+0xc8>
1a0059a2:	462b      	mov	r3, r5
1a0059a4:	4632      	mov	r2, r6
1a0059a6:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a0059a8:	69e1      	ldr	r1, [r4, #28]
1a0059aa:	4640      	mov	r0, r8
1a0059ac:	47b8      	blx	r7
1a0059ae:	2800      	cmp	r0, #0
1a0059b0:	eba5 0500 	sub.w	r5, r5, r0
1a0059b4:	4406      	add	r6, r0
1a0059b6:	dd2b      	ble.n	1a005a10 <__sflush_r+0x120>
1a0059b8:	2d00      	cmp	r5, #0
1a0059ba:	dcf2      	bgt.n	1a0059a2 <__sflush_r+0xb2>
1a0059bc:	2000      	movs	r0, #0
1a0059be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0059c2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0059c4:	2a00      	cmp	r2, #0
1a0059c6:	dca2      	bgt.n	1a00590e <__sflush_r+0x1e>
1a0059c8:	e7f8      	b.n	1a0059bc <__sflush_r+0xcc>
1a0059ca:	f8d8 3000 	ldr.w	r3, [r8]
1a0059ce:	2b00      	cmp	r3, #0
1a0059d0:	d0b0      	beq.n	1a005934 <__sflush_r+0x44>
1a0059d2:	2b1d      	cmp	r3, #29
1a0059d4:	d001      	beq.n	1a0059da <__sflush_r+0xea>
1a0059d6:	2b16      	cmp	r3, #22
1a0059d8:	d12c      	bne.n	1a005a34 <__sflush_r+0x144>
1a0059da:	f8c8 6000 	str.w	r6, [r8]
1a0059de:	2000      	movs	r0, #0
1a0059e0:	e7ed      	b.n	1a0059be <__sflush_r+0xce>
1a0059e2:	f8d8 1000 	ldr.w	r1, [r8]
1a0059e6:	291d      	cmp	r1, #29
1a0059e8:	d81a      	bhi.n	1a005a20 <__sflush_r+0x130>
1a0059ea:	4b15      	ldr	r3, [pc, #84]	; (1a005a40 <__sflush_r+0x150>)
1a0059ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0059f0:	40cb      	lsrs	r3, r1
1a0059f2:	43db      	mvns	r3, r3
1a0059f4:	f013 0301 	ands.w	r3, r3, #1
1a0059f8:	d114      	bne.n	1a005a24 <__sflush_r+0x134>
1a0059fa:	6925      	ldr	r5, [r4, #16]
1a0059fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
1a005a00:	e9c4 5300 	strd	r5, r3, [r4]
1a005a04:	04d5      	lsls	r5, r2, #19
1a005a06:	81a2      	strh	r2, [r4, #12]
1a005a08:	d5b1      	bpl.n	1a00596e <__sflush_r+0x7e>
1a005a0a:	2900      	cmp	r1, #0
1a005a0c:	d1af      	bne.n	1a00596e <__sflush_r+0x7e>
1a005a0e:	e7ad      	b.n	1a00596c <__sflush_r+0x7c>
1a005a10:	89a3      	ldrh	r3, [r4, #12]
1a005a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005a16:	81a3      	strh	r3, [r4, #12]
1a005a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005a20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a005a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a005a28:	81a2      	strh	r2, [r4, #12]
1a005a2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005a2e:	e7c6      	b.n	1a0059be <__sflush_r+0xce>
1a005a30:	6d20      	ldr	r0, [r4, #80]	; 0x50
1a005a32:	e782      	b.n	1a00593a <__sflush_r+0x4a>
1a005a34:	89a3      	ldrh	r3, [r4, #12]
1a005a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005a3a:	81a3      	strh	r3, [r4, #12]
1a005a3c:	e7bf      	b.n	1a0059be <__sflush_r+0xce>
1a005a3e:	bf00      	nop
1a005a40:	20400001 	.word	0x20400001

1a005a44 <_fflush_r>:
1a005a44:	b538      	push	{r3, r4, r5, lr}
1a005a46:	460d      	mov	r5, r1
1a005a48:	4604      	mov	r4, r0
1a005a4a:	b108      	cbz	r0, 1a005a50 <_fflush_r+0xc>
1a005a4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a005a4e:	b1a3      	cbz	r3, 1a005a7a <_fflush_r+0x36>
1a005a50:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a005a54:	b1b8      	cbz	r0, 1a005a86 <_fflush_r+0x42>
1a005a56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a005a58:	07db      	lsls	r3, r3, #31
1a005a5a:	d401      	bmi.n	1a005a60 <_fflush_r+0x1c>
1a005a5c:	0581      	lsls	r1, r0, #22
1a005a5e:	d51a      	bpl.n	1a005a96 <_fflush_r+0x52>
1a005a60:	4620      	mov	r0, r4
1a005a62:	4629      	mov	r1, r5
1a005a64:	f7ff ff44 	bl	1a0058f0 <__sflush_r>
1a005a68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a005a6a:	07da      	lsls	r2, r3, #31
1a005a6c:	4604      	mov	r4, r0
1a005a6e:	d402      	bmi.n	1a005a76 <_fflush_r+0x32>
1a005a70:	89ab      	ldrh	r3, [r5, #12]
1a005a72:	059b      	lsls	r3, r3, #22
1a005a74:	d50a      	bpl.n	1a005a8c <_fflush_r+0x48>
1a005a76:	4620      	mov	r0, r4
1a005a78:	bd38      	pop	{r3, r4, r5, pc}
1a005a7a:	f000 f83f 	bl	1a005afc <__sinit>
1a005a7e:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a005a82:	2800      	cmp	r0, #0
1a005a84:	d1e7      	bne.n	1a005a56 <_fflush_r+0x12>
1a005a86:	4604      	mov	r4, r0
1a005a88:	4620      	mov	r0, r4
1a005a8a:	bd38      	pop	{r3, r4, r5, pc}
1a005a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a005a8e:	f000 fb6d 	bl	1a00616c <__retarget_lock_release_recursive>
1a005a92:	4620      	mov	r0, r4
1a005a94:	bd38      	pop	{r3, r4, r5, pc}
1a005a96:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a005a98:	f000 fb66 	bl	1a006168 <__retarget_lock_acquire_recursive>
1a005a9c:	e7e0      	b.n	1a005a60 <_fflush_r+0x1c>
1a005a9e:	bf00      	nop

1a005aa0 <std>:
1a005aa0:	b510      	push	{r4, lr}
1a005aa2:	2300      	movs	r3, #0
1a005aa4:	4604      	mov	r4, r0
1a005aa6:	8181      	strh	r1, [r0, #12]
1a005aa8:	81c2      	strh	r2, [r0, #14]
1a005aaa:	e9c0 3300 	strd	r3, r3, [r0]
1a005aae:	6083      	str	r3, [r0, #8]
1a005ab0:	6643      	str	r3, [r0, #100]	; 0x64
1a005ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a005ab6:	6183      	str	r3, [r0, #24]
1a005ab8:	4619      	mov	r1, r3
1a005aba:	2208      	movs	r2, #8
1a005abc:	305c      	adds	r0, #92	; 0x5c
1a005abe:	f7fd f85f 	bl	1a002b80 <memset>
1a005ac2:	4807      	ldr	r0, [pc, #28]	; (1a005ae0 <std+0x40>)
1a005ac4:	4907      	ldr	r1, [pc, #28]	; (1a005ae4 <std+0x44>)
1a005ac6:	4a08      	ldr	r2, [pc, #32]	; (1a005ae8 <std+0x48>)
1a005ac8:	4b08      	ldr	r3, [pc, #32]	; (1a005aec <std+0x4c>)
1a005aca:	62e3      	str	r3, [r4, #44]	; 0x2c
1a005acc:	e9c4 4007 	strd	r4, r0, [r4, #28]
1a005ad0:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
1a005ad4:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a005ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a005adc:	f000 bb40 	b.w	1a006160 <__retarget_lock_init_recursive>
1a005ae0:	1a007309 	.word	0x1a007309
1a005ae4:	1a00732d 	.word	0x1a00732d
1a005ae8:	1a007369 	.word	0x1a007369
1a005aec:	1a007389 	.word	0x1a007389

1a005af0 <_cleanup_r>:
1a005af0:	4901      	ldr	r1, [pc, #4]	; (1a005af8 <_cleanup_r+0x8>)
1a005af2:	f000 bafd 	b.w	1a0060f0 <_fwalk_reent>
1a005af6:	bf00      	nop
1a005af8:	1a0074e9 	.word	0x1a0074e9

1a005afc <__sinit>:
1a005afc:	b510      	push	{r4, lr}
1a005afe:	4604      	mov	r4, r0
1a005b00:	4812      	ldr	r0, [pc, #72]	; (1a005b4c <__sinit+0x50>)
1a005b02:	f000 fb31 	bl	1a006168 <__retarget_lock_acquire_recursive>
1a005b06:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a005b08:	b9d2      	cbnz	r2, 1a005b40 <__sinit+0x44>
1a005b0a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
1a005b0e:	4810      	ldr	r0, [pc, #64]	; (1a005b50 <__sinit+0x54>)
1a005b10:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
1a005b14:	2103      	movs	r1, #3
1a005b16:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
1a005b1a:	63e0      	str	r0, [r4, #60]	; 0x3c
1a005b1c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
1a005b20:	6860      	ldr	r0, [r4, #4]
1a005b22:	2104      	movs	r1, #4
1a005b24:	f7ff ffbc 	bl	1a005aa0 <std>
1a005b28:	2201      	movs	r2, #1
1a005b2a:	2109      	movs	r1, #9
1a005b2c:	68a0      	ldr	r0, [r4, #8]
1a005b2e:	f7ff ffb7 	bl	1a005aa0 <std>
1a005b32:	2202      	movs	r2, #2
1a005b34:	2112      	movs	r1, #18
1a005b36:	68e0      	ldr	r0, [r4, #12]
1a005b38:	f7ff ffb2 	bl	1a005aa0 <std>
1a005b3c:	2301      	movs	r3, #1
1a005b3e:	63a3      	str	r3, [r4, #56]	; 0x38
1a005b40:	4802      	ldr	r0, [pc, #8]	; (1a005b4c <__sinit+0x50>)
1a005b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a005b46:	f000 bb11 	b.w	1a00616c <__retarget_lock_release_recursive>
1a005b4a:	bf00      	nop
1a005b4c:	10000a80 	.word	0x10000a80
1a005b50:	1a005af1 	.word	0x1a005af1

1a005b54 <__sfp_lock_acquire>:
1a005b54:	4801      	ldr	r0, [pc, #4]	; (1a005b5c <__sfp_lock_acquire+0x8>)
1a005b56:	f000 bb07 	b.w	1a006168 <__retarget_lock_acquire_recursive>
1a005b5a:	bf00      	nop
1a005b5c:	10000a94 	.word	0x10000a94

1a005b60 <__sfp_lock_release>:
1a005b60:	4801      	ldr	r0, [pc, #4]	; (1a005b68 <__sfp_lock_release+0x8>)
1a005b62:	f000 bb03 	b.w	1a00616c <__retarget_lock_release_recursive>
1a005b66:	bf00      	nop
1a005b68:	10000a94 	.word	0x10000a94

1a005b6c <_malloc_trim_r>:
1a005b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005b6e:	4f24      	ldr	r7, [pc, #144]	; (1a005c00 <_malloc_trim_r+0x94>)
1a005b70:	460c      	mov	r4, r1
1a005b72:	4606      	mov	r6, r0
1a005b74:	f000 fed0 	bl	1a006918 <__malloc_lock>
1a005b78:	68bb      	ldr	r3, [r7, #8]
1a005b7a:	685d      	ldr	r5, [r3, #4]
1a005b7c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a005b80:	310f      	adds	r1, #15
1a005b82:	f025 0503 	bic.w	r5, r5, #3
1a005b86:	4429      	add	r1, r5
1a005b88:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a005b8c:	f021 010f 	bic.w	r1, r1, #15
1a005b90:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a005b94:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a005b98:	db07      	blt.n	1a005baa <_malloc_trim_r+0x3e>
1a005b9a:	2100      	movs	r1, #0
1a005b9c:	4630      	mov	r0, r6
1a005b9e:	f7fa fe3d 	bl	1a00081c <_sbrk_r>
1a005ba2:	68bb      	ldr	r3, [r7, #8]
1a005ba4:	442b      	add	r3, r5
1a005ba6:	4298      	cmp	r0, r3
1a005ba8:	d004      	beq.n	1a005bb4 <_malloc_trim_r+0x48>
1a005baa:	4630      	mov	r0, r6
1a005bac:	f000 feba 	bl	1a006924 <__malloc_unlock>
1a005bb0:	2000      	movs	r0, #0
1a005bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005bb4:	4261      	negs	r1, r4
1a005bb6:	4630      	mov	r0, r6
1a005bb8:	f7fa fe30 	bl	1a00081c <_sbrk_r>
1a005bbc:	3001      	adds	r0, #1
1a005bbe:	d00d      	beq.n	1a005bdc <_malloc_trim_r+0x70>
1a005bc0:	4b10      	ldr	r3, [pc, #64]	; (1a005c04 <_malloc_trim_r+0x98>)
1a005bc2:	68ba      	ldr	r2, [r7, #8]
1a005bc4:	6819      	ldr	r1, [r3, #0]
1a005bc6:	1b2d      	subs	r5, r5, r4
1a005bc8:	f045 0501 	orr.w	r5, r5, #1
1a005bcc:	4630      	mov	r0, r6
1a005bce:	1b09      	subs	r1, r1, r4
1a005bd0:	6055      	str	r5, [r2, #4]
1a005bd2:	6019      	str	r1, [r3, #0]
1a005bd4:	f000 fea6 	bl	1a006924 <__malloc_unlock>
1a005bd8:	2001      	movs	r0, #1
1a005bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005bdc:	2100      	movs	r1, #0
1a005bde:	4630      	mov	r0, r6
1a005be0:	f7fa fe1c 	bl	1a00081c <_sbrk_r>
1a005be4:	68ba      	ldr	r2, [r7, #8]
1a005be6:	1a83      	subs	r3, r0, r2
1a005be8:	2b0f      	cmp	r3, #15
1a005bea:	ddde      	ble.n	1a005baa <_malloc_trim_r+0x3e>
1a005bec:	4c06      	ldr	r4, [pc, #24]	; (1a005c08 <_malloc_trim_r+0x9c>)
1a005bee:	4905      	ldr	r1, [pc, #20]	; (1a005c04 <_malloc_trim_r+0x98>)
1a005bf0:	6824      	ldr	r4, [r4, #0]
1a005bf2:	f043 0301 	orr.w	r3, r3, #1
1a005bf6:	1b00      	subs	r0, r0, r4
1a005bf8:	6053      	str	r3, [r2, #4]
1a005bfa:	6008      	str	r0, [r1, #0]
1a005bfc:	e7d5      	b.n	1a005baa <_malloc_trim_r+0x3e>
1a005bfe:	bf00      	nop
1a005c00:	10000478 	.word	0x10000478
1a005c04:	10000a38 	.word	0x10000a38
1a005c08:	10000880 	.word	0x10000880

1a005c0c <_free_r>:
1a005c0c:	2900      	cmp	r1, #0
1a005c0e:	d053      	beq.n	1a005cb8 <_free_r+0xac>
1a005c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005c12:	460c      	mov	r4, r1
1a005c14:	4606      	mov	r6, r0
1a005c16:	f000 fe7f 	bl	1a006918 <__malloc_lock>
1a005c1a:	f854 cc04 	ldr.w	ip, [r4, #-4]
1a005c1e:	4f71      	ldr	r7, [pc, #452]	; (1a005de4 <_free_r+0x1d8>)
1a005c20:	f02c 0101 	bic.w	r1, ip, #1
1a005c24:	f1a4 0508 	sub.w	r5, r4, #8
1a005c28:	186b      	adds	r3, r5, r1
1a005c2a:	68b8      	ldr	r0, [r7, #8]
1a005c2c:	685a      	ldr	r2, [r3, #4]
1a005c2e:	4298      	cmp	r0, r3
1a005c30:	f022 0203 	bic.w	r2, r2, #3
1a005c34:	d053      	beq.n	1a005cde <_free_r+0xd2>
1a005c36:	f01c 0f01 	tst.w	ip, #1
1a005c3a:	605a      	str	r2, [r3, #4]
1a005c3c:	eb03 0002 	add.w	r0, r3, r2
1a005c40:	d13b      	bne.n	1a005cba <_free_r+0xae>
1a005c42:	f854 cc08 	ldr.w	ip, [r4, #-8]
1a005c46:	6840      	ldr	r0, [r0, #4]
1a005c48:	eba5 050c 	sub.w	r5, r5, ip
1a005c4c:	f107 0e08 	add.w	lr, r7, #8
1a005c50:	68ac      	ldr	r4, [r5, #8]
1a005c52:	4574      	cmp	r4, lr
1a005c54:	4461      	add	r1, ip
1a005c56:	f000 0001 	and.w	r0, r0, #1
1a005c5a:	d075      	beq.n	1a005d48 <_free_r+0x13c>
1a005c5c:	f8d5 c00c 	ldr.w	ip, [r5, #12]
1a005c60:	f8c4 c00c 	str.w	ip, [r4, #12]
1a005c64:	f8cc 4008 	str.w	r4, [ip, #8]
1a005c68:	b360      	cbz	r0, 1a005cc4 <_free_r+0xb8>
1a005c6a:	f041 0301 	orr.w	r3, r1, #1
1a005c6e:	606b      	str	r3, [r5, #4]
1a005c70:	5069      	str	r1, [r5, r1]
1a005c72:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
1a005c76:	d350      	bcc.n	1a005d1a <_free_r+0x10e>
1a005c78:	0a4b      	lsrs	r3, r1, #9
1a005c7a:	2b04      	cmp	r3, #4
1a005c7c:	d870      	bhi.n	1a005d60 <_free_r+0x154>
1a005c7e:	098b      	lsrs	r3, r1, #6
1a005c80:	f103 0439 	add.w	r4, r3, #57	; 0x39
1a005c84:	00e4      	lsls	r4, r4, #3
1a005c86:	f103 0238 	add.w	r2, r3, #56	; 0x38
1a005c8a:	1938      	adds	r0, r7, r4
1a005c8c:	593b      	ldr	r3, [r7, r4]
1a005c8e:	3808      	subs	r0, #8
1a005c90:	4298      	cmp	r0, r3
1a005c92:	d078      	beq.n	1a005d86 <_free_r+0x17a>
1a005c94:	685a      	ldr	r2, [r3, #4]
1a005c96:	f022 0203 	bic.w	r2, r2, #3
1a005c9a:	428a      	cmp	r2, r1
1a005c9c:	d971      	bls.n	1a005d82 <_free_r+0x176>
1a005c9e:	689b      	ldr	r3, [r3, #8]
1a005ca0:	4298      	cmp	r0, r3
1a005ca2:	d1f7      	bne.n	1a005c94 <_free_r+0x88>
1a005ca4:	68c3      	ldr	r3, [r0, #12]
1a005ca6:	e9c5 0302 	strd	r0, r3, [r5, #8]
1a005caa:	609d      	str	r5, [r3, #8]
1a005cac:	60c5      	str	r5, [r0, #12]
1a005cae:	4630      	mov	r0, r6
1a005cb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a005cb4:	f000 be36 	b.w	1a006924 <__malloc_unlock>
1a005cb8:	4770      	bx	lr
1a005cba:	6840      	ldr	r0, [r0, #4]
1a005cbc:	f000 0001 	and.w	r0, r0, #1
1a005cc0:	2800      	cmp	r0, #0
1a005cc2:	d1d2      	bne.n	1a005c6a <_free_r+0x5e>
1a005cc4:	6898      	ldr	r0, [r3, #8]
1a005cc6:	4c48      	ldr	r4, [pc, #288]	; (1a005de8 <_free_r+0x1dc>)
1a005cc8:	4411      	add	r1, r2
1a005cca:	42a0      	cmp	r0, r4
1a005ccc:	f041 0201 	orr.w	r2, r1, #1
1a005cd0:	d062      	beq.n	1a005d98 <_free_r+0x18c>
1a005cd2:	68db      	ldr	r3, [r3, #12]
1a005cd4:	60c3      	str	r3, [r0, #12]
1a005cd6:	6098      	str	r0, [r3, #8]
1a005cd8:	606a      	str	r2, [r5, #4]
1a005cda:	5069      	str	r1, [r5, r1]
1a005cdc:	e7c9      	b.n	1a005c72 <_free_r+0x66>
1a005cde:	f01c 0f01 	tst.w	ip, #1
1a005ce2:	440a      	add	r2, r1
1a005ce4:	d107      	bne.n	1a005cf6 <_free_r+0xea>
1a005ce6:	f854 3c08 	ldr.w	r3, [r4, #-8]
1a005cea:	1aed      	subs	r5, r5, r3
1a005cec:	441a      	add	r2, r3
1a005cee:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
1a005cf2:	60cb      	str	r3, [r1, #12]
1a005cf4:	6099      	str	r1, [r3, #8]
1a005cf6:	4b3d      	ldr	r3, [pc, #244]	; (1a005dec <_free_r+0x1e0>)
1a005cf8:	681b      	ldr	r3, [r3, #0]
1a005cfa:	f042 0101 	orr.w	r1, r2, #1
1a005cfe:	4293      	cmp	r3, r2
1a005d00:	6069      	str	r1, [r5, #4]
1a005d02:	60bd      	str	r5, [r7, #8]
1a005d04:	d804      	bhi.n	1a005d10 <_free_r+0x104>
1a005d06:	4b3a      	ldr	r3, [pc, #232]	; (1a005df0 <_free_r+0x1e4>)
1a005d08:	4630      	mov	r0, r6
1a005d0a:	6819      	ldr	r1, [r3, #0]
1a005d0c:	f7ff ff2e 	bl	1a005b6c <_malloc_trim_r>
1a005d10:	4630      	mov	r0, r6
1a005d12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a005d16:	f000 be05 	b.w	1a006924 <__malloc_unlock>
1a005d1a:	08c9      	lsrs	r1, r1, #3
1a005d1c:	6878      	ldr	r0, [r7, #4]
1a005d1e:	1c4a      	adds	r2, r1, #1
1a005d20:	2301      	movs	r3, #1
1a005d22:	1089      	asrs	r1, r1, #2
1a005d24:	408b      	lsls	r3, r1
1a005d26:	4303      	orrs	r3, r0
1a005d28:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
1a005d2c:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
1a005d30:	607b      	str	r3, [r7, #4]
1a005d32:	3908      	subs	r1, #8
1a005d34:	e9c5 0102 	strd	r0, r1, [r5, #8]
1a005d38:	f847 5032 	str.w	r5, [r7, r2, lsl #3]
1a005d3c:	60c5      	str	r5, [r0, #12]
1a005d3e:	4630      	mov	r0, r6
1a005d40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a005d44:	f000 bdee 	b.w	1a006924 <__malloc_unlock>
1a005d48:	2800      	cmp	r0, #0
1a005d4a:	d145      	bne.n	1a005dd8 <_free_r+0x1cc>
1a005d4c:	440a      	add	r2, r1
1a005d4e:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
1a005d52:	f042 0001 	orr.w	r0, r2, #1
1a005d56:	60cb      	str	r3, [r1, #12]
1a005d58:	6099      	str	r1, [r3, #8]
1a005d5a:	6068      	str	r0, [r5, #4]
1a005d5c:	50aa      	str	r2, [r5, r2]
1a005d5e:	e7d7      	b.n	1a005d10 <_free_r+0x104>
1a005d60:	2b14      	cmp	r3, #20
1a005d62:	d908      	bls.n	1a005d76 <_free_r+0x16a>
1a005d64:	2b54      	cmp	r3, #84	; 0x54
1a005d66:	d81e      	bhi.n	1a005da6 <_free_r+0x19a>
1a005d68:	0b0b      	lsrs	r3, r1, #12
1a005d6a:	f103 046f 	add.w	r4, r3, #111	; 0x6f
1a005d6e:	00e4      	lsls	r4, r4, #3
1a005d70:	f103 026e 	add.w	r2, r3, #110	; 0x6e
1a005d74:	e789      	b.n	1a005c8a <_free_r+0x7e>
1a005d76:	f103 045c 	add.w	r4, r3, #92	; 0x5c
1a005d7a:	00e4      	lsls	r4, r4, #3
1a005d7c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
1a005d80:	e783      	b.n	1a005c8a <_free_r+0x7e>
1a005d82:	4618      	mov	r0, r3
1a005d84:	e78e      	b.n	1a005ca4 <_free_r+0x98>
1a005d86:	1093      	asrs	r3, r2, #2
1a005d88:	6879      	ldr	r1, [r7, #4]
1a005d8a:	2201      	movs	r2, #1
1a005d8c:	fa02 f303 	lsl.w	r3, r2, r3
1a005d90:	430b      	orrs	r3, r1
1a005d92:	607b      	str	r3, [r7, #4]
1a005d94:	4603      	mov	r3, r0
1a005d96:	e786      	b.n	1a005ca6 <_free_r+0x9a>
1a005d98:	e9c7 5504 	strd	r5, r5, [r7, #16]
1a005d9c:	e9c5 0002 	strd	r0, r0, [r5, #8]
1a005da0:	606a      	str	r2, [r5, #4]
1a005da2:	5069      	str	r1, [r5, r1]
1a005da4:	e7b4      	b.n	1a005d10 <_free_r+0x104>
1a005da6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a005daa:	d806      	bhi.n	1a005dba <_free_r+0x1ae>
1a005dac:	0bcb      	lsrs	r3, r1, #15
1a005dae:	f103 0478 	add.w	r4, r3, #120	; 0x78
1a005db2:	00e4      	lsls	r4, r4, #3
1a005db4:	f103 0277 	add.w	r2, r3, #119	; 0x77
1a005db8:	e767      	b.n	1a005c8a <_free_r+0x7e>
1a005dba:	f240 5254 	movw	r2, #1364	; 0x554
1a005dbe:	4293      	cmp	r3, r2
1a005dc0:	d806      	bhi.n	1a005dd0 <_free_r+0x1c4>
1a005dc2:	0c8b      	lsrs	r3, r1, #18
1a005dc4:	f103 047d 	add.w	r4, r3, #125	; 0x7d
1a005dc8:	00e4      	lsls	r4, r4, #3
1a005dca:	f103 027c 	add.w	r2, r3, #124	; 0x7c
1a005dce:	e75c      	b.n	1a005c8a <_free_r+0x7e>
1a005dd0:	f44f 747e 	mov.w	r4, #1016	; 0x3f8
1a005dd4:	227e      	movs	r2, #126	; 0x7e
1a005dd6:	e758      	b.n	1a005c8a <_free_r+0x7e>
1a005dd8:	f041 0201 	orr.w	r2, r1, #1
1a005ddc:	606a      	str	r2, [r5, #4]
1a005dde:	6019      	str	r1, [r3, #0]
1a005de0:	e796      	b.n	1a005d10 <_free_r+0x104>
1a005de2:	bf00      	nop
1a005de4:	10000478 	.word	0x10000478
1a005de8:	10000480 	.word	0x10000480
1a005dec:	10000884 	.word	0x10000884
1a005df0:	10000a68 	.word	0x10000a68

1a005df4 <__sfvwrite_r>:
1a005df4:	6893      	ldr	r3, [r2, #8]
1a005df6:	2b00      	cmp	r3, #0
1a005df8:	f000 80e4 	beq.w	1a005fc4 <__sfvwrite_r+0x1d0>
1a005dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005e00:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a005e04:	b29b      	uxth	r3, r3
1a005e06:	460c      	mov	r4, r1
1a005e08:	0719      	lsls	r1, r3, #28
1a005e0a:	b083      	sub	sp, #12
1a005e0c:	4682      	mov	sl, r0
1a005e0e:	4690      	mov	r8, r2
1a005e10:	d535      	bpl.n	1a005e7e <__sfvwrite_r+0x8a>
1a005e12:	6922      	ldr	r2, [r4, #16]
1a005e14:	b39a      	cbz	r2, 1a005e7e <__sfvwrite_r+0x8a>
1a005e16:	f013 0202 	ands.w	r2, r3, #2
1a005e1a:	f8d8 6000 	ldr.w	r6, [r8]
1a005e1e:	d03d      	beq.n	1a005e9c <__sfvwrite_r+0xa8>
1a005e20:	2700      	movs	r7, #0
1a005e22:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a005e26:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a005e2a:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 1a0060ec <__sfvwrite_r+0x2f8>
1a005e2e:	463d      	mov	r5, r7
1a005e30:	454d      	cmp	r5, r9
1a005e32:	462b      	mov	r3, r5
1a005e34:	463a      	mov	r2, r7
1a005e36:	bf28      	it	cs
1a005e38:	464b      	movcs	r3, r9
1a005e3a:	4661      	mov	r1, ip
1a005e3c:	4650      	mov	r0, sl
1a005e3e:	b1d5      	cbz	r5, 1a005e76 <__sfvwrite_r+0x82>
1a005e40:	47d8      	blx	fp
1a005e42:	2800      	cmp	r0, #0
1a005e44:	f340 80c6 	ble.w	1a005fd4 <__sfvwrite_r+0x1e0>
1a005e48:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a005e4c:	1a1b      	subs	r3, r3, r0
1a005e4e:	4407      	add	r7, r0
1a005e50:	1a2d      	subs	r5, r5, r0
1a005e52:	f8c8 3008 	str.w	r3, [r8, #8]
1a005e56:	2b00      	cmp	r3, #0
1a005e58:	f000 80b0 	beq.w	1a005fbc <__sfvwrite_r+0x1c8>
1a005e5c:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a005e60:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a005e64:	454d      	cmp	r5, r9
1a005e66:	462b      	mov	r3, r5
1a005e68:	463a      	mov	r2, r7
1a005e6a:	bf28      	it	cs
1a005e6c:	464b      	movcs	r3, r9
1a005e6e:	4661      	mov	r1, ip
1a005e70:	4650      	mov	r0, sl
1a005e72:	2d00      	cmp	r5, #0
1a005e74:	d1e4      	bne.n	1a005e40 <__sfvwrite_r+0x4c>
1a005e76:	e9d6 7500 	ldrd	r7, r5, [r6]
1a005e7a:	3608      	adds	r6, #8
1a005e7c:	e7d8      	b.n	1a005e30 <__sfvwrite_r+0x3c>
1a005e7e:	4621      	mov	r1, r4
1a005e80:	4650      	mov	r0, sl
1a005e82:	f7fe fd2d 	bl	1a0048e0 <__swsetup_r>
1a005e86:	2800      	cmp	r0, #0
1a005e88:	f040 812a 	bne.w	1a0060e0 <__sfvwrite_r+0x2ec>
1a005e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005e90:	f8d8 6000 	ldr.w	r6, [r8]
1a005e94:	b29b      	uxth	r3, r3
1a005e96:	f013 0202 	ands.w	r2, r3, #2
1a005e9a:	d1c1      	bne.n	1a005e20 <__sfvwrite_r+0x2c>
1a005e9c:	f013 0901 	ands.w	r9, r3, #1
1a005ea0:	d15d      	bne.n	1a005f5e <__sfvwrite_r+0x16a>
1a005ea2:	68a7      	ldr	r7, [r4, #8]
1a005ea4:	6820      	ldr	r0, [r4, #0]
1a005ea6:	464d      	mov	r5, r9
1a005ea8:	2d00      	cmp	r5, #0
1a005eaa:	d054      	beq.n	1a005f56 <__sfvwrite_r+0x162>
1a005eac:	059a      	lsls	r2, r3, #22
1a005eae:	f140 809b 	bpl.w	1a005fe8 <__sfvwrite_r+0x1f4>
1a005eb2:	42af      	cmp	r7, r5
1a005eb4:	46bb      	mov	fp, r7
1a005eb6:	f200 80d8 	bhi.w	1a00606a <__sfvwrite_r+0x276>
1a005eba:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a005ebe:	d02f      	beq.n	1a005f20 <__sfvwrite_r+0x12c>
1a005ec0:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
1a005ec4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1a005ec8:	eba0 0b01 	sub.w	fp, r0, r1
1a005ecc:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1a005ed0:	1c68      	adds	r0, r5, #1
1a005ed2:	107f      	asrs	r7, r7, #1
1a005ed4:	4458      	add	r0, fp
1a005ed6:	42b8      	cmp	r0, r7
1a005ed8:	463a      	mov	r2, r7
1a005eda:	bf84      	itt	hi
1a005edc:	4607      	movhi	r7, r0
1a005ede:	463a      	movhi	r2, r7
1a005ee0:	055b      	lsls	r3, r3, #21
1a005ee2:	f140 80d3 	bpl.w	1a00608c <__sfvwrite_r+0x298>
1a005ee6:	4611      	mov	r1, r2
1a005ee8:	4650      	mov	r0, sl
1a005eea:	f000 f9b9 	bl	1a006260 <_malloc_r>
1a005eee:	2800      	cmp	r0, #0
1a005ef0:	f000 80f0 	beq.w	1a0060d4 <__sfvwrite_r+0x2e0>
1a005ef4:	465a      	mov	r2, fp
1a005ef6:	6921      	ldr	r1, [r4, #16]
1a005ef8:	9001      	str	r0, [sp, #4]
1a005efa:	f7fc fda7 	bl	1a002a4c <memcpy>
1a005efe:	89a2      	ldrh	r2, [r4, #12]
1a005f00:	9b01      	ldr	r3, [sp, #4]
1a005f02:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a005f06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a005f0a:	81a2      	strh	r2, [r4, #12]
1a005f0c:	eba7 020b 	sub.w	r2, r7, fp
1a005f10:	eb03 000b 	add.w	r0, r3, fp
1a005f14:	6167      	str	r7, [r4, #20]
1a005f16:	6123      	str	r3, [r4, #16]
1a005f18:	6020      	str	r0, [r4, #0]
1a005f1a:	60a2      	str	r2, [r4, #8]
1a005f1c:	462f      	mov	r7, r5
1a005f1e:	46ab      	mov	fp, r5
1a005f20:	465a      	mov	r2, fp
1a005f22:	4649      	mov	r1, r9
1a005f24:	f000 fc94 	bl	1a006850 <memmove>
1a005f28:	68a2      	ldr	r2, [r4, #8]
1a005f2a:	6823      	ldr	r3, [r4, #0]
1a005f2c:	1bd2      	subs	r2, r2, r7
1a005f2e:	445b      	add	r3, fp
1a005f30:	462f      	mov	r7, r5
1a005f32:	60a2      	str	r2, [r4, #8]
1a005f34:	6023      	str	r3, [r4, #0]
1a005f36:	2500      	movs	r5, #0
1a005f38:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a005f3c:	1bdb      	subs	r3, r3, r7
1a005f3e:	44b9      	add	r9, r7
1a005f40:	f8c8 3008 	str.w	r3, [r8, #8]
1a005f44:	2b00      	cmp	r3, #0
1a005f46:	d039      	beq.n	1a005fbc <__sfvwrite_r+0x1c8>
1a005f48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005f4c:	68a7      	ldr	r7, [r4, #8]
1a005f4e:	6820      	ldr	r0, [r4, #0]
1a005f50:	b29b      	uxth	r3, r3
1a005f52:	2d00      	cmp	r5, #0
1a005f54:	d1aa      	bne.n	1a005eac <__sfvwrite_r+0xb8>
1a005f56:	e9d6 9500 	ldrd	r9, r5, [r6]
1a005f5a:	3608      	adds	r6, #8
1a005f5c:	e7a4      	b.n	1a005ea8 <__sfvwrite_r+0xb4>
1a005f5e:	4633      	mov	r3, r6
1a005f60:	4691      	mov	r9, r2
1a005f62:	4610      	mov	r0, r2
1a005f64:	4617      	mov	r7, r2
1a005f66:	464e      	mov	r6, r9
1a005f68:	469b      	mov	fp, r3
1a005f6a:	2f00      	cmp	r7, #0
1a005f6c:	d06b      	beq.n	1a006046 <__sfvwrite_r+0x252>
1a005f6e:	2800      	cmp	r0, #0
1a005f70:	d071      	beq.n	1a006056 <__sfvwrite_r+0x262>
1a005f72:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
1a005f76:	6820      	ldr	r0, [r4, #0]
1a005f78:	45b9      	cmp	r9, r7
1a005f7a:	464b      	mov	r3, r9
1a005f7c:	bf28      	it	cs
1a005f7e:	463b      	movcs	r3, r7
1a005f80:	4288      	cmp	r0, r1
1a005f82:	d903      	bls.n	1a005f8c <__sfvwrite_r+0x198>
1a005f84:	68a5      	ldr	r5, [r4, #8]
1a005f86:	4415      	add	r5, r2
1a005f88:	42ab      	cmp	r3, r5
1a005f8a:	dc71      	bgt.n	1a006070 <__sfvwrite_r+0x27c>
1a005f8c:	429a      	cmp	r2, r3
1a005f8e:	f300 8093 	bgt.w	1a0060b8 <__sfvwrite_r+0x2c4>
1a005f92:	4613      	mov	r3, r2
1a005f94:	6a65      	ldr	r5, [r4, #36]	; 0x24
1a005f96:	69e1      	ldr	r1, [r4, #28]
1a005f98:	4632      	mov	r2, r6
1a005f9a:	4650      	mov	r0, sl
1a005f9c:	47a8      	blx	r5
1a005f9e:	1e05      	subs	r5, r0, #0
1a005fa0:	dd18      	ble.n	1a005fd4 <__sfvwrite_r+0x1e0>
1a005fa2:	ebb9 0905 	subs.w	r9, r9, r5
1a005fa6:	d00f      	beq.n	1a005fc8 <__sfvwrite_r+0x1d4>
1a005fa8:	2001      	movs	r0, #1
1a005faa:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a005fae:	1b5b      	subs	r3, r3, r5
1a005fb0:	442e      	add	r6, r5
1a005fb2:	1b7f      	subs	r7, r7, r5
1a005fb4:	f8c8 3008 	str.w	r3, [r8, #8]
1a005fb8:	2b00      	cmp	r3, #0
1a005fba:	d1d6      	bne.n	1a005f6a <__sfvwrite_r+0x176>
1a005fbc:	2000      	movs	r0, #0
1a005fbe:	b003      	add	sp, #12
1a005fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005fc4:	2000      	movs	r0, #0
1a005fc6:	4770      	bx	lr
1a005fc8:	4621      	mov	r1, r4
1a005fca:	4650      	mov	r0, sl
1a005fcc:	f7ff fd3a 	bl	1a005a44 <_fflush_r>
1a005fd0:	2800      	cmp	r0, #0
1a005fd2:	d0ea      	beq.n	1a005faa <__sfvwrite_r+0x1b6>
1a005fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005fe0:	81a3      	strh	r3, [r4, #12]
1a005fe2:	b003      	add	sp, #12
1a005fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005fe8:	6923      	ldr	r3, [r4, #16]
1a005fea:	4283      	cmp	r3, r0
1a005fec:	d315      	bcc.n	1a00601a <__sfvwrite_r+0x226>
1a005fee:	6961      	ldr	r1, [r4, #20]
1a005ff0:	42a9      	cmp	r1, r5
1a005ff2:	d812      	bhi.n	1a00601a <__sfvwrite_r+0x226>
1a005ff4:	4b3c      	ldr	r3, [pc, #240]	; (1a0060e8 <__sfvwrite_r+0x2f4>)
1a005ff6:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a005ff8:	429d      	cmp	r5, r3
1a005ffa:	bf94      	ite	ls
1a005ffc:	462b      	movls	r3, r5
1a005ffe:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
1a006002:	464a      	mov	r2, r9
1a006004:	fb93 f3f1 	sdiv	r3, r3, r1
1a006008:	4650      	mov	r0, sl
1a00600a:	fb01 f303 	mul.w	r3, r1, r3
1a00600e:	69e1      	ldr	r1, [r4, #28]
1a006010:	47b8      	blx	r7
1a006012:	1e07      	subs	r7, r0, #0
1a006014:	ddde      	ble.n	1a005fd4 <__sfvwrite_r+0x1e0>
1a006016:	1bed      	subs	r5, r5, r7
1a006018:	e78e      	b.n	1a005f38 <__sfvwrite_r+0x144>
1a00601a:	42af      	cmp	r7, r5
1a00601c:	bf28      	it	cs
1a00601e:	462f      	movcs	r7, r5
1a006020:	463a      	mov	r2, r7
1a006022:	4649      	mov	r1, r9
1a006024:	f000 fc14 	bl	1a006850 <memmove>
1a006028:	68a3      	ldr	r3, [r4, #8]
1a00602a:	6822      	ldr	r2, [r4, #0]
1a00602c:	1bdb      	subs	r3, r3, r7
1a00602e:	443a      	add	r2, r7
1a006030:	60a3      	str	r3, [r4, #8]
1a006032:	6022      	str	r2, [r4, #0]
1a006034:	2b00      	cmp	r3, #0
1a006036:	d1ee      	bne.n	1a006016 <__sfvwrite_r+0x222>
1a006038:	4621      	mov	r1, r4
1a00603a:	4650      	mov	r0, sl
1a00603c:	f7ff fd02 	bl	1a005a44 <_fflush_r>
1a006040:	2800      	cmp	r0, #0
1a006042:	d0e8      	beq.n	1a006016 <__sfvwrite_r+0x222>
1a006044:	e7c6      	b.n	1a005fd4 <__sfvwrite_r+0x1e0>
1a006046:	f10b 0308 	add.w	r3, fp, #8
1a00604a:	e953 6702 	ldrd	r6, r7, [r3, #-8]
1a00604e:	469b      	mov	fp, r3
1a006050:	3308      	adds	r3, #8
1a006052:	2f00      	cmp	r7, #0
1a006054:	d0f9      	beq.n	1a00604a <__sfvwrite_r+0x256>
1a006056:	463a      	mov	r2, r7
1a006058:	210a      	movs	r1, #10
1a00605a:	4630      	mov	r0, r6
1a00605c:	f000 fba8 	bl	1a0067b0 <memchr>
1a006060:	b338      	cbz	r0, 1a0060b2 <__sfvwrite_r+0x2be>
1a006062:	3001      	adds	r0, #1
1a006064:	eba0 0906 	sub.w	r9, r0, r6
1a006068:	e783      	b.n	1a005f72 <__sfvwrite_r+0x17e>
1a00606a:	462f      	mov	r7, r5
1a00606c:	46ab      	mov	fp, r5
1a00606e:	e757      	b.n	1a005f20 <__sfvwrite_r+0x12c>
1a006070:	4631      	mov	r1, r6
1a006072:	462a      	mov	r2, r5
1a006074:	f000 fbec 	bl	1a006850 <memmove>
1a006078:	6823      	ldr	r3, [r4, #0]
1a00607a:	442b      	add	r3, r5
1a00607c:	6023      	str	r3, [r4, #0]
1a00607e:	4621      	mov	r1, r4
1a006080:	4650      	mov	r0, sl
1a006082:	f7ff fcdf 	bl	1a005a44 <_fflush_r>
1a006086:	2800      	cmp	r0, #0
1a006088:	d08b      	beq.n	1a005fa2 <__sfvwrite_r+0x1ae>
1a00608a:	e7a3      	b.n	1a005fd4 <__sfvwrite_r+0x1e0>
1a00608c:	4650      	mov	r0, sl
1a00608e:	f000 ff59 	bl	1a006f44 <_realloc_r>
1a006092:	4603      	mov	r3, r0
1a006094:	2800      	cmp	r0, #0
1a006096:	f47f af39 	bne.w	1a005f0c <__sfvwrite_r+0x118>
1a00609a:	6921      	ldr	r1, [r4, #16]
1a00609c:	4650      	mov	r0, sl
1a00609e:	f7ff fdb5 	bl	1a005c0c <_free_r>
1a0060a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0060a6:	220c      	movs	r2, #12
1a0060a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0060ac:	f8ca 2000 	str.w	r2, [sl]
1a0060b0:	e792      	b.n	1a005fd8 <__sfvwrite_r+0x1e4>
1a0060b2:	f107 0901 	add.w	r9, r7, #1
1a0060b6:	e75c      	b.n	1a005f72 <__sfvwrite_r+0x17e>
1a0060b8:	461a      	mov	r2, r3
1a0060ba:	4631      	mov	r1, r6
1a0060bc:	9301      	str	r3, [sp, #4]
1a0060be:	f000 fbc7 	bl	1a006850 <memmove>
1a0060c2:	9b01      	ldr	r3, [sp, #4]
1a0060c4:	68a1      	ldr	r1, [r4, #8]
1a0060c6:	6822      	ldr	r2, [r4, #0]
1a0060c8:	1ac9      	subs	r1, r1, r3
1a0060ca:	441a      	add	r2, r3
1a0060cc:	60a1      	str	r1, [r4, #8]
1a0060ce:	6022      	str	r2, [r4, #0]
1a0060d0:	461d      	mov	r5, r3
1a0060d2:	e766      	b.n	1a005fa2 <__sfvwrite_r+0x1ae>
1a0060d4:	230c      	movs	r3, #12
1a0060d6:	f8ca 3000 	str.w	r3, [sl]
1a0060da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0060de:	e77b      	b.n	1a005fd8 <__sfvwrite_r+0x1e4>
1a0060e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0060e4:	e76b      	b.n	1a005fbe <__sfvwrite_r+0x1ca>
1a0060e6:	bf00      	nop
1a0060e8:	7ffffffe 	.word	0x7ffffffe
1a0060ec:	7ffffc00 	.word	0x7ffffc00

1a0060f0 <_fwalk_reent>:
1a0060f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0060f4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a0060f8:	d01f      	beq.n	1a00613a <_fwalk_reent+0x4a>
1a0060fa:	4688      	mov	r8, r1
1a0060fc:	4606      	mov	r6, r0
1a0060fe:	f04f 0900 	mov.w	r9, #0
1a006102:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1a006106:	3d01      	subs	r5, #1
1a006108:	d411      	bmi.n	1a00612e <_fwalk_reent+0x3e>
1a00610a:	89a3      	ldrh	r3, [r4, #12]
1a00610c:	2b01      	cmp	r3, #1
1a00610e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a006112:	4621      	mov	r1, r4
1a006114:	4630      	mov	r0, r6
1a006116:	d906      	bls.n	1a006126 <_fwalk_reent+0x36>
1a006118:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a00611c:	3301      	adds	r3, #1
1a00611e:	d002      	beq.n	1a006126 <_fwalk_reent+0x36>
1a006120:	47c0      	blx	r8
1a006122:	ea49 0900 	orr.w	r9, r9, r0
1a006126:	1c6b      	adds	r3, r5, #1
1a006128:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a00612c:	d1ed      	bne.n	1a00610a <_fwalk_reent+0x1a>
1a00612e:	683f      	ldr	r7, [r7, #0]
1a006130:	2f00      	cmp	r7, #0
1a006132:	d1e6      	bne.n	1a006102 <_fwalk_reent+0x12>
1a006134:	4648      	mov	r0, r9
1a006136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00613a:	46b9      	mov	r9, r7
1a00613c:	4648      	mov	r0, r9
1a00613e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a006142:	bf00      	nop

1a006144 <_localeconv_r>:
1a006144:	4a04      	ldr	r2, [pc, #16]	; (1a006158 <_localeconv_r+0x14>)
1a006146:	4b05      	ldr	r3, [pc, #20]	; (1a00615c <_localeconv_r+0x18>)
1a006148:	6812      	ldr	r2, [r2, #0]
1a00614a:	6b50      	ldr	r0, [r2, #52]	; 0x34
1a00614c:	2800      	cmp	r0, #0
1a00614e:	bf08      	it	eq
1a006150:	4618      	moveq	r0, r3
1a006152:	30f0      	adds	r0, #240	; 0xf0
1a006154:	4770      	bx	lr
1a006156:	bf00      	nop
1a006158:	10000048 	.word	0x10000048
1a00615c:	10000888 	.word	0x10000888

1a006160 <__retarget_lock_init_recursive>:
1a006160:	4770      	bx	lr
1a006162:	bf00      	nop

1a006164 <__retarget_lock_close_recursive>:
1a006164:	4770      	bx	lr
1a006166:	bf00      	nop

1a006168 <__retarget_lock_acquire_recursive>:
1a006168:	4770      	bx	lr
1a00616a:	bf00      	nop

1a00616c <__retarget_lock_release_recursive>:
1a00616c:	4770      	bx	lr
1a00616e:	bf00      	nop

1a006170 <__swhatbuf_r>:
1a006170:	b570      	push	{r4, r5, r6, lr}
1a006172:	460c      	mov	r4, r1
1a006174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006178:	2900      	cmp	r1, #0
1a00617a:	b096      	sub	sp, #88	; 0x58
1a00617c:	4615      	mov	r5, r2
1a00617e:	461e      	mov	r6, r3
1a006180:	da0f      	bge.n	1a0061a2 <__swhatbuf_r+0x32>
1a006182:	89a2      	ldrh	r2, [r4, #12]
1a006184:	2300      	movs	r3, #0
1a006186:	f012 0080 	ands.w	r0, r2, #128	; 0x80
1a00618a:	6033      	str	r3, [r6, #0]
1a00618c:	d104      	bne.n	1a006198 <__swhatbuf_r+0x28>
1a00618e:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a006192:	602b      	str	r3, [r5, #0]
1a006194:	b016      	add	sp, #88	; 0x58
1a006196:	bd70      	pop	{r4, r5, r6, pc}
1a006198:	2240      	movs	r2, #64	; 0x40
1a00619a:	4618      	mov	r0, r3
1a00619c:	602a      	str	r2, [r5, #0]
1a00619e:	b016      	add	sp, #88	; 0x58
1a0061a0:	bd70      	pop	{r4, r5, r6, pc}
1a0061a2:	466a      	mov	r2, sp
1a0061a4:	f7fa faeb 	bl	1a00077e <_fstat_r>
1a0061a8:	2800      	cmp	r0, #0
1a0061aa:	dbea      	blt.n	1a006182 <__swhatbuf_r+0x12>
1a0061ac:	9b01      	ldr	r3, [sp, #4]
1a0061ae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
1a0061b2:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
1a0061b6:	fab3 f383 	clz	r3, r3
1a0061ba:	095b      	lsrs	r3, r3, #5
1a0061bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
1a0061c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a0061c4:	6033      	str	r3, [r6, #0]
1a0061c6:	602a      	str	r2, [r5, #0]
1a0061c8:	b016      	add	sp, #88	; 0x58
1a0061ca:	bd70      	pop	{r4, r5, r6, pc}

1a0061cc <__smakebuf_r>:
1a0061cc:	898a      	ldrh	r2, [r1, #12]
1a0061ce:	0792      	lsls	r2, r2, #30
1a0061d0:	460b      	mov	r3, r1
1a0061d2:	d506      	bpl.n	1a0061e2 <__smakebuf_r+0x16>
1a0061d4:	f101 0243 	add.w	r2, r1, #67	; 0x43
1a0061d8:	2101      	movs	r1, #1
1a0061da:	601a      	str	r2, [r3, #0]
1a0061dc:	e9c3 2104 	strd	r2, r1, [r3, #16]
1a0061e0:	4770      	bx	lr
1a0061e2:	b570      	push	{r4, r5, r6, lr}
1a0061e4:	b082      	sub	sp, #8
1a0061e6:	ab01      	add	r3, sp, #4
1a0061e8:	466a      	mov	r2, sp
1a0061ea:	460c      	mov	r4, r1
1a0061ec:	4605      	mov	r5, r0
1a0061ee:	f7ff ffbf 	bl	1a006170 <__swhatbuf_r>
1a0061f2:	9900      	ldr	r1, [sp, #0]
1a0061f4:	4606      	mov	r6, r0
1a0061f6:	4628      	mov	r0, r5
1a0061f8:	f000 f832 	bl	1a006260 <_malloc_r>
1a0061fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006200:	b1d8      	cbz	r0, 1a00623a <__smakebuf_r+0x6e>
1a006202:	4916      	ldr	r1, [pc, #88]	; (1a00625c <__smakebuf_r+0x90>)
1a006204:	63e9      	str	r1, [r5, #60]	; 0x3c
1a006206:	9a01      	ldr	r2, [sp, #4]
1a006208:	9900      	ldr	r1, [sp, #0]
1a00620a:	6020      	str	r0, [r4, #0]
1a00620c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a006210:	81a3      	strh	r3, [r4, #12]
1a006212:	e9c4 0104 	strd	r0, r1, [r4, #16]
1a006216:	b91a      	cbnz	r2, 1a006220 <__smakebuf_r+0x54>
1a006218:	4333      	orrs	r3, r6
1a00621a:	81a3      	strh	r3, [r4, #12]
1a00621c:	b002      	add	sp, #8
1a00621e:	bd70      	pop	{r4, r5, r6, pc}
1a006220:	4628      	mov	r0, r5
1a006222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a006226:	f7fa faaf 	bl	1a000788 <_isatty_r>
1a00622a:	b1a0      	cbz	r0, 1a006256 <__smakebuf_r+0x8a>
1a00622c:	89a3      	ldrh	r3, [r4, #12]
1a00622e:	f023 0303 	bic.w	r3, r3, #3
1a006232:	f043 0301 	orr.w	r3, r3, #1
1a006236:	b21b      	sxth	r3, r3
1a006238:	e7ee      	b.n	1a006218 <__smakebuf_r+0x4c>
1a00623a:	059a      	lsls	r2, r3, #22
1a00623c:	d4ee      	bmi.n	1a00621c <__smakebuf_r+0x50>
1a00623e:	f023 0303 	bic.w	r3, r3, #3
1a006242:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a006246:	f043 0302 	orr.w	r3, r3, #2
1a00624a:	2101      	movs	r1, #1
1a00624c:	81a3      	strh	r3, [r4, #12]
1a00624e:	6022      	str	r2, [r4, #0]
1a006250:	e9c4 2104 	strd	r2, r1, [r4, #16]
1a006254:	e7e2      	b.n	1a00621c <__smakebuf_r+0x50>
1a006256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00625a:	e7dd      	b.n	1a006218 <__smakebuf_r+0x4c>
1a00625c:	1a005af1 	.word	0x1a005af1

1a006260 <_malloc_r>:
1a006260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006264:	f101 050b 	add.w	r5, r1, #11
1a006268:	2d16      	cmp	r5, #22
1a00626a:	b083      	sub	sp, #12
1a00626c:	4606      	mov	r6, r0
1a00626e:	d823      	bhi.n	1a0062b8 <_malloc_r+0x58>
1a006270:	2910      	cmp	r1, #16
1a006272:	f200 80b9 	bhi.w	1a0063e8 <_malloc_r+0x188>
1a006276:	f000 fb4f 	bl	1a006918 <__malloc_lock>
1a00627a:	2510      	movs	r5, #16
1a00627c:	2318      	movs	r3, #24
1a00627e:	2002      	movs	r0, #2
1a006280:	4fc5      	ldr	r7, [pc, #788]	; (1a006598 <_malloc_r+0x338>)
1a006282:	443b      	add	r3, r7
1a006284:	f1a3 0208 	sub.w	r2, r3, #8
1a006288:	685c      	ldr	r4, [r3, #4]
1a00628a:	4294      	cmp	r4, r2
1a00628c:	f000 8166 	beq.w	1a00655c <_malloc_r+0x2fc>
1a006290:	6863      	ldr	r3, [r4, #4]
1a006292:	f023 0303 	bic.w	r3, r3, #3
1a006296:	4423      	add	r3, r4
1a006298:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1a00629c:	685a      	ldr	r2, [r3, #4]
1a00629e:	60e9      	str	r1, [r5, #12]
1a0062a0:	f042 0201 	orr.w	r2, r2, #1
1a0062a4:	608d      	str	r5, [r1, #8]
1a0062a6:	4630      	mov	r0, r6
1a0062a8:	605a      	str	r2, [r3, #4]
1a0062aa:	f000 fb3b 	bl	1a006924 <__malloc_unlock>
1a0062ae:	3408      	adds	r4, #8
1a0062b0:	4620      	mov	r0, r4
1a0062b2:	b003      	add	sp, #12
1a0062b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0062b8:	f035 0507 	bics.w	r5, r5, #7
1a0062bc:	f100 8094 	bmi.w	1a0063e8 <_malloc_r+0x188>
1a0062c0:	42a9      	cmp	r1, r5
1a0062c2:	f200 8091 	bhi.w	1a0063e8 <_malloc_r+0x188>
1a0062c6:	f000 fb27 	bl	1a006918 <__malloc_lock>
1a0062ca:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a0062ce:	f0c0 8183 	bcc.w	1a0065d8 <_malloc_r+0x378>
1a0062d2:	0a6b      	lsrs	r3, r5, #9
1a0062d4:	f000 808f 	beq.w	1a0063f6 <_malloc_r+0x196>
1a0062d8:	2b04      	cmp	r3, #4
1a0062da:	f200 8146 	bhi.w	1a00656a <_malloc_r+0x30a>
1a0062de:	09ab      	lsrs	r3, r5, #6
1a0062e0:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a0062e4:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1a0062e8:	00c3      	lsls	r3, r0, #3
1a0062ea:	4fab      	ldr	r7, [pc, #684]	; (1a006598 <_malloc_r+0x338>)
1a0062ec:	443b      	add	r3, r7
1a0062ee:	f1a3 0108 	sub.w	r1, r3, #8
1a0062f2:	685c      	ldr	r4, [r3, #4]
1a0062f4:	42a1      	cmp	r1, r4
1a0062f6:	d106      	bne.n	1a006306 <_malloc_r+0xa6>
1a0062f8:	e00c      	b.n	1a006314 <_malloc_r+0xb4>
1a0062fa:	2a00      	cmp	r2, #0
1a0062fc:	f280 811d 	bge.w	1a00653a <_malloc_r+0x2da>
1a006300:	68e4      	ldr	r4, [r4, #12]
1a006302:	42a1      	cmp	r1, r4
1a006304:	d006      	beq.n	1a006314 <_malloc_r+0xb4>
1a006306:	6863      	ldr	r3, [r4, #4]
1a006308:	f023 0303 	bic.w	r3, r3, #3
1a00630c:	1b5a      	subs	r2, r3, r5
1a00630e:	2a0f      	cmp	r2, #15
1a006310:	ddf3      	ble.n	1a0062fa <_malloc_r+0x9a>
1a006312:	4660      	mov	r0, ip
1a006314:	693c      	ldr	r4, [r7, #16]
1a006316:	f8df c294 	ldr.w	ip, [pc, #660]	; 1a0065ac <_malloc_r+0x34c>
1a00631a:	4564      	cmp	r4, ip
1a00631c:	d071      	beq.n	1a006402 <_malloc_r+0x1a2>
1a00631e:	6863      	ldr	r3, [r4, #4]
1a006320:	f023 0303 	bic.w	r3, r3, #3
1a006324:	1b5a      	subs	r2, r3, r5
1a006326:	2a0f      	cmp	r2, #15
1a006328:	f300 8144 	bgt.w	1a0065b4 <_malloc_r+0x354>
1a00632c:	2a00      	cmp	r2, #0
1a00632e:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1a006332:	f280 8126 	bge.w	1a006582 <_malloc_r+0x322>
1a006336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00633a:	f080 8169 	bcs.w	1a006610 <_malloc_r+0x3b0>
1a00633e:	08db      	lsrs	r3, r3, #3
1a006340:	1c59      	adds	r1, r3, #1
1a006342:	687a      	ldr	r2, [r7, #4]
1a006344:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1a006348:	f8c4 8008 	str.w	r8, [r4, #8]
1a00634c:	f04f 0e01 	mov.w	lr, #1
1a006350:	109b      	asrs	r3, r3, #2
1a006352:	fa0e f303 	lsl.w	r3, lr, r3
1a006356:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1a00635a:	4313      	orrs	r3, r2
1a00635c:	f1ae 0208 	sub.w	r2, lr, #8
1a006360:	60e2      	str	r2, [r4, #12]
1a006362:	607b      	str	r3, [r7, #4]
1a006364:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1a006368:	f8c8 400c 	str.w	r4, [r8, #12]
1a00636c:	1082      	asrs	r2, r0, #2
1a00636e:	2401      	movs	r4, #1
1a006370:	4094      	lsls	r4, r2
1a006372:	429c      	cmp	r4, r3
1a006374:	d84b      	bhi.n	1a00640e <_malloc_r+0x1ae>
1a006376:	421c      	tst	r4, r3
1a006378:	d106      	bne.n	1a006388 <_malloc_r+0x128>
1a00637a:	f020 0003 	bic.w	r0, r0, #3
1a00637e:	0064      	lsls	r4, r4, #1
1a006380:	421c      	tst	r4, r3
1a006382:	f100 0004 	add.w	r0, r0, #4
1a006386:	d0fa      	beq.n	1a00637e <_malloc_r+0x11e>
1a006388:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a00638c:	46ce      	mov	lr, r9
1a00638e:	4680      	mov	r8, r0
1a006390:	f8de 300c 	ldr.w	r3, [lr, #12]
1a006394:	459e      	cmp	lr, r3
1a006396:	d107      	bne.n	1a0063a8 <_malloc_r+0x148>
1a006398:	e122      	b.n	1a0065e0 <_malloc_r+0x380>
1a00639a:	2a00      	cmp	r2, #0
1a00639c:	f280 8129 	bge.w	1a0065f2 <_malloc_r+0x392>
1a0063a0:	68db      	ldr	r3, [r3, #12]
1a0063a2:	459e      	cmp	lr, r3
1a0063a4:	f000 811c 	beq.w	1a0065e0 <_malloc_r+0x380>
1a0063a8:	6859      	ldr	r1, [r3, #4]
1a0063aa:	f021 0103 	bic.w	r1, r1, #3
1a0063ae:	1b4a      	subs	r2, r1, r5
1a0063b0:	2a0f      	cmp	r2, #15
1a0063b2:	ddf2      	ble.n	1a00639a <_malloc_r+0x13a>
1a0063b4:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1a0063b8:	195c      	adds	r4, r3, r5
1a0063ba:	f045 0501 	orr.w	r5, r5, #1
1a0063be:	605d      	str	r5, [r3, #4]
1a0063c0:	f042 0501 	orr.w	r5, r2, #1
1a0063c4:	f8c8 e00c 	str.w	lr, [r8, #12]
1a0063c8:	4630      	mov	r0, r6
1a0063ca:	f8ce 8008 	str.w	r8, [lr, #8]
1a0063ce:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a0063d2:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1a0063d6:	6065      	str	r5, [r4, #4]
1a0063d8:	505a      	str	r2, [r3, r1]
1a0063da:	9301      	str	r3, [sp, #4]
1a0063dc:	f000 faa2 	bl	1a006924 <__malloc_unlock>
1a0063e0:	9b01      	ldr	r3, [sp, #4]
1a0063e2:	f103 0408 	add.w	r4, r3, #8
1a0063e6:	e763      	b.n	1a0062b0 <_malloc_r+0x50>
1a0063e8:	2400      	movs	r4, #0
1a0063ea:	230c      	movs	r3, #12
1a0063ec:	4620      	mov	r0, r4
1a0063ee:	6033      	str	r3, [r6, #0]
1a0063f0:	b003      	add	sp, #12
1a0063f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0063f6:	f44f 7300 	mov.w	r3, #512	; 0x200
1a0063fa:	2040      	movs	r0, #64	; 0x40
1a0063fc:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1a006400:	e773      	b.n	1a0062ea <_malloc_r+0x8a>
1a006402:	687b      	ldr	r3, [r7, #4]
1a006404:	1082      	asrs	r2, r0, #2
1a006406:	2401      	movs	r4, #1
1a006408:	4094      	lsls	r4, r2
1a00640a:	429c      	cmp	r4, r3
1a00640c:	d9b3      	bls.n	1a006376 <_malloc_r+0x116>
1a00640e:	68bc      	ldr	r4, [r7, #8]
1a006410:	6863      	ldr	r3, [r4, #4]
1a006412:	f023 0903 	bic.w	r9, r3, #3
1a006416:	45a9      	cmp	r9, r5
1a006418:	d303      	bcc.n	1a006422 <_malloc_r+0x1c2>
1a00641a:	eba9 0305 	sub.w	r3, r9, r5
1a00641e:	2b0f      	cmp	r3, #15
1a006420:	dc7b      	bgt.n	1a00651a <_malloc_r+0x2ba>
1a006422:	4b5e      	ldr	r3, [pc, #376]	; (1a00659c <_malloc_r+0x33c>)
1a006424:	f8df a188 	ldr.w	sl, [pc, #392]	; 1a0065b0 <_malloc_r+0x350>
1a006428:	681a      	ldr	r2, [r3, #0]
1a00642a:	f8da 3000 	ldr.w	r3, [sl]
1a00642e:	3301      	adds	r3, #1
1a006430:	eb05 0802 	add.w	r8, r5, r2
1a006434:	f000 8148 	beq.w	1a0066c8 <_malloc_r+0x468>
1a006438:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
1a00643c:	f108 080f 	add.w	r8, r8, #15
1a006440:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
1a006444:	f028 080f 	bic.w	r8, r8, #15
1a006448:	4641      	mov	r1, r8
1a00644a:	4630      	mov	r0, r6
1a00644c:	f7fa f9e6 	bl	1a00081c <_sbrk_r>
1a006450:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a006454:	4683      	mov	fp, r0
1a006456:	f000 8104 	beq.w	1a006662 <_malloc_r+0x402>
1a00645a:	eb04 0009 	add.w	r0, r4, r9
1a00645e:	4558      	cmp	r0, fp
1a006460:	f200 80fd 	bhi.w	1a00665e <_malloc_r+0x3fe>
1a006464:	4a4e      	ldr	r2, [pc, #312]	; (1a0065a0 <_malloc_r+0x340>)
1a006466:	6813      	ldr	r3, [r2, #0]
1a006468:	4443      	add	r3, r8
1a00646a:	6013      	str	r3, [r2, #0]
1a00646c:	f000 814d 	beq.w	1a00670a <_malloc_r+0x4aa>
1a006470:	f8da 1000 	ldr.w	r1, [sl]
1a006474:	3101      	adds	r1, #1
1a006476:	bf1b      	ittet	ne
1a006478:	ebab 0000 	subne.w	r0, fp, r0
1a00647c:	181b      	addne	r3, r3, r0
1a00647e:	f8ca b000 	streq.w	fp, [sl]
1a006482:	6013      	strne	r3, [r2, #0]
1a006484:	f01b 0307 	ands.w	r3, fp, #7
1a006488:	f000 8134 	beq.w	1a0066f4 <_malloc_r+0x494>
1a00648c:	f1c3 0108 	rsb	r1, r3, #8
1a006490:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
1a006494:	448b      	add	fp, r1
1a006496:	3308      	adds	r3, #8
1a006498:	44d8      	add	r8, fp
1a00649a:	f3c8 080b 	ubfx	r8, r8, #0, #12
1a00649e:	eba3 0808 	sub.w	r8, r3, r8
1a0064a2:	4641      	mov	r1, r8
1a0064a4:	4630      	mov	r0, r6
1a0064a6:	9201      	str	r2, [sp, #4]
1a0064a8:	f7fa f9b8 	bl	1a00081c <_sbrk_r>
1a0064ac:	1c43      	adds	r3, r0, #1
1a0064ae:	9a01      	ldr	r2, [sp, #4]
1a0064b0:	f000 8146 	beq.w	1a006740 <_malloc_r+0x4e0>
1a0064b4:	eba0 010b 	sub.w	r1, r0, fp
1a0064b8:	4441      	add	r1, r8
1a0064ba:	f041 0101 	orr.w	r1, r1, #1
1a0064be:	6813      	ldr	r3, [r2, #0]
1a0064c0:	f8c7 b008 	str.w	fp, [r7, #8]
1a0064c4:	4443      	add	r3, r8
1a0064c6:	42bc      	cmp	r4, r7
1a0064c8:	f8cb 1004 	str.w	r1, [fp, #4]
1a0064cc:	6013      	str	r3, [r2, #0]
1a0064ce:	d015      	beq.n	1a0064fc <_malloc_r+0x29c>
1a0064d0:	f1b9 0f0f 	cmp.w	r9, #15
1a0064d4:	f240 8130 	bls.w	1a006738 <_malloc_r+0x4d8>
1a0064d8:	6860      	ldr	r0, [r4, #4]
1a0064da:	f1a9 010c 	sub.w	r1, r9, #12
1a0064de:	f021 0107 	bic.w	r1, r1, #7
1a0064e2:	f000 0001 	and.w	r0, r0, #1
1a0064e6:	eb04 0c01 	add.w	ip, r4, r1
1a0064ea:	4308      	orrs	r0, r1
1a0064ec:	f04f 0e05 	mov.w	lr, #5
1a0064f0:	290f      	cmp	r1, #15
1a0064f2:	6060      	str	r0, [r4, #4]
1a0064f4:	e9cc ee01 	strd	lr, lr, [ip, #4]
1a0064f8:	f200 813a 	bhi.w	1a006770 <_malloc_r+0x510>
1a0064fc:	4a29      	ldr	r2, [pc, #164]	; (1a0065a4 <_malloc_r+0x344>)
1a0064fe:	482a      	ldr	r0, [pc, #168]	; (1a0065a8 <_malloc_r+0x348>)
1a006500:	6811      	ldr	r1, [r2, #0]
1a006502:	68bc      	ldr	r4, [r7, #8]
1a006504:	428b      	cmp	r3, r1
1a006506:	6801      	ldr	r1, [r0, #0]
1a006508:	bf88      	it	hi
1a00650a:	6013      	strhi	r3, [r2, #0]
1a00650c:	6862      	ldr	r2, [r4, #4]
1a00650e:	428b      	cmp	r3, r1
1a006510:	f022 0203 	bic.w	r2, r2, #3
1a006514:	bf88      	it	hi
1a006516:	6003      	strhi	r3, [r0, #0]
1a006518:	e0a7      	b.n	1a00666a <_malloc_r+0x40a>
1a00651a:	1962      	adds	r2, r4, r5
1a00651c:	f043 0301 	orr.w	r3, r3, #1
1a006520:	f045 0501 	orr.w	r5, r5, #1
1a006524:	6065      	str	r5, [r4, #4]
1a006526:	4630      	mov	r0, r6
1a006528:	60ba      	str	r2, [r7, #8]
1a00652a:	6053      	str	r3, [r2, #4]
1a00652c:	f000 f9fa 	bl	1a006924 <__malloc_unlock>
1a006530:	3408      	adds	r4, #8
1a006532:	4620      	mov	r0, r4
1a006534:	b003      	add	sp, #12
1a006536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00653a:	4423      	add	r3, r4
1a00653c:	68e1      	ldr	r1, [r4, #12]
1a00653e:	685a      	ldr	r2, [r3, #4]
1a006540:	68a5      	ldr	r5, [r4, #8]
1a006542:	f042 0201 	orr.w	r2, r2, #1
1a006546:	60e9      	str	r1, [r5, #12]
1a006548:	4630      	mov	r0, r6
1a00654a:	608d      	str	r5, [r1, #8]
1a00654c:	605a      	str	r2, [r3, #4]
1a00654e:	f000 f9e9 	bl	1a006924 <__malloc_unlock>
1a006552:	3408      	adds	r4, #8
1a006554:	4620      	mov	r0, r4
1a006556:	b003      	add	sp, #12
1a006558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00655c:	68dc      	ldr	r4, [r3, #12]
1a00655e:	42a3      	cmp	r3, r4
1a006560:	bf08      	it	eq
1a006562:	3002      	addeq	r0, #2
1a006564:	f43f aed6 	beq.w	1a006314 <_malloc_r+0xb4>
1a006568:	e692      	b.n	1a006290 <_malloc_r+0x30>
1a00656a:	2b14      	cmp	r3, #20
1a00656c:	d971      	bls.n	1a006652 <_malloc_r+0x3f2>
1a00656e:	2b54      	cmp	r3, #84	; 0x54
1a006570:	f200 80ad 	bhi.w	1a0066ce <_malloc_r+0x46e>
1a006574:	0b2b      	lsrs	r3, r5, #12
1a006576:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a00657a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1a00657e:	00c3      	lsls	r3, r0, #3
1a006580:	e6b3      	b.n	1a0062ea <_malloc_r+0x8a>
1a006582:	4423      	add	r3, r4
1a006584:	4630      	mov	r0, r6
1a006586:	685a      	ldr	r2, [r3, #4]
1a006588:	f042 0201 	orr.w	r2, r2, #1
1a00658c:	605a      	str	r2, [r3, #4]
1a00658e:	3408      	adds	r4, #8
1a006590:	f000 f9c8 	bl	1a006924 <__malloc_unlock>
1a006594:	e68c      	b.n	1a0062b0 <_malloc_r+0x50>
1a006596:	bf00      	nop
1a006598:	10000478 	.word	0x10000478
1a00659c:	10000a68 	.word	0x10000a68
1a0065a0:	10000a38 	.word	0x10000a38
1a0065a4:	10000a60 	.word	0x10000a60
1a0065a8:	10000a64 	.word	0x10000a64
1a0065ac:	10000480 	.word	0x10000480
1a0065b0:	10000880 	.word	0x10000880
1a0065b4:	1961      	adds	r1, r4, r5
1a0065b6:	f045 0e01 	orr.w	lr, r5, #1
1a0065ba:	f042 0501 	orr.w	r5, r2, #1
1a0065be:	f8c4 e004 	str.w	lr, [r4, #4]
1a0065c2:	4630      	mov	r0, r6
1a0065c4:	e9c7 1104 	strd	r1, r1, [r7, #16]
1a0065c8:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1a0065cc:	604d      	str	r5, [r1, #4]
1a0065ce:	50e2      	str	r2, [r4, r3]
1a0065d0:	f000 f9a8 	bl	1a006924 <__malloc_unlock>
1a0065d4:	3408      	adds	r4, #8
1a0065d6:	e66b      	b.n	1a0062b0 <_malloc_r+0x50>
1a0065d8:	08e8      	lsrs	r0, r5, #3
1a0065da:	f105 0308 	add.w	r3, r5, #8
1a0065de:	e64f      	b.n	1a006280 <_malloc_r+0x20>
1a0065e0:	f108 0801 	add.w	r8, r8, #1
1a0065e4:	f018 0f03 	tst.w	r8, #3
1a0065e8:	f10e 0e08 	add.w	lr, lr, #8
1a0065ec:	f47f aed0 	bne.w	1a006390 <_malloc_r+0x130>
1a0065f0:	e052      	b.n	1a006698 <_malloc_r+0x438>
1a0065f2:	4419      	add	r1, r3
1a0065f4:	461c      	mov	r4, r3
1a0065f6:	684a      	ldr	r2, [r1, #4]
1a0065f8:	68db      	ldr	r3, [r3, #12]
1a0065fa:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a0065fe:	f042 0201 	orr.w	r2, r2, #1
1a006602:	604a      	str	r2, [r1, #4]
1a006604:	4630      	mov	r0, r6
1a006606:	60eb      	str	r3, [r5, #12]
1a006608:	609d      	str	r5, [r3, #8]
1a00660a:	f000 f98b 	bl	1a006924 <__malloc_unlock>
1a00660e:	e64f      	b.n	1a0062b0 <_malloc_r+0x50>
1a006610:	0a5a      	lsrs	r2, r3, #9
1a006612:	2a04      	cmp	r2, #4
1a006614:	d935      	bls.n	1a006682 <_malloc_r+0x422>
1a006616:	2a14      	cmp	r2, #20
1a006618:	d86f      	bhi.n	1a0066fa <_malloc_r+0x49a>
1a00661a:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a00661e:	00c9      	lsls	r1, r1, #3
1a006620:	325b      	adds	r2, #91	; 0x5b
1a006622:	eb07 0e01 	add.w	lr, r7, r1
1a006626:	5879      	ldr	r1, [r7, r1]
1a006628:	f1ae 0e08 	sub.w	lr, lr, #8
1a00662c:	458e      	cmp	lr, r1
1a00662e:	d058      	beq.n	1a0066e2 <_malloc_r+0x482>
1a006630:	684a      	ldr	r2, [r1, #4]
1a006632:	f022 0203 	bic.w	r2, r2, #3
1a006636:	429a      	cmp	r2, r3
1a006638:	d902      	bls.n	1a006640 <_malloc_r+0x3e0>
1a00663a:	6889      	ldr	r1, [r1, #8]
1a00663c:	458e      	cmp	lr, r1
1a00663e:	d1f7      	bne.n	1a006630 <_malloc_r+0x3d0>
1a006640:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1a006644:	687b      	ldr	r3, [r7, #4]
1a006646:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1a00664a:	f8ce 4008 	str.w	r4, [lr, #8]
1a00664e:	60cc      	str	r4, [r1, #12]
1a006650:	e68c      	b.n	1a00636c <_malloc_r+0x10c>
1a006652:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a006656:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1a00665a:	00c3      	lsls	r3, r0, #3
1a00665c:	e645      	b.n	1a0062ea <_malloc_r+0x8a>
1a00665e:	42bc      	cmp	r4, r7
1a006660:	d072      	beq.n	1a006748 <_malloc_r+0x4e8>
1a006662:	68bc      	ldr	r4, [r7, #8]
1a006664:	6862      	ldr	r2, [r4, #4]
1a006666:	f022 0203 	bic.w	r2, r2, #3
1a00666a:	4295      	cmp	r5, r2
1a00666c:	eba2 0305 	sub.w	r3, r2, r5
1a006670:	d802      	bhi.n	1a006678 <_malloc_r+0x418>
1a006672:	2b0f      	cmp	r3, #15
1a006674:	f73f af51 	bgt.w	1a00651a <_malloc_r+0x2ba>
1a006678:	4630      	mov	r0, r6
1a00667a:	f000 f953 	bl	1a006924 <__malloc_unlock>
1a00667e:	2400      	movs	r4, #0
1a006680:	e616      	b.n	1a0062b0 <_malloc_r+0x50>
1a006682:	099a      	lsrs	r2, r3, #6
1a006684:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a006688:	00c9      	lsls	r1, r1, #3
1a00668a:	3238      	adds	r2, #56	; 0x38
1a00668c:	e7c9      	b.n	1a006622 <_malloc_r+0x3c2>
1a00668e:	f8d9 9000 	ldr.w	r9, [r9]
1a006692:	4599      	cmp	r9, r3
1a006694:	f040 8083 	bne.w	1a00679e <_malloc_r+0x53e>
1a006698:	f010 0f03 	tst.w	r0, #3
1a00669c:	f1a9 0308 	sub.w	r3, r9, #8
1a0066a0:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1a0066a4:	d1f3      	bne.n	1a00668e <_malloc_r+0x42e>
1a0066a6:	687b      	ldr	r3, [r7, #4]
1a0066a8:	ea23 0304 	bic.w	r3, r3, r4
1a0066ac:	607b      	str	r3, [r7, #4]
1a0066ae:	0064      	lsls	r4, r4, #1
1a0066b0:	429c      	cmp	r4, r3
1a0066b2:	f63f aeac 	bhi.w	1a00640e <_malloc_r+0x1ae>
1a0066b6:	b91c      	cbnz	r4, 1a0066c0 <_malloc_r+0x460>
1a0066b8:	e6a9      	b.n	1a00640e <_malloc_r+0x1ae>
1a0066ba:	0064      	lsls	r4, r4, #1
1a0066bc:	f108 0804 	add.w	r8, r8, #4
1a0066c0:	421c      	tst	r4, r3
1a0066c2:	d0fa      	beq.n	1a0066ba <_malloc_r+0x45a>
1a0066c4:	4640      	mov	r0, r8
1a0066c6:	e65f      	b.n	1a006388 <_malloc_r+0x128>
1a0066c8:	f108 0810 	add.w	r8, r8, #16
1a0066cc:	e6bc      	b.n	1a006448 <_malloc_r+0x1e8>
1a0066ce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a0066d2:	d826      	bhi.n	1a006722 <_malloc_r+0x4c2>
1a0066d4:	0beb      	lsrs	r3, r5, #15
1a0066d6:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a0066da:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1a0066de:	00c3      	lsls	r3, r0, #3
1a0066e0:	e603      	b.n	1a0062ea <_malloc_r+0x8a>
1a0066e2:	687b      	ldr	r3, [r7, #4]
1a0066e4:	1092      	asrs	r2, r2, #2
1a0066e6:	f04f 0801 	mov.w	r8, #1
1a0066ea:	fa08 f202 	lsl.w	r2, r8, r2
1a0066ee:	4313      	orrs	r3, r2
1a0066f0:	607b      	str	r3, [r7, #4]
1a0066f2:	e7a8      	b.n	1a006646 <_malloc_r+0x3e6>
1a0066f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
1a0066f8:	e6ce      	b.n	1a006498 <_malloc_r+0x238>
1a0066fa:	2a54      	cmp	r2, #84	; 0x54
1a0066fc:	d829      	bhi.n	1a006752 <_malloc_r+0x4f2>
1a0066fe:	0b1a      	lsrs	r2, r3, #12
1a006700:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a006704:	00c9      	lsls	r1, r1, #3
1a006706:	326e      	adds	r2, #110	; 0x6e
1a006708:	e78b      	b.n	1a006622 <_malloc_r+0x3c2>
1a00670a:	f3c0 010b 	ubfx	r1, r0, #0, #12
1a00670e:	2900      	cmp	r1, #0
1a006710:	f47f aeae 	bne.w	1a006470 <_malloc_r+0x210>
1a006714:	eb09 0208 	add.w	r2, r9, r8
1a006718:	68b9      	ldr	r1, [r7, #8]
1a00671a:	f042 0201 	orr.w	r2, r2, #1
1a00671e:	604a      	str	r2, [r1, #4]
1a006720:	e6ec      	b.n	1a0064fc <_malloc_r+0x29c>
1a006722:	f240 5254 	movw	r2, #1364	; 0x554
1a006726:	4293      	cmp	r3, r2
1a006728:	d81c      	bhi.n	1a006764 <_malloc_r+0x504>
1a00672a:	0cab      	lsrs	r3, r5, #18
1a00672c:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a006730:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1a006734:	00c3      	lsls	r3, r0, #3
1a006736:	e5d8      	b.n	1a0062ea <_malloc_r+0x8a>
1a006738:	2301      	movs	r3, #1
1a00673a:	f8cb 3004 	str.w	r3, [fp, #4]
1a00673e:	e79b      	b.n	1a006678 <_malloc_r+0x418>
1a006740:	2101      	movs	r1, #1
1a006742:	f04f 0800 	mov.w	r8, #0
1a006746:	e6ba      	b.n	1a0064be <_malloc_r+0x25e>
1a006748:	4a16      	ldr	r2, [pc, #88]	; (1a0067a4 <_malloc_r+0x544>)
1a00674a:	6813      	ldr	r3, [r2, #0]
1a00674c:	4443      	add	r3, r8
1a00674e:	6013      	str	r3, [r2, #0]
1a006750:	e68e      	b.n	1a006470 <_malloc_r+0x210>
1a006752:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a006756:	d814      	bhi.n	1a006782 <_malloc_r+0x522>
1a006758:	0bda      	lsrs	r2, r3, #15
1a00675a:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a00675e:	00c9      	lsls	r1, r1, #3
1a006760:	3277      	adds	r2, #119	; 0x77
1a006762:	e75e      	b.n	1a006622 <_malloc_r+0x3c2>
1a006764:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a006768:	207f      	movs	r0, #127	; 0x7f
1a00676a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1a00676e:	e5bc      	b.n	1a0062ea <_malloc_r+0x8a>
1a006770:	f104 0108 	add.w	r1, r4, #8
1a006774:	4630      	mov	r0, r6
1a006776:	9201      	str	r2, [sp, #4]
1a006778:	f7ff fa48 	bl	1a005c0c <_free_r>
1a00677c:	9a01      	ldr	r2, [sp, #4]
1a00677e:	6813      	ldr	r3, [r2, #0]
1a006780:	e6bc      	b.n	1a0064fc <_malloc_r+0x29c>
1a006782:	f240 5154 	movw	r1, #1364	; 0x554
1a006786:	428a      	cmp	r2, r1
1a006788:	d805      	bhi.n	1a006796 <_malloc_r+0x536>
1a00678a:	0c9a      	lsrs	r2, r3, #18
1a00678c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a006790:	00c9      	lsls	r1, r1, #3
1a006792:	327c      	adds	r2, #124	; 0x7c
1a006794:	e745      	b.n	1a006622 <_malloc_r+0x3c2>
1a006796:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a00679a:	227e      	movs	r2, #126	; 0x7e
1a00679c:	e741      	b.n	1a006622 <_malloc_r+0x3c2>
1a00679e:	687b      	ldr	r3, [r7, #4]
1a0067a0:	e785      	b.n	1a0066ae <_malloc_r+0x44e>
1a0067a2:	bf00      	nop
1a0067a4:	10000a38 	.word	0x10000a38
1a0067a8:	ffffffff 	.word	0xffffffff
1a0067ac:	ffffffff 	.word	0xffffffff

1a0067b0 <memchr>:
1a0067b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0067b4:	2a10      	cmp	r2, #16
1a0067b6:	db2b      	blt.n	1a006810 <memchr+0x60>
1a0067b8:	f010 0f07 	tst.w	r0, #7
1a0067bc:	d008      	beq.n	1a0067d0 <memchr+0x20>
1a0067be:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0067c2:	3a01      	subs	r2, #1
1a0067c4:	428b      	cmp	r3, r1
1a0067c6:	d02d      	beq.n	1a006824 <memchr+0x74>
1a0067c8:	f010 0f07 	tst.w	r0, #7
1a0067cc:	b342      	cbz	r2, 1a006820 <memchr+0x70>
1a0067ce:	d1f6      	bne.n	1a0067be <memchr+0xe>
1a0067d0:	b4f0      	push	{r4, r5, r6, r7}
1a0067d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a0067d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a0067da:	f022 0407 	bic.w	r4, r2, #7
1a0067de:	f07f 0700 	mvns.w	r7, #0
1a0067e2:	2300      	movs	r3, #0
1a0067e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a0067e8:	3c08      	subs	r4, #8
1a0067ea:	ea85 0501 	eor.w	r5, r5, r1
1a0067ee:	ea86 0601 	eor.w	r6, r6, r1
1a0067f2:	fa85 f547 	uadd8	r5, r5, r7
1a0067f6:	faa3 f587 	sel	r5, r3, r7
1a0067fa:	fa86 f647 	uadd8	r6, r6, r7
1a0067fe:	faa5 f687 	sel	r6, r5, r7
1a006802:	b98e      	cbnz	r6, 1a006828 <memchr+0x78>
1a006804:	d1ee      	bne.n	1a0067e4 <memchr+0x34>
1a006806:	bcf0      	pop	{r4, r5, r6, r7}
1a006808:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00680c:	f002 0207 	and.w	r2, r2, #7
1a006810:	b132      	cbz	r2, 1a006820 <memchr+0x70>
1a006812:	f810 3b01 	ldrb.w	r3, [r0], #1
1a006816:	3a01      	subs	r2, #1
1a006818:	ea83 0301 	eor.w	r3, r3, r1
1a00681c:	b113      	cbz	r3, 1a006824 <memchr+0x74>
1a00681e:	d1f8      	bne.n	1a006812 <memchr+0x62>
1a006820:	2000      	movs	r0, #0
1a006822:	4770      	bx	lr
1a006824:	3801      	subs	r0, #1
1a006826:	4770      	bx	lr
1a006828:	2d00      	cmp	r5, #0
1a00682a:	bf06      	itte	eq
1a00682c:	4635      	moveq	r5, r6
1a00682e:	3803      	subeq	r0, #3
1a006830:	3807      	subne	r0, #7
1a006832:	f015 0f01 	tst.w	r5, #1
1a006836:	d107      	bne.n	1a006848 <memchr+0x98>
1a006838:	3001      	adds	r0, #1
1a00683a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00683e:	bf02      	ittt	eq
1a006840:	3001      	addeq	r0, #1
1a006842:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a006846:	3001      	addeq	r0, #1
1a006848:	bcf0      	pop	{r4, r5, r6, r7}
1a00684a:	3801      	subs	r0, #1
1a00684c:	4770      	bx	lr
1a00684e:	bf00      	nop

1a006850 <memmove>:
1a006850:	4288      	cmp	r0, r1
1a006852:	b4f0      	push	{r4, r5, r6, r7}
1a006854:	d90d      	bls.n	1a006872 <memmove+0x22>
1a006856:	188b      	adds	r3, r1, r2
1a006858:	4283      	cmp	r3, r0
1a00685a:	d90a      	bls.n	1a006872 <memmove+0x22>
1a00685c:	1884      	adds	r4, r0, r2
1a00685e:	b132      	cbz	r2, 1a00686e <memmove+0x1e>
1a006860:	4622      	mov	r2, r4
1a006862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a006866:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a00686a:	4299      	cmp	r1, r3
1a00686c:	d1f9      	bne.n	1a006862 <memmove+0x12>
1a00686e:	bcf0      	pop	{r4, r5, r6, r7}
1a006870:	4770      	bx	lr
1a006872:	2a0f      	cmp	r2, #15
1a006874:	d949      	bls.n	1a00690a <memmove+0xba>
1a006876:	ea40 0301 	orr.w	r3, r0, r1
1a00687a:	079b      	lsls	r3, r3, #30
1a00687c:	d147      	bne.n	1a00690e <memmove+0xbe>
1a00687e:	f1a2 0310 	sub.w	r3, r2, #16
1a006882:	091b      	lsrs	r3, r3, #4
1a006884:	f101 0720 	add.w	r7, r1, #32
1a006888:	eb07 1703 	add.w	r7, r7, r3, lsl #4
1a00688c:	f101 0410 	add.w	r4, r1, #16
1a006890:	f100 0510 	add.w	r5, r0, #16
1a006894:	f854 6c10 	ldr.w	r6, [r4, #-16]
1a006898:	f845 6c10 	str.w	r6, [r5, #-16]
1a00689c:	f854 6c0c 	ldr.w	r6, [r4, #-12]
1a0068a0:	f845 6c0c 	str.w	r6, [r5, #-12]
1a0068a4:	f854 6c08 	ldr.w	r6, [r4, #-8]
1a0068a8:	f845 6c08 	str.w	r6, [r5, #-8]
1a0068ac:	f854 6c04 	ldr.w	r6, [r4, #-4]
1a0068b0:	f845 6c04 	str.w	r6, [r5, #-4]
1a0068b4:	3410      	adds	r4, #16
1a0068b6:	42bc      	cmp	r4, r7
1a0068b8:	f105 0510 	add.w	r5, r5, #16
1a0068bc:	d1ea      	bne.n	1a006894 <memmove+0x44>
1a0068be:	3301      	adds	r3, #1
1a0068c0:	f002 050f 	and.w	r5, r2, #15
1a0068c4:	011b      	lsls	r3, r3, #4
1a0068c6:	2d03      	cmp	r5, #3
1a0068c8:	4419      	add	r1, r3
1a0068ca:	4403      	add	r3, r0
1a0068cc:	d921      	bls.n	1a006912 <memmove+0xc2>
1a0068ce:	1f1f      	subs	r7, r3, #4
1a0068d0:	460e      	mov	r6, r1
1a0068d2:	462c      	mov	r4, r5
1a0068d4:	3c04      	subs	r4, #4
1a0068d6:	f856 cb04 	ldr.w	ip, [r6], #4
1a0068da:	f847 cf04 	str.w	ip, [r7, #4]!
1a0068de:	2c03      	cmp	r4, #3
1a0068e0:	d8f8      	bhi.n	1a0068d4 <memmove+0x84>
1a0068e2:	1f2c      	subs	r4, r5, #4
1a0068e4:	f024 0403 	bic.w	r4, r4, #3
1a0068e8:	3404      	adds	r4, #4
1a0068ea:	4423      	add	r3, r4
1a0068ec:	4421      	add	r1, r4
1a0068ee:	f002 0203 	and.w	r2, r2, #3
1a0068f2:	2a00      	cmp	r2, #0
1a0068f4:	d0bb      	beq.n	1a00686e <memmove+0x1e>
1a0068f6:	3b01      	subs	r3, #1
1a0068f8:	440a      	add	r2, r1
1a0068fa:	f811 4b01 	ldrb.w	r4, [r1], #1
1a0068fe:	f803 4f01 	strb.w	r4, [r3, #1]!
1a006902:	4291      	cmp	r1, r2
1a006904:	d1f9      	bne.n	1a0068fa <memmove+0xaa>
1a006906:	bcf0      	pop	{r4, r5, r6, r7}
1a006908:	4770      	bx	lr
1a00690a:	4603      	mov	r3, r0
1a00690c:	e7f1      	b.n	1a0068f2 <memmove+0xa2>
1a00690e:	4603      	mov	r3, r0
1a006910:	e7f1      	b.n	1a0068f6 <memmove+0xa6>
1a006912:	462a      	mov	r2, r5
1a006914:	e7ed      	b.n	1a0068f2 <memmove+0xa2>
1a006916:	bf00      	nop

1a006918 <__malloc_lock>:
1a006918:	4801      	ldr	r0, [pc, #4]	; (1a006920 <__malloc_lock+0x8>)
1a00691a:	f7ff bc25 	b.w	1a006168 <__retarget_lock_acquire_recursive>
1a00691e:	bf00      	nop
1a006920:	10000a84 	.word	0x10000a84

1a006924 <__malloc_unlock>:
1a006924:	4801      	ldr	r0, [pc, #4]	; (1a00692c <__malloc_unlock+0x8>)
1a006926:	f7ff bc21 	b.w	1a00616c <__retarget_lock_release_recursive>
1a00692a:	bf00      	nop
1a00692c:	10000a84 	.word	0x10000a84

1a006930 <_Balloc>:
1a006930:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a006932:	b570      	push	{r4, r5, r6, lr}
1a006934:	4605      	mov	r5, r0
1a006936:	460c      	mov	r4, r1
1a006938:	b14b      	cbz	r3, 1a00694e <_Balloc+0x1e>
1a00693a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a00693e:	b180      	cbz	r0, 1a006962 <_Balloc+0x32>
1a006940:	6802      	ldr	r2, [r0, #0]
1a006942:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a006946:	2300      	movs	r3, #0
1a006948:	e9c0 3303 	strd	r3, r3, [r0, #12]
1a00694c:	bd70      	pop	{r4, r5, r6, pc}
1a00694e:	2221      	movs	r2, #33	; 0x21
1a006950:	2104      	movs	r1, #4
1a006952:	f000 fd95 	bl	1a007480 <_calloc_r>
1a006956:	4603      	mov	r3, r0
1a006958:	64e8      	str	r0, [r5, #76]	; 0x4c
1a00695a:	2800      	cmp	r0, #0
1a00695c:	d1ed      	bne.n	1a00693a <_Balloc+0xa>
1a00695e:	2000      	movs	r0, #0
1a006960:	bd70      	pop	{r4, r5, r6, pc}
1a006962:	2101      	movs	r1, #1
1a006964:	fa01 f604 	lsl.w	r6, r1, r4
1a006968:	1d72      	adds	r2, r6, #5
1a00696a:	4628      	mov	r0, r5
1a00696c:	0092      	lsls	r2, r2, #2
1a00696e:	f000 fd87 	bl	1a007480 <_calloc_r>
1a006972:	2800      	cmp	r0, #0
1a006974:	d0f3      	beq.n	1a00695e <_Balloc+0x2e>
1a006976:	e9c0 4601 	strd	r4, r6, [r0, #4]
1a00697a:	e7e4      	b.n	1a006946 <_Balloc+0x16>

1a00697c <_Bfree>:
1a00697c:	b131      	cbz	r1, 1a00698c <_Bfree+0x10>
1a00697e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a006980:	684a      	ldr	r2, [r1, #4]
1a006982:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a006986:	6008      	str	r0, [r1, #0]
1a006988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a00698c:	4770      	bx	lr
1a00698e:	bf00      	nop

1a006990 <__multadd>:
1a006990:	b5f0      	push	{r4, r5, r6, r7, lr}
1a006992:	690c      	ldr	r4, [r1, #16]
1a006994:	b083      	sub	sp, #12
1a006996:	460d      	mov	r5, r1
1a006998:	4606      	mov	r6, r0
1a00699a:	f101 0c14 	add.w	ip, r1, #20
1a00699e:	2700      	movs	r7, #0
1a0069a0:	f8dc 0000 	ldr.w	r0, [ip]
1a0069a4:	b281      	uxth	r1, r0
1a0069a6:	fb02 3301 	mla	r3, r2, r1, r3
1a0069aa:	0c01      	lsrs	r1, r0, #16
1a0069ac:	0c18      	lsrs	r0, r3, #16
1a0069ae:	fb02 0101 	mla	r1, r2, r1, r0
1a0069b2:	b29b      	uxth	r3, r3
1a0069b4:	3701      	adds	r7, #1
1a0069b6:	eb03 4301 	add.w	r3, r3, r1, lsl #16
1a0069ba:	42bc      	cmp	r4, r7
1a0069bc:	f84c 3b04 	str.w	r3, [ip], #4
1a0069c0:	ea4f 4311 	mov.w	r3, r1, lsr #16
1a0069c4:	dcec      	bgt.n	1a0069a0 <__multadd+0x10>
1a0069c6:	b13b      	cbz	r3, 1a0069d8 <__multadd+0x48>
1a0069c8:	68aa      	ldr	r2, [r5, #8]
1a0069ca:	42a2      	cmp	r2, r4
1a0069cc:	dd07      	ble.n	1a0069de <__multadd+0x4e>
1a0069ce:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a0069d2:	3401      	adds	r4, #1
1a0069d4:	6153      	str	r3, [r2, #20]
1a0069d6:	612c      	str	r4, [r5, #16]
1a0069d8:	4628      	mov	r0, r5
1a0069da:	b003      	add	sp, #12
1a0069dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0069de:	6869      	ldr	r1, [r5, #4]
1a0069e0:	9301      	str	r3, [sp, #4]
1a0069e2:	3101      	adds	r1, #1
1a0069e4:	4630      	mov	r0, r6
1a0069e6:	f7ff ffa3 	bl	1a006930 <_Balloc>
1a0069ea:	692a      	ldr	r2, [r5, #16]
1a0069ec:	3202      	adds	r2, #2
1a0069ee:	f105 010c 	add.w	r1, r5, #12
1a0069f2:	4607      	mov	r7, r0
1a0069f4:	0092      	lsls	r2, r2, #2
1a0069f6:	300c      	adds	r0, #12
1a0069f8:	f7fc f828 	bl	1a002a4c <memcpy>
1a0069fc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a0069fe:	6869      	ldr	r1, [r5, #4]
1a006a00:	9b01      	ldr	r3, [sp, #4]
1a006a02:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a006a06:	6028      	str	r0, [r5, #0]
1a006a08:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a006a0c:	463d      	mov	r5, r7
1a006a0e:	e7de      	b.n	1a0069ce <__multadd+0x3e>

1a006a10 <__hi0bits>:
1a006a10:	0c02      	lsrs	r2, r0, #16
1a006a12:	0412      	lsls	r2, r2, #16
1a006a14:	4603      	mov	r3, r0
1a006a16:	b9c2      	cbnz	r2, 1a006a4a <__hi0bits+0x3a>
1a006a18:	0403      	lsls	r3, r0, #16
1a006a1a:	2010      	movs	r0, #16
1a006a1c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a006a20:	bf04      	itt	eq
1a006a22:	021b      	lsleq	r3, r3, #8
1a006a24:	3008      	addeq	r0, #8
1a006a26:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a006a2a:	bf04      	itt	eq
1a006a2c:	011b      	lsleq	r3, r3, #4
1a006a2e:	3004      	addeq	r0, #4
1a006a30:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a006a34:	bf04      	itt	eq
1a006a36:	009b      	lsleq	r3, r3, #2
1a006a38:	3002      	addeq	r0, #2
1a006a3a:	2b00      	cmp	r3, #0
1a006a3c:	db04      	blt.n	1a006a48 <__hi0bits+0x38>
1a006a3e:	005b      	lsls	r3, r3, #1
1a006a40:	d501      	bpl.n	1a006a46 <__hi0bits+0x36>
1a006a42:	3001      	adds	r0, #1
1a006a44:	4770      	bx	lr
1a006a46:	2020      	movs	r0, #32
1a006a48:	4770      	bx	lr
1a006a4a:	2000      	movs	r0, #0
1a006a4c:	e7e6      	b.n	1a006a1c <__hi0bits+0xc>
1a006a4e:	bf00      	nop

1a006a50 <__lo0bits>:
1a006a50:	6803      	ldr	r3, [r0, #0]
1a006a52:	f013 0207 	ands.w	r2, r3, #7
1a006a56:	4601      	mov	r1, r0
1a006a58:	d007      	beq.n	1a006a6a <__lo0bits+0x1a>
1a006a5a:	07da      	lsls	r2, r3, #31
1a006a5c:	d41f      	bmi.n	1a006a9e <__lo0bits+0x4e>
1a006a5e:	0798      	lsls	r0, r3, #30
1a006a60:	d51f      	bpl.n	1a006aa2 <__lo0bits+0x52>
1a006a62:	085b      	lsrs	r3, r3, #1
1a006a64:	600b      	str	r3, [r1, #0]
1a006a66:	2001      	movs	r0, #1
1a006a68:	4770      	bx	lr
1a006a6a:	b298      	uxth	r0, r3
1a006a6c:	b1a0      	cbz	r0, 1a006a98 <__lo0bits+0x48>
1a006a6e:	4610      	mov	r0, r2
1a006a70:	f013 0fff 	tst.w	r3, #255	; 0xff
1a006a74:	bf04      	itt	eq
1a006a76:	0a1b      	lsreq	r3, r3, #8
1a006a78:	3008      	addeq	r0, #8
1a006a7a:	071a      	lsls	r2, r3, #28
1a006a7c:	bf04      	itt	eq
1a006a7e:	091b      	lsreq	r3, r3, #4
1a006a80:	3004      	addeq	r0, #4
1a006a82:	079a      	lsls	r2, r3, #30
1a006a84:	bf04      	itt	eq
1a006a86:	089b      	lsreq	r3, r3, #2
1a006a88:	3002      	addeq	r0, #2
1a006a8a:	07da      	lsls	r2, r3, #31
1a006a8c:	d402      	bmi.n	1a006a94 <__lo0bits+0x44>
1a006a8e:	085b      	lsrs	r3, r3, #1
1a006a90:	d00b      	beq.n	1a006aaa <__lo0bits+0x5a>
1a006a92:	3001      	adds	r0, #1
1a006a94:	600b      	str	r3, [r1, #0]
1a006a96:	4770      	bx	lr
1a006a98:	0c1b      	lsrs	r3, r3, #16
1a006a9a:	2010      	movs	r0, #16
1a006a9c:	e7e8      	b.n	1a006a70 <__lo0bits+0x20>
1a006a9e:	2000      	movs	r0, #0
1a006aa0:	4770      	bx	lr
1a006aa2:	089b      	lsrs	r3, r3, #2
1a006aa4:	600b      	str	r3, [r1, #0]
1a006aa6:	2002      	movs	r0, #2
1a006aa8:	4770      	bx	lr
1a006aaa:	2020      	movs	r0, #32
1a006aac:	4770      	bx	lr
1a006aae:	bf00      	nop

1a006ab0 <__i2b>:
1a006ab0:	b510      	push	{r4, lr}
1a006ab2:	460c      	mov	r4, r1
1a006ab4:	2101      	movs	r1, #1
1a006ab6:	f7ff ff3b 	bl	1a006930 <_Balloc>
1a006aba:	2201      	movs	r2, #1
1a006abc:	e9c0 2404 	strd	r2, r4, [r0, #16]
1a006ac0:	bd10      	pop	{r4, pc}
1a006ac2:	bf00      	nop

1a006ac4 <__multiply>:
1a006ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006ac8:	690e      	ldr	r6, [r1, #16]
1a006aca:	6914      	ldr	r4, [r2, #16]
1a006acc:	42a6      	cmp	r6, r4
1a006ace:	b083      	sub	sp, #12
1a006ad0:	460f      	mov	r7, r1
1a006ad2:	4615      	mov	r5, r2
1a006ad4:	da04      	bge.n	1a006ae0 <__multiply+0x1c>
1a006ad6:	4632      	mov	r2, r6
1a006ad8:	462f      	mov	r7, r5
1a006ada:	4626      	mov	r6, r4
1a006adc:	460d      	mov	r5, r1
1a006ade:	4614      	mov	r4, r2
1a006ae0:	e9d7 1301 	ldrd	r1, r3, [r7, #4]
1a006ae4:	eb06 0804 	add.w	r8, r6, r4
1a006ae8:	4543      	cmp	r3, r8
1a006aea:	bfb8      	it	lt
1a006aec:	3101      	addlt	r1, #1
1a006aee:	f7ff ff1f 	bl	1a006930 <_Balloc>
1a006af2:	f100 0914 	add.w	r9, r0, #20
1a006af6:	eb09 0e88 	add.w	lr, r9, r8, lsl #2
1a006afa:	45f1      	cmp	r9, lr
1a006afc:	9000      	str	r0, [sp, #0]
1a006afe:	d205      	bcs.n	1a006b0c <__multiply+0x48>
1a006b00:	464b      	mov	r3, r9
1a006b02:	2200      	movs	r2, #0
1a006b04:	f843 2b04 	str.w	r2, [r3], #4
1a006b08:	459e      	cmp	lr, r3
1a006b0a:	d8fb      	bhi.n	1a006b04 <__multiply+0x40>
1a006b0c:	f105 0a14 	add.w	sl, r5, #20
1a006b10:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
1a006b14:	f107 0314 	add.w	r3, r7, #20
1a006b18:	45a2      	cmp	sl, r4
1a006b1a:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
1a006b1e:	d261      	bcs.n	1a006be4 <__multiply+0x120>
1a006b20:	1b64      	subs	r4, r4, r5
1a006b22:	3c15      	subs	r4, #21
1a006b24:	f024 0403 	bic.w	r4, r4, #3
1a006b28:	f8cd e004 	str.w	lr, [sp, #4]
1a006b2c:	44a2      	add	sl, r4
1a006b2e:	f105 0210 	add.w	r2, r5, #16
1a006b32:	469e      	mov	lr, r3
1a006b34:	e005      	b.n	1a006b42 <__multiply+0x7e>
1a006b36:	0c2d      	lsrs	r5, r5, #16
1a006b38:	d12b      	bne.n	1a006b92 <__multiply+0xce>
1a006b3a:	4592      	cmp	sl, r2
1a006b3c:	f109 0904 	add.w	r9, r9, #4
1a006b40:	d04e      	beq.n	1a006be0 <__multiply+0x11c>
1a006b42:	f852 5f04 	ldr.w	r5, [r2, #4]!
1a006b46:	fa1f fb85 	uxth.w	fp, r5
1a006b4a:	f1bb 0f00 	cmp.w	fp, #0
1a006b4e:	d0f2      	beq.n	1a006b36 <__multiply+0x72>
1a006b50:	4677      	mov	r7, lr
1a006b52:	464e      	mov	r6, r9
1a006b54:	2000      	movs	r0, #0
1a006b56:	e000      	b.n	1a006b5a <__multiply+0x96>
1a006b58:	4626      	mov	r6, r4
1a006b5a:	f857 1b04 	ldr.w	r1, [r7], #4
1a006b5e:	6834      	ldr	r4, [r6, #0]
1a006b60:	b28b      	uxth	r3, r1
1a006b62:	b2a5      	uxth	r5, r4
1a006b64:	0c09      	lsrs	r1, r1, #16
1a006b66:	0c24      	lsrs	r4, r4, #16
1a006b68:	fb0b 5303 	mla	r3, fp, r3, r5
1a006b6c:	4403      	add	r3, r0
1a006b6e:	fb0b 4001 	mla	r0, fp, r1, r4
1a006b72:	eb00 4013 	add.w	r0, r0, r3, lsr #16
1a006b76:	4634      	mov	r4, r6
1a006b78:	b29b      	uxth	r3, r3
1a006b7a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1a006b7e:	45bc      	cmp	ip, r7
1a006b80:	ea4f 4010 	mov.w	r0, r0, lsr #16
1a006b84:	f844 3b04 	str.w	r3, [r4], #4
1a006b88:	d8e6      	bhi.n	1a006b58 <__multiply+0x94>
1a006b8a:	6070      	str	r0, [r6, #4]
1a006b8c:	6815      	ldr	r5, [r2, #0]
1a006b8e:	0c2d      	lsrs	r5, r5, #16
1a006b90:	d0d3      	beq.n	1a006b3a <__multiply+0x76>
1a006b92:	f8d9 3000 	ldr.w	r3, [r9]
1a006b96:	4676      	mov	r6, lr
1a006b98:	4618      	mov	r0, r3
1a006b9a:	46cb      	mov	fp, r9
1a006b9c:	2100      	movs	r1, #0
1a006b9e:	e000      	b.n	1a006ba2 <__multiply+0xde>
1a006ba0:	46a3      	mov	fp, r4
1a006ba2:	8834      	ldrh	r4, [r6, #0]
1a006ba4:	0c00      	lsrs	r0, r0, #16
1a006ba6:	fb05 0004 	mla	r0, r5, r4, r0
1a006baa:	4401      	add	r1, r0
1a006bac:	b29b      	uxth	r3, r3
1a006bae:	465c      	mov	r4, fp
1a006bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a006bb4:	f844 3b04 	str.w	r3, [r4], #4
1a006bb8:	f856 3b04 	ldr.w	r3, [r6], #4
1a006bbc:	f8db 0004 	ldr.w	r0, [fp, #4]
1a006bc0:	0c1b      	lsrs	r3, r3, #16
1a006bc2:	b287      	uxth	r7, r0
1a006bc4:	fb05 7303 	mla	r3, r5, r3, r7
1a006bc8:	eb03 4311 	add.w	r3, r3, r1, lsr #16
1a006bcc:	45b4      	cmp	ip, r6
1a006bce:	ea4f 4113 	mov.w	r1, r3, lsr #16
1a006bd2:	d8e5      	bhi.n	1a006ba0 <__multiply+0xdc>
1a006bd4:	4592      	cmp	sl, r2
1a006bd6:	f8cb 3004 	str.w	r3, [fp, #4]
1a006bda:	f109 0904 	add.w	r9, r9, #4
1a006bde:	d1b0      	bne.n	1a006b42 <__multiply+0x7e>
1a006be0:	f8dd e004 	ldr.w	lr, [sp, #4]
1a006be4:	f1b8 0f00 	cmp.w	r8, #0
1a006be8:	dd0b      	ble.n	1a006c02 <__multiply+0x13e>
1a006bea:	f85e 3c04 	ldr.w	r3, [lr, #-4]
1a006bee:	f1ae 0e04 	sub.w	lr, lr, #4
1a006bf2:	b11b      	cbz	r3, 1a006bfc <__multiply+0x138>
1a006bf4:	e005      	b.n	1a006c02 <__multiply+0x13e>
1a006bf6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
1a006bfa:	b913      	cbnz	r3, 1a006c02 <__multiply+0x13e>
1a006bfc:	f1b8 0801 	subs.w	r8, r8, #1
1a006c00:	d1f9      	bne.n	1a006bf6 <__multiply+0x132>
1a006c02:	9800      	ldr	r0, [sp, #0]
1a006c04:	f8c0 8010 	str.w	r8, [r0, #16]
1a006c08:	b003      	add	sp, #12
1a006c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006c0e:	bf00      	nop

1a006c10 <__pow5mult>:
1a006c10:	f012 0303 	ands.w	r3, r2, #3
1a006c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006c18:	4614      	mov	r4, r2
1a006c1a:	4607      	mov	r7, r0
1a006c1c:	d12e      	bne.n	1a006c7c <__pow5mult+0x6c>
1a006c1e:	460d      	mov	r5, r1
1a006c20:	10a4      	asrs	r4, r4, #2
1a006c22:	d01c      	beq.n	1a006c5e <__pow5mult+0x4e>
1a006c24:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1a006c26:	b396      	cbz	r6, 1a006c8e <__pow5mult+0x7e>
1a006c28:	07e3      	lsls	r3, r4, #31
1a006c2a:	f04f 0800 	mov.w	r8, #0
1a006c2e:	d406      	bmi.n	1a006c3e <__pow5mult+0x2e>
1a006c30:	1064      	asrs	r4, r4, #1
1a006c32:	d014      	beq.n	1a006c5e <__pow5mult+0x4e>
1a006c34:	6830      	ldr	r0, [r6, #0]
1a006c36:	b1a8      	cbz	r0, 1a006c64 <__pow5mult+0x54>
1a006c38:	4606      	mov	r6, r0
1a006c3a:	07e3      	lsls	r3, r4, #31
1a006c3c:	d5f8      	bpl.n	1a006c30 <__pow5mult+0x20>
1a006c3e:	4632      	mov	r2, r6
1a006c40:	4629      	mov	r1, r5
1a006c42:	4638      	mov	r0, r7
1a006c44:	f7ff ff3e 	bl	1a006ac4 <__multiply>
1a006c48:	b1b5      	cbz	r5, 1a006c78 <__pow5mult+0x68>
1a006c4a:	686a      	ldr	r2, [r5, #4]
1a006c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a006c4e:	1064      	asrs	r4, r4, #1
1a006c50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a006c54:	6029      	str	r1, [r5, #0]
1a006c56:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a006c5a:	4605      	mov	r5, r0
1a006c5c:	d1ea      	bne.n	1a006c34 <__pow5mult+0x24>
1a006c5e:	4628      	mov	r0, r5
1a006c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006c64:	4632      	mov	r2, r6
1a006c66:	4631      	mov	r1, r6
1a006c68:	4638      	mov	r0, r7
1a006c6a:	f7ff ff2b 	bl	1a006ac4 <__multiply>
1a006c6e:	6030      	str	r0, [r6, #0]
1a006c70:	f8c0 8000 	str.w	r8, [r0]
1a006c74:	4606      	mov	r6, r0
1a006c76:	e7e0      	b.n	1a006c3a <__pow5mult+0x2a>
1a006c78:	4605      	mov	r5, r0
1a006c7a:	e7d9      	b.n	1a006c30 <__pow5mult+0x20>
1a006c7c:	3b01      	subs	r3, #1
1a006c7e:	4a0b      	ldr	r2, [pc, #44]	; (1a006cac <__pow5mult+0x9c>)
1a006c80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a006c84:	2300      	movs	r3, #0
1a006c86:	f7ff fe83 	bl	1a006990 <__multadd>
1a006c8a:	4605      	mov	r5, r0
1a006c8c:	e7c8      	b.n	1a006c20 <__pow5mult+0x10>
1a006c8e:	2101      	movs	r1, #1
1a006c90:	4638      	mov	r0, r7
1a006c92:	f7ff fe4d 	bl	1a006930 <_Balloc>
1a006c96:	f240 2371 	movw	r3, #625	; 0x271
1a006c9a:	6143      	str	r3, [r0, #20]
1a006c9c:	2201      	movs	r2, #1
1a006c9e:	2300      	movs	r3, #0
1a006ca0:	6102      	str	r2, [r0, #16]
1a006ca2:	4606      	mov	r6, r0
1a006ca4:	64b8      	str	r0, [r7, #72]	; 0x48
1a006ca6:	6003      	str	r3, [r0, #0]
1a006ca8:	e7be      	b.n	1a006c28 <__pow5mult+0x18>
1a006caa:	bf00      	nop
1a006cac:	1a007dc0 	.word	0x1a007dc0

1a006cb0 <__lshift>:
1a006cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a006cb4:	4691      	mov	r9, r2
1a006cb6:	690a      	ldr	r2, [r1, #16]
1a006cb8:	460e      	mov	r6, r1
1a006cba:	ea4f 1469 	mov.w	r4, r9, asr #5
1a006cbe:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
1a006cc2:	eb04 0802 	add.w	r8, r4, r2
1a006cc6:	f108 0501 	add.w	r5, r8, #1
1a006cca:	429d      	cmp	r5, r3
1a006ccc:	4607      	mov	r7, r0
1a006cce:	dd04      	ble.n	1a006cda <__lshift+0x2a>
1a006cd0:	005b      	lsls	r3, r3, #1
1a006cd2:	429d      	cmp	r5, r3
1a006cd4:	f101 0101 	add.w	r1, r1, #1
1a006cd8:	dcfa      	bgt.n	1a006cd0 <__lshift+0x20>
1a006cda:	4638      	mov	r0, r7
1a006cdc:	f7ff fe28 	bl	1a006930 <_Balloc>
1a006ce0:	2c00      	cmp	r4, #0
1a006ce2:	f100 0314 	add.w	r3, r0, #20
1a006ce6:	dd37      	ble.n	1a006d58 <__lshift+0xa8>
1a006ce8:	eb03 0184 	add.w	r1, r3, r4, lsl #2
1a006cec:	2200      	movs	r2, #0
1a006cee:	f843 2b04 	str.w	r2, [r3], #4
1a006cf2:	428b      	cmp	r3, r1
1a006cf4:	d1fb      	bne.n	1a006cee <__lshift+0x3e>
1a006cf6:	6934      	ldr	r4, [r6, #16]
1a006cf8:	f106 0314 	add.w	r3, r6, #20
1a006cfc:	f019 091f 	ands.w	r9, r9, #31
1a006d00:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
1a006d04:	d020      	beq.n	1a006d48 <__lshift+0x98>
1a006d06:	f1c9 0e20 	rsb	lr, r9, #32
1a006d0a:	2200      	movs	r2, #0
1a006d0c:	e000      	b.n	1a006d10 <__lshift+0x60>
1a006d0e:	4651      	mov	r1, sl
1a006d10:	681c      	ldr	r4, [r3, #0]
1a006d12:	468a      	mov	sl, r1
1a006d14:	fa04 f409 	lsl.w	r4, r4, r9
1a006d18:	4314      	orrs	r4, r2
1a006d1a:	f84a 4b04 	str.w	r4, [sl], #4
1a006d1e:	f853 2b04 	ldr.w	r2, [r3], #4
1a006d22:	4563      	cmp	r3, ip
1a006d24:	fa22 f20e 	lsr.w	r2, r2, lr
1a006d28:	d3f1      	bcc.n	1a006d0e <__lshift+0x5e>
1a006d2a:	604a      	str	r2, [r1, #4]
1a006d2c:	b10a      	cbz	r2, 1a006d32 <__lshift+0x82>
1a006d2e:	f108 0502 	add.w	r5, r8, #2
1a006d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a006d34:	6872      	ldr	r2, [r6, #4]
1a006d36:	3d01      	subs	r5, #1
1a006d38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a006d3c:	6105      	str	r5, [r0, #16]
1a006d3e:	6031      	str	r1, [r6, #0]
1a006d40:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
1a006d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a006d48:	3904      	subs	r1, #4
1a006d4a:	f853 2b04 	ldr.w	r2, [r3], #4
1a006d4e:	f841 2f04 	str.w	r2, [r1, #4]!
1a006d52:	459c      	cmp	ip, r3
1a006d54:	d8f9      	bhi.n	1a006d4a <__lshift+0x9a>
1a006d56:	e7ec      	b.n	1a006d32 <__lshift+0x82>
1a006d58:	4619      	mov	r1, r3
1a006d5a:	e7cc      	b.n	1a006cf6 <__lshift+0x46>

1a006d5c <__mcmp>:
1a006d5c:	b430      	push	{r4, r5}
1a006d5e:	690b      	ldr	r3, [r1, #16]
1a006d60:	4605      	mov	r5, r0
1a006d62:	6900      	ldr	r0, [r0, #16]
1a006d64:	1ac0      	subs	r0, r0, r3
1a006d66:	d10f      	bne.n	1a006d88 <__mcmp+0x2c>
1a006d68:	009b      	lsls	r3, r3, #2
1a006d6a:	3514      	adds	r5, #20
1a006d6c:	3114      	adds	r1, #20
1a006d6e:	4419      	add	r1, r3
1a006d70:	442b      	add	r3, r5
1a006d72:	e001      	b.n	1a006d78 <__mcmp+0x1c>
1a006d74:	429d      	cmp	r5, r3
1a006d76:	d207      	bcs.n	1a006d88 <__mcmp+0x2c>
1a006d78:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a006d7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a006d80:	4294      	cmp	r4, r2
1a006d82:	d0f7      	beq.n	1a006d74 <__mcmp+0x18>
1a006d84:	d302      	bcc.n	1a006d8c <__mcmp+0x30>
1a006d86:	2001      	movs	r0, #1
1a006d88:	bc30      	pop	{r4, r5}
1a006d8a:	4770      	bx	lr
1a006d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006d90:	e7fa      	b.n	1a006d88 <__mcmp+0x2c>
1a006d92:	bf00      	nop

1a006d94 <__mdiff>:
1a006d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006d98:	6913      	ldr	r3, [r2, #16]
1a006d9a:	690d      	ldr	r5, [r1, #16]
1a006d9c:	1aed      	subs	r5, r5, r3
1a006d9e:	2d00      	cmp	r5, #0
1a006da0:	460e      	mov	r6, r1
1a006da2:	4690      	mov	r8, r2
1a006da4:	f101 0414 	add.w	r4, r1, #20
1a006da8:	f102 0714 	add.w	r7, r2, #20
1a006dac:	d114      	bne.n	1a006dd8 <__mdiff+0x44>
1a006dae:	009b      	lsls	r3, r3, #2
1a006db0:	18e2      	adds	r2, r4, r3
1a006db2:	443b      	add	r3, r7
1a006db4:	e001      	b.n	1a006dba <__mdiff+0x26>
1a006db6:	42a2      	cmp	r2, r4
1a006db8:	d959      	bls.n	1a006e6e <__mdiff+0xda>
1a006dba:	f852 cd04 	ldr.w	ip, [r2, #-4]!
1a006dbe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
1a006dc2:	458c      	cmp	ip, r1
1a006dc4:	d0f7      	beq.n	1a006db6 <__mdiff+0x22>
1a006dc6:	d209      	bcs.n	1a006ddc <__mdiff+0x48>
1a006dc8:	4622      	mov	r2, r4
1a006dca:	4633      	mov	r3, r6
1a006dcc:	463c      	mov	r4, r7
1a006dce:	4646      	mov	r6, r8
1a006dd0:	4617      	mov	r7, r2
1a006dd2:	4698      	mov	r8, r3
1a006dd4:	2501      	movs	r5, #1
1a006dd6:	e001      	b.n	1a006ddc <__mdiff+0x48>
1a006dd8:	dbf6      	blt.n	1a006dc8 <__mdiff+0x34>
1a006dda:	2500      	movs	r5, #0
1a006ddc:	6871      	ldr	r1, [r6, #4]
1a006dde:	f7ff fda7 	bl	1a006930 <_Balloc>
1a006de2:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a006de6:	6936      	ldr	r6, [r6, #16]
1a006de8:	60c5      	str	r5, [r0, #12]
1a006dea:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
1a006dee:	46bc      	mov	ip, r7
1a006df0:	f100 0514 	add.w	r5, r0, #20
1a006df4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
1a006df8:	2300      	movs	r3, #0
1a006dfa:	f85c 1b04 	ldr.w	r1, [ip], #4
1a006dfe:	f854 8b04 	ldr.w	r8, [r4], #4
1a006e02:	b28a      	uxth	r2, r1
1a006e04:	fa13 f388 	uxtah	r3, r3, r8
1a006e08:	0c09      	lsrs	r1, r1, #16
1a006e0a:	1a9a      	subs	r2, r3, r2
1a006e0c:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
1a006e10:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a006e14:	b292      	uxth	r2, r2
1a006e16:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a006e1a:	45e6      	cmp	lr, ip
1a006e1c:	f845 2b04 	str.w	r2, [r5], #4
1a006e20:	ea4f 4323 	mov.w	r3, r3, asr #16
1a006e24:	d8e9      	bhi.n	1a006dfa <__mdiff+0x66>
1a006e26:	42a7      	cmp	r7, r4
1a006e28:	d917      	bls.n	1a006e5a <__mdiff+0xc6>
1a006e2a:	46ae      	mov	lr, r5
1a006e2c:	46a4      	mov	ip, r4
1a006e2e:	f85c 2b04 	ldr.w	r2, [ip], #4
1a006e32:	fa13 f382 	uxtah	r3, r3, r2
1a006e36:	1419      	asrs	r1, r3, #16
1a006e38:	eb01 4112 	add.w	r1, r1, r2, lsr #16
1a006e3c:	b29b      	uxth	r3, r3
1a006e3e:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
1a006e42:	4567      	cmp	r7, ip
1a006e44:	f84e 2b04 	str.w	r2, [lr], #4
1a006e48:	ea4f 4321 	mov.w	r3, r1, asr #16
1a006e4c:	d8ef      	bhi.n	1a006e2e <__mdiff+0x9a>
1a006e4e:	43e4      	mvns	r4, r4
1a006e50:	4427      	add	r7, r4
1a006e52:	f027 0703 	bic.w	r7, r7, #3
1a006e56:	3704      	adds	r7, #4
1a006e58:	443d      	add	r5, r7
1a006e5a:	3d04      	subs	r5, #4
1a006e5c:	b922      	cbnz	r2, 1a006e68 <__mdiff+0xd4>
1a006e5e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a006e62:	3e01      	subs	r6, #1
1a006e64:	2b00      	cmp	r3, #0
1a006e66:	d0fa      	beq.n	1a006e5e <__mdiff+0xca>
1a006e68:	6106      	str	r6, [r0, #16]
1a006e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006e6e:	2100      	movs	r1, #0
1a006e70:	f7ff fd5e 	bl	1a006930 <_Balloc>
1a006e74:	2201      	movs	r2, #1
1a006e76:	2300      	movs	r3, #0
1a006e78:	e9c0 2304 	strd	r2, r3, [r0, #16]
1a006e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a006e80 <__d2b>:
1a006e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a006e84:	460f      	mov	r7, r1
1a006e86:	b083      	sub	sp, #12
1a006e88:	2101      	movs	r1, #1
1a006e8a:	ec55 4b10 	vmov	r4, r5, d0
1a006e8e:	4616      	mov	r6, r2
1a006e90:	f7ff fd4e 	bl	1a006930 <_Balloc>
1a006e94:	f3c5 580a 	ubfx	r8, r5, #20, #11
1a006e98:	4681      	mov	r9, r0
1a006e9a:	f3c5 0313 	ubfx	r3, r5, #0, #20
1a006e9e:	f1b8 0f00 	cmp.w	r8, #0
1a006ea2:	d001      	beq.n	1a006ea8 <__d2b+0x28>
1a006ea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a006ea8:	2c00      	cmp	r4, #0
1a006eaa:	9301      	str	r3, [sp, #4]
1a006eac:	d024      	beq.n	1a006ef8 <__d2b+0x78>
1a006eae:	a802      	add	r0, sp, #8
1a006eb0:	f840 4d08 	str.w	r4, [r0, #-8]!
1a006eb4:	f7ff fdcc 	bl	1a006a50 <__lo0bits>
1a006eb8:	2800      	cmp	r0, #0
1a006eba:	d136      	bne.n	1a006f2a <__d2b+0xaa>
1a006ebc:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006ec0:	f8c9 2014 	str.w	r2, [r9, #20]
1a006ec4:	2b00      	cmp	r3, #0
1a006ec6:	bf0c      	ite	eq
1a006ec8:	2101      	moveq	r1, #1
1a006eca:	2102      	movne	r1, #2
1a006ecc:	f8c9 3018 	str.w	r3, [r9, #24]
1a006ed0:	f8c9 1010 	str.w	r1, [r9, #16]
1a006ed4:	f1b8 0f00 	cmp.w	r8, #0
1a006ed8:	d11b      	bne.n	1a006f12 <__d2b+0x92>
1a006eda:	eb09 0381 	add.w	r3, r9, r1, lsl #2
1a006ede:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a006ee2:	6038      	str	r0, [r7, #0]
1a006ee4:	6918      	ldr	r0, [r3, #16]
1a006ee6:	f7ff fd93 	bl	1a006a10 <__hi0bits>
1a006eea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a006eee:	6030      	str	r0, [r6, #0]
1a006ef0:	4648      	mov	r0, r9
1a006ef2:	b003      	add	sp, #12
1a006ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a006ef8:	a801      	add	r0, sp, #4
1a006efa:	f7ff fda9 	bl	1a006a50 <__lo0bits>
1a006efe:	9b01      	ldr	r3, [sp, #4]
1a006f00:	f8c9 3014 	str.w	r3, [r9, #20]
1a006f04:	2101      	movs	r1, #1
1a006f06:	3020      	adds	r0, #32
1a006f08:	f8c9 1010 	str.w	r1, [r9, #16]
1a006f0c:	f1b8 0f00 	cmp.w	r8, #0
1a006f10:	d0e3      	beq.n	1a006eda <__d2b+0x5a>
1a006f12:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
1a006f16:	eb08 0300 	add.w	r3, r8, r0
1a006f1a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a006f1e:	603b      	str	r3, [r7, #0]
1a006f20:	6030      	str	r0, [r6, #0]
1a006f22:	4648      	mov	r0, r9
1a006f24:	b003      	add	sp, #12
1a006f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a006f2a:	e9dd 1300 	ldrd	r1, r3, [sp]
1a006f2e:	f1c0 0220 	rsb	r2, r0, #32
1a006f32:	fa03 f202 	lsl.w	r2, r3, r2
1a006f36:	430a      	orrs	r2, r1
1a006f38:	40c3      	lsrs	r3, r0
1a006f3a:	9301      	str	r3, [sp, #4]
1a006f3c:	f8c9 2014 	str.w	r2, [r9, #20]
1a006f40:	e7c0      	b.n	1a006ec4 <__d2b+0x44>
1a006f42:	bf00      	nop

1a006f44 <_realloc_r>:
1a006f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006f48:	4692      	mov	sl, r2
1a006f4a:	b083      	sub	sp, #12
1a006f4c:	2900      	cmp	r1, #0
1a006f4e:	f000 80a1 	beq.w	1a007094 <_realloc_r+0x150>
1a006f52:	460d      	mov	r5, r1
1a006f54:	4680      	mov	r8, r0
1a006f56:	f10a 040b 	add.w	r4, sl, #11
1a006f5a:	f7ff fcdd 	bl	1a006918 <__malloc_lock>
1a006f5e:	f855 2c04 	ldr.w	r2, [r5, #-4]
1a006f62:	2c16      	cmp	r4, #22
1a006f64:	f022 0603 	bic.w	r6, r2, #3
1a006f68:	f1a5 0708 	sub.w	r7, r5, #8
1a006f6c:	d83e      	bhi.n	1a006fec <_realloc_r+0xa8>
1a006f6e:	2410      	movs	r4, #16
1a006f70:	4621      	mov	r1, r4
1a006f72:	45a2      	cmp	sl, r4
1a006f74:	d83f      	bhi.n	1a006ff6 <_realloc_r+0xb2>
1a006f76:	428e      	cmp	r6, r1
1a006f78:	eb07 0906 	add.w	r9, r7, r6
1a006f7c:	da74      	bge.n	1a007068 <_realloc_r+0x124>
1a006f7e:	4bc7      	ldr	r3, [pc, #796]	; (1a00729c <_realloc_r+0x358>)
1a006f80:	6898      	ldr	r0, [r3, #8]
1a006f82:	4548      	cmp	r0, r9
1a006f84:	f000 80aa 	beq.w	1a0070dc <_realloc_r+0x198>
1a006f88:	f8d9 0004 	ldr.w	r0, [r9, #4]
1a006f8c:	f020 0301 	bic.w	r3, r0, #1
1a006f90:	444b      	add	r3, r9
1a006f92:	685b      	ldr	r3, [r3, #4]
1a006f94:	07db      	lsls	r3, r3, #31
1a006f96:	f140 8083 	bpl.w	1a0070a0 <_realloc_r+0x15c>
1a006f9a:	07d2      	lsls	r2, r2, #31
1a006f9c:	d534      	bpl.n	1a007008 <_realloc_r+0xc4>
1a006f9e:	4651      	mov	r1, sl
1a006fa0:	4640      	mov	r0, r8
1a006fa2:	f7ff f95d 	bl	1a006260 <_malloc_r>
1a006fa6:	4682      	mov	sl, r0
1a006fa8:	b1e0      	cbz	r0, 1a006fe4 <_realloc_r+0xa0>
1a006faa:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a006fae:	f023 0301 	bic.w	r3, r3, #1
1a006fb2:	443b      	add	r3, r7
1a006fb4:	f1a0 0208 	sub.w	r2, r0, #8
1a006fb8:	4293      	cmp	r3, r2
1a006fba:	f000 80f9 	beq.w	1a0071b0 <_realloc_r+0x26c>
1a006fbe:	1f32      	subs	r2, r6, #4
1a006fc0:	2a24      	cmp	r2, #36	; 0x24
1a006fc2:	f200 8107 	bhi.w	1a0071d4 <_realloc_r+0x290>
1a006fc6:	2a13      	cmp	r2, #19
1a006fc8:	6829      	ldr	r1, [r5, #0]
1a006fca:	f200 80e6 	bhi.w	1a00719a <_realloc_r+0x256>
1a006fce:	4603      	mov	r3, r0
1a006fd0:	462a      	mov	r2, r5
1a006fd2:	6019      	str	r1, [r3, #0]
1a006fd4:	6851      	ldr	r1, [r2, #4]
1a006fd6:	6059      	str	r1, [r3, #4]
1a006fd8:	6892      	ldr	r2, [r2, #8]
1a006fda:	609a      	str	r2, [r3, #8]
1a006fdc:	4629      	mov	r1, r5
1a006fde:	4640      	mov	r0, r8
1a006fe0:	f7fe fe14 	bl	1a005c0c <_free_r>
1a006fe4:	4640      	mov	r0, r8
1a006fe6:	f7ff fc9d 	bl	1a006924 <__malloc_unlock>
1a006fea:	e04f      	b.n	1a00708c <_realloc_r+0x148>
1a006fec:	f024 0407 	bic.w	r4, r4, #7
1a006ff0:	2c00      	cmp	r4, #0
1a006ff2:	4621      	mov	r1, r4
1a006ff4:	dabd      	bge.n	1a006f72 <_realloc_r+0x2e>
1a006ff6:	f04f 0a00 	mov.w	sl, #0
1a006ffa:	230c      	movs	r3, #12
1a006ffc:	4650      	mov	r0, sl
1a006ffe:	f8c8 3000 	str.w	r3, [r8]
1a007002:	b003      	add	sp, #12
1a007004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007008:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a00700c:	eba7 0b03 	sub.w	fp, r7, r3
1a007010:	f8db 2004 	ldr.w	r2, [fp, #4]
1a007014:	f022 0203 	bic.w	r2, r2, #3
1a007018:	18b3      	adds	r3, r6, r2
1a00701a:	428b      	cmp	r3, r1
1a00701c:	dbbf      	blt.n	1a006f9e <_realloc_r+0x5a>
1a00701e:	46da      	mov	sl, fp
1a007020:	f8db 100c 	ldr.w	r1, [fp, #12]
1a007024:	f85a 0f08 	ldr.w	r0, [sl, #8]!
1a007028:	1f32      	subs	r2, r6, #4
1a00702a:	2a24      	cmp	r2, #36	; 0x24
1a00702c:	60c1      	str	r1, [r0, #12]
1a00702e:	eb0b 0903 	add.w	r9, fp, r3
1a007032:	6088      	str	r0, [r1, #8]
1a007034:	f200 80c6 	bhi.w	1a0071c4 <_realloc_r+0x280>
1a007038:	2a13      	cmp	r2, #19
1a00703a:	6829      	ldr	r1, [r5, #0]
1a00703c:	f240 80c0 	bls.w	1a0071c0 <_realloc_r+0x27c>
1a007040:	f8cb 1008 	str.w	r1, [fp, #8]
1a007044:	6869      	ldr	r1, [r5, #4]
1a007046:	f8cb 100c 	str.w	r1, [fp, #12]
1a00704a:	2a1b      	cmp	r2, #27
1a00704c:	68a9      	ldr	r1, [r5, #8]
1a00704e:	f200 80d8 	bhi.w	1a007202 <_realloc_r+0x2be>
1a007052:	f10b 0210 	add.w	r2, fp, #16
1a007056:	3508      	adds	r5, #8
1a007058:	6011      	str	r1, [r2, #0]
1a00705a:	6869      	ldr	r1, [r5, #4]
1a00705c:	6051      	str	r1, [r2, #4]
1a00705e:	68a9      	ldr	r1, [r5, #8]
1a007060:	6091      	str	r1, [r2, #8]
1a007062:	461e      	mov	r6, r3
1a007064:	465f      	mov	r7, fp
1a007066:	4655      	mov	r5, sl
1a007068:	687b      	ldr	r3, [r7, #4]
1a00706a:	1b32      	subs	r2, r6, r4
1a00706c:	2a0f      	cmp	r2, #15
1a00706e:	f003 0301 	and.w	r3, r3, #1
1a007072:	d822      	bhi.n	1a0070ba <_realloc_r+0x176>
1a007074:	4333      	orrs	r3, r6
1a007076:	607b      	str	r3, [r7, #4]
1a007078:	f8d9 3004 	ldr.w	r3, [r9, #4]
1a00707c:	f043 0301 	orr.w	r3, r3, #1
1a007080:	f8c9 3004 	str.w	r3, [r9, #4]
1a007084:	4640      	mov	r0, r8
1a007086:	f7ff fc4d 	bl	1a006924 <__malloc_unlock>
1a00708a:	46aa      	mov	sl, r5
1a00708c:	4650      	mov	r0, sl
1a00708e:	b003      	add	sp, #12
1a007090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007094:	4611      	mov	r1, r2
1a007096:	b003      	add	sp, #12
1a007098:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00709c:	f7ff b8e0 	b.w	1a006260 <_malloc_r>
1a0070a0:	f020 0003 	bic.w	r0, r0, #3
1a0070a4:	1833      	adds	r3, r6, r0
1a0070a6:	428b      	cmp	r3, r1
1a0070a8:	db61      	blt.n	1a00716e <_realloc_r+0x22a>
1a0070aa:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
1a0070ae:	461e      	mov	r6, r3
1a0070b0:	60ca      	str	r2, [r1, #12]
1a0070b2:	eb07 0903 	add.w	r9, r7, r3
1a0070b6:	6091      	str	r1, [r2, #8]
1a0070b8:	e7d6      	b.n	1a007068 <_realloc_r+0x124>
1a0070ba:	1939      	adds	r1, r7, r4
1a0070bc:	4323      	orrs	r3, r4
1a0070be:	f042 0201 	orr.w	r2, r2, #1
1a0070c2:	607b      	str	r3, [r7, #4]
1a0070c4:	604a      	str	r2, [r1, #4]
1a0070c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
1a0070ca:	f043 0301 	orr.w	r3, r3, #1
1a0070ce:	3108      	adds	r1, #8
1a0070d0:	f8c9 3004 	str.w	r3, [r9, #4]
1a0070d4:	4640      	mov	r0, r8
1a0070d6:	f7fe fd99 	bl	1a005c0c <_free_r>
1a0070da:	e7d3      	b.n	1a007084 <_realloc_r+0x140>
1a0070dc:	6840      	ldr	r0, [r0, #4]
1a0070de:	f020 0903 	bic.w	r9, r0, #3
1a0070e2:	44b1      	add	r9, r6
1a0070e4:	f104 0010 	add.w	r0, r4, #16
1a0070e8:	4581      	cmp	r9, r0
1a0070ea:	da77      	bge.n	1a0071dc <_realloc_r+0x298>
1a0070ec:	07d2      	lsls	r2, r2, #31
1a0070ee:	f53f af56 	bmi.w	1a006f9e <_realloc_r+0x5a>
1a0070f2:	f855 2c08 	ldr.w	r2, [r5, #-8]
1a0070f6:	eba7 0b02 	sub.w	fp, r7, r2
1a0070fa:	f8db 2004 	ldr.w	r2, [fp, #4]
1a0070fe:	f022 0203 	bic.w	r2, r2, #3
1a007102:	4491      	add	r9, r2
1a007104:	4548      	cmp	r0, r9
1a007106:	dc87      	bgt.n	1a007018 <_realloc_r+0xd4>
1a007108:	46da      	mov	sl, fp
1a00710a:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00710e:	f85a 0f08 	ldr.w	r0, [sl, #8]!
1a007112:	1f32      	subs	r2, r6, #4
1a007114:	2a24      	cmp	r2, #36	; 0x24
1a007116:	60c1      	str	r1, [r0, #12]
1a007118:	6088      	str	r0, [r1, #8]
1a00711a:	f200 80a1 	bhi.w	1a007260 <_realloc_r+0x31c>
1a00711e:	2a13      	cmp	r2, #19
1a007120:	6829      	ldr	r1, [r5, #0]
1a007122:	f240 809b 	bls.w	1a00725c <_realloc_r+0x318>
1a007126:	f8cb 1008 	str.w	r1, [fp, #8]
1a00712a:	6869      	ldr	r1, [r5, #4]
1a00712c:	f8cb 100c 	str.w	r1, [fp, #12]
1a007130:	2a1b      	cmp	r2, #27
1a007132:	68a9      	ldr	r1, [r5, #8]
1a007134:	f200 809b 	bhi.w	1a00726e <_realloc_r+0x32a>
1a007138:	f10b 0210 	add.w	r2, fp, #16
1a00713c:	3508      	adds	r5, #8
1a00713e:	6011      	str	r1, [r2, #0]
1a007140:	6869      	ldr	r1, [r5, #4]
1a007142:	6051      	str	r1, [r2, #4]
1a007144:	68a9      	ldr	r1, [r5, #8]
1a007146:	6091      	str	r1, [r2, #8]
1a007148:	eb0b 0104 	add.w	r1, fp, r4
1a00714c:	eba9 0204 	sub.w	r2, r9, r4
1a007150:	f042 0201 	orr.w	r2, r2, #1
1a007154:	6099      	str	r1, [r3, #8]
1a007156:	604a      	str	r2, [r1, #4]
1a007158:	f8db 3004 	ldr.w	r3, [fp, #4]
1a00715c:	f003 0301 	and.w	r3, r3, #1
1a007160:	431c      	orrs	r4, r3
1a007162:	4640      	mov	r0, r8
1a007164:	f8cb 4004 	str.w	r4, [fp, #4]
1a007168:	f7ff fbdc 	bl	1a006924 <__malloc_unlock>
1a00716c:	e78e      	b.n	1a00708c <_realloc_r+0x148>
1a00716e:	07d3      	lsls	r3, r2, #31
1a007170:	f53f af15 	bmi.w	1a006f9e <_realloc_r+0x5a>
1a007174:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a007178:	eba7 0b03 	sub.w	fp, r7, r3
1a00717c:	f8db 2004 	ldr.w	r2, [fp, #4]
1a007180:	f022 0203 	bic.w	r2, r2, #3
1a007184:	4410      	add	r0, r2
1a007186:	1983      	adds	r3, r0, r6
1a007188:	428b      	cmp	r3, r1
1a00718a:	f6ff af45 	blt.w	1a007018 <_realloc_r+0xd4>
1a00718e:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
1a007192:	46da      	mov	sl, fp
1a007194:	60ca      	str	r2, [r1, #12]
1a007196:	6091      	str	r1, [r2, #8]
1a007198:	e742      	b.n	1a007020 <_realloc_r+0xdc>
1a00719a:	6001      	str	r1, [r0, #0]
1a00719c:	686b      	ldr	r3, [r5, #4]
1a00719e:	6043      	str	r3, [r0, #4]
1a0071a0:	2a1b      	cmp	r2, #27
1a0071a2:	d83a      	bhi.n	1a00721a <_realloc_r+0x2d6>
1a0071a4:	f105 0208 	add.w	r2, r5, #8
1a0071a8:	f100 0308 	add.w	r3, r0, #8
1a0071ac:	68a9      	ldr	r1, [r5, #8]
1a0071ae:	e710      	b.n	1a006fd2 <_realloc_r+0x8e>
1a0071b0:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a0071b4:	f023 0303 	bic.w	r3, r3, #3
1a0071b8:	441e      	add	r6, r3
1a0071ba:	eb07 0906 	add.w	r9, r7, r6
1a0071be:	e753      	b.n	1a007068 <_realloc_r+0x124>
1a0071c0:	4652      	mov	r2, sl
1a0071c2:	e749      	b.n	1a007058 <_realloc_r+0x114>
1a0071c4:	4629      	mov	r1, r5
1a0071c6:	4650      	mov	r0, sl
1a0071c8:	461e      	mov	r6, r3
1a0071ca:	465f      	mov	r7, fp
1a0071cc:	f7ff fb40 	bl	1a006850 <memmove>
1a0071d0:	4655      	mov	r5, sl
1a0071d2:	e749      	b.n	1a007068 <_realloc_r+0x124>
1a0071d4:	4629      	mov	r1, r5
1a0071d6:	f7ff fb3b 	bl	1a006850 <memmove>
1a0071da:	e6ff      	b.n	1a006fdc <_realloc_r+0x98>
1a0071dc:	4427      	add	r7, r4
1a0071de:	eba9 0904 	sub.w	r9, r9, r4
1a0071e2:	f049 0201 	orr.w	r2, r9, #1
1a0071e6:	609f      	str	r7, [r3, #8]
1a0071e8:	607a      	str	r2, [r7, #4]
1a0071ea:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a0071ee:	f003 0301 	and.w	r3, r3, #1
1a0071f2:	431c      	orrs	r4, r3
1a0071f4:	4640      	mov	r0, r8
1a0071f6:	f845 4c04 	str.w	r4, [r5, #-4]
1a0071fa:	f7ff fb93 	bl	1a006924 <__malloc_unlock>
1a0071fe:	46aa      	mov	sl, r5
1a007200:	e744      	b.n	1a00708c <_realloc_r+0x148>
1a007202:	f8cb 1010 	str.w	r1, [fp, #16]
1a007206:	68e9      	ldr	r1, [r5, #12]
1a007208:	f8cb 1014 	str.w	r1, [fp, #20]
1a00720c:	2a24      	cmp	r2, #36	; 0x24
1a00720e:	d010      	beq.n	1a007232 <_realloc_r+0x2ee>
1a007210:	6929      	ldr	r1, [r5, #16]
1a007212:	f10b 0218 	add.w	r2, fp, #24
1a007216:	3510      	adds	r5, #16
1a007218:	e71e      	b.n	1a007058 <_realloc_r+0x114>
1a00721a:	68ab      	ldr	r3, [r5, #8]
1a00721c:	6083      	str	r3, [r0, #8]
1a00721e:	68eb      	ldr	r3, [r5, #12]
1a007220:	60c3      	str	r3, [r0, #12]
1a007222:	2a24      	cmp	r2, #36	; 0x24
1a007224:	d010      	beq.n	1a007248 <_realloc_r+0x304>
1a007226:	f105 0210 	add.w	r2, r5, #16
1a00722a:	f100 0310 	add.w	r3, r0, #16
1a00722e:	6929      	ldr	r1, [r5, #16]
1a007230:	e6cf      	b.n	1a006fd2 <_realloc_r+0x8e>
1a007232:	692a      	ldr	r2, [r5, #16]
1a007234:	f8cb 2018 	str.w	r2, [fp, #24]
1a007238:	696a      	ldr	r2, [r5, #20]
1a00723a:	f8cb 201c 	str.w	r2, [fp, #28]
1a00723e:	69a9      	ldr	r1, [r5, #24]
1a007240:	f10b 0220 	add.w	r2, fp, #32
1a007244:	3518      	adds	r5, #24
1a007246:	e707      	b.n	1a007058 <_realloc_r+0x114>
1a007248:	692b      	ldr	r3, [r5, #16]
1a00724a:	6103      	str	r3, [r0, #16]
1a00724c:	696b      	ldr	r3, [r5, #20]
1a00724e:	6143      	str	r3, [r0, #20]
1a007250:	69a9      	ldr	r1, [r5, #24]
1a007252:	f105 0218 	add.w	r2, r5, #24
1a007256:	f100 0318 	add.w	r3, r0, #24
1a00725a:	e6ba      	b.n	1a006fd2 <_realloc_r+0x8e>
1a00725c:	4652      	mov	r2, sl
1a00725e:	e76e      	b.n	1a00713e <_realloc_r+0x1fa>
1a007260:	4629      	mov	r1, r5
1a007262:	4650      	mov	r0, sl
1a007264:	9301      	str	r3, [sp, #4]
1a007266:	f7ff faf3 	bl	1a006850 <memmove>
1a00726a:	9b01      	ldr	r3, [sp, #4]
1a00726c:	e76c      	b.n	1a007148 <_realloc_r+0x204>
1a00726e:	f8cb 1010 	str.w	r1, [fp, #16]
1a007272:	68e9      	ldr	r1, [r5, #12]
1a007274:	f8cb 1014 	str.w	r1, [fp, #20]
1a007278:	2a24      	cmp	r2, #36	; 0x24
1a00727a:	d004      	beq.n	1a007286 <_realloc_r+0x342>
1a00727c:	6929      	ldr	r1, [r5, #16]
1a00727e:	f10b 0218 	add.w	r2, fp, #24
1a007282:	3510      	adds	r5, #16
1a007284:	e75b      	b.n	1a00713e <_realloc_r+0x1fa>
1a007286:	692a      	ldr	r2, [r5, #16]
1a007288:	f8cb 2018 	str.w	r2, [fp, #24]
1a00728c:	696a      	ldr	r2, [r5, #20]
1a00728e:	f8cb 201c 	str.w	r2, [fp, #28]
1a007292:	69a9      	ldr	r1, [r5, #24]
1a007294:	f10b 0220 	add.w	r2, fp, #32
1a007298:	3518      	adds	r5, #24
1a00729a:	e750      	b.n	1a00713e <_realloc_r+0x1fa>
1a00729c:	10000478 	.word	0x10000478

1a0072a0 <frexp>:
1a0072a0:	ec53 2b10 	vmov	r2, r3, d0
1a0072a4:	b570      	push	{r4, r5, r6, lr}
1a0072a6:	4e16      	ldr	r6, [pc, #88]	; (1a007300 <frexp+0x60>)
1a0072a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a0072ac:	2500      	movs	r5, #0
1a0072ae:	42b1      	cmp	r1, r6
1a0072b0:	4604      	mov	r4, r0
1a0072b2:	6005      	str	r5, [r0, #0]
1a0072b4:	dc21      	bgt.n	1a0072fa <frexp+0x5a>
1a0072b6:	ee10 6a10 	vmov	r6, s0
1a0072ba:	430e      	orrs	r6, r1
1a0072bc:	d01d      	beq.n	1a0072fa <frexp+0x5a>
1a0072be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a0072c2:	4618      	mov	r0, r3
1a0072c4:	da0c      	bge.n	1a0072e0 <frexp+0x40>
1a0072c6:	4619      	mov	r1, r3
1a0072c8:	2200      	movs	r2, #0
1a0072ca:	ee10 0a10 	vmov	r0, s0
1a0072ce:	4b0d      	ldr	r3, [pc, #52]	; (1a007304 <frexp+0x64>)
1a0072d0:	f7fa ff2e 	bl	1a002130 <__aeabi_dmul>
1a0072d4:	f06f 0535 	mvn.w	r5, #53	; 0x35
1a0072d8:	4602      	mov	r2, r0
1a0072da:	4608      	mov	r0, r1
1a0072dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0072e0:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
1a0072e4:	1509      	asrs	r1, r1, #20
1a0072e6:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
1a0072ea:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
1a0072ee:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
1a0072f2:	4429      	add	r1, r5
1a0072f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a0072f8:	6021      	str	r1, [r4, #0]
1a0072fa:	ec43 2b10 	vmov	d0, r2, r3
1a0072fe:	bd70      	pop	{r4, r5, r6, pc}
1a007300:	7fefffff 	.word	0x7fefffff
1a007304:	43500000 	.word	0x43500000

1a007308 <__sread>:
1a007308:	b510      	push	{r4, lr}
1a00730a:	460c      	mov	r4, r1
1a00730c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007310:	f7f9 fa48 	bl	1a0007a4 <_read_r>
1a007314:	2800      	cmp	r0, #0
1a007316:	db03      	blt.n	1a007320 <__sread+0x18>
1a007318:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a00731a:	4403      	add	r3, r0
1a00731c:	6523      	str	r3, [r4, #80]	; 0x50
1a00731e:	bd10      	pop	{r4, pc}
1a007320:	89a3      	ldrh	r3, [r4, #12]
1a007322:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a007326:	81a3      	strh	r3, [r4, #12]
1a007328:	bd10      	pop	{r4, pc}
1a00732a:	bf00      	nop

1a00732c <__swrite>:
1a00732c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a007330:	4616      	mov	r6, r2
1a007332:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a007336:	461f      	mov	r7, r3
1a007338:	05d3      	lsls	r3, r2, #23
1a00733a:	460c      	mov	r4, r1
1a00733c:	4605      	mov	r5, r0
1a00733e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007342:	d507      	bpl.n	1a007354 <__swrite+0x28>
1a007344:	2200      	movs	r2, #0
1a007346:	2302      	movs	r3, #2
1a007348:	f7f9 fa27 	bl	1a00079a <_lseek_r>
1a00734c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a007350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a007354:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a007358:	81a2      	strh	r2, [r4, #12]
1a00735a:	463b      	mov	r3, r7
1a00735c:	4632      	mov	r2, r6
1a00735e:	4628      	mov	r0, r5
1a007360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a007364:	f7f9 ba45 	b.w	1a0007f2 <_write_r>

1a007368 <__sseek>:
1a007368:	b510      	push	{r4, lr}
1a00736a:	460c      	mov	r4, r1
1a00736c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007370:	f7f9 fa13 	bl	1a00079a <_lseek_r>
1a007374:	89a3      	ldrh	r3, [r4, #12]
1a007376:	1c42      	adds	r2, r0, #1
1a007378:	bf0e      	itee	eq
1a00737a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a00737e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a007382:	6520      	strne	r0, [r4, #80]	; 0x50
1a007384:	81a3      	strh	r3, [r4, #12]
1a007386:	bd10      	pop	{r4, pc}

1a007388 <__sclose>:
1a007388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00738c:	f7f9 b9f2 	b.w	1a000774 <_close_r>

1a007390 <strncpy>:
1a007390:	ea40 0301 	orr.w	r3, r0, r1
1a007394:	079b      	lsls	r3, r3, #30
1a007396:	b470      	push	{r4, r5, r6}
1a007398:	d12a      	bne.n	1a0073f0 <strncpy+0x60>
1a00739a:	2a03      	cmp	r2, #3
1a00739c:	d928      	bls.n	1a0073f0 <strncpy+0x60>
1a00739e:	460c      	mov	r4, r1
1a0073a0:	4603      	mov	r3, r0
1a0073a2:	4621      	mov	r1, r4
1a0073a4:	f854 6b04 	ldr.w	r6, [r4], #4
1a0073a8:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
1a0073ac:	ea25 0506 	bic.w	r5, r5, r6
1a0073b0:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
1a0073b4:	d106      	bne.n	1a0073c4 <strncpy+0x34>
1a0073b6:	3a04      	subs	r2, #4
1a0073b8:	2a03      	cmp	r2, #3
1a0073ba:	f843 6b04 	str.w	r6, [r3], #4
1a0073be:	4621      	mov	r1, r4
1a0073c0:	d8ef      	bhi.n	1a0073a2 <strncpy+0x12>
1a0073c2:	b19a      	cbz	r2, 1a0073ec <strncpy+0x5c>
1a0073c4:	780c      	ldrb	r4, [r1, #0]
1a0073c6:	701c      	strb	r4, [r3, #0]
1a0073c8:	3a01      	subs	r2, #1
1a0073ca:	3301      	adds	r3, #1
1a0073cc:	b13c      	cbz	r4, 1a0073de <strncpy+0x4e>
1a0073ce:	b16a      	cbz	r2, 1a0073ec <strncpy+0x5c>
1a0073d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a0073d4:	f803 4b01 	strb.w	r4, [r3], #1
1a0073d8:	3a01      	subs	r2, #1
1a0073da:	2c00      	cmp	r4, #0
1a0073dc:	d1f7      	bne.n	1a0073ce <strncpy+0x3e>
1a0073de:	b12a      	cbz	r2, 1a0073ec <strncpy+0x5c>
1a0073e0:	441a      	add	r2, r3
1a0073e2:	2100      	movs	r1, #0
1a0073e4:	f803 1b01 	strb.w	r1, [r3], #1
1a0073e8:	4293      	cmp	r3, r2
1a0073ea:	d1fb      	bne.n	1a0073e4 <strncpy+0x54>
1a0073ec:	bc70      	pop	{r4, r5, r6}
1a0073ee:	4770      	bx	lr
1a0073f0:	4603      	mov	r3, r0
1a0073f2:	e7e6      	b.n	1a0073c2 <strncpy+0x32>

1a0073f4 <__sprint_r.part.0>:
1a0073f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0073f8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
1a0073fa:	049c      	lsls	r4, r3, #18
1a0073fc:	4692      	mov	sl, r2
1a0073fe:	d52d      	bpl.n	1a00745c <__sprint_r.part.0+0x68>
1a007400:	6893      	ldr	r3, [r2, #8]
1a007402:	6812      	ldr	r2, [r2, #0]
1a007404:	b343      	cbz	r3, 1a007458 <__sprint_r.part.0+0x64>
1a007406:	460e      	mov	r6, r1
1a007408:	4607      	mov	r7, r0
1a00740a:	f102 0908 	add.w	r9, r2, #8
1a00740e:	e959 5b02 	ldrd	r5, fp, [r9, #-8]
1a007412:	ea5f 089b 	movs.w	r8, fp, lsr #2
1a007416:	d015      	beq.n	1a007444 <__sprint_r.part.0+0x50>
1a007418:	3d04      	subs	r5, #4
1a00741a:	2400      	movs	r4, #0
1a00741c:	e001      	b.n	1a007422 <__sprint_r.part.0+0x2e>
1a00741e:	45a0      	cmp	r8, r4
1a007420:	d00e      	beq.n	1a007440 <__sprint_r.part.0+0x4c>
1a007422:	4632      	mov	r2, r6
1a007424:	f855 1f04 	ldr.w	r1, [r5, #4]!
1a007428:	4638      	mov	r0, r7
1a00742a:	f000 f915 	bl	1a007658 <_fputwc_r>
1a00742e:	1c43      	adds	r3, r0, #1
1a007430:	f104 0401 	add.w	r4, r4, #1
1a007434:	d1f3      	bne.n	1a00741e <__sprint_r.part.0+0x2a>
1a007436:	2300      	movs	r3, #0
1a007438:	e9ca 3301 	strd	r3, r3, [sl, #4]
1a00743c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007440:	f8da 3008 	ldr.w	r3, [sl, #8]
1a007444:	f02b 0b03 	bic.w	fp, fp, #3
1a007448:	eba3 030b 	sub.w	r3, r3, fp
1a00744c:	f8ca 3008 	str.w	r3, [sl, #8]
1a007450:	f109 0908 	add.w	r9, r9, #8
1a007454:	2b00      	cmp	r3, #0
1a007456:	d1da      	bne.n	1a00740e <__sprint_r.part.0+0x1a>
1a007458:	2000      	movs	r0, #0
1a00745a:	e7ec      	b.n	1a007436 <__sprint_r.part.0+0x42>
1a00745c:	f7fe fcca 	bl	1a005df4 <__sfvwrite_r>
1a007460:	2300      	movs	r3, #0
1a007462:	e9ca 3301 	strd	r3, r3, [sl, #4]
1a007466:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00746a:	bf00      	nop

1a00746c <__sprint_r>:
1a00746c:	6893      	ldr	r3, [r2, #8]
1a00746e:	b10b      	cbz	r3, 1a007474 <__sprint_r+0x8>
1a007470:	f7ff bfc0 	b.w	1a0073f4 <__sprint_r.part.0>
1a007474:	b410      	push	{r4}
1a007476:	4618      	mov	r0, r3
1a007478:	6053      	str	r3, [r2, #4]
1a00747a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00747e:	4770      	bx	lr

1a007480 <_calloc_r>:
1a007480:	b510      	push	{r4, lr}
1a007482:	fb02 f101 	mul.w	r1, r2, r1
1a007486:	f7fe feeb 	bl	1a006260 <_malloc_r>
1a00748a:	4604      	mov	r4, r0
1a00748c:	b1d8      	cbz	r0, 1a0074c6 <_calloc_r+0x46>
1a00748e:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a007492:	f022 0203 	bic.w	r2, r2, #3
1a007496:	3a04      	subs	r2, #4
1a007498:	2a24      	cmp	r2, #36	; 0x24
1a00749a:	d81d      	bhi.n	1a0074d8 <_calloc_r+0x58>
1a00749c:	2a13      	cmp	r2, #19
1a00749e:	d914      	bls.n	1a0074ca <_calloc_r+0x4a>
1a0074a0:	2300      	movs	r3, #0
1a0074a2:	2a1b      	cmp	r2, #27
1a0074a4:	e9c0 3300 	strd	r3, r3, [r0]
1a0074a8:	d91b      	bls.n	1a0074e2 <_calloc_r+0x62>
1a0074aa:	2a24      	cmp	r2, #36	; 0x24
1a0074ac:	e9c0 3302 	strd	r3, r3, [r0, #8]
1a0074b0:	bf0a      	itet	eq
1a0074b2:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
1a0074b6:	f100 0210 	addne.w	r2, r0, #16
1a0074ba:	f100 0218 	addeq.w	r2, r0, #24
1a0074be:	2300      	movs	r3, #0
1a0074c0:	e9c2 3300 	strd	r3, r3, [r2]
1a0074c4:	6093      	str	r3, [r2, #8]
1a0074c6:	4620      	mov	r0, r4
1a0074c8:	bd10      	pop	{r4, pc}
1a0074ca:	4602      	mov	r2, r0
1a0074cc:	2300      	movs	r3, #0
1a0074ce:	e9c2 3300 	strd	r3, r3, [r2]
1a0074d2:	6093      	str	r3, [r2, #8]
1a0074d4:	4620      	mov	r0, r4
1a0074d6:	bd10      	pop	{r4, pc}
1a0074d8:	2100      	movs	r1, #0
1a0074da:	f7fb fb51 	bl	1a002b80 <memset>
1a0074de:	4620      	mov	r0, r4
1a0074e0:	bd10      	pop	{r4, pc}
1a0074e2:	f100 0208 	add.w	r2, r0, #8
1a0074e6:	e7f1      	b.n	1a0074cc <_calloc_r+0x4c>

1a0074e8 <_fclose_r>:
1a0074e8:	b570      	push	{r4, r5, r6, lr}
1a0074ea:	2900      	cmp	r1, #0
1a0074ec:	d048      	beq.n	1a007580 <_fclose_r+0x98>
1a0074ee:	4605      	mov	r5, r0
1a0074f0:	460c      	mov	r4, r1
1a0074f2:	b110      	cbz	r0, 1a0074fa <_fclose_r+0x12>
1a0074f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a0074f6:	2b00      	cmp	r3, #0
1a0074f8:	d048      	beq.n	1a00758c <_fclose_r+0xa4>
1a0074fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a0074fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007500:	07d0      	lsls	r0, r2, #31
1a007502:	d440      	bmi.n	1a007586 <_fclose_r+0x9e>
1a007504:	0599      	lsls	r1, r3, #22
1a007506:	d530      	bpl.n	1a00756a <_fclose_r+0x82>
1a007508:	4621      	mov	r1, r4
1a00750a:	4628      	mov	r0, r5
1a00750c:	f7fe f9f0 	bl	1a0058f0 <__sflush_r>
1a007510:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a007512:	4606      	mov	r6, r0
1a007514:	b133      	cbz	r3, 1a007524 <_fclose_r+0x3c>
1a007516:	69e1      	ldr	r1, [r4, #28]
1a007518:	4628      	mov	r0, r5
1a00751a:	4798      	blx	r3
1a00751c:	2800      	cmp	r0, #0
1a00751e:	bfb8      	it	lt
1a007520:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
1a007524:	89a3      	ldrh	r3, [r4, #12]
1a007526:	061a      	lsls	r2, r3, #24
1a007528:	d43c      	bmi.n	1a0075a4 <_fclose_r+0xbc>
1a00752a:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a00752c:	b141      	cbz	r1, 1a007540 <_fclose_r+0x58>
1a00752e:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a007532:	4299      	cmp	r1, r3
1a007534:	d002      	beq.n	1a00753c <_fclose_r+0x54>
1a007536:	4628      	mov	r0, r5
1a007538:	f7fe fb68 	bl	1a005c0c <_free_r>
1a00753c:	2300      	movs	r3, #0
1a00753e:	6323      	str	r3, [r4, #48]	; 0x30
1a007540:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a007542:	b121      	cbz	r1, 1a00754e <_fclose_r+0x66>
1a007544:	4628      	mov	r0, r5
1a007546:	f7fe fb61 	bl	1a005c0c <_free_r>
1a00754a:	2300      	movs	r3, #0
1a00754c:	6463      	str	r3, [r4, #68]	; 0x44
1a00754e:	f7fe fb01 	bl	1a005b54 <__sfp_lock_acquire>
1a007552:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a007554:	2200      	movs	r2, #0
1a007556:	07db      	lsls	r3, r3, #31
1a007558:	81a2      	strh	r2, [r4, #12]
1a00755a:	d51f      	bpl.n	1a00759c <_fclose_r+0xb4>
1a00755c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00755e:	f7fe fe01 	bl	1a006164 <__retarget_lock_close_recursive>
1a007562:	f7fe fafd 	bl	1a005b60 <__sfp_lock_release>
1a007566:	4630      	mov	r0, r6
1a007568:	bd70      	pop	{r4, r5, r6, pc}
1a00756a:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00756c:	f7fe fdfc 	bl	1a006168 <__retarget_lock_acquire_recursive>
1a007570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007574:	2b00      	cmp	r3, #0
1a007576:	d1c7      	bne.n	1a007508 <_fclose_r+0x20>
1a007578:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a00757a:	f016 0601 	ands.w	r6, r6, #1
1a00757e:	d016      	beq.n	1a0075ae <_fclose_r+0xc6>
1a007580:	2600      	movs	r6, #0
1a007582:	4630      	mov	r0, r6
1a007584:	bd70      	pop	{r4, r5, r6, pc}
1a007586:	2b00      	cmp	r3, #0
1a007588:	d0fa      	beq.n	1a007580 <_fclose_r+0x98>
1a00758a:	e7bd      	b.n	1a007508 <_fclose_r+0x20>
1a00758c:	f7fe fab6 	bl	1a005afc <__sinit>
1a007590:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a007592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007596:	07d0      	lsls	r0, r2, #31
1a007598:	d4f5      	bmi.n	1a007586 <_fclose_r+0x9e>
1a00759a:	e7b3      	b.n	1a007504 <_fclose_r+0x1c>
1a00759c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a00759e:	f7fe fde5 	bl	1a00616c <__retarget_lock_release_recursive>
1a0075a2:	e7db      	b.n	1a00755c <_fclose_r+0x74>
1a0075a4:	6921      	ldr	r1, [r4, #16]
1a0075a6:	4628      	mov	r0, r5
1a0075a8:	f7fe fb30 	bl	1a005c0c <_free_r>
1a0075ac:	e7bd      	b.n	1a00752a <_fclose_r+0x42>
1a0075ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0075b0:	f7fe fddc 	bl	1a00616c <__retarget_lock_release_recursive>
1a0075b4:	4630      	mov	r0, r6
1a0075b6:	bd70      	pop	{r4, r5, r6, pc}

1a0075b8 <__fputwc>:
1a0075b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0075bc:	b082      	sub	sp, #8
1a0075be:	4681      	mov	r9, r0
1a0075c0:	4688      	mov	r8, r1
1a0075c2:	4614      	mov	r4, r2
1a0075c4:	f000 f87a 	bl	1a0076bc <__locale_mb_cur_max>
1a0075c8:	2801      	cmp	r0, #1
1a0075ca:	d103      	bne.n	1a0075d4 <__fputwc+0x1c>
1a0075cc:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a0075d0:	2bfe      	cmp	r3, #254	; 0xfe
1a0075d2:	d933      	bls.n	1a00763c <__fputwc+0x84>
1a0075d4:	4642      	mov	r2, r8
1a0075d6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
1a0075da:	a901      	add	r1, sp, #4
1a0075dc:	4648      	mov	r0, r9
1a0075de:	f000 f8e9 	bl	1a0077b4 <_wcrtomb_r>
1a0075e2:	1c42      	adds	r2, r0, #1
1a0075e4:	4606      	mov	r6, r0
1a0075e6:	d02f      	beq.n	1a007648 <__fputwc+0x90>
1a0075e8:	b320      	cbz	r0, 1a007634 <__fputwc+0x7c>
1a0075ea:	f89d c004 	ldrb.w	ip, [sp, #4]
1a0075ee:	2500      	movs	r5, #0
1a0075f0:	f10d 0a04 	add.w	sl, sp, #4
1a0075f4:	e009      	b.n	1a00760a <__fputwc+0x52>
1a0075f6:	6823      	ldr	r3, [r4, #0]
1a0075f8:	1c5a      	adds	r2, r3, #1
1a0075fa:	6022      	str	r2, [r4, #0]
1a0075fc:	f883 c000 	strb.w	ip, [r3]
1a007600:	3501      	adds	r5, #1
1a007602:	42b5      	cmp	r5, r6
1a007604:	d216      	bcs.n	1a007634 <__fputwc+0x7c>
1a007606:	f815 c00a 	ldrb.w	ip, [r5, sl]
1a00760a:	68a3      	ldr	r3, [r4, #8]
1a00760c:	3b01      	subs	r3, #1
1a00760e:	2b00      	cmp	r3, #0
1a007610:	60a3      	str	r3, [r4, #8]
1a007612:	daf0      	bge.n	1a0075f6 <__fputwc+0x3e>
1a007614:	69a7      	ldr	r7, [r4, #24]
1a007616:	42bb      	cmp	r3, r7
1a007618:	4661      	mov	r1, ip
1a00761a:	4622      	mov	r2, r4
1a00761c:	4648      	mov	r0, r9
1a00761e:	db02      	blt.n	1a007626 <__fputwc+0x6e>
1a007620:	f1bc 0f0a 	cmp.w	ip, #10
1a007624:	d1e7      	bne.n	1a0075f6 <__fputwc+0x3e>
1a007626:	f000 f86d 	bl	1a007704 <__swbuf_r>
1a00762a:	1c43      	adds	r3, r0, #1
1a00762c:	d1e8      	bne.n	1a007600 <__fputwc+0x48>
1a00762e:	b002      	add	sp, #8
1a007630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007634:	4640      	mov	r0, r8
1a007636:	b002      	add	sp, #8
1a007638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00763c:	fa5f fc88 	uxtb.w	ip, r8
1a007640:	4606      	mov	r6, r0
1a007642:	f88d c004 	strb.w	ip, [sp, #4]
1a007646:	e7d2      	b.n	1a0075ee <__fputwc+0x36>
1a007648:	89a3      	ldrh	r3, [r4, #12]
1a00764a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00764e:	81a3      	strh	r3, [r4, #12]
1a007650:	b002      	add	sp, #8
1a007652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007656:	bf00      	nop

1a007658 <_fputwc_r>:
1a007658:	b530      	push	{r4, r5, lr}
1a00765a:	4605      	mov	r5, r0
1a00765c:	6e50      	ldr	r0, [r2, #100]	; 0x64
1a00765e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
1a007662:	07c0      	lsls	r0, r0, #31
1a007664:	4614      	mov	r4, r2
1a007666:	b083      	sub	sp, #12
1a007668:	b29a      	uxth	r2, r3
1a00766a:	d401      	bmi.n	1a007670 <_fputwc_r+0x18>
1a00766c:	0590      	lsls	r0, r2, #22
1a00766e:	d51c      	bpl.n	1a0076aa <_fputwc_r+0x52>
1a007670:	0490      	lsls	r0, r2, #18
1a007672:	d406      	bmi.n	1a007682 <_fputwc_r+0x2a>
1a007674:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a007676:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a00767a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a00767e:	81a3      	strh	r3, [r4, #12]
1a007680:	6662      	str	r2, [r4, #100]	; 0x64
1a007682:	4628      	mov	r0, r5
1a007684:	4622      	mov	r2, r4
1a007686:	f7ff ff97 	bl	1a0075b8 <__fputwc>
1a00768a:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00768c:	07da      	lsls	r2, r3, #31
1a00768e:	4605      	mov	r5, r0
1a007690:	d402      	bmi.n	1a007698 <_fputwc_r+0x40>
1a007692:	89a3      	ldrh	r3, [r4, #12]
1a007694:	059b      	lsls	r3, r3, #22
1a007696:	d502      	bpl.n	1a00769e <_fputwc_r+0x46>
1a007698:	4628      	mov	r0, r5
1a00769a:	b003      	add	sp, #12
1a00769c:	bd30      	pop	{r4, r5, pc}
1a00769e:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0076a0:	f7fe fd64 	bl	1a00616c <__retarget_lock_release_recursive>
1a0076a4:	4628      	mov	r0, r5
1a0076a6:	b003      	add	sp, #12
1a0076a8:	bd30      	pop	{r4, r5, pc}
1a0076aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0076ac:	9101      	str	r1, [sp, #4]
1a0076ae:	f7fe fd5b 	bl	1a006168 <__retarget_lock_acquire_recursive>
1a0076b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0076b6:	9901      	ldr	r1, [sp, #4]
1a0076b8:	b29a      	uxth	r2, r3
1a0076ba:	e7d9      	b.n	1a007670 <_fputwc_r+0x18>

1a0076bc <__locale_mb_cur_max>:
1a0076bc:	4b04      	ldr	r3, [pc, #16]	; (1a0076d0 <__locale_mb_cur_max+0x14>)
1a0076be:	4a05      	ldr	r2, [pc, #20]	; (1a0076d4 <__locale_mb_cur_max+0x18>)
1a0076c0:	681b      	ldr	r3, [r3, #0]
1a0076c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a0076c4:	2b00      	cmp	r3, #0
1a0076c6:	bf08      	it	eq
1a0076c8:	4613      	moveq	r3, r2
1a0076ca:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
1a0076ce:	4770      	bx	lr
1a0076d0:	10000048 	.word	0x10000048
1a0076d4:	10000888 	.word	0x10000888

1a0076d8 <__ascii_mbtowc>:
1a0076d8:	b082      	sub	sp, #8
1a0076da:	b149      	cbz	r1, 1a0076f0 <__ascii_mbtowc+0x18>
1a0076dc:	b15a      	cbz	r2, 1a0076f6 <__ascii_mbtowc+0x1e>
1a0076de:	b16b      	cbz	r3, 1a0076fc <__ascii_mbtowc+0x24>
1a0076e0:	7813      	ldrb	r3, [r2, #0]
1a0076e2:	600b      	str	r3, [r1, #0]
1a0076e4:	7812      	ldrb	r2, [r2, #0]
1a0076e6:	1c10      	adds	r0, r2, #0
1a0076e8:	bf18      	it	ne
1a0076ea:	2001      	movne	r0, #1
1a0076ec:	b002      	add	sp, #8
1a0076ee:	4770      	bx	lr
1a0076f0:	a901      	add	r1, sp, #4
1a0076f2:	2a00      	cmp	r2, #0
1a0076f4:	d1f3      	bne.n	1a0076de <__ascii_mbtowc+0x6>
1a0076f6:	4610      	mov	r0, r2
1a0076f8:	b002      	add	sp, #8
1a0076fa:	4770      	bx	lr
1a0076fc:	f06f 0001 	mvn.w	r0, #1
1a007700:	e7f4      	b.n	1a0076ec <__ascii_mbtowc+0x14>
1a007702:	bf00      	nop

1a007704 <__swbuf_r>:
1a007704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a007706:	460d      	mov	r5, r1
1a007708:	4614      	mov	r4, r2
1a00770a:	4606      	mov	r6, r0
1a00770c:	b110      	cbz	r0, 1a007714 <__swbuf_r+0x10>
1a00770e:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a007710:	2b00      	cmp	r3, #0
1a007712:	d043      	beq.n	1a00779c <__swbuf_r+0x98>
1a007714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a007718:	69a3      	ldr	r3, [r4, #24]
1a00771a:	60a3      	str	r3, [r4, #8]
1a00771c:	b291      	uxth	r1, r2
1a00771e:	0708      	lsls	r0, r1, #28
1a007720:	d51b      	bpl.n	1a00775a <__swbuf_r+0x56>
1a007722:	6923      	ldr	r3, [r4, #16]
1a007724:	b1cb      	cbz	r3, 1a00775a <__swbuf_r+0x56>
1a007726:	b2ed      	uxtb	r5, r5
1a007728:	0489      	lsls	r1, r1, #18
1a00772a:	462f      	mov	r7, r5
1a00772c:	d522      	bpl.n	1a007774 <__swbuf_r+0x70>
1a00772e:	6822      	ldr	r2, [r4, #0]
1a007730:	6961      	ldr	r1, [r4, #20]
1a007732:	1ad3      	subs	r3, r2, r3
1a007734:	4299      	cmp	r1, r3
1a007736:	dd29      	ble.n	1a00778c <__swbuf_r+0x88>
1a007738:	3301      	adds	r3, #1
1a00773a:	68a1      	ldr	r1, [r4, #8]
1a00773c:	1c50      	adds	r0, r2, #1
1a00773e:	3901      	subs	r1, #1
1a007740:	60a1      	str	r1, [r4, #8]
1a007742:	6020      	str	r0, [r4, #0]
1a007744:	7015      	strb	r5, [r2, #0]
1a007746:	6962      	ldr	r2, [r4, #20]
1a007748:	429a      	cmp	r2, r3
1a00774a:	d02a      	beq.n	1a0077a2 <__swbuf_r+0x9e>
1a00774c:	89a3      	ldrh	r3, [r4, #12]
1a00774e:	07db      	lsls	r3, r3, #31
1a007750:	d501      	bpl.n	1a007756 <__swbuf_r+0x52>
1a007752:	2d0a      	cmp	r5, #10
1a007754:	d025      	beq.n	1a0077a2 <__swbuf_r+0x9e>
1a007756:	4638      	mov	r0, r7
1a007758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00775a:	4621      	mov	r1, r4
1a00775c:	4630      	mov	r0, r6
1a00775e:	f7fd f8bf 	bl	1a0048e0 <__swsetup_r>
1a007762:	bb20      	cbnz	r0, 1a0077ae <__swbuf_r+0xaa>
1a007764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a007768:	6923      	ldr	r3, [r4, #16]
1a00776a:	b291      	uxth	r1, r2
1a00776c:	b2ed      	uxtb	r5, r5
1a00776e:	0489      	lsls	r1, r1, #18
1a007770:	462f      	mov	r7, r5
1a007772:	d4dc      	bmi.n	1a00772e <__swbuf_r+0x2a>
1a007774:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a007776:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a00777a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a00777e:	81a2      	strh	r2, [r4, #12]
1a007780:	6822      	ldr	r2, [r4, #0]
1a007782:	6661      	str	r1, [r4, #100]	; 0x64
1a007784:	6961      	ldr	r1, [r4, #20]
1a007786:	1ad3      	subs	r3, r2, r3
1a007788:	4299      	cmp	r1, r3
1a00778a:	dcd5      	bgt.n	1a007738 <__swbuf_r+0x34>
1a00778c:	4621      	mov	r1, r4
1a00778e:	4630      	mov	r0, r6
1a007790:	f7fe f958 	bl	1a005a44 <_fflush_r>
1a007794:	b958      	cbnz	r0, 1a0077ae <__swbuf_r+0xaa>
1a007796:	6822      	ldr	r2, [r4, #0]
1a007798:	2301      	movs	r3, #1
1a00779a:	e7ce      	b.n	1a00773a <__swbuf_r+0x36>
1a00779c:	f7fe f9ae 	bl	1a005afc <__sinit>
1a0077a0:	e7b8      	b.n	1a007714 <__swbuf_r+0x10>
1a0077a2:	4621      	mov	r1, r4
1a0077a4:	4630      	mov	r0, r6
1a0077a6:	f7fe f94d 	bl	1a005a44 <_fflush_r>
1a0077aa:	2800      	cmp	r0, #0
1a0077ac:	d0d3      	beq.n	1a007756 <__swbuf_r+0x52>
1a0077ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a0077b2:	e7d0      	b.n	1a007756 <__swbuf_r+0x52>

1a0077b4 <_wcrtomb_r>:
1a0077b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0077b6:	4c11      	ldr	r4, [pc, #68]	; (1a0077fc <_wcrtomb_r+0x48>)
1a0077b8:	6824      	ldr	r4, [r4, #0]
1a0077ba:	b085      	sub	sp, #20
1a0077bc:	4606      	mov	r6, r0
1a0077be:	6b64      	ldr	r4, [r4, #52]	; 0x34
1a0077c0:	461f      	mov	r7, r3
1a0077c2:	b151      	cbz	r1, 1a0077da <_wcrtomb_r+0x26>
1a0077c4:	4d0e      	ldr	r5, [pc, #56]	; (1a007800 <_wcrtomb_r+0x4c>)
1a0077c6:	2c00      	cmp	r4, #0
1a0077c8:	bf08      	it	eq
1a0077ca:	462c      	moveq	r4, r5
1a0077cc:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a0077d0:	47a0      	blx	r4
1a0077d2:	1c43      	adds	r3, r0, #1
1a0077d4:	d00c      	beq.n	1a0077f0 <_wcrtomb_r+0x3c>
1a0077d6:	b005      	add	sp, #20
1a0077d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0077da:	4a09      	ldr	r2, [pc, #36]	; (1a007800 <_wcrtomb_r+0x4c>)
1a0077dc:	2c00      	cmp	r4, #0
1a0077de:	bf08      	it	eq
1a0077e0:	4614      	moveq	r4, r2
1a0077e2:	460a      	mov	r2, r1
1a0077e4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a0077e8:	a901      	add	r1, sp, #4
1a0077ea:	47a0      	blx	r4
1a0077ec:	1c43      	adds	r3, r0, #1
1a0077ee:	d1f2      	bne.n	1a0077d6 <_wcrtomb_r+0x22>
1a0077f0:	2200      	movs	r2, #0
1a0077f2:	238a      	movs	r3, #138	; 0x8a
1a0077f4:	603a      	str	r2, [r7, #0]
1a0077f6:	6033      	str	r3, [r6, #0]
1a0077f8:	b005      	add	sp, #20
1a0077fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0077fc:	10000048 	.word	0x10000048
1a007800:	10000888 	.word	0x10000888

1a007804 <__ascii_wctomb>:
1a007804:	b121      	cbz	r1, 1a007810 <__ascii_wctomb+0xc>
1a007806:	2aff      	cmp	r2, #255	; 0xff
1a007808:	d804      	bhi.n	1a007814 <__ascii_wctomb+0x10>
1a00780a:	700a      	strb	r2, [r1, #0]
1a00780c:	2001      	movs	r0, #1
1a00780e:	4770      	bx	lr
1a007810:	4608      	mov	r0, r1
1a007812:	4770      	bx	lr
1a007814:	238a      	movs	r3, #138	; 0x8a
1a007816:	6003      	str	r3, [r0, #0]
1a007818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00781c:	4770      	bx	lr
1a00781e:	bf00      	nop

1a007820 <__aeabi_dcmpun>:
1a007820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a007824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007828:	d102      	bne.n	1a007830 <__aeabi_dcmpun+0x10>
1a00782a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a00782e:	d10a      	bne.n	1a007846 <__aeabi_dcmpun+0x26>
1a007830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a007834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007838:	d102      	bne.n	1a007840 <__aeabi_dcmpun+0x20>
1a00783a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a00783e:	d102      	bne.n	1a007846 <__aeabi_dcmpun+0x26>
1a007840:	f04f 0000 	mov.w	r0, #0
1a007844:	4770      	bx	lr
1a007846:	f04f 0001 	mov.w	r0, #1
1a00784a:	4770      	bx	lr

1a00784c <__aeabi_d2iz>:
1a00784c:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a007850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a007854:	d215      	bcs.n	1a007882 <__aeabi_d2iz+0x36>
1a007856:	d511      	bpl.n	1a00787c <__aeabi_d2iz+0x30>
1a007858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a00785c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a007860:	d912      	bls.n	1a007888 <__aeabi_d2iz+0x3c>
1a007862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a007866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a00786a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a00786e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a007872:	fa23 f002 	lsr.w	r0, r3, r2
1a007876:	bf18      	it	ne
1a007878:	4240      	negne	r0, r0
1a00787a:	4770      	bx	lr
1a00787c:	f04f 0000 	mov.w	r0, #0
1a007880:	4770      	bx	lr
1a007882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a007886:	d105      	bne.n	1a007894 <__aeabi_d2iz+0x48>
1a007888:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a00788c:	bf08      	it	eq
1a00788e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a007892:	4770      	bx	lr
1a007894:	f04f 0000 	mov.w	r0, #0
1a007898:	4770      	bx	lr
1a00789a:	bf00      	nop
1a00789c:	63696e49 	.word	0x63696e49
1a0078a0:	696c6169 	.word	0x696c6169
1a0078a4:	646e617a 	.word	0x646e617a
1a0078a8:	4e49206f 	.word	0x4e49206f
1a0078ac:	39313241 	.word	0x39313241
1a0078b0:	0d2e2e2e 	.word	0x0d2e2e2e
1a0078b4:	00000000 	.word	0x00000000
1a0078b8:	32414e49 	.word	0x32414e49
1a0078bc:	6e203931 	.word	0x6e203931
1a0078c0:	6e69206f 	.word	0x6e69206f
1a0078c4:	61696369 	.word	0x61696369
1a0078c8:	617a696c 	.word	0x617a696c
1a0078cc:	202c6f64 	.word	0x202c6f64
1a0078d0:	69726576 	.word	0x69726576
1a0078d4:	75716966 	.word	0x75716966
1a0078d8:	616c2065 	.word	0x616c2065
1a0078dc:	6f632073 	.word	0x6f632073
1a0078e0:	6978656e 	.word	0x6978656e
1a0078e4:	73656e6f 	.word	0x73656e6f
1a0078e8:	0d0a0d3a 	.word	0x0d0a0d3a
1a0078ec:	00000000 	.word	0x00000000
1a0078f0:	64206553 	.word	0x64206553
1a0078f4:	65697465 	.word	0x65697465
1a0078f8:	6520656e 	.word	0x6520656e
1a0078fc:	7270206c 	.word	0x7270206c
1a007900:	6172676f 	.word	0x6172676f
1a007904:	0d2e616d 	.word	0x0d2e616d
1a007908:	00000000 	.word	0x00000000
1a00790c:	32414e49 	.word	0x32414e49
1a007910:	69203931 	.word	0x69203931
1a007914:	6963696e 	.word	0x6963696e
1a007918:	7a696c61 	.word	0x7a696c61
1a00791c:	206f6461 	.word	0x206f6461
1a007920:	72726f63 	.word	0x72726f63
1a007924:	61746365 	.word	0x61746365
1a007928:	746e656d 	.word	0x746e656d
1a00792c:	0a0d2e65 	.word	0x0a0d2e65
1a007930:	0000000d 	.word	0x0000000d
1a007934:	32414e49 	.word	0x32414e49
1a007938:	73203931 	.word	0x73203931
1a00793c:	746e7568 	.word	0x746e7568
1a007940:	6c6f7620 	.word	0x6c6f7620
1a007944:	65676174 	.word	0x65676174
1a007948:	3125203a 	.word	0x3125203a
1a00794c:	2066322e 	.word	0x2066322e
1a007950:	5d566d5b 	.word	0x5d566d5b
1a007954:	00000a0d 	.word	0x00000a0d
1a007958:	32414e49 	.word	0x32414e49
1a00795c:	62203931 	.word	0x62203931
1a007960:	76207375 	.word	0x76207375
1a007964:	61746c6f 	.word	0x61746c6f
1a007968:	203a6567 	.word	0x203a6567
1a00796c:	66332e25 	.word	0x66332e25
1a007970:	5d565b20 	.word	0x5d565b20
1a007974:	00000a0d 	.word	0x00000a0d
1a007978:	32414e49 	.word	0x32414e49
1a00797c:	70203931 	.word	0x70203931
1a007980:	7265776f 	.word	0x7265776f
1a007984:	2e25203a 	.word	0x2e25203a
1a007988:	5b206632 	.word	0x5b206632
1a00798c:	0d5d576d 	.word	0x0d5d576d
1a007990:	0000000a 	.word	0x0000000a
1a007994:	32414e49 	.word	0x32414e49
1a007998:	63203931 	.word	0x63203931
1a00799c:	65727275 	.word	0x65727275
1a0079a0:	203a746e 	.word	0x203a746e
1a0079a4:	66322e25 	.word	0x66322e25
1a0079a8:	416d5b20 	.word	0x416d5b20
1a0079ac:	0d0a0d5d 	.word	0x0d0a0d5d
1a0079b0:	ffff000a 	.word	0xffff000a

1a0079b4 <ExtRateIn>:
1a0079b4:	00000000                                ....

1a0079b8 <GpioButtons>:
1a0079b8:	08000400 09010900                       ........

1a0079c0 <GpioLeds>:
1a0079c0:	01050005 0e000205 0c010b01              ............

1a0079cc <GpioPorts>:
1a0079cc:	03030003 0f050403 05031005 07030603     ................
1a0079dc:	ffff0802                                ....

1a0079e0 <OscRateIn>:
1a0079e0:	00b71b00                                ....

1a0079e4 <InitClkStates>:
1a0079e4:	01010f01                                ....

1a0079e8 <pinmuxing>:
1a0079e8:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0079f8:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a007a08:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a007a18:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a007a28:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a007a38:	00d50301 00d50401 00160107 00560207     ..............V.
1a007a48:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a007a58:	00570206                                ..W.

1a007a5c <UART_BClock>:
1a007a5c:	01a201c2 01620182                       ......b.

1a007a64 <UART_PClock>:
1a007a64:	00820081 00a200a1 08040201 0f0f0f03     ................
1a007a74:	ffff00ff                                ....

1a007a78 <periph_to_base>:
1a007a78:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a007a88:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a007a98:	000100e0 01000100 01200003 00060120     .......... . ...
1a007aa8:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a007ab8:	01820013 00120182 01a201a2 01c20011     ................
1a007ac8:	001001c2 01e201e2 0202000f 000e0202     ................
1a007ad8:	02220222 0223000d 001c0223              "."...#.#...

1a007ae4 <InitClkStates>:
1a007ae4:	00010100 00010909 0001090a 01010701     ................
1a007af4:	00010902 00010906 0101090c 0001090d     ................
1a007b04:	0001090e 0001090f 00010910 00010911     ................
1a007b14:	00010912 00010913 00011114 00011119     ................
1a007b24:	0001111a 0001111b                       ........

1a007b2c <lpcUarts>:
1a007b2c:	40081000 06020406 00180205 40081000     ...@...........@
1a007b3c:	09070509 00180706 40082000 00000000     ......... .@....
1a007b4c:	00190000 400c1000 07060107 001a0602     .......@........
1a007b5c:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a007b6c:	02020302 001b0204                       ........

1a007b74 <gpioPinsInit>:
1a007b74:	02000104 00050701 05010d03 04080100     ................
1a007b84:	02020002 02000304 00000403 04070002     ................
1a007b94:	030c0300 09050402 05040103 04030208     ................
1a007ba4:	04020305 06040504 0802000c 03000b06     ................
1a007bb4:	00090607 07060503 060f0504 03030004     ................
1a007bc4:	02000404 00050404 06040502 04060200     ................
1a007bd4:	0c050408 05040a04 0003010e 14010a00     ................
1a007be4:	010f0000 0d000012 00001101 0010010c     ................
1a007bf4:	07070300 000f0300 01000001 00000000     ................
1a007c04:	000a0600 08060603 06100504 04030005     ................
1a007c14:	03000106 04090400 04010d05 010b0000     ................
1a007c24:	0200000f 00000001 00010104 02010800     ................
1a007c34:	01090000 09010006 05040002 04010200     ................
1a007c44:	02020105 02020504 0e00000a 01000b02     ................
1a007c54:	000c020b ffff0c01 00464e49 00666e69     ........INF.inf.
1a007c64:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
1a007c74:	62613938 66656463 00000000 33323130     89abcdef....0123
1a007c84:	37363534 42413938 46454443 00000000     456789ABCDEF....
1a007c94:	6c756e28 0000296c ffff0030              (null)..0...

1a007ca0 <blanks.8605>:
1a007ca0:	20202020 20202020 20202020 20202020                     

1a007cb0 <zeroes.8606>:
1a007cb0:	30303030 30303030 30303030 30303030     0000000000000000
1a007cc0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

1a007cd0 <__mprec_bigtens>:
1a007cd0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a007ce0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a007cf0:	7f73bf3c 75154fdd                       <.s..O.u

1a007cf8 <__mprec_tens>:
1a007cf8:	00000000 3ff00000 00000000 40240000     .......?......$@
1a007d08:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a007d18:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a007d28:	00000000 412e8480 00000000 416312d0     .......A......cA
1a007d38:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a007d48:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a007d58:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a007d68:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a007d78:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a007d88:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a007d98:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a007da8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a007db8:	79d99db4 44ea7843                       ...yCx.D

1a007dc0 <p05.7367>:
1a007dc0:	00000005 00000019 0000007d 00000043     ........}...C...
1a007dd0:	49534f50 ffff0058 0000002e              POSIX.......

1a007ddc <_ctype_>:
1a007ddc:	20202000 20202020 28282020 20282828     .         ((((( 
1a007dec:	20202020 20202020 20202020 20202020                     
1a007dfc:	10108820 10101010 10101010 10101010      ...............
1a007e0c:	04040410 04040404 10040404 10101010     ................
1a007e1c:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a007e2c:	01010101 01010101 01010101 10101010     ................
1a007e3c:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a007e4c:	02020202 02020202 02020202 10101010     ................
1a007e5c:	00000020 00000000 00000000 00000000      ...............
	...
1a007edc:	ffffff00                                ....
